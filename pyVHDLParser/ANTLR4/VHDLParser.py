# Generated from .\VHDLParser.g4 by ANTLR 4.12.0
from sys import stdout
from typing import TextIO

from antlr4 import Parser, ATNDeserializer, DFA, PredictionContextCache, TokenStream, ParserATNSimulator, \
	ParserRuleContext, ParseTreeVisitor, RecognitionException, Token, NoViableAltException, ATN, RuleContext


def serializedATN():
	return (
		4, 1, 163, 3044, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2,
		8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7,
		16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24,
		2, 25, 7, 25, 2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7, 31, 2, 32, 7, 32, 2,
		33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41,
		7, 41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7,
		49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7, 57,
		2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62, 2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2,
		66, 7, 66, 2, 67, 7, 67, 2, 68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73, 7, 73, 2, 74,
		7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2, 78, 7, 78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7,
		82, 2, 83, 7, 83, 2, 84, 7, 84, 2, 85, 7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7, 88, 2, 89, 7, 89, 2, 90, 7, 90,
		2, 91, 7, 91, 2, 92, 7, 92, 2, 93, 7, 93, 2, 94, 7, 94, 2, 95, 7, 95, 2, 96, 7, 96, 2, 97, 7, 97, 2, 98, 7, 98, 2,
		99, 7, 99, 2, 100, 7, 100, 2, 101, 7, 101, 2, 102, 7, 102, 2, 103, 7, 103, 2, 104, 7, 104, 2, 105, 7, 105, 2, 106,
		7, 106, 2, 107, 7, 107, 2, 108, 7, 108, 2, 109, 7, 109, 2, 110, 7, 110, 2, 111, 7, 111, 2, 112, 7, 112, 2, 113, 7,
		113, 2, 114, 7, 114, 2, 115, 7, 115, 2, 116, 7, 116, 2, 117, 7, 117, 2, 118, 7, 118, 2, 119, 7, 119, 2, 120, 7, 120,
		2, 121, 7, 121, 2, 122, 7, 122, 2, 123, 7, 123, 2, 124, 7, 124, 2, 125, 7, 125, 2, 126, 7, 126, 2, 127, 7, 127, 2,
		128, 7, 128, 2, 129, 7, 129, 2, 130, 7, 130, 2, 131, 7, 131, 2, 132, 7, 132, 2, 133, 7, 133, 2, 134, 7, 134, 2, 135,
		7, 135, 2, 136, 7, 136, 2, 137, 7, 137, 2, 138, 7, 138, 2, 139, 7, 139, 2, 140, 7, 140, 2, 141, 7, 141, 2, 142, 7,
		142, 2, 143, 7, 143, 2, 144, 7, 144, 2, 145, 7, 145, 2, 146, 7, 146, 2, 147, 7, 147, 2, 148, 7, 148, 2, 149, 7, 149,
		2, 150, 7, 150, 2, 151, 7, 151, 2, 152, 7, 152, 2, 153, 7, 153, 2, 154, 7, 154, 2, 155, 7, 155, 2, 156, 7, 156, 2,
		157, 7, 157, 2, 158, 7, 158, 2, 159, 7, 159, 2, 160, 7, 160, 2, 161, 7, 161, 2, 162, 7, 162, 2, 163, 7, 163, 2, 164,
		7, 164, 2, 165, 7, 165, 2, 166, 7, 166, 2, 167, 7, 167, 2, 168, 7, 168, 2, 169, 7, 169, 2, 170, 7, 170, 2, 171, 7,
		171, 2, 172, 7, 172, 2, 173, 7, 173, 2, 174, 7, 174, 2, 175, 7, 175, 2, 176, 7, 176, 2, 177, 7, 177, 2, 178, 7, 178,
		2, 179, 7, 179, 2, 180, 7, 180, 2, 181, 7, 181, 2, 182, 7, 182, 2, 183, 7, 183, 2, 184, 7, 184, 2, 185, 7, 185, 2,
		186, 7, 186, 2, 187, 7, 187, 2, 188, 7, 188, 2, 189, 7, 189, 2, 190, 7, 190, 2, 191, 7, 191, 2, 192, 7, 192, 2, 193,
		7, 193, 2, 194, 7, 194, 2, 195, 7, 195, 2, 196, 7, 196, 2, 197, 7, 197, 2, 198, 7, 198, 2, 199, 7, 199, 2, 200, 7,
		200, 2, 201, 7, 201, 2, 202, 7, 202, 2, 203, 7, 203, 2, 204, 7, 204, 2, 205, 7, 205, 2, 206, 7, 206, 2, 207, 7, 207,
		2, 208, 7, 208, 2, 209, 7, 209, 2, 210, 7, 210, 2, 211, 7, 211, 2, 212, 7, 212, 2, 213, 7, 213, 2, 214, 7, 214, 2,
		215, 7, 215, 2, 216, 7, 216, 2, 217, 7, 217, 2, 218, 7, 218, 2, 219, 7, 219, 2, 220, 7, 220, 2, 221, 7, 221, 2, 222,
		7, 222, 2, 223, 7, 223, 2, 224, 7, 224, 2, 225, 7, 225, 2, 226, 7, 226, 2, 227, 7, 227, 2, 228, 7, 228, 2, 229, 7,
		229, 2, 230, 7, 230, 2, 231, 7, 231, 2, 232, 7, 232, 2, 233, 7, 233, 2, 234, 7, 234, 2, 235, 7, 235, 2, 236, 7, 236,
		2, 237, 7, 237, 2, 238, 7, 238, 2, 239, 7, 239, 2, 240, 7, 240, 2, 241, 7, 241, 2, 242, 7, 242, 2, 243, 7, 243, 2,
		244, 7, 244, 2, 245, 7, 245, 2, 246, 7, 246, 2, 247, 7, 247, 2, 248, 7, 248, 2, 249, 7, 249, 2, 250, 7, 250, 2, 251,
		7, 251, 2, 252, 7, 252, 2, 253, 7, 253, 2, 254, 7, 254, 2, 255, 7, 255, 2, 256, 7, 256, 2, 257, 7, 257, 1, 0, 1, 0,
		1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 3, 3, 3, 527, 8, 3, 1, 3, 1, 3, 1, 3, 1, 3, 3, 3, 533, 8, 3, 1, 4, 1,
		4, 1, 4, 1, 4, 1, 4, 1, 4, 3, 4, 541, 8, 4, 1, 5, 1, 5, 1, 5, 1, 5, 5, 5, 547, 8, 5, 10, 5, 12, 5, 550, 9, 5, 1, 5,
		1, 5, 1, 6, 1, 6, 1, 6, 1, 6, 3, 6, 558, 8, 6, 1, 6, 1, 6, 1, 6, 3, 6, 563, 8, 6, 1, 6, 1, 6, 1, 7, 1, 7, 1, 8, 1,
		8, 1, 9, 1, 9, 1, 9, 3, 9, 574, 8, 9, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 5, 10, 582, 8, 10, 10, 10, 12, 10,
		585, 9, 10, 1, 10, 1, 10, 5, 10, 589, 8, 10, 10, 10, 12, 10, 592, 9, 10, 1, 10, 1, 10, 3, 10, 596, 8, 10, 1, 10, 3,
		10, 599, 8, 10, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 3, 11, 608, 8, 11, 1, 11, 1, 11, 1, 11, 3, 11, 613,
		8, 11, 1, 11, 1, 11, 1, 11, 3, 11, 618, 8, 11, 1, 11, 3, 11, 621, 8, 11, 1, 11, 1, 11, 1, 11, 3, 11, 626, 8, 11, 1,
		12, 1, 12, 3, 12, 630, 8, 12, 1, 12, 1, 12, 1, 12, 1, 12, 3, 12, 636, 8, 12, 3, 12, 638, 8, 12, 1, 13, 1, 13, 1, 13,
		1, 13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 3, 14, 650, 8, 14, 1, 15, 1, 15, 1, 15, 5, 15, 655, 8, 15, 10, 15,
		12, 15, 658, 9, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 3, 16, 666, 8, 16, 1, 17, 1, 17, 1, 17, 1, 17, 3, 17,
		672, 8, 17, 1, 17, 1, 17, 3, 17, 676, 8, 17, 1, 18, 1, 18, 3, 18, 680, 8, 18, 1, 18, 1, 18, 1, 18, 1, 19, 1, 19, 1,
		19, 3, 19, 688, 8, 19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 20, 5, 20, 695, 8, 20, 10, 20, 12, 20, 698, 9, 20, 1, 21, 1,
		21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24,
		3, 24, 718, 8, 24, 1, 24, 3, 24, 721, 8, 24, 1, 24, 3, 24, 724, 8, 24, 1, 25, 1, 25, 1, 25, 5, 25, 729, 8, 25, 10,
		25, 12, 25, 732, 9, 25, 1, 25, 5, 25, 735, 8, 25, 10, 25, 12, 25, 738, 9, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 26, 1,
		26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26,
		1, 26, 1, 26, 1, 26, 1, 26, 3, 26, 766, 8, 26, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 3, 27, 774, 8, 27, 3, 27,
		776, 8, 27, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 3, 28, 785, 8, 28, 1, 28, 3, 28, 788, 8, 28, 1, 28, 1,
		28, 1, 28, 1, 28, 3, 28, 794, 8, 28, 3, 28, 796, 8, 28, 1, 28, 1, 28, 1, 28, 1, 28, 3, 28, 802, 8, 28, 3, 28, 804,
		8, 28, 1, 28, 5, 28, 807, 8, 28, 10, 28, 12, 28, 810, 9, 28, 1, 28, 1, 28, 5, 28, 814, 8, 28, 10, 28, 12, 28, 817,
		9, 28, 1, 28, 1, 28, 1, 28, 3, 28, 822, 8, 28, 1, 28, 1, 28, 1, 29, 1, 29, 1, 29, 3, 29, 829, 8, 29, 1, 29, 1, 29,
		1, 29, 1, 29, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 4, 30, 841, 8, 30, 11, 30, 12, 30, 842, 1, 30, 1, 30, 1, 30,
		3, 30, 848, 8, 30, 1, 30, 1, 30, 1, 31, 1, 31, 3, 31, 854, 8, 31, 1, 31, 1, 31, 1, 31, 1, 31, 4, 31, 860, 8, 31, 11,
		31, 12, 31, 861, 1, 31, 1, 31, 1, 31, 3, 31, 867, 8, 31, 1, 31, 1, 31, 1, 32, 1, 32, 1, 32, 1, 32, 5, 32, 875, 8,
		32, 10, 32, 12, 32, 878, 9, 32, 1, 33, 1, 33, 1, 33, 3, 33, 883, 8, 33, 1, 34, 1, 34, 1, 34, 5, 34, 888, 8, 34, 10,
		34, 12, 34, 891, 9, 34, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 3, 35, 898, 8, 35, 1, 35, 3, 35, 901, 8, 35, 1, 35, 1,
		35, 1, 35, 1, 35, 1, 36, 1, 36, 1, 36, 3, 36, 910, 8, 36, 1, 36, 3, 36, 913, 8, 36, 1, 36, 3, 36, 916, 8, 36, 1, 36,
		1, 36, 3, 36, 920, 8, 36, 1, 36, 3, 36, 923, 8, 36, 1, 36, 1, 36, 1, 37, 1, 37, 1, 37, 1, 37, 3, 37, 931, 8, 37, 1,
		37, 3, 37, 934, 8, 37, 1, 37, 1, 37, 1, 38, 1, 38, 1, 38, 1, 38, 1, 39, 1, 39, 1, 39, 3, 39, 945, 8, 39, 1, 40, 1,
		40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 41, 1, 41, 3, 41, 957, 8, 41, 1, 41, 3, 41, 960, 8, 41, 1, 41, 1,
		41, 1, 41, 1, 42, 1, 42, 1, 42, 3, 42, 968, 8, 42, 1, 42, 3, 42, 971, 8, 42, 1, 42, 1, 42, 1, 42, 1, 43, 1, 43, 3,
		43, 978, 8, 43, 1, 43, 3, 43, 981, 8, 43, 1, 43, 1, 43, 1, 43, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 3, 44, 992,
		8, 44, 1, 44, 3, 44, 995, 8, 44, 1, 44, 1, 44, 1, 44, 1, 45, 1, 45, 3, 45, 1002, 8, 45, 1, 45, 3, 45, 1005, 8, 45,
		1, 45, 1, 45, 1, 45, 3, 45, 1010, 8, 45, 1, 46, 1, 46, 1, 46, 3, 46, 1015, 8, 46, 1, 46, 3, 46, 1018, 8, 46, 1, 46,
		1, 46, 1, 46, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 3, 47, 1028, 8, 47, 1, 47, 1, 47, 1, 47, 3, 47, 1033, 8, 47, 1, 47,
		1, 47, 1, 47, 3, 47, 1038, 8, 47, 1, 47, 3, 47, 1041, 8, 47, 1, 47, 1, 47, 1, 47, 3, 47, 1046, 8, 47, 1, 48, 1, 48,
		1, 48, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 3, 49, 1057, 8, 49, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 3,
		50, 1065, 8, 50, 1, 50, 1, 50, 3, 50, 1069, 8, 50, 1, 51, 1, 51, 1, 51, 3, 51, 1074, 8, 51, 1, 51, 1, 51, 1, 51, 1,
		52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 5, 52, 1087, 8, 52, 10, 52, 12, 52, 1090, 9, 52, 1, 52, 1, 52,
		3, 52, 1094, 8, 52, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 5, 53, 1102, 8, 53, 10, 53, 12, 53, 1105, 9, 53, 1,
		53, 1, 53, 1, 53, 3, 53, 1110, 8, 53, 1, 53, 3, 53, 1113, 8, 53, 1, 53, 1, 53, 1, 54, 1, 54, 1, 54, 3, 54, 1120, 8,
		54, 1, 55, 1, 55, 3, 55, 1124, 8, 55, 1, 56, 1, 56, 3, 56, 1128, 8, 56, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 3,
		57, 1136, 8, 57, 1, 57, 1, 57, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 59, 1, 59, 1, 59, 1, 59, 3, 59, 1149, 8, 59, 1,
		60, 1, 60, 1, 60, 1, 60, 5, 60, 1155, 8, 60, 10, 60, 12, 60, 1158, 9, 60, 1, 60, 1, 60, 3, 60, 1162, 8, 60, 1, 60,
		1, 60, 1, 60, 1, 61, 1, 61, 1, 61, 3, 61, 1170, 8, 61, 1, 62, 1, 62, 1, 62, 1, 62, 5, 62, 1176, 8, 62, 10, 62, 12,
		62, 1179, 9, 62, 1, 62, 1, 62, 1, 63, 1, 63, 1, 63, 3, 63, 1186, 8, 63, 1, 63, 3, 63, 1189, 8, 63, 1, 64, 4, 64,
		1192, 8, 64, 11, 64, 12, 64, 1193, 1, 64, 1, 64, 1, 65, 5, 65, 1199, 8, 65, 10, 65, 12, 65, 1202, 9, 65, 1, 65, 1,
		65, 1, 66, 1, 66, 1, 67, 1, 67, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 69, 1, 69, 3, 69, 1218, 8, 69, 1, 70,
		1, 70, 1, 70, 1, 70, 1, 71, 1, 71, 1, 71, 1, 71, 1, 71, 1, 72, 1, 72, 1, 72, 3, 72, 1232, 8, 72, 1, 72, 1, 72, 1,
		73, 1, 73, 3, 73, 1238, 8, 73, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 75, 1, 75, 3, 75, 1247, 8, 75, 1, 76, 1, 76, 3,
		76, 1251, 8, 76, 1, 77, 1, 77, 1, 77, 1, 78, 1, 78, 3, 78, 1258, 8, 78, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79, 3, 79,
		1265, 8, 79, 1, 79, 1, 79, 1, 79, 3, 79, 1270, 8, 79, 1, 80, 1, 80, 1, 81, 1, 81, 3, 81, 1276, 8, 81, 1, 82, 1, 82,
		1, 82, 1, 82, 3, 82, 1282, 8, 82, 1, 82, 3, 82, 1285, 8, 82, 1, 82, 5, 82, 1288, 8, 82, 10, 82, 12, 82, 1291, 9, 82,
		1, 82, 1, 82, 5, 82, 1295, 8, 82, 10, 82, 12, 82, 1298, 9, 82, 3, 82, 1300, 8, 82, 1, 82, 1, 82, 3, 82, 1304, 8, 82,
		1, 82, 3, 82, 1307, 8, 82, 1, 82, 1, 82, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1,
		83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 3, 83, 1331, 8, 83, 1, 84, 1, 84, 3, 84, 1335, 8,
		84, 1, 85, 1, 85, 1, 85, 5, 85, 1340, 8, 85, 10, 85, 12, 85, 1343, 9, 85, 1, 85, 1, 85, 3, 85, 1347, 8, 85, 1, 86,
		1, 86, 1, 86, 1, 86, 1, 87, 1, 87, 1, 87, 1, 87, 3, 87, 1357, 8, 87, 1, 88, 1, 88, 1, 89, 1, 89, 1, 90, 1, 90, 1,
		90, 1, 90, 5, 90, 1367, 8, 90, 10, 90, 12, 90, 1370, 9, 90, 1, 90, 1, 90, 1, 91, 1, 91, 3, 91, 1376, 8, 91, 1, 91,
		1, 91, 3, 91, 1380, 8, 91, 1, 91, 1, 91, 3, 91, 1384, 8, 91, 1, 91, 1, 91, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92,
		3, 92, 1394, 8, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1,
		92, 1, 92, 1, 92, 1, 92, 1, 92, 5, 92, 1414, 8, 92, 10, 92, 12, 92, 1417, 9, 92, 1, 93, 1, 93, 3, 93, 1421, 8, 93,
		1, 94, 1, 94, 1, 94, 3, 94, 1426, 8, 94, 1, 95, 1, 95, 1, 95, 1, 95, 1, 95, 1, 95, 1, 95, 1, 96, 1, 96, 1, 96, 1,
		96, 1, 96, 1, 96, 1, 96, 1, 97, 1, 97, 1, 97, 1, 97, 1, 97, 1, 97, 1, 97, 1, 98, 1, 98, 1, 98, 3, 98, 1452, 8, 98,
		1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 3, 99, 1459, 8, 99, 1, 99, 1, 99, 1, 100, 1, 100, 1, 100, 1, 100, 1, 101, 1, 101,
		3, 101, 1469, 8, 101, 1, 101, 1, 101, 1, 101, 1, 102, 1, 102, 1, 102, 1, 102, 1, 103, 1, 103, 1, 103, 1, 103, 1,
		103, 1, 104, 1, 104, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 5, 105, 1491, 8, 105, 10, 105, 12, 105, 1494,
		9, 105, 1, 105, 3, 105, 1497, 8, 105, 1, 105, 5, 105, 1500, 8, 105, 10, 105, 12, 105, 1503, 9, 105, 1, 105, 1, 105,
		1, 105, 3, 105, 1508, 8, 105, 1, 105, 1, 105, 1, 106, 1, 106, 3, 106, 1514, 8, 106, 1, 107, 1, 107, 1, 108, 1, 108,
		1, 108, 3, 108, 1521, 8, 108, 1, 108, 1, 108, 1, 108, 1, 108, 3, 108, 1527, 8, 108, 1, 109, 1, 109, 1, 109, 1, 109,
		1, 109, 1, 109, 1, 110, 1, 110, 1, 110, 1, 110, 1, 111, 3, 111, 1540, 8, 111, 1, 111, 1, 111, 1, 111, 3, 111, 1545,
		8, 111, 1, 111, 1, 111, 1, 111, 1, 111, 3, 111, 1551, 8, 111, 1, 111, 1, 111, 1, 111, 3, 111, 1556, 8, 111, 1, 111,
		1, 111, 1, 112, 1, 112, 1, 112, 3, 112, 1563, 8, 112, 1, 113, 1, 113, 1, 113, 3, 113, 1568, 8, 113, 1, 114, 5, 114,
		1571, 8, 114, 10, 114, 12, 114, 1574, 9, 114, 1, 114, 3, 114, 1577, 8, 114, 1, 114, 5, 114, 1580, 8, 114, 10, 114,
		12, 114, 1583, 9, 114, 1, 114, 1, 114, 3, 114, 1587, 8, 114, 1, 114, 3, 114, 1590, 8, 114, 1, 115, 1, 115, 1, 115,
		1, 115, 1, 115, 5, 115, 1597, 8, 115, 10, 115, 12, 115, 1600, 9, 115, 1, 115, 3, 115, 1603, 8, 115, 1, 115, 1, 115,
		1, 115, 1, 116, 1, 116, 1, 116, 1, 116, 1, 116, 1, 116, 1, 117, 1, 117, 3, 117, 1616, 8, 117, 1, 118, 1, 118, 1,
		118, 1, 118, 1, 118, 1, 118, 1, 118, 1, 118, 5, 118, 1626, 8, 118, 10, 118, 12, 118, 1629, 9, 118, 1, 118, 1, 118,
		1, 118, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 5, 119, 1641, 8, 119, 10, 119, 12, 119, 1644, 9,
		119, 1, 119, 1, 119, 1, 119, 1, 120, 1, 120, 1, 120, 1, 120, 1, 121, 1, 121, 1, 121, 5, 121, 1656, 8, 121, 10, 121,
		12, 121, 1659, 9, 121, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 3, 122, 1666, 8, 122, 1, 122, 1, 122, 1, 122, 1, 122,
		1, 122, 1, 122, 3, 122, 1674, 8, 122, 1, 122, 1, 122, 1, 122, 1, 122, 5, 122, 1680, 8, 122, 10, 122, 12, 122, 1683,
		9, 122, 1, 122, 1, 122, 1, 122, 3, 122, 1688, 8, 122, 1, 122, 1, 122, 3, 122, 1692, 8, 122, 1, 122, 1, 122, 1, 122,
		3, 122, 1697, 8, 122, 1, 122, 1, 122, 1, 123, 1, 123, 3, 123, 1703, 8, 123, 1, 123, 1, 123, 1, 123, 1, 123, 5, 123,
		1709, 8, 123, 10, 123, 12, 123, 1712, 9, 123, 1, 123, 1, 123, 1, 123, 1, 123, 5, 123, 1718, 8, 123, 10, 123, 12,
		123, 1721, 9, 123, 5, 123, 1723, 8, 123, 10, 123, 12, 123, 1726, 9, 123, 1, 123, 1, 123, 5, 123, 1730, 8, 123, 10,
		123, 12, 123, 1733, 9, 123, 3, 123, 1735, 8, 123, 1, 123, 1, 123, 1, 123, 3, 123, 1740, 8, 123, 1, 123, 1, 123, 1,
		124, 1, 124, 3, 124, 1746, 8, 124, 1, 125, 1, 125, 1, 125, 1, 125, 1, 126, 1, 126, 1, 126, 1, 126, 1, 126, 1, 126,
		1, 126, 1, 126, 1, 126, 3, 126, 1761, 8, 126, 1, 127, 1, 127, 3, 127, 1765, 8, 127, 1, 128, 1, 128, 1, 128, 1, 128,
		5, 128, 1771, 8, 128, 10, 128, 12, 128, 1774, 9, 128, 1, 128, 1, 128, 1, 129, 1, 129, 1, 129, 1, 129, 1, 130, 3,
		130, 1783, 8, 130, 1, 130, 1, 130, 1, 130, 1, 130, 1, 130, 1, 130, 3, 130, 1791, 8, 130, 1, 130, 1, 130, 3, 130,
		1795, 8, 130, 1, 131, 1, 131, 1, 131, 5, 131, 1800, 8, 131, 10, 131, 12, 131, 1803, 9, 131, 1, 131, 1, 131, 3, 131,
		1807, 8, 131, 1, 132, 1, 132, 1, 132, 1, 133, 1, 133, 1, 134, 3, 134, 1815, 8, 134, 1, 134, 1, 134, 1, 134, 3, 134,
		1820, 8, 134, 1, 134, 1, 134, 1, 134, 3, 134, 1825, 8, 134, 1, 135, 1, 135, 1, 135, 1, 135, 1, 135, 1, 135, 3, 135,
		1833, 8, 135, 1, 136, 1, 136, 1, 137, 1, 137, 1, 137, 1, 137, 1, 137, 1, 138, 3, 138, 1843, 8, 138, 1, 138, 1, 138,
		1, 138, 3, 138, 1848, 8, 138, 1, 138, 1, 138, 1, 138, 1, 138, 3, 138, 1854, 8, 138, 1, 138, 1, 138, 1, 138, 1, 139,
		1, 139, 1, 139, 5, 139, 1862, 8, 139, 10, 139, 12, 139, 1865, 9, 139, 1, 139, 3, 139, 1868, 8, 139, 1, 140, 1, 140,
		1, 140, 1, 140, 1, 140, 1, 140, 1, 140, 1, 141, 1, 141, 1, 141, 1, 141, 1, 141, 1, 141, 3, 141, 1883, 8, 141, 1,
		142, 1, 142, 1, 142, 3, 142, 1888, 8, 142, 1, 142, 1, 142, 1, 142, 1, 142, 3, 142, 1894, 8, 142, 1, 143, 3, 143,
		1897, 8, 143, 1, 143, 1, 143, 1, 143, 1, 143, 1, 144, 1, 144, 1, 144, 3, 144, 1906, 8, 144, 1, 145, 1, 145, 3, 145,
		1910, 8, 145, 1, 146, 1, 146, 3, 146, 1914, 8, 146, 1, 147, 1, 147, 1, 147, 1, 147, 3, 147, 1920, 8, 147, 1, 148, 1,
		148, 3, 148, 1924, 8, 148, 1, 149, 3, 149, 1927, 8, 149, 1, 149, 1, 149, 1, 149, 3, 149, 1932, 8, 149, 1, 149, 1,
		149, 1, 149, 3, 149, 1937, 8, 149, 1, 150, 1, 150, 1, 150, 1, 150, 3, 150, 1943, 8, 150, 1, 151, 1, 151, 1, 151, 1,
		151, 5, 151, 1949, 8, 151, 10, 151, 12, 151, 1952, 9, 151, 1, 151, 1, 151, 1, 152, 1, 152, 1, 152, 1, 152, 1, 152,
		1, 152, 1, 152, 3, 152, 1963, 8, 152, 1, 153, 1, 153, 1, 153, 1, 153, 1, 153, 3, 153, 1970, 8, 153, 1, 154, 1, 154,
		3, 154, 1974, 8, 154, 1, 154, 3, 154, 1977, 8, 154, 1, 154, 1, 154, 5, 154, 1981, 8, 154, 10, 154, 12, 154, 1984, 9,
		154, 1, 154, 1, 154, 1, 154, 3, 154, 1989, 8, 154, 1, 154, 1, 154, 1, 155, 1, 155, 1, 156, 1, 156, 1, 156, 3, 156,
		1998, 8, 156, 1, 157, 1, 157, 1, 157, 1, 157, 1, 157, 1, 157, 5, 157, 2006, 8, 157, 10, 157, 12, 157, 2009, 9, 157,
		1, 157, 1, 157, 1, 157, 3, 157, 2014, 8, 157, 1, 157, 1, 157, 1, 158, 1, 158, 1, 158, 1, 158, 1, 158, 1, 159, 1,
		159, 1, 159, 1, 159, 1, 159, 3, 159, 2028, 8, 159, 1, 159, 1, 159, 1, 159, 1, 159, 1, 159, 1, 159, 1, 159, 1, 159,
		5, 159, 2038, 8, 159, 10, 159, 12, 159, 2041, 9, 159, 1, 159, 1, 159, 1, 159, 1, 159, 1, 159, 1, 159, 1, 159, 1,
		159, 1, 159, 3, 159, 2052, 8, 159, 1, 159, 1, 159, 1, 159, 1, 159, 1, 159, 1, 159, 3, 159, 2060, 8, 159, 5, 159,
		2062, 8, 159, 10, 159, 12, 159, 2065, 9, 159, 1, 160, 1, 160, 3, 160, 2069, 8, 160, 1, 160, 1, 160, 3, 160, 2073, 8,
		160, 1, 160, 1, 160, 3, 160, 2077, 8, 160, 1, 160, 1, 160, 1, 161, 1, 161, 3, 161, 2083, 8, 161, 1, 161, 1, 161, 1,
		161, 1, 162, 1, 162, 3, 162, 2090, 8, 162, 1, 163, 1, 163, 1, 163, 1, 163, 1, 163, 5, 163, 2097, 8, 163, 10, 163,
		12, 163, 2100, 9, 163, 1, 163, 1, 163, 1, 163, 3, 163, 2105, 8, 163, 1, 163, 3, 163, 2108, 8, 163, 1, 163, 1, 163,
		1, 164, 1, 164, 1, 164, 1, 164, 1, 164, 1, 164, 1, 164, 1, 164, 1, 164, 1, 164, 1, 164, 1, 164, 1, 164, 1, 164, 1,
		164, 1, 164, 1, 164, 3, 164, 2129, 8, 164, 1, 165, 1, 165, 1, 165, 1, 165, 3, 165, 2135, 8, 165, 1, 165, 5, 165,
		2138, 8, 165, 10, 165, 12, 165, 2141, 9, 165, 1, 165, 1, 165, 3, 165, 2145, 8, 165, 1, 165, 3, 165, 2148, 8, 165, 1,
		165, 1, 165, 1, 166, 1, 166, 1, 166, 1, 166, 1, 166, 1, 166, 1, 166, 1, 166, 1, 166, 1, 166, 1, 166, 1, 166, 1, 166,
		1, 166, 1, 166, 1, 166, 1, 166, 1, 166, 3, 166, 2170, 8, 166, 1, 167, 1, 167, 1, 167, 1, 167, 1, 167, 1, 167, 3,
		167, 2178, 8, 167, 1, 167, 1, 167, 1, 168, 1, 168, 1, 168, 1, 168, 1, 168, 5, 168, 2187, 8, 168, 10, 168, 12, 168,
		2190, 9, 168, 1, 168, 1, 168, 1, 169, 1, 169, 3, 169, 2196, 8, 169, 1, 169, 1, 169, 1, 169, 1, 169, 1, 170, 1, 170,
		1, 170, 1, 170, 1, 171, 1, 171, 1, 171, 5, 171, 2209, 8, 171, 10, 171, 12, 171, 2212, 9, 171, 1, 171, 1, 171, 1,
		172, 1, 172, 1, 173, 1, 173, 1, 173, 1, 174, 3, 174, 2222, 8, 174, 1, 174, 1, 174, 1, 175, 1, 175, 1, 175, 1, 175,
		1, 175, 5, 175, 2231, 8, 175, 10, 175, 12, 175, 2234, 9, 175, 1, 175, 1, 175, 1, 175, 3, 175, 2239, 8, 175, 1, 176,
		1, 176, 3, 176, 2243, 8, 176, 1, 176, 1, 176, 1, 176, 3, 176, 2248, 8, 176, 1, 176, 1, 176, 1, 177, 1, 177, 1, 177,
		1, 177, 1, 177, 5, 177, 2257, 8, 177, 10, 177, 12, 177, 2260, 9, 177, 1, 177, 3, 177, 2263, 8, 177, 1, 177, 1, 177,
		1, 177, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 179, 1, 179, 1, 179, 1, 179, 1, 179, 1, 179, 1, 179, 1,
		179, 1, 179, 1, 179, 1, 179, 3, 179, 2285, 8, 179, 1, 180, 1, 180, 1, 180, 1, 181, 1, 181, 1, 182, 1, 182, 3, 182,
		2294, 8, 182, 1, 182, 3, 182, 2297, 8, 182, 1, 183, 1, 183, 3, 183, 2301, 8, 183, 1, 183, 1, 183, 1, 183, 1, 184, 1,
		184, 1, 184, 3, 184, 2309, 8, 184, 1, 184, 1, 184, 1, 184, 1, 184, 3, 184, 2315, 8, 184, 1, 185, 1, 185, 1, 185, 1,
		185, 1, 185, 1, 185, 1, 185, 1, 185, 1, 185, 1, 185, 1, 185, 1, 185, 1, 185, 1, 185, 1, 185, 1, 185, 1, 185, 3, 185,
		2334, 8, 185, 1, 186, 1, 186, 3, 186, 2338, 8, 186, 1, 187, 1, 187, 3, 187, 2342, 8, 187, 1, 187, 1, 187, 1, 187, 1,
		187, 1, 187, 3, 187, 2349, 8, 187, 1, 187, 3, 187, 2352, 8, 187, 1, 187, 5, 187, 2355, 8, 187, 10, 187, 12, 187,
		2358, 9, 187, 1, 187, 1, 187, 5, 187, 2362, 8, 187, 10, 187, 12, 187, 2365, 9, 187, 1, 187, 1, 187, 1, 187, 3, 187,
		2370, 8, 187, 1, 187, 1, 187, 1, 188, 1, 188, 3, 188, 2376, 8, 188, 1, 188, 1, 188, 1, 188, 1, 188, 1, 188, 1, 188,
		3, 188, 2384, 8, 188, 1, 188, 3, 188, 2387, 8, 188, 1, 188, 5, 188, 2390, 8, 188, 10, 188, 12, 188, 2393, 9, 188, 1,
		188, 1, 188, 5, 188, 2397, 8, 188, 10, 188, 12, 188, 2400, 9, 188, 1, 188, 1, 188, 3, 188, 2404, 8, 188, 1, 188, 1,
		188, 3, 188, 2408, 8, 188, 1, 188, 1, 188, 1, 189, 1, 189, 1, 189, 5, 189, 2415, 8, 189, 10, 189, 12, 189, 2418, 9,
		189, 1, 189, 1, 189, 1, 189, 1, 189, 3, 189, 2424, 8, 189, 1, 190, 1, 190, 1, 190, 1, 190, 1, 190, 1, 190, 1, 190,
		1, 190, 1, 190, 1, 190, 1, 190, 1, 190, 1, 190, 1, 190, 1, 190, 1, 190, 1, 190, 3, 190, 2443, 8, 190, 1, 191, 1,
		191, 5, 191, 2447, 8, 191, 10, 191, 12, 191, 2450, 9, 191, 1, 191, 1, 191, 1, 191, 3, 191, 2455, 8, 191, 1, 192, 1,
		192, 1, 192, 1, 192, 1, 192, 1, 192, 3, 192, 2463, 8, 192, 1, 193, 1, 193, 3, 193, 2467, 8, 193, 1, 194, 1, 194, 1,
		194, 3, 194, 2472, 8, 194, 1, 195, 1, 195, 1, 195, 1, 195, 1, 195, 1, 195, 1, 195, 1, 195, 3, 195, 2482, 8, 195, 1,
		196, 1, 196, 1, 196, 3, 196, 2487, 8, 196, 1, 197, 1, 197, 1, 197, 1, 198, 1, 198, 1, 198, 1, 198, 5, 198, 2496, 8,
		198, 10, 198, 12, 198, 2499, 9, 198, 1, 198, 1, 198, 1, 199, 1, 199, 1, 199, 1, 200, 1, 200, 1, 200, 5, 200, 2509,
		8, 200, 10, 200, 12, 200, 2512, 9, 200, 1, 201, 1, 201, 1, 201, 1, 202, 1, 202, 1, 202, 5, 202, 2520, 8, 202, 10,
		202, 12, 202, 2523, 9, 202, 1, 203, 1, 203, 5, 203, 2527, 8, 203, 10, 203, 12, 203, 2530, 9, 203, 1, 203, 1, 203, 1,
		203, 3, 203, 2535, 8, 203, 1, 204, 1, 204, 1, 204, 1, 204, 3, 204, 2541, 8, 204, 1, 205, 1, 205, 5, 205, 2545, 8,
		205, 10, 205, 12, 205, 2548, 9, 205, 1, 205, 1, 205, 1, 206, 1, 206, 3, 206, 2554, 8, 206, 1, 206, 1, 206, 1, 206,
		1, 206, 3, 206, 2560, 8, 206, 1, 206, 1, 206, 1, 207, 1, 207, 1, 207, 1, 207, 1, 207, 3, 207, 2569, 8, 207, 1, 208,
		1, 208, 3, 208, 2573, 8, 208, 1, 209, 1, 209, 1, 210, 1, 210, 1, 210, 1, 210, 3, 210, 2581, 8, 210, 1, 211, 1, 211,
		1, 211, 3, 211, 2586, 8, 211, 1, 211, 1, 211, 1, 211, 1, 212, 1, 212, 1, 212, 1, 212, 1, 212, 5, 212, 2596, 8, 212,
		10, 212, 12, 212, 2599, 9, 212, 1, 212, 1, 212, 1, 212, 1, 212, 1, 213, 1, 213, 1, 213, 1, 213, 3, 213, 2609, 8,
		213, 1, 213, 1, 213, 1, 213, 1, 213, 1, 213, 1, 213, 1, 213, 1, 214, 1, 214, 1, 214, 4, 214, 2621, 8, 214, 11, 214,
		12, 214, 2622, 1, 214, 1, 214, 1, 214, 5, 214, 2628, 8, 214, 10, 214, 12, 214, 2631, 9, 214, 1, 214, 1, 214, 3, 214,
		2635, 8, 214, 1, 215, 1, 215, 3, 215, 2639, 8, 215, 1, 216, 1, 216, 1, 216, 1, 216, 3, 216, 2645, 8, 216, 1, 216, 1,
		216, 1, 216, 1, 216, 1, 216, 1, 217, 1, 217, 1, 217, 1, 217, 3, 217, 2656, 8, 217, 1, 217, 1, 217, 1, 217, 1, 217,
		1, 217, 1, 217, 1, 218, 1, 218, 1, 218, 1, 218, 1, 218, 5, 218, 2669, 8, 218, 10, 218, 12, 218, 2672, 9, 218, 1,
		218, 1, 218, 1, 218, 1, 218, 1, 219, 1, 219, 1, 219, 1, 220, 1, 220, 1, 220, 5, 220, 2684, 8, 220, 10, 220, 12, 220,
		2687, 9, 220, 1, 221, 1, 221, 3, 221, 2691, 8, 221, 1, 221, 1, 221, 3, 221, 2695, 8, 221, 1, 221, 5, 221, 2698, 8,
		221, 10, 221, 12, 221, 2701, 9, 221, 1, 221, 1, 221, 5, 221, 2705, 8, 221, 10, 221, 12, 221, 2708, 9, 221, 1, 221,
		1, 221, 3, 221, 2712, 8, 221, 1, 221, 3, 221, 2715, 8, 221, 1, 221, 1, 221, 1, 222, 1, 222, 1, 222, 1, 222, 1, 222,
		1, 222, 1, 222, 1, 222, 1, 222, 1, 222, 1, 222, 1, 222, 1, 222, 1, 222, 3, 222, 2733, 8, 222, 1, 223, 1, 223, 3,
		223, 2737, 8, 223, 1, 223, 1, 223, 1, 223, 3, 223, 2742, 8, 223, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 3, 224,
		2749, 8, 224, 1, 224, 1, 224, 3, 224, 2753, 8, 224, 1, 224, 1, 224, 1, 225, 1, 225, 1, 225, 5, 225, 2760, 8, 225,
		10, 225, 12, 225, 2763, 9, 225, 1, 225, 1, 225, 3, 225, 2767, 8, 225, 1, 226, 1, 226, 1, 226, 1, 226, 5, 226, 2773,
		8, 226, 10, 226, 12, 226, 2776, 9, 226, 3, 226, 2778, 8, 226, 1, 226, 1, 226, 3, 226, 2782, 8, 226, 1, 226, 1, 226,
		1, 227, 1, 227, 1, 227, 1, 227, 1, 227, 1, 227, 1, 227, 3, 227, 2793, 8, 227, 1, 228, 1, 228, 1, 228, 1, 228, 1,
		228, 1, 228, 1, 228, 1, 229, 3, 229, 2803, 8, 229, 1, 229, 1, 229, 3, 229, 2807, 8, 229, 1, 229, 1, 229, 3, 229,
		2811, 8, 229, 1, 230, 1, 230, 1, 230, 1, 230, 1, 231, 1, 231, 1, 231, 1, 231, 1, 231, 1, 232, 1, 232, 1, 232, 3,
		232, 2825, 8, 232, 1, 233, 1, 233, 1, 233, 3, 233, 2830, 8, 233, 1, 233, 1, 233, 1, 233, 1, 234, 1, 234, 1, 234, 1,
		234, 1, 234, 1, 235, 1, 235, 1, 235, 5, 235, 2843, 8, 235, 10, 235, 12, 235, 2846, 9, 235, 1, 235, 1, 235, 5, 235,
		2850, 8, 235, 10, 235, 12, 235, 2853, 9, 235, 1, 235, 1, 235, 3, 235, 2857, 8, 235, 1, 235, 3, 235, 2860, 8, 235, 1,
		235, 1, 235, 1, 236, 1, 236, 1, 236, 1, 237, 1, 237, 1, 237, 1, 237, 1, 237, 1, 237, 1, 237, 1, 237, 1, 237, 1, 237,
		1, 237, 1, 237, 1, 237, 1, 237, 1, 237, 1, 237, 1, 237, 3, 237, 2884, 8, 237, 1, 238, 1, 238, 1, 238, 1, 238, 1,
		238, 1, 238, 3, 238, 2892, 8, 238, 1, 238, 3, 238, 2895, 8, 238, 1, 238, 1, 238, 1, 239, 1, 239, 1, 240, 1, 240, 3,
		240, 2903, 8, 240, 1, 241, 1, 241, 1, 241, 1, 241, 1, 241, 1, 241, 1, 242, 3, 242, 2912, 8, 242, 1, 242, 1, 242, 3,
		242, 2916, 8, 242, 1, 243, 1, 243, 1, 244, 1, 244, 3, 244, 2922, 8, 244, 1, 245, 1, 245, 1, 245, 1, 246, 1, 246, 1,
		246, 1, 246, 1, 246, 1, 247, 1, 247, 3, 247, 2934, 8, 247, 1, 248, 1, 248, 1, 248, 1, 248, 1, 248, 1, 248, 3, 248,
		2942, 8, 248, 1, 249, 1, 249, 1, 249, 1, 249, 1, 249, 5, 249, 2949, 8, 249, 10, 249, 12, 249, 2952, 9, 249, 1, 249,
		1, 249, 1, 249, 1, 249, 1, 250, 1, 250, 1, 250, 1, 250, 1, 251, 1, 251, 1, 251, 1, 251, 5, 251, 2966, 8, 251, 10,
		251, 12, 251, 2969, 9, 251, 1, 251, 1, 251, 1, 252, 1, 252, 3, 252, 2975, 8, 252, 1, 252, 1, 252, 1, 252, 1, 252, 1,
		253, 1, 253, 3, 253, 2983, 8, 253, 1, 253, 1, 253, 3, 253, 2987, 8, 253, 1, 254, 3, 254, 2990, 8, 254, 1, 254, 1,
		254, 1, 254, 1, 254, 1, 254, 3, 254, 2997, 8, 254, 1, 254, 1, 254, 3, 254, 3001, 8, 254, 1, 254, 1, 254, 1, 255, 1,
		255, 3, 255, 3007, 8, 255, 1, 255, 1, 255, 3, 255, 3011, 8, 255, 1, 255, 3, 255, 3014, 8, 255, 1, 255, 3, 255, 3017,
		8, 255, 1, 255, 1, 255, 1, 256, 1, 256, 1, 256, 5, 256, 3024, 8, 256, 10, 256, 12, 256, 3027, 9, 256, 1, 256, 3,
		256, 3030, 8, 256, 1, 257, 1, 257, 1, 257, 3, 257, 3035, 8, 257, 1, 257, 1, 257, 1, 257, 3, 257, 3040, 8, 257, 3,
		257, 3042, 8, 257, 1, 257, 0, 2, 184, 318, 258, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34,
		36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92,
		94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140,
		142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186,
		188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232,
		234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278,
		280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324,
		326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370,
		372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416,
		418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462,
		464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508,
		510, 512, 514, 0, 19, 1, 0, 161, 163, 4, 0, 79, 80, 93, 93, 98, 98, 163, 163, 1, 0, 162, 163, 2, 0, 30, 30, 102,
		102, 14, 0, 12, 12, 23, 25, 34, 34, 36, 36, 39, 39, 44, 44, 51, 51, 70, 70, 75, 75, 93, 93, 98, 98, 104, 104, 106,
		106, 109, 110, 2, 0, 161, 161, 163, 163, 7, 0, 6, 6, 11, 11, 58, 58, 61, 62, 67, 67, 119, 120, 132, 133, 3, 0, 57,
		57, 84, 84, 134, 135, 2, 0, 132, 133, 137, 137, 2, 0, 87, 88, 94, 97, 2, 0, 121, 131, 140, 140, 5, 0, 11, 11, 58,
		58, 61, 61, 67, 67, 119, 120, 2, 0, 46, 46, 78, 78, 2, 0, 28, 28, 142, 142, 5, 0, 20, 20, 47, 47, 49, 49, 53, 53,
		69, 69, 2, 0, 47, 47, 69, 69, 2, 0, 21, 21, 81, 81, 2, 0, 39, 39, 75, 75, 2, 0, 10, 10, 161, 163, 3344, 0, 516, 1,
		0, 0, 0, 2, 519, 1, 0, 0, 0, 4, 522, 1, 0, 0, 0, 6, 532, 1, 0, 0, 0, 8, 540, 1, 0, 0, 0, 10, 542, 1, 0, 0, 0, 12,
		553, 1, 0, 0, 0, 14, 566, 1, 0, 0, 0, 16, 568, 1, 0, 0, 0, 18, 570, 1, 0, 0, 0, 20, 575, 1, 0, 0, 0, 22, 625, 1, 0,
		0, 0, 24, 637, 1, 0, 0, 0, 26, 639, 1, 0, 0, 0, 28, 649, 1, 0, 0, 0, 30, 651, 1, 0, 0, 0, 32, 659, 1, 0, 0, 0, 34,
		667, 1, 0, 0, 0, 36, 679, 1, 0, 0, 0, 38, 687, 1, 0, 0, 0, 40, 691, 1, 0, 0, 0, 42, 699, 1, 0, 0, 0, 44, 705, 1, 0,
		0, 0, 46, 707, 1, 0, 0, 0, 48, 717, 1, 0, 0, 0, 50, 725, 1, 0, 0, 0, 52, 765, 1, 0, 0, 0, 54, 775, 1, 0, 0, 0, 56,
		777, 1, 0, 0, 0, 58, 825, 1, 0, 0, 0, 60, 834, 1, 0, 0, 0, 62, 853, 1, 0, 0, 0, 64, 870, 1, 0, 0, 0, 66, 882, 1, 0,
		0, 0, 68, 884, 1, 0, 0, 0, 70, 892, 1, 0, 0, 0, 72, 906, 1, 0, 0, 0, 74, 926, 1, 0, 0, 0, 76, 937, 1, 0, 0, 0, 78,
		944, 1, 0, 0, 0, 80, 946, 1, 0, 0, 0, 82, 956, 1, 0, 0, 0, 84, 964, 1, 0, 0, 0, 86, 977, 1, 0, 0, 0, 88, 985, 1, 0,
		0, 0, 90, 1001, 1, 0, 0, 0, 92, 1011, 1, 0, 0, 0, 94, 1045, 1, 0, 0, 0, 96, 1047, 1, 0, 0, 0, 98, 1050, 1, 0, 0, 0,
		100, 1058, 1, 0, 0, 0, 102, 1070, 1, 0, 0, 0, 104, 1078, 1, 0, 0, 0, 106, 1095, 1, 0, 0, 0, 108, 1119, 1, 0, 0, 0,
		110, 1123, 1, 0, 0, 0, 112, 1127, 1, 0, 0, 0, 114, 1129, 1, 0, 0, 0, 116, 1139, 1, 0, 0, 0, 118, 1148, 1, 0, 0, 0,
		120, 1150, 1, 0, 0, 0, 122, 1169, 1, 0, 0, 0, 124, 1171, 1, 0, 0, 0, 126, 1188, 1, 0, 0, 0, 128, 1191, 1, 0, 0, 0,
		130, 1200, 1, 0, 0, 0, 132, 1205, 1, 0, 0, 0, 134, 1207, 1, 0, 0, 0, 136, 1209, 1, 0, 0, 0, 138, 1217, 1, 0, 0, 0,
		140, 1219, 1, 0, 0, 0, 142, 1223, 1, 0, 0, 0, 144, 1231, 1, 0, 0, 0, 146, 1237, 1, 0, 0, 0, 148, 1239, 1, 0, 0, 0,
		150, 1246, 1, 0, 0, 0, 152, 1250, 1, 0, 0, 0, 154, 1252, 1, 0, 0, 0, 156, 1257, 1, 0, 0, 0, 158, 1269, 1, 0, 0, 0,
		160, 1271, 1, 0, 0, 0, 162, 1273, 1, 0, 0, 0, 164, 1277, 1, 0, 0, 0, 166, 1330, 1, 0, 0, 0, 168, 1332, 1, 0, 0, 0,
		170, 1346, 1, 0, 0, 0, 172, 1348, 1, 0, 0, 0, 174, 1356, 1, 0, 0, 0, 176, 1358, 1, 0, 0, 0, 178, 1360, 1, 0, 0, 0,
		180, 1362, 1, 0, 0, 0, 182, 1375, 1, 0, 0, 0, 184, 1393, 1, 0, 0, 0, 186, 1420, 1, 0, 0, 0, 188, 1425, 1, 0, 0, 0,
		190, 1427, 1, 0, 0, 0, 192, 1434, 1, 0, 0, 0, 194, 1441, 1, 0, 0, 0, 196, 1451, 1, 0, 0, 0, 198, 1453, 1, 0, 0, 0,
		200, 1462, 1, 0, 0, 0, 202, 1468, 1, 0, 0, 0, 204, 1473, 1, 0, 0, 0, 206, 1477, 1, 0, 0, 0, 208, 1482, 1, 0, 0, 0,
		210, 1484, 1, 0, 0, 0, 212, 1511, 1, 0, 0, 0, 214, 1515, 1, 0, 0, 0, 216, 1526, 1, 0, 0, 0, 218, 1528, 1, 0, 0, 0,
		220, 1534, 1, 0, 0, 0, 222, 1539, 1, 0, 0, 0, 224, 1562, 1, 0, 0, 0, 226, 1567, 1, 0, 0, 0, 228, 1576, 1, 0, 0, 0,
		230, 1591, 1, 0, 0, 0, 232, 1607, 1, 0, 0, 0, 234, 1615, 1, 0, 0, 0, 236, 1617, 1, 0, 0, 0, 238, 1633, 1, 0, 0, 0,
		240, 1648, 1, 0, 0, 0, 242, 1652, 1, 0, 0, 0, 244, 1660, 1, 0, 0, 0, 246, 1702, 1, 0, 0, 0, 248, 1745, 1, 0, 0, 0,
		250, 1747, 1, 0, 0, 0, 252, 1760, 1, 0, 0, 0, 254, 1764, 1, 0, 0, 0, 256, 1766, 1, 0, 0, 0, 258, 1777, 1, 0, 0, 0,
		260, 1794, 1, 0, 0, 0, 262, 1806, 1, 0, 0, 0, 264, 1808, 1, 0, 0, 0, 266, 1811, 1, 0, 0, 0, 268, 1814, 1, 0, 0, 0,
		270, 1832, 1, 0, 0, 0, 272, 1834, 1, 0, 0, 0, 274, 1836, 1, 0, 0, 0, 276, 1842, 1, 0, 0, 0, 278, 1858, 1, 0, 0, 0,
		280, 1869, 1, 0, 0, 0, 282, 1882, 1, 0, 0, 0, 284, 1884, 1, 0, 0, 0, 286, 1896, 1, 0, 0, 0, 288, 1902, 1, 0, 0, 0,
		290, 1909, 1, 0, 0, 0, 292, 1913, 1, 0, 0, 0, 294, 1915, 1, 0, 0, 0, 296, 1923, 1, 0, 0, 0, 298, 1926, 1, 0, 0, 0,
		300, 1942, 1, 0, 0, 0, 302, 1944, 1, 0, 0, 0, 304, 1962, 1, 0, 0, 0, 306, 1969, 1, 0, 0, 0, 308, 1973, 1, 0, 0, 0,
		310, 1992, 1, 0, 0, 0, 312, 1997, 1, 0, 0, 0, 314, 1999, 1, 0, 0, 0, 316, 2017, 1, 0, 0, 0, 318, 2027, 1, 0, 0, 0,
		320, 2068, 1, 0, 0, 0, 322, 2082, 1, 0, 0, 0, 324, 2089, 1, 0, 0, 0, 326, 2091, 1, 0, 0, 0, 328, 2128, 1, 0, 0, 0,
		330, 2130, 1, 0, 0, 0, 332, 2169, 1, 0, 0, 0, 334, 2171, 1, 0, 0, 0, 336, 2181, 1, 0, 0, 0, 338, 2195, 1, 0, 0, 0,
		340, 2201, 1, 0, 0, 0, 342, 2210, 1, 0, 0, 0, 344, 2215, 1, 0, 0, 0, 346, 2217, 1, 0, 0, 0, 348, 2221, 1, 0, 0, 0,
		350, 2225, 1, 0, 0, 0, 352, 2242, 1, 0, 0, 0, 354, 2251, 1, 0, 0, 0, 356, 2267, 1, 0, 0, 0, 358, 2284, 1, 0, 0, 0,
		360, 2286, 1, 0, 0, 0, 362, 2289, 1, 0, 0, 0, 364, 2291, 1, 0, 0, 0, 366, 2300, 1, 0, 0, 0, 368, 2305, 1, 0, 0, 0,
		370, 2333, 1, 0, 0, 0, 372, 2337, 1, 0, 0, 0, 374, 2341, 1, 0, 0, 0, 376, 2375, 1, 0, 0, 0, 378, 2411, 1, 0, 0, 0,
		380, 2442, 1, 0, 0, 0, 382, 2444, 1, 0, 0, 0, 384, 2462, 1, 0, 0, 0, 386, 2466, 1, 0, 0, 0, 388, 2468, 1, 0, 0, 0,
		390, 2473, 1, 0, 0, 0, 392, 2486, 1, 0, 0, 0, 394, 2488, 1, 0, 0, 0, 396, 2491, 1, 0, 0, 0, 398, 2502, 1, 0, 0, 0,
		400, 2505, 1, 0, 0, 0, 402, 2513, 1, 0, 0, 0, 404, 2516, 1, 0, 0, 0, 406, 2524, 1, 0, 0, 0, 408, 2536, 1, 0, 0, 0,
		410, 2546, 1, 0, 0, 0, 412, 2553, 1, 0, 0, 0, 414, 2568, 1, 0, 0, 0, 416, 2572, 1, 0, 0, 0, 418, 2574, 1, 0, 0, 0,
		420, 2580, 1, 0, 0, 0, 422, 2582, 1, 0, 0, 0, 424, 2597, 1, 0, 0, 0, 426, 2604, 1, 0, 0, 0, 428, 2634, 1, 0, 0, 0,
		430, 2638, 1, 0, 0, 0, 432, 2640, 1, 0, 0, 0, 434, 2651, 1, 0, 0, 0, 436, 2670, 1, 0, 0, 0, 438, 2677, 1, 0, 0, 0,
		440, 2680, 1, 0, 0, 0, 442, 2690, 1, 0, 0, 0, 444, 2732, 1, 0, 0, 0, 446, 2736, 1, 0, 0, 0, 448, 2743, 1, 0, 0, 0,
		450, 2766, 1, 0, 0, 0, 452, 2768, 1, 0, 0, 0, 454, 2785, 1, 0, 0, 0, 456, 2794, 1, 0, 0, 0, 458, 2802, 1, 0, 0, 0,
		460, 2812, 1, 0, 0, 0, 462, 2816, 1, 0, 0, 0, 464, 2824, 1, 0, 0, 0, 466, 2826, 1, 0, 0, 0, 468, 2834, 1, 0, 0, 0,
		470, 2839, 1, 0, 0, 0, 472, 2863, 1, 0, 0, 0, 474, 2883, 1, 0, 0, 0, 476, 2885, 1, 0, 0, 0, 478, 2898, 1, 0, 0, 0,
		480, 2902, 1, 0, 0, 0, 482, 2904, 1, 0, 0, 0, 484, 2911, 1, 0, 0, 0, 486, 2917, 1, 0, 0, 0, 488, 2921, 1, 0, 0, 0,
		490, 2923, 1, 0, 0, 0, 492, 2926, 1, 0, 0, 0, 494, 2933, 1, 0, 0, 0, 496, 2941, 1, 0, 0, 0, 498, 2943, 1, 0, 0, 0,
		500, 2957, 1, 0, 0, 0, 502, 2961, 1, 0, 0, 0, 504, 2974, 1, 0, 0, 0, 506, 2982, 1, 0, 0, 0, 508, 2989, 1, 0, 0, 0,
		510, 3006, 1, 0, 0, 0, 512, 3029, 1, 0, 0, 0, 514, 3041, 1, 0, 0, 0, 516, 517, 5, 153, 0, 0, 517, 518, 3, 342, 171,
		0, 518, 1, 1, 0, 0, 0, 519, 520, 5, 7, 0, 0, 520, 521, 3, 248, 124, 0, 521, 3, 1, 0, 0, 0, 522, 523, 5, 7, 0, 0,
		523, 524, 3, 484, 242, 0, 524, 5, 1, 0, 0, 0, 525, 527, 5, 48, 0, 0, 526, 525, 1, 0, 0, 0, 526, 527, 1, 0, 0, 0,
		527, 528, 1, 0, 0, 0, 528, 533, 3, 184, 92, 0, 529, 533, 3, 318, 159, 0, 530, 533, 3, 484, 242, 0, 531, 533, 5, 66,
		0, 0, 532, 526, 1, 0, 0, 0, 532, 529, 1, 0, 0, 0, 532, 530, 1, 0, 0, 0, 532, 531, 1, 0, 0, 0, 533, 7, 1, 0, 0, 0,
		534, 541, 3, 6, 3, 0, 535, 536, 3, 318, 159, 0, 536, 537, 5, 143, 0, 0, 537, 538, 3, 6, 3, 0, 538, 539, 5, 144, 0,
		0, 539, 541, 1, 0, 0, 0, 540, 534, 1, 0, 0, 0, 540, 535, 1, 0, 0, 0, 541, 9, 1, 0, 0, 0, 542, 543, 5, 143, 0, 0,
		543, 548, 3, 144, 72, 0, 544, 545, 5, 151, 0, 0, 545, 547, 3, 144, 72, 0, 546, 544, 1, 0, 0, 0, 547, 550, 1, 0, 0,
		0, 548, 546, 1, 0, 0, 0, 548, 549, 1, 0, 0, 0, 549, 551, 1, 0, 0, 0, 550, 548, 1, 0, 0, 0, 551, 552, 5, 144, 0, 0,
		552, 11, 1, 0, 0, 0, 553, 554, 5, 9, 0, 0, 554, 557, 3, 14, 7, 0, 555, 556, 5, 149, 0, 0, 556, 558, 3, 16, 8, 0,
		557, 555, 1, 0, 0, 0, 557, 558, 1, 0, 0, 0, 558, 559, 1, 0, 0, 0, 559, 560, 5, 50, 0, 0, 560, 562, 3, 318, 159, 0,
		561, 563, 3, 452, 226, 0, 562, 561, 1, 0, 0, 0, 562, 563, 1, 0, 0, 0, 563, 564, 1, 0, 0, 0, 564, 565, 5, 150, 0, 0,
		565, 13, 1, 0, 0, 0, 566, 567, 7, 0, 0, 0, 567, 15, 1, 0, 0, 0, 568, 569, 3, 484, 242, 0, 569, 17, 1, 0, 0, 0, 570,
		573, 5, 59, 0, 0, 571, 574, 3, 484, 242, 0, 572, 574, 3, 390, 195, 0, 573, 571, 1, 0, 0, 0, 573, 572, 1, 0, 0, 0,
		574, 19, 1, 0, 0, 0, 575, 576, 5, 12, 0, 0, 576, 577, 5, 163, 0, 0, 577, 578, 5, 64, 0, 0, 578, 579, 5, 163, 0, 0,
		579, 583, 5, 50, 0, 0, 580, 582, 3, 52, 26, 0, 581, 580, 1, 0, 0, 0, 582, 585, 1, 0, 0, 0, 583, 581, 1, 0, 0, 0,
		583, 584, 1, 0, 0, 0, 584, 586, 1, 0, 0, 0, 585, 583, 1, 0, 0, 0, 586, 590, 5, 17, 0, 0, 587, 589, 3, 94, 47, 0,
		588, 587, 1, 0, 0, 0, 589, 592, 1, 0, 0, 0, 590, 588, 1, 0, 0, 0, 590, 591, 1, 0, 0, 0, 591, 593, 1, 0, 0, 0, 592,
		590, 1, 0, 0, 0, 593, 595, 5, 33, 0, 0, 594, 596, 5, 12, 0, 0, 595, 594, 1, 0, 0, 0, 595, 596, 1, 0, 0, 0, 596, 598,
		1, 0, 0, 0, 597, 599, 5, 163, 0, 0, 598, 597, 1, 0, 0, 0, 598, 599, 1, 0, 0, 0, 599, 600, 1, 0, 0, 0, 600, 601, 5,
		150, 0, 0, 601, 21, 1, 0, 0, 0, 602, 626, 3, 56, 28, 0, 603, 626, 3, 374, 187, 0, 604, 626, 3, 376, 188, 0, 605,
		606, 5, 163, 0, 0, 606, 608, 5, 149, 0, 0, 607, 605, 1, 0, 0, 0, 607, 608, 1, 0, 0, 0, 608, 609, 1, 0, 0, 0, 609,
		626, 3, 86, 43, 0, 610, 611, 5, 163, 0, 0, 611, 613, 5, 149, 0, 0, 612, 610, 1, 0, 0, 0, 612, 613, 1, 0, 0, 0, 613,
		614, 1, 0, 0, 0, 614, 626, 3, 82, 41, 0, 615, 616, 5, 163, 0, 0, 616, 618, 5, 149, 0, 0, 617, 615, 1, 0, 0, 0, 617,
		618, 1, 0, 0, 0, 618, 620, 1, 0, 0, 0, 619, 621, 5, 73, 0, 0, 620, 619, 1, 0, 0, 0, 620, 621, 1, 0, 0, 0, 621, 622,
		1, 0, 0, 0, 622, 626, 3, 90, 45, 0, 623, 626, 3, 74, 37, 0, 624, 626, 3, 226, 113, 0, 625, 602, 1, 0, 0, 0, 625,
		603, 1, 0, 0, 0, 625, 604, 1, 0, 0, 0, 625, 607, 1, 0, 0, 0, 625, 612, 1, 0, 0, 0, 625, 617, 1, 0, 0, 0, 625, 623,
		1, 0, 0, 0, 625, 624, 1, 0, 0, 0, 626, 23, 1, 0, 0, 0, 627, 629, 3, 256, 128, 0, 628, 630, 3, 146, 73, 0, 629, 628,
		1, 0, 0, 0, 629, 630, 1, 0, 0, 0, 630, 638, 1, 0, 0, 0, 631, 632, 5, 143, 0, 0, 632, 633, 5, 66, 0, 0, 633, 635, 5,
		144, 0, 0, 634, 636, 3, 146, 73, 0, 635, 634, 1, 0, 0, 0, 635, 636, 1, 0, 0, 0, 636, 638, 1, 0, 0, 0, 637, 627, 1,
		0, 0, 0, 637, 631, 1, 0, 0, 0, 638, 25, 1, 0, 0, 0, 639, 640, 5, 13, 0, 0, 640, 641, 5, 143, 0, 0, 641, 642, 3, 30,
		15, 0, 642, 643, 5, 144, 0, 0, 643, 644, 5, 64, 0, 0, 644, 645, 3, 248, 124, 0, 645, 27, 1, 0, 0, 0, 646, 650, 3,
		258, 129, 0, 647, 650, 3, 256, 128, 0, 648, 650, 3, 500, 250, 0, 649, 646, 1, 0, 0, 0, 649, 647, 1, 0, 0, 0, 649,
		648, 1, 0, 0, 0, 650, 29, 1, 0, 0, 0, 651, 656, 3, 28, 14, 0, 652, 653, 5, 151, 0, 0, 653, 655, 3, 28, 14, 0, 654,
		652, 1, 0, 0, 0, 655, 658, 1, 0, 0, 0, 656, 654, 1, 0, 0, 0, 656, 657, 1, 0, 0, 0, 657, 31, 1, 0, 0, 0, 658, 656, 1,
		0, 0, 0, 659, 660, 5, 110, 0, 0, 660, 661, 5, 143, 0, 0, 661, 662, 3, 318, 159, 0, 662, 665, 5, 144, 0, 0, 663, 664,
		5, 64, 0, 0, 664, 666, 3, 484, 242, 0, 665, 663, 1, 0, 0, 0, 665, 666, 1, 0, 0, 0, 666, 33, 1, 0, 0, 0, 667, 668, 5,
		14, 0, 0, 668, 671, 3, 184, 92, 0, 669, 670, 5, 85, 0, 0, 670, 672, 3, 184, 92, 0, 671, 669, 1, 0, 0, 0, 671, 672,
		1, 0, 0, 0, 672, 675, 1, 0, 0, 0, 673, 674, 5, 91, 0, 0, 674, 676, 3, 184, 92, 0, 675, 673, 1, 0, 0, 0, 675, 676, 1,
		0, 0, 0, 676, 35, 1, 0, 0, 0, 677, 678, 5, 163, 0, 0, 678, 680, 5, 149, 0, 0, 679, 677, 1, 0, 0, 0, 679, 680, 1, 0,
		0, 0, 680, 681, 1, 0, 0, 0, 681, 682, 3, 34, 17, 0, 682, 683, 5, 150, 0, 0, 683, 37, 1, 0, 0, 0, 684, 685, 3, 216,
		108, 0, 685, 686, 5, 139, 0, 0, 686, 688, 1, 0, 0, 0, 687, 684, 1, 0, 0, 0, 687, 688, 1, 0, 0, 0, 688, 689, 1, 0, 0,
		0, 689, 690, 3, 8, 4, 0, 690, 39, 1, 0, 0, 0, 691, 696, 3, 38, 19, 0, 692, 693, 5, 151, 0, 0, 693, 695, 3, 38, 19,
		0, 694, 692, 1, 0, 0, 0, 695, 698, 1, 0, 0, 0, 696, 694, 1, 0, 0, 0, 696, 697, 1, 0, 0, 0, 697, 41, 1, 0, 0, 0, 698,
		696, 1, 0, 0, 0, 699, 700, 5, 15, 0, 0, 700, 701, 5, 163, 0, 0, 701, 702, 5, 149, 0, 0, 702, 703, 3, 318, 159, 0,
		703, 704, 5, 150, 0, 0, 704, 43, 1, 0, 0, 0, 705, 706, 7, 1, 0, 0, 706, 45, 1, 0, 0, 0, 707, 708, 5, 15, 0, 0, 708,
		709, 5, 163, 0, 0, 709, 710, 5, 64, 0, 0, 710, 711, 3, 172, 86, 0, 711, 712, 5, 50, 0, 0, 712, 713, 3, 98, 49, 0,
		713, 714, 5, 150, 0, 0, 714, 47, 1, 0, 0, 0, 715, 716, 5, 108, 0, 0, 716, 718, 3, 158, 79, 0, 717, 715, 1, 0, 0, 0,
		717, 718, 1, 0, 0, 0, 718, 720, 1, 0, 0, 0, 719, 721, 3, 232, 116, 0, 720, 719, 1, 0, 0, 0, 720, 721, 1, 0, 0, 0,
		721, 723, 1, 0, 0, 0, 722, 724, 3, 356, 178, 0, 723, 722, 1, 0, 0, 0, 723, 724, 1, 0, 0, 0, 724, 49, 1, 0, 0, 0,
		725, 726, 5, 37, 0, 0, 726, 730, 3, 54, 27, 0, 727, 729, 3, 502, 251, 0, 728, 727, 1, 0, 0, 0, 729, 732, 1, 0, 0, 0,
		730, 728, 1, 0, 0, 0, 730, 731, 1, 0, 0, 0, 731, 736, 1, 0, 0, 0, 732, 730, 1, 0, 0, 0, 733, 735, 3, 110, 55, 0,
		734, 733, 1, 0, 0, 0, 735, 738, 1, 0, 0, 0, 736, 734, 1, 0, 0, 0, 736, 737, 1, 0, 0, 0, 737, 739, 1, 0, 0, 0, 738,
		736, 1, 0, 0, 0, 739, 740, 5, 33, 0, 0, 740, 741, 5, 37, 0, 0, 741, 742, 5, 150, 0, 0, 742, 51, 1, 0, 0, 0, 743,
		766, 3, 472, 236, 0, 744, 766, 3, 470, 235, 0, 745, 766, 3, 476, 238, 0, 746, 766, 3, 330, 165, 0, 747, 766, 3, 326,
		163, 0, 748, 766, 3, 334, 167, 0, 749, 766, 3, 494, 247, 0, 750, 766, 3, 482, 241, 0, 751, 766, 3, 314, 157, 0, 752,
		766, 3, 114, 57, 0, 753, 766, 3, 448, 224, 0, 754, 766, 3, 508, 254, 0, 755, 766, 3, 198, 99, 0, 756, 766, 3, 12, 6,
		0, 757, 766, 3, 72, 36, 0, 758, 766, 3, 42, 21, 0, 759, 766, 3, 46, 23, 0, 760, 766, 3, 112, 56, 0, 761, 766, 3,
		136, 68, 0, 762, 766, 3, 502, 251, 0, 763, 766, 3, 238, 119, 0, 764, 766, 3, 236, 118, 0, 765, 743, 1, 0, 0, 0, 765,
		744, 1, 0, 0, 0, 765, 745, 1, 0, 0, 0, 765, 746, 1, 0, 0, 0, 765, 747, 1, 0, 0, 0, 765, 748, 1, 0, 0, 0, 765, 749,
		1, 0, 0, 0, 765, 750, 1, 0, 0, 0, 765, 751, 1, 0, 0, 0, 765, 752, 1, 0, 0, 0, 765, 753, 1, 0, 0, 0, 765, 754, 1, 0,
		0, 0, 765, 755, 1, 0, 0, 0, 765, 756, 1, 0, 0, 0, 765, 757, 1, 0, 0, 0, 765, 758, 1, 0, 0, 0, 765, 759, 1, 0, 0, 0,
		765, 760, 1, 0, 0, 0, 765, 761, 1, 0, 0, 0, 765, 762, 1, 0, 0, 0, 765, 763, 1, 0, 0, 0, 765, 764, 1, 0, 0, 0, 766,
		53, 1, 0, 0, 0, 767, 776, 3, 318, 159, 0, 768, 773, 5, 163, 0, 0, 769, 770, 5, 143, 0, 0, 770, 771, 3, 224, 112, 0,
		771, 772, 5, 144, 0, 0, 772, 774, 1, 0, 0, 0, 773, 769, 1, 0, 0, 0, 773, 774, 1, 0, 0, 0, 774, 776, 1, 0, 0, 0, 775,
		767, 1, 0, 0, 0, 775, 768, 1, 0, 0, 0, 776, 55, 1, 0, 0, 0, 777, 778, 5, 163, 0, 0, 778, 779, 5, 149, 0, 0, 779,
		784, 5, 18, 0, 0, 780, 781, 5, 143, 0, 0, 781, 782, 3, 184, 92, 0, 782, 783, 5, 144, 0, 0, 783, 785, 1, 0, 0, 0,
		784, 780, 1, 0, 0, 0, 784, 785, 1, 0, 0, 0, 785, 787, 1, 0, 0, 0, 786, 788, 5, 50, 0, 0, 787, 786, 1, 0, 0, 0, 787,
		788, 1, 0, 0, 0, 788, 795, 1, 0, 0, 0, 789, 793, 3, 230, 115, 0, 790, 791, 3, 232, 116, 0, 791, 792, 5, 150, 0, 0,
		792, 794, 1, 0, 0, 0, 793, 790, 1, 0, 0, 0, 793, 794, 1, 0, 0, 0, 794, 796, 1, 0, 0, 0, 795, 789, 1, 0, 0, 0, 795,
		796, 1, 0, 0, 0, 796, 803, 1, 0, 0, 0, 797, 801, 3, 354, 177, 0, 798, 799, 3, 356, 178, 0, 799, 800, 5, 150, 0, 0,
		800, 802, 1, 0, 0, 0, 801, 798, 1, 0, 0, 0, 801, 802, 1, 0, 0, 0, 802, 804, 1, 0, 0, 0, 803, 797, 1, 0, 0, 0, 803,
		804, 1, 0, 0, 0, 804, 808, 1, 0, 0, 0, 805, 807, 3, 52, 26, 0, 806, 805, 1, 0, 0, 0, 807, 810, 1, 0, 0, 0, 808, 806,
		1, 0, 0, 0, 808, 809, 1, 0, 0, 0, 809, 811, 1, 0, 0, 0, 810, 808, 1, 0, 0, 0, 811, 815, 5, 17, 0, 0, 812, 814, 3,
		94, 47, 0, 813, 812, 1, 0, 0, 0, 814, 817, 1, 0, 0, 0, 815, 813, 1, 0, 0, 0, 815, 816, 1, 0, 0, 0, 816, 818, 1, 0,
		0, 0, 817, 815, 1, 0, 0, 0, 818, 819, 5, 33, 0, 0, 819, 821, 5, 18, 0, 0, 820, 822, 5, 163, 0, 0, 821, 820, 1, 0, 0,
		0, 821, 822, 1, 0, 0, 0, 822, 823, 1, 0, 0, 0, 823, 824, 5, 150, 0, 0, 824, 57, 1, 0, 0, 0, 825, 828, 5, 117, 0, 0,
		826, 827, 5, 163, 0, 0, 827, 829, 5, 149, 0, 0, 828, 826, 1, 0, 0, 0, 828, 829, 1, 0, 0, 0, 829, 830, 1, 0, 0, 0,
		830, 831, 3, 68, 34, 0, 831, 832, 5, 139, 0, 0, 832, 833, 3, 228, 114, 0, 833, 59, 1, 0, 0, 0, 834, 835, 5, 163, 0,
		0, 835, 836, 5, 149, 0, 0, 836, 837, 5, 22, 0, 0, 837, 838, 3, 184, 92, 0, 838, 840, 5, 41, 0, 0, 839, 841, 3, 58,
		29, 0, 840, 839, 1, 0, 0, 0, 841, 842, 1, 0, 0, 0, 842, 840, 1, 0, 0, 0, 842, 843, 1, 0, 0, 0, 843, 844, 1, 0, 0, 0,
		844, 845, 5, 33, 0, 0, 845, 847, 5, 41, 0, 0, 846, 848, 5, 163, 0, 0, 847, 846, 1, 0, 0, 0, 847, 848, 1, 0, 0, 0,
		848, 849, 1, 0, 0, 0, 849, 850, 5, 150, 0, 0, 850, 61, 1, 0, 0, 0, 851, 852, 5, 163, 0, 0, 852, 854, 5, 149, 0, 0,
		853, 851, 1, 0, 0, 0, 853, 854, 1, 0, 0, 0, 854, 855, 1, 0, 0, 0, 855, 856, 5, 22, 0, 0, 856, 857, 3, 184, 92, 0,
		857, 859, 5, 50, 0, 0, 858, 860, 3, 64, 32, 0, 859, 858, 1, 0, 0, 0, 860, 861, 1, 0, 0, 0, 861, 859, 1, 0, 0, 0,
		861, 862, 1, 0, 0, 0, 862, 863, 1, 0, 0, 0, 863, 864, 5, 33, 0, 0, 864, 866, 5, 22, 0, 0, 865, 867, 5, 163, 0, 0,
		866, 865, 1, 0, 0, 0, 866, 867, 1, 0, 0, 0, 867, 868, 1, 0, 0, 0, 868, 869, 5, 150, 0, 0, 869, 63, 1, 0, 0, 0, 870,
		871, 5, 117, 0, 0, 871, 872, 3, 68, 34, 0, 872, 876, 5, 139, 0, 0, 873, 875, 3, 444, 222, 0, 874, 873, 1, 0, 0, 0,
		875, 878, 1, 0, 0, 0, 876, 874, 1, 0, 0, 0, 876, 877, 1, 0, 0, 0, 877, 65, 1, 0, 0, 0, 878, 876, 1, 0, 0, 0, 879,
		883, 3, 184, 92, 0, 880, 883, 3, 138, 69, 0, 881, 883, 5, 68, 0, 0, 882, 879, 1, 0, 0, 0, 882, 880, 1, 0, 0, 0, 882,
		881, 1, 0, 0, 0, 883, 67, 1, 0, 0, 0, 884, 889, 3, 66, 33, 0, 885, 886, 5, 152, 0, 0, 886, 888, 3, 66, 33, 0, 887,
		885, 1, 0, 0, 0, 888, 891, 1, 0, 0, 0, 889, 887, 1, 0, 0, 0, 889, 890, 1, 0, 0, 0, 890, 69, 1, 0, 0, 0, 891, 889, 1,
		0, 0, 0, 892, 893, 5, 37, 0, 0, 893, 897, 3, 76, 38, 0, 894, 895, 3, 48, 24, 0, 895, 896, 5, 150, 0, 0, 896, 898, 1,
		0, 0, 0, 897, 894, 1, 0, 0, 0, 897, 898, 1, 0, 0, 0, 898, 900, 1, 0, 0, 0, 899, 901, 3, 50, 25, 0, 900, 899, 1, 0,
		0, 0, 900, 901, 1, 0, 0, 0, 901, 902, 1, 0, 0, 0, 902, 903, 5, 33, 0, 0, 903, 904, 5, 37, 0, 0, 904, 905, 5, 150, 0,
		0, 905, 71, 1, 0, 0, 0, 906, 907, 5, 23, 0, 0, 907, 909, 5, 163, 0, 0, 908, 910, 5, 50, 0, 0, 909, 908, 1, 0, 0, 0,
		909, 910, 1, 0, 0, 0, 910, 912, 1, 0, 0, 0, 911, 913, 3, 230, 115, 0, 912, 911, 1, 0, 0, 0, 912, 913, 1, 0, 0, 0,
		913, 915, 1, 0, 0, 0, 914, 916, 3, 354, 177, 0, 915, 914, 1, 0, 0, 0, 915, 916, 1, 0, 0, 0, 916, 917, 1, 0, 0, 0,
		917, 919, 5, 33, 0, 0, 918, 920, 5, 23, 0, 0, 919, 918, 1, 0, 0, 0, 919, 920, 1, 0, 0, 0, 920, 922, 1, 0, 0, 0, 921,
		923, 5, 163, 0, 0, 922, 921, 1, 0, 0, 0, 922, 923, 1, 0, 0, 0, 923, 924, 1, 0, 0, 0, 924, 925, 5, 150, 0, 0, 925,
		73, 1, 0, 0, 0, 926, 927, 5, 163, 0, 0, 927, 928, 5, 149, 0, 0, 928, 930, 3, 260, 130, 0, 929, 931, 3, 232, 116, 0,
		930, 929, 1, 0, 0, 0, 930, 931, 1, 0, 0, 0, 931, 933, 1, 0, 0, 0, 932, 934, 3, 356, 178, 0, 933, 932, 1, 0, 0, 0,
		933, 934, 1, 0, 0, 0, 934, 935, 1, 0, 0, 0, 935, 936, 5, 150, 0, 0, 936, 75, 1, 0, 0, 0, 937, 938, 3, 262, 131, 0,
		938, 939, 5, 149, 0, 0, 939, 940, 3, 318, 159, 0, 940, 77, 1, 0, 0, 0, 941, 945, 3, 116, 58, 0, 942, 945, 3, 498,
		249, 0, 943, 945, 3, 406, 203, 0, 944, 941, 1, 0, 0, 0, 944, 942, 1, 0, 0, 0, 944, 943, 1, 0, 0, 0, 945, 79, 1, 0,
		0, 0, 946, 947, 5, 37, 0, 0, 947, 948, 3, 76, 38, 0, 948, 949, 3, 48, 24, 0, 949, 950, 5, 150, 0, 0, 950, 951, 5,
		33, 0, 0, 951, 952, 5, 37, 0, 0, 952, 953, 5, 150, 0, 0, 953, 81, 1, 0, 0, 0, 954, 955, 5, 163, 0, 0, 955, 957, 5,
		149, 0, 0, 956, 954, 1, 0, 0, 0, 956, 957, 1, 0, 0, 0, 957, 959, 1, 0, 0, 0, 958, 960, 5, 73, 0, 0, 959, 958, 1, 0,
		0, 0, 959, 960, 1, 0, 0, 0, 960, 961, 1, 0, 0, 0, 961, 962, 3, 34, 17, 0, 962, 963, 5, 150, 0, 0, 963, 83, 1, 0, 0,
		0, 964, 965, 3, 488, 244, 0, 965, 967, 5, 140, 0, 0, 966, 968, 5, 43, 0, 0, 967, 966, 1, 0, 0, 0, 967, 968, 1, 0, 0,
		0, 968, 970, 1, 0, 0, 0, 969, 971, 3, 126, 63, 0, 970, 969, 1, 0, 0, 0, 970, 971, 1, 0, 0, 0, 971, 972, 1, 0, 0, 0,
		972, 973, 3, 104, 52, 0, 973, 974, 5, 150, 0, 0, 974, 85, 1, 0, 0, 0, 975, 976, 5, 163, 0, 0, 976, 978, 5, 149, 0,
		0, 977, 975, 1, 0, 0, 0, 977, 978, 1, 0, 0, 0, 978, 980, 1, 0, 0, 0, 979, 981, 5, 73, 0, 0, 980, 979, 1, 0, 0, 0,
		980, 981, 1, 0, 0, 0, 981, 982, 1, 0, 0, 0, 982, 983, 3, 364, 182, 0, 983, 984, 5, 150, 0, 0, 984, 87, 1, 0, 0, 0,
		985, 986, 5, 116, 0, 0, 986, 987, 3, 184, 92, 0, 987, 988, 5, 90, 0, 0, 988, 989, 3, 488, 244, 0, 989, 991, 5, 140,
		0, 0, 990, 992, 5, 43, 0, 0, 991, 990, 1, 0, 0, 0, 991, 992, 1, 0, 0, 0, 992, 994, 1, 0, 0, 0, 993, 995, 3, 126, 63,
		0, 994, 993, 1, 0, 0, 0, 994, 995, 1, 0, 0, 0, 995, 996, 1, 0, 0, 0, 996, 997, 3, 436, 218, 0, 997, 998, 5, 150, 0,
		0, 998, 89, 1, 0, 0, 0, 999, 1000, 5, 163, 0, 0, 1000, 1002, 5, 149, 0, 0, 1001, 999, 1, 0, 0, 0, 1001, 1002, 1, 0,
		0, 0, 1002, 1004, 1, 0, 0, 0, 1003, 1005, 5, 73, 0, 0, 1004, 1003, 1, 0, 0, 0, 1004, 1005, 1, 0, 0, 0, 1005, 1009,
		1, 0, 0, 0, 1006, 1010, 3, 92, 46, 0, 1007, 1010, 3, 84, 42, 0, 1008, 1010, 3, 88, 44, 0, 1009, 1006, 1, 0, 0, 0,
		1009, 1007, 1, 0, 0, 0, 1009, 1008, 1, 0, 0, 0, 1010, 91, 1, 0, 0, 0, 1011, 1012, 3, 488, 244, 0, 1012, 1014, 5,
		140, 0, 0, 1013, 1015, 5, 43, 0, 0, 1014, 1013, 1, 0, 0, 0, 1014, 1015, 1, 0, 0, 0, 1015, 1017, 1, 0, 0, 0, 1016,
		1018, 3, 126, 63, 0, 1017, 1016, 1, 0, 0, 0, 1017, 1018, 1, 0, 0, 0, 1018, 1019, 1, 0, 0, 0, 1019, 1020, 3, 512,
		256, 0, 1020, 1021, 5, 150, 0, 0, 1021, 93, 1, 0, 0, 0, 1022, 1046, 3, 56, 28, 0, 1023, 1046, 3, 374, 187, 0, 1024,
		1046, 3, 376, 188, 0, 1025, 1026, 5, 163, 0, 0, 1026, 1028, 5, 149, 0, 0, 1027, 1025, 1, 0, 0, 0, 1027, 1028, 1, 0,
		0, 0, 1028, 1029, 1, 0, 0, 0, 1029, 1046, 3, 86, 43, 0, 1030, 1031, 5, 163, 0, 0, 1031, 1033, 5, 149, 0, 0, 1032,
		1030, 1, 0, 0, 0, 1032, 1033, 1, 0, 0, 0, 1033, 1034, 1, 0, 0, 0, 1034, 1046, 3, 82, 41, 0, 1035, 1036, 5, 163, 0,
		0, 1036, 1038, 5, 149, 0, 0, 1037, 1035, 1, 0, 0, 0, 1037, 1038, 1, 0, 0, 0, 1038, 1040, 1, 0, 0, 0, 1039, 1041, 5,
		73, 0, 0, 1040, 1039, 1, 0, 0, 0, 1040, 1041, 1, 0, 0, 0, 1041, 1042, 1, 0, 0, 0, 1042, 1046, 3, 90, 45, 0, 1043,
		1046, 3, 74, 37, 0, 1044, 1046, 3, 226, 113, 0, 1045, 1022, 1, 0, 0, 0, 1045, 1023, 1, 0, 0, 0, 1045, 1024, 1, 0, 0,
		0, 1045, 1027, 1, 0, 0, 0, 1045, 1032, 1, 0, 0, 0, 1045, 1037, 1, 0, 0, 0, 1045, 1043, 1, 0, 0, 0, 1045, 1044, 1, 0,
		0, 0, 1046, 95, 1, 0, 0, 0, 1047, 1048, 5, 107, 0, 0, 1048, 1049, 3, 184, 92, 0, 1049, 97, 1, 0, 0, 0, 1050, 1056,
		3, 184, 92, 0, 1051, 1052, 5, 117, 0, 0, 1052, 1053, 3, 184, 92, 0, 1053, 1054, 5, 31, 0, 0, 1054, 1055, 3, 184, 92,
		0, 1055, 1057, 1, 0, 0, 0, 1056, 1051, 1, 0, 0, 0, 1056, 1057, 1, 0, 0, 0, 1057, 99, 1, 0, 0, 0, 1058, 1064, 3, 186,
		93, 0, 1059, 1060, 5, 117, 0, 0, 1060, 1061, 3, 184, 92, 0, 1061, 1062, 5, 31, 0, 0, 1062, 1063, 3, 186, 93, 0,
		1063, 1065, 1, 0, 0, 0, 1064, 1059, 1, 0, 0, 0, 1064, 1065, 1, 0, 0, 0, 1065, 1068, 1, 0, 0, 0, 1066, 1067, 5, 117,
		0, 0, 1067, 1069, 3, 184, 92, 0, 1068, 1066, 1, 0, 0, 0, 1068, 1069, 1, 0, 0, 0, 1069, 101, 1, 0, 0, 0, 1070, 1071,
		3, 488, 244, 0, 1071, 1073, 5, 140, 0, 0, 1072, 1074, 3, 126, 63, 0, 1073, 1072, 1, 0, 0, 0, 1073, 1074, 1, 0, 0, 0,
		1074, 1075, 1, 0, 0, 0, 1075, 1076, 3, 104, 52, 0, 1076, 1077, 5, 150, 0, 0, 1077, 103, 1, 0, 0, 0, 1078, 1079, 3,
		512, 256, 0, 1079, 1080, 5, 117, 0, 0, 1080, 1088, 3, 184, 92, 0, 1081, 1082, 5, 31, 0, 0, 1082, 1083, 3, 512, 256,
		0, 1083, 1084, 5, 117, 0, 0, 1084, 1085, 3, 184, 92, 0, 1085, 1087, 1, 0, 0, 0, 1086, 1081, 1, 0, 0, 0, 1087, 1090,
		1, 0, 0, 0, 1088, 1086, 1, 0, 0, 0, 1088, 1089, 1, 0, 0, 0, 1089, 1093, 1, 0, 0, 0, 1090, 1088, 1, 0, 0, 0, 1091,
		1092, 5, 31, 0, 0, 1092, 1094, 3, 184, 92, 0, 1093, 1091, 1, 0, 0, 0, 1093, 1094, 1, 0, 0, 0, 1094, 105, 1, 0, 0, 0,
		1095, 1096, 5, 24, 0, 0, 1096, 1097, 5, 163, 0, 0, 1097, 1098, 5, 64, 0, 0, 1098, 1099, 3, 318, 159, 0, 1099, 1103,
		5, 50, 0, 0, 1100, 1102, 3, 108, 54, 0, 1101, 1100, 1, 0, 0, 0, 1102, 1105, 1, 0, 0, 0, 1103, 1101, 1, 0, 0, 0,
		1103, 1104, 1, 0, 0, 0, 1104, 1106, 1, 0, 0, 0, 1105, 1103, 1, 0, 0, 0, 1106, 1107, 3, 50, 25, 0, 1107, 1109, 5, 33,
		0, 0, 1108, 1110, 5, 24, 0, 0, 1109, 1108, 1, 0, 0, 0, 1109, 1110, 1, 0, 0, 0, 1110, 1112, 1, 0, 0, 0, 1111, 1113,
		5, 163, 0, 0, 1112, 1111, 1, 0, 0, 0, 1112, 1113, 1, 0, 0, 0, 1113, 1114, 1, 0, 0, 0, 1114, 1115, 5, 150, 0, 0,
		1115, 107, 1, 0, 0, 0, 1116, 1120, 3, 502, 251, 0, 1117, 1120, 3, 46, 23, 0, 1118, 1120, 3, 236, 118, 0, 1119, 1116,
		1, 0, 0, 0, 1119, 1117, 1, 0, 0, 0, 1119, 1118, 1, 0, 0, 0, 1120, 109, 1, 0, 0, 0, 1121, 1124, 3, 50, 25, 0, 1122,
		1124, 3, 70, 35, 0, 1123, 1121, 1, 0, 0, 0, 1123, 1122, 1, 0, 0, 0, 1124, 111, 1, 0, 0, 0, 1125, 1128, 3, 454, 227,
		0, 1126, 1128, 3, 80, 40, 0, 1127, 1125, 1, 0, 0, 0, 1127, 1126, 1, 0, 0, 0, 1128, 113, 1, 0, 0, 0, 1129, 1130, 5,
		25, 0, 0, 1130, 1131, 3, 242, 121, 0, 1131, 1132, 5, 149, 0, 0, 1132, 1135, 3, 484, 242, 0, 1133, 1134, 5, 141, 0,
		0, 1134, 1136, 3, 98, 49, 0, 1135, 1133, 1, 0, 0, 0, 1135, 1136, 1, 0, 0, 0, 1136, 1137, 1, 0, 0, 0, 1137, 1138, 5,
		150, 0, 0, 1138, 115, 1, 0, 0, 0, 1139, 1140, 5, 13, 0, 0, 1140, 1141, 3, 256, 128, 0, 1141, 1142, 5, 64, 0, 0,
		1142, 1143, 3, 484, 242, 0, 1143, 117, 1, 0, 0, 0, 1144, 1149, 3, 460, 230, 0, 1145, 1149, 3, 394, 197, 0, 1146,
		1149, 3, 24, 12, 0, 1147, 1149, 3, 396, 198, 0, 1148, 1144, 1, 0, 0, 0, 1148, 1145, 1, 0, 0, 0, 1148, 1146, 1, 0, 0,
		0, 1148, 1147, 1, 0, 0, 0, 1149, 119, 1, 0, 0, 0, 1150, 1151, 5, 26, 0, 0, 1151, 1152, 5, 163, 0, 0, 1152, 1156, 5,
		50, 0, 0, 1153, 1155, 3, 122, 61, 0, 1154, 1153, 1, 0, 0, 0, 1155, 1158, 1, 0, 0, 0, 1156, 1154, 1, 0, 0, 0, 1156,
		1157, 1, 0, 0, 0, 1157, 1159, 1, 0, 0, 0, 1158, 1156, 1, 0, 0, 0, 1159, 1161, 5, 33, 0, 0, 1160, 1162, 5, 26, 0, 0,
		1161, 1160, 1, 0, 0, 0, 1161, 1162, 1, 0, 0, 0, 1162, 1163, 1, 0, 0, 0, 1163, 1164, 5, 163, 0, 0, 1164, 1165, 5,
		150, 0, 0, 1165, 121, 1, 0, 0, 0, 1166, 1170, 3, 302, 151, 0, 1167, 1170, 3, 502, 251, 0, 1168, 1170, 3, 124, 62, 0,
		1169, 1166, 1, 0, 0, 0, 1169, 1167, 1, 0, 0, 0, 1169, 1168, 1, 0, 0, 0, 1170, 123, 1, 0, 0, 0, 1171, 1172, 5, 26, 0,
		0, 1172, 1177, 3, 428, 214, 0, 1173, 1174, 5, 149, 0, 0, 1174, 1176, 3, 428, 214, 0, 1175, 1173, 1, 0, 0, 0, 1176,
		1179, 1, 0, 0, 0, 1177, 1175, 1, 0, 0, 0, 1177, 1178, 1, 0, 0, 0, 1178, 1180, 1, 0, 0, 0, 1179, 1177, 1, 0, 0, 0,
		1180, 1181, 5, 150, 0, 0, 1181, 125, 1, 0, 0, 0, 1182, 1189, 5, 103, 0, 0, 1183, 1184, 5, 82, 0, 0, 1184, 1186, 3,
		184, 92, 0, 1185, 1183, 1, 0, 0, 0, 1185, 1186, 1, 0, 0, 0, 1186, 1187, 1, 0, 0, 0, 1187, 1189, 5, 48, 0, 0, 1188,
		1182, 1, 0, 0, 0, 1188, 1185, 1, 0, 0, 0, 1189, 127, 1, 0, 0, 0, 1190, 1192, 3, 130, 65, 0, 1191, 1190, 1, 0, 0, 0,
		1192, 1193, 1, 0, 0, 0, 1193, 1191, 1, 0, 0, 0, 1193, 1194, 1, 0, 0, 0, 1194, 1195, 1, 0, 0, 0, 1195, 1196, 5, 0, 0,
		1, 1196, 129, 1, 0, 0, 0, 1197, 1199, 3, 122, 61, 0, 1198, 1197, 1, 0, 0, 0, 1199, 1202, 1, 0, 0, 0, 1200, 1198, 1,
		0, 0, 0, 1200, 1201, 1, 0, 0, 0, 1201, 1203, 1, 0, 0, 0, 1202, 1200, 1, 0, 0, 0, 1203, 1204, 3, 304, 152, 0, 1204,
		131, 1, 0, 0, 0, 1205, 1206, 7, 2, 0, 0, 1206, 133, 1, 0, 0, 0, 1207, 1208, 7, 3, 0, 0, 1208, 135, 1, 0, 0, 0, 1209,
		1210, 5, 29, 0, 0, 1210, 1211, 3, 240, 120, 0, 1211, 1212, 5, 8, 0, 0, 1212, 1213, 3, 184, 92, 0, 1213, 1214, 5,
		150, 0, 0, 1214, 137, 1, 0, 0, 0, 1215, 1218, 3, 484, 242, 0, 1216, 1218, 3, 392, 196, 0, 1217, 1215, 1, 0, 0, 0,
		1217, 1216, 1, 0, 0, 0, 1218, 139, 1, 0, 0, 0, 1219, 1220, 5, 143, 0, 0, 1220, 1221, 5, 142, 0, 0, 1221, 1222, 5,
		144, 0, 0, 1222, 141, 1, 0, 0, 0, 1223, 1224, 5, 110, 0, 0, 1224, 1225, 5, 143, 0, 0, 1225, 1226, 3, 318, 159, 0,
		1226, 1227, 5, 144, 0, 0, 1227, 143, 1, 0, 0, 0, 1228, 1229, 3, 68, 34, 0, 1229, 1230, 5, 139, 0, 0, 1230, 1232, 1,
		0, 0, 0, 1231, 1228, 1, 0, 0, 0, 1231, 1232, 1, 0, 0, 0, 1232, 1233, 1, 0, 0, 0, 1233, 1234, 3, 184, 92, 0, 1234,
		145, 1, 0, 0, 0, 1235, 1238, 3, 24, 12, 0, 1236, 1238, 3, 396, 198, 0, 1237, 1235, 1, 0, 0, 0, 1237, 1236, 1, 0, 0,
		0, 1238, 147, 1, 0, 0, 0, 1239, 1240, 3, 242, 121, 0, 1240, 1241, 5, 149, 0, 0, 1241, 1242, 3, 484, 242, 0, 1242,
		1243, 5, 150, 0, 0, 1243, 149, 1, 0, 0, 0, 1244, 1247, 3, 310, 155, 0, 1245, 1247, 3, 152, 76, 0, 1246, 1244, 1, 0,
		0, 0, 1246, 1245, 1, 0, 0, 0, 1247, 151, 1, 0, 0, 0, 1248, 1251, 3, 142, 71, 0, 1249, 1251, 3, 154, 77, 0, 1250,
		1248, 1, 0, 0, 0, 1250, 1249, 1, 0, 0, 0, 1251, 153, 1, 0, 0, 0, 1252, 1253, 5, 110, 0, 0, 1253, 1254, 3, 318, 159,
		0, 1254, 155, 1, 0, 0, 0, 1255, 1258, 3, 414, 207, 0, 1256, 1258, 3, 404, 202, 0, 1257, 1255, 1, 0, 0, 0, 1257,
		1256, 1, 0, 0, 0, 1258, 157, 1, 0, 0, 0, 1259, 1260, 5, 34, 0, 0, 1260, 1264, 3, 318, 159, 0, 1261, 1262, 5, 143, 0,
		0, 1262, 1263, 5, 163, 0, 0, 1263, 1265, 5, 144, 0, 0, 1264, 1261, 1, 0, 0, 0, 1264, 1265, 1, 0, 0, 0, 1265, 1270,
		1, 0, 0, 0, 1266, 1267, 5, 24, 0, 0, 1267, 1270, 3, 318, 159, 0, 1268, 1270, 5, 66, 0, 0, 1269, 1259, 1, 0, 0, 0,
		1269, 1266, 1, 0, 0, 0, 1269, 1268, 1, 0, 0, 0, 1270, 159, 1, 0, 0, 0, 1271, 1272, 7, 4, 0, 0, 1272, 161, 1, 0, 0,
		0, 1273, 1275, 3, 160, 80, 0, 1274, 1276, 5, 142, 0, 0, 1275, 1274, 1, 0, 0, 0, 1275, 1276, 1, 0, 0, 0, 1276, 163,
		1, 0, 0, 0, 1277, 1278, 5, 34, 0, 0, 1278, 1279, 5, 163, 0, 0, 1279, 1281, 5, 50, 0, 0, 1280, 1282, 3, 230, 115, 0,
		1281, 1280, 1, 0, 0, 0, 1281, 1282, 1, 0, 0, 0, 1282, 1284, 1, 0, 0, 0, 1283, 1285, 3, 354, 177, 0, 1284, 1283, 1,
		0, 0, 0, 1284, 1285, 1, 0, 0, 0, 1285, 1289, 1, 0, 0, 0, 1286, 1288, 3, 166, 83, 0, 1287, 1286, 1, 0, 0, 0, 1288,
		1291, 1, 0, 0, 0, 1289, 1287, 1, 0, 0, 0, 1289, 1290, 1, 0, 0, 0, 1290, 1299, 1, 0, 0, 0, 1291, 1289, 1, 0, 0, 0,
		1292, 1296, 5, 17, 0, 0, 1293, 1295, 3, 174, 87, 0, 1294, 1293, 1, 0, 0, 0, 1295, 1298, 1, 0, 0, 0, 1296, 1294, 1,
		0, 0, 0, 1296, 1297, 1, 0, 0, 0, 1297, 1300, 1, 0, 0, 0, 1298, 1296, 1, 0, 0, 0, 1299, 1292, 1, 0, 0, 0, 1299, 1300,
		1, 0, 0, 0, 1300, 1301, 1, 0, 0, 0, 1301, 1303, 5, 33, 0, 0, 1302, 1304, 5, 34, 0, 0, 1303, 1302, 1, 0, 0, 0, 1303,
		1304, 1, 0, 0, 0, 1304, 1306, 1, 0, 0, 0, 1305, 1307, 5, 163, 0, 0, 1306, 1305, 1, 0, 0, 0, 1306, 1307, 1, 0, 0, 0,
		1307, 1308, 1, 0, 0, 0, 1308, 1309, 5, 150, 0, 0, 1309, 165, 1, 0, 0, 0, 1310, 1331, 3, 472, 236, 0, 1311, 1331, 3,
		470, 235, 0, 1312, 1331, 3, 476, 238, 0, 1313, 1331, 3, 330, 165, 0, 1314, 1331, 3, 326, 163, 0, 1315, 1331, 3, 334,
		167, 0, 1316, 1331, 3, 494, 247, 0, 1317, 1331, 3, 482, 241, 0, 1318, 1331, 3, 314, 157, 0, 1319, 1331, 3, 114, 57,
		0, 1320, 1331, 3, 448, 224, 0, 1321, 1331, 3, 508, 254, 0, 1322, 1331, 3, 198, 99, 0, 1323, 1331, 3, 12, 6, 0, 1324,
		1331, 3, 42, 21, 0, 1325, 1331, 3, 46, 23, 0, 1326, 1331, 3, 136, 68, 0, 1327, 1331, 3, 502, 251, 0, 1328, 1331, 3,
		238, 119, 0, 1329, 1331, 3, 236, 118, 0, 1330, 1310, 1, 0, 0, 0, 1330, 1311, 1, 0, 0, 0, 1330, 1312, 1, 0, 0, 0,
		1330, 1313, 1, 0, 0, 0, 1330, 1314, 1, 0, 0, 0, 1330, 1315, 1, 0, 0, 0, 1330, 1316, 1, 0, 0, 0, 1330, 1317, 1, 0, 0,
		0, 1330, 1318, 1, 0, 0, 0, 1330, 1319, 1, 0, 0, 0, 1330, 1320, 1, 0, 0, 0, 1330, 1321, 1, 0, 0, 0, 1330, 1322, 1, 0,
		0, 0, 1330, 1323, 1, 0, 0, 0, 1330, 1324, 1, 0, 0, 0, 1330, 1325, 1, 0, 0, 0, 1330, 1326, 1, 0, 0, 0, 1330, 1327, 1,
		0, 0, 0, 1330, 1328, 1, 0, 0, 0, 1330, 1329, 1, 0, 0, 0, 1331, 167, 1, 0, 0, 0, 1332, 1334, 3, 176, 88, 0, 1333,
		1335, 3, 452, 226, 0, 1334, 1333, 1, 0, 0, 0, 1334, 1335, 1, 0, 0, 0, 1335, 169, 1, 0, 0, 0, 1336, 1341, 3, 168, 84,
		0, 1337, 1338, 5, 151, 0, 0, 1338, 1340, 3, 168, 84, 0, 1339, 1337, 1, 0, 0, 0, 1340, 1343, 1, 0, 0, 0, 1341, 1339,
		1, 0, 0, 0, 1341, 1342, 1, 0, 0, 0, 1342, 1347, 1, 0, 0, 0, 1343, 1341, 1, 0, 0, 0, 1344, 1347, 5, 68, 0, 0, 1345,
		1347, 5, 10, 0, 0, 1346, 1336, 1, 0, 0, 0, 1346, 1344, 1, 0, 0, 0, 1346, 1345, 1, 0, 0, 0, 1347, 171, 1, 0, 0, 0,
		1348, 1349, 3, 170, 85, 0, 1349, 1350, 5, 149, 0, 0, 1350, 1351, 3, 160, 80, 0, 1351, 173, 1, 0, 0, 0, 1352, 1357,
		3, 82, 41, 0, 1353, 1357, 3, 86, 43, 0, 1354, 1357, 3, 374, 187, 0, 1355, 1357, 3, 376, 188, 0, 1356, 1352, 1, 0, 0,
		0, 1356, 1353, 1, 0, 0, 0, 1356, 1354, 1, 0, 0, 0, 1356, 1355, 1, 0, 0, 0, 1357, 175, 1, 0, 0, 0, 1358, 1359, 7, 0,
		0, 0, 1359, 177, 1, 0, 0, 0, 1360, 1361, 7, 5, 0, 0, 1361, 179, 1, 0, 0, 0, 1362, 1363, 5, 143, 0, 0, 1363, 1368, 3,
		178, 89, 0, 1364, 1365, 5, 151, 0, 0, 1365, 1367, 3, 178, 89, 0, 1366, 1364, 1, 0, 0, 0, 1367, 1370, 1, 0, 0, 0,
		1368, 1366, 1, 0, 0, 0, 1368, 1369, 1, 0, 0, 0, 1369, 1371, 1, 0, 0, 0, 1370, 1368, 1, 0, 0, 0, 1371, 1372, 5, 144,
		0, 0, 1372, 181, 1, 0, 0, 0, 1373, 1374, 5, 163, 0, 0, 1374, 1376, 5, 149, 0, 0, 1375, 1373, 1, 0, 0, 0, 1375, 1376,
		1, 0, 0, 0, 1376, 1377, 1, 0, 0, 0, 1377, 1379, 5, 35, 0, 0, 1378, 1380, 5, 163, 0, 0, 1379, 1378, 1, 0, 0, 0, 1379,
		1380, 1, 0, 0, 0, 1380, 1383, 1, 0, 0, 0, 1381, 1382, 5, 117, 0, 0, 1382, 1384, 3, 184, 92, 0, 1383, 1381, 1, 0, 0,
		0, 1383, 1384, 1, 0, 0, 0, 1384, 1385, 1, 0, 0, 0, 1385, 1386, 5, 150, 0, 0, 1386, 183, 1, 0, 0, 0, 1387, 1388, 6,
		92, -1, 0, 1388, 1394, 3, 358, 179, 0, 1389, 1390, 5, 138, 0, 0, 1390, 1394, 3, 184, 92, 8, 1391, 1392, 7, 6, 0, 0,
		1392, 1394, 3, 184, 92, 7, 1393, 1387, 1, 0, 0, 0, 1393, 1389, 1, 0, 0, 0, 1393, 1391, 1, 0, 0, 0, 1394, 1415, 1, 0,
		0, 0, 1395, 1396, 10, 6, 0, 0, 1396, 1397, 5, 136, 0, 0, 1397, 1414, 3, 184, 92, 6, 1398, 1399, 10, 5, 0, 0, 1399,
		1400, 7, 7, 0, 0, 1400, 1414, 3, 184, 92, 6, 1401, 1402, 10, 4, 0, 0, 1402, 1403, 7, 8, 0, 0, 1403, 1414, 3, 184,
		92, 5, 1404, 1405, 10, 3, 0, 0, 1405, 1406, 7, 9, 0, 0, 1406, 1414, 3, 184, 92, 4, 1407, 1408, 10, 2, 0, 0, 1408,
		1409, 7, 10, 0, 0, 1409, 1414, 3, 184, 92, 3, 1410, 1411, 10, 1, 0, 0, 1411, 1412, 7, 11, 0, 0, 1412, 1414, 3, 184,
		92, 2, 1413, 1395, 1, 0, 0, 0, 1413, 1398, 1, 0, 0, 0, 1413, 1401, 1, 0, 0, 0, 1413, 1404, 1, 0, 0, 0, 1413, 1407,
		1, 0, 0, 0, 1413, 1410, 1, 0, 0, 0, 1414, 1417, 1, 0, 0, 0, 1415, 1413, 1, 0, 0, 0, 1415, 1416, 1, 0, 0, 0, 1416,
		185, 1, 0, 0, 0, 1417, 1415, 1, 0, 0, 0, 1418, 1421, 3, 184, 92, 0, 1419, 1421, 5, 105, 0, 0, 1420, 1418, 1, 0, 0,
		0, 1420, 1419, 1, 0, 0, 0, 1421, 187, 1, 0, 0, 0, 1422, 1426, 3, 190, 95, 0, 1423, 1426, 3, 192, 96, 0, 1424, 1426,
		3, 194, 97, 0, 1425, 1422, 1, 0, 0, 0, 1425, 1423, 1, 0, 0, 0, 1425, 1424, 1, 0, 0, 0, 1426, 189, 1, 0, 0, 0, 1427,
		1428, 5, 147, 0, 0, 1428, 1429, 5, 25, 0, 0, 1429, 1430, 3, 196, 98, 0, 1430, 1431, 5, 149, 0, 0, 1431, 1432, 3,
		296, 148, 0, 1432, 1433, 5, 148, 0, 0, 1433, 191, 1, 0, 0, 0, 1434, 1435, 5, 147, 0, 0, 1435, 1436, 5, 93, 0, 0,
		1436, 1437, 3, 196, 98, 0, 1437, 1438, 5, 149, 0, 0, 1438, 1439, 3, 296, 148, 0, 1439, 1440, 5, 148, 0, 0, 1440,
		193, 1, 0, 0, 0, 1441, 1442, 5, 147, 0, 0, 1442, 1443, 5, 109, 0, 0, 1443, 1444, 3, 196, 98, 0, 1444, 1445, 5, 149,
		0, 0, 1445, 1446, 3, 296, 148, 0, 1446, 1447, 5, 148, 0, 0, 1447, 195, 1, 0, 0, 0, 1448, 1452, 3, 336, 168, 0, 1449,
		1452, 3, 0, 0, 0, 1450, 1452, 3, 410, 205, 0, 1451, 1448, 1, 0, 0, 0, 1451, 1449, 1, 0, 0, 0, 1451, 1450, 1, 0, 0,
		0, 1452, 197, 1, 0, 0, 0, 1453, 1454, 5, 36, 0, 0, 1454, 1455, 3, 242, 121, 0, 1455, 1456, 5, 149, 0, 0, 1456, 1458,
		3, 484, 242, 0, 1457, 1459, 3, 202, 101, 0, 1458, 1457, 1, 0, 0, 0, 1458, 1459, 1, 0, 0, 0, 1459, 1460, 1, 0, 0, 0,
		1460, 1461, 5, 150, 0, 0, 1461, 199, 1, 0, 0, 0, 1462, 1463, 5, 36, 0, 0, 1463, 1464, 5, 64, 0, 0, 1464, 1465, 3,
		254, 127, 0, 1465, 201, 1, 0, 0, 0, 1466, 1467, 5, 66, 0, 0, 1467, 1469, 3, 184, 92, 0, 1468, 1466, 1, 0, 0, 0,
		1468, 1469, 1, 0, 0, 0, 1469, 1470, 1, 0, 0, 0, 1470, 1471, 5, 50, 0, 0, 1471, 1472, 3, 184, 92, 0, 1472, 203, 1, 0,
		0, 0, 1473, 1474, 5, 36, 0, 0, 1474, 1475, 5, 64, 0, 0, 1475, 1476, 3, 318, 159, 0, 1476, 205, 1, 0, 0, 0, 1477,
		1478, 5, 79, 0, 0, 1478, 1479, 5, 142, 0, 0, 1479, 1480, 5, 153, 0, 0, 1480, 1481, 5, 142, 0, 0, 1481, 207, 1, 0, 0,
		0, 1482, 1483, 3, 394, 197, 0, 1483, 209, 1, 0, 0, 0, 1484, 1485, 5, 163, 0, 0, 1485, 1486, 5, 149, 0, 0, 1486,
		1487, 5, 37, 0, 0, 1487, 1488, 3, 340, 170, 0, 1488, 1496, 5, 41, 0, 0, 1489, 1491, 3, 52, 26, 0, 1490, 1489, 1, 0,
		0, 0, 1491, 1494, 1, 0, 0, 0, 1492, 1490, 1, 0, 0, 0, 1492, 1493, 1, 0, 0, 0, 1493, 1495, 1, 0, 0, 0, 1494, 1492, 1,
		0, 0, 0, 1495, 1497, 5, 17, 0, 0, 1496, 1492, 1, 0, 0, 0, 1496, 1497, 1, 0, 0, 0, 1497, 1501, 1, 0, 0, 0, 1498,
		1500, 3, 94, 47, 0, 1499, 1498, 1, 0, 0, 0, 1500, 1503, 1, 0, 0, 0, 1501, 1499, 1, 0, 0, 0, 1501, 1502, 1, 0, 0, 0,
		1502, 1504, 1, 0, 0, 0, 1503, 1501, 1, 0, 0, 0, 1504, 1505, 5, 33, 0, 0, 1505, 1507, 5, 41, 0, 0, 1506, 1508, 5,
		163, 0, 0, 1507, 1506, 1, 0, 0, 0, 1507, 1508, 1, 0, 0, 0, 1508, 1509, 1, 0, 0, 0, 1509, 1510, 5, 150, 0, 0, 1510,
		211, 1, 0, 0, 0, 1511, 1513, 3, 318, 159, 0, 1512, 1514, 3, 452, 226, 0, 1513, 1512, 1, 0, 0, 0, 1513, 1514, 1, 0,
		0, 0, 1514, 213, 1, 0, 0, 0, 1515, 1516, 3, 278, 139, 0, 1516, 215, 1, 0, 0, 0, 1517, 1527, 3, 212, 106, 0, 1518,
		1521, 3, 318, 159, 0, 1519, 1521, 3, 318, 159, 0, 1520, 1518, 1, 0, 0, 0, 1520, 1519, 1, 0, 0, 0, 1521, 1522, 1, 0,
		0, 0, 1522, 1523, 5, 143, 0, 0, 1523, 1524, 3, 212, 106, 0, 1524, 1525, 5, 144, 0, 0, 1525, 1527, 1, 0, 0, 0, 1526,
		1517, 1, 0, 0, 0, 1526, 1520, 1, 0, 0, 0, 1527, 217, 1, 0, 0, 0, 1528, 1529, 5, 104, 0, 0, 1529, 1530, 5, 163, 0, 0,
		1530, 1531, 5, 50, 0, 0, 1531, 1532, 3, 496, 248, 0, 1532, 1533, 5, 150, 0, 0, 1533, 219, 1, 0, 0, 0, 1534, 1535, 3,
		318, 159, 0, 1535, 1536, 3, 232, 116, 0, 1536, 1537, 3, 338, 169, 0, 1537, 221, 1, 0, 0, 0, 1538, 1540, 7, 12, 0, 0,
		1539, 1538, 1, 0, 0, 0, 1539, 1540, 1, 0, 0, 0, 1540, 1541, 1, 0, 0, 0, 1541, 1542, 5, 39, 0, 0, 1542, 1550, 3, 132,
		66, 0, 1543, 1545, 5, 71, 0, 0, 1544, 1543, 1, 0, 0, 0, 1544, 1545, 1, 0, 0, 0, 1545, 1546, 1, 0, 0, 0, 1546, 1547,
		5, 143, 0, 0, 1547, 1548, 3, 214, 107, 0, 1548, 1549, 5, 144, 0, 0, 1549, 1551, 1, 0, 0, 0, 1550, 1544, 1, 0, 0, 0,
		1550, 1551, 1, 0, 0, 0, 1551, 1552, 1, 0, 0, 0, 1552, 1555, 5, 86, 0, 0, 1553, 1554, 5, 163, 0, 0, 1554, 1556, 5,
		64, 0, 0, 1555, 1553, 1, 0, 0, 0, 1555, 1556, 1, 0, 0, 0, 1556, 1557, 1, 0, 0, 0, 1557, 1558, 3, 318, 159, 0, 1558,
		223, 1, 0, 0, 0, 1559, 1563, 3, 138, 69, 0, 1560, 1563, 3, 184, 92, 0, 1561, 1563, 5, 163, 0, 0, 1562, 1559, 1, 0,
		0, 0, 1562, 1560, 1, 0, 0, 0, 1562, 1561, 1, 0, 0, 0, 1563, 225, 1, 0, 0, 0, 1564, 1568, 3, 210, 105, 0, 1565, 1568,
		3, 244, 122, 0, 1566, 1568, 3, 60, 30, 0, 1567, 1564, 1, 0, 0, 0, 1567, 1565, 1, 0, 0, 0, 1567, 1566, 1, 0, 0, 0,
		1568, 227, 1, 0, 0, 0, 1569, 1571, 3, 52, 26, 0, 1570, 1569, 1, 0, 0, 0, 1571, 1574, 1, 0, 0, 0, 1572, 1570, 1, 0,
		0, 0, 1572, 1573, 1, 0, 0, 0, 1573, 1575, 1, 0, 0, 0, 1574, 1572, 1, 0, 0, 0, 1575, 1577, 5, 17, 0, 0, 1576, 1572,
		1, 0, 0, 0, 1576, 1577, 1, 0, 0, 0, 1577, 1581, 1, 0, 0, 0, 1578, 1580, 3, 94, 47, 0, 1579, 1578, 1, 0, 0, 0, 1580,
		1583, 1, 0, 0, 0, 1581, 1579, 1, 0, 0, 0, 1581, 1582, 1, 0, 0, 0, 1582, 1589, 1, 0, 0, 0, 1583, 1581, 1, 0, 0, 0,
		1584, 1586, 5, 33, 0, 0, 1585, 1587, 5, 163, 0, 0, 1586, 1585, 1, 0, 0, 0, 1586, 1587, 1, 0, 0, 0, 1587, 1588, 1, 0,
		0, 0, 1588, 1590, 5, 150, 0, 0, 1589, 1584, 1, 0, 0, 0, 1589, 1590, 1, 0, 0, 0, 1590, 229, 1, 0, 0, 0, 1591, 1592,
		5, 42, 0, 0, 1592, 1593, 5, 143, 0, 0, 1593, 1598, 3, 272, 136, 0, 1594, 1595, 5, 150, 0, 0, 1595, 1597, 3, 272,
		136, 0, 1596, 1594, 1, 0, 0, 0, 1597, 1600, 1, 0, 0, 0, 1598, 1596, 1, 0, 0, 0, 1598, 1599, 1, 0, 0, 0, 1599, 1602,
		1, 0, 0, 0, 1600, 1598, 1, 0, 0, 0, 1601, 1603, 5, 150, 0, 0, 1602, 1601, 1, 0, 0, 0, 1602, 1603, 1, 0, 0, 0, 1603,
		1604, 1, 0, 0, 0, 1604, 1605, 5, 144, 0, 0, 1605, 1606, 5, 150, 0, 0, 1606, 231, 1, 0, 0, 0, 1607, 1608, 5, 42, 0,
		0, 1608, 1609, 5, 56, 0, 0, 1609, 1610, 5, 143, 0, 0, 1610, 1611, 3, 40, 20, 0, 1611, 1612, 5, 144, 0, 0, 1612, 233,
		1, 0, 0, 0, 1613, 1616, 3, 318, 159, 0, 1614, 1616, 5, 161, 0, 0, 1615, 1613, 1, 0, 0, 0, 1615, 1614, 1, 0, 0, 0,
		1616, 235, 1, 0, 0, 0, 1617, 1618, 5, 44, 0, 0, 1618, 1619, 5, 163, 0, 0, 1619, 1620, 5, 149, 0, 0, 1620, 1621, 3,
		318, 159, 0, 1621, 1622, 5, 143, 0, 0, 1622, 1627, 3, 234, 117, 0, 1623, 1624, 5, 151, 0, 0, 1624, 1626, 3, 234,
		117, 0, 1625, 1623, 1, 0, 0, 0, 1626, 1629, 1, 0, 0, 0, 1627, 1625, 1, 0, 0, 0, 1627, 1628, 1, 0, 0, 0, 1628, 1630,
		1, 0, 0, 0, 1629, 1627, 1, 0, 0, 0, 1630, 1631, 5, 144, 0, 0, 1631, 1632, 5, 150, 0, 0, 1632, 237, 1, 0, 0, 0, 1633,
		1634, 5, 44, 0, 0, 1634, 1635, 5, 163, 0, 0, 1635, 1636, 5, 50, 0, 0, 1636, 1637, 5, 143, 0, 0, 1637, 1642, 3, 162,
		81, 0, 1638, 1639, 5, 151, 0, 0, 1639, 1641, 3, 162, 81, 0, 1640, 1638, 1, 0, 0, 0, 1641, 1644, 1, 0, 0, 0, 1642,
		1640, 1, 0, 0, 0, 1642, 1643, 1, 0, 0, 0, 1643, 1645, 1, 0, 0, 0, 1644, 1642, 1, 0, 0, 0, 1645, 1646, 5, 144, 0, 0,
		1646, 1647, 5, 150, 0, 0, 1647, 239, 1, 0, 0, 0, 1648, 1649, 3, 450, 225, 0, 1649, 1650, 5, 149, 0, 0, 1650, 1651,
		3, 318, 159, 0, 1651, 241, 1, 0, 0, 0, 1652, 1657, 5, 163, 0, 0, 1653, 1654, 5, 151, 0, 0, 1654, 1656, 5, 163, 0, 0,
		1655, 1653, 1, 0, 0, 0, 1656, 1659, 1, 0, 0, 0, 1657, 1655, 1, 0, 0, 0, 1657, 1658, 1, 0, 0, 0, 1658, 243, 1, 0, 0,
		0, 1659, 1657, 1, 0, 0, 0, 1660, 1661, 5, 163, 0, 0, 1661, 1662, 5, 149, 0, 0, 1662, 1665, 5, 45, 0, 0, 1663, 1664,
		5, 163, 0, 0, 1664, 1666, 5, 149, 0, 0, 1665, 1663, 1, 0, 0, 0, 1665, 1666, 1, 0, 0, 0, 1666, 1667, 1, 0, 0, 0,
		1667, 1668, 3, 184, 92, 0, 1668, 1669, 5, 41, 0, 0, 1669, 1681, 3, 228, 114, 0, 1670, 1673, 5, 32, 0, 0, 1671, 1672,
		5, 163, 0, 0, 1672, 1674, 5, 149, 0, 0, 1673, 1671, 1, 0, 0, 0, 1673, 1674, 1, 0, 0, 0, 1674, 1675, 1, 0, 0, 0,
		1675, 1676, 3, 184, 92, 0, 1676, 1677, 5, 41, 0, 0, 1677, 1678, 3, 228, 114, 0, 1678, 1680, 1, 0, 0, 0, 1679, 1670,
		1, 0, 0, 0, 1680, 1683, 1, 0, 0, 0, 1681, 1679, 1, 0, 0, 0, 1681, 1682, 1, 0, 0, 0, 1682, 1691, 1, 0, 0, 0, 1683,
		1681, 1, 0, 0, 0, 1684, 1687, 5, 31, 0, 0, 1685, 1686, 5, 163, 0, 0, 1686, 1688, 5, 149, 0, 0, 1687, 1685, 1, 0, 0,
		0, 1687, 1688, 1, 0, 0, 0, 1688, 1689, 1, 0, 0, 0, 1689, 1690, 5, 41, 0, 0, 1690, 1692, 3, 228, 114, 0, 1691, 1684,
		1, 0, 0, 0, 1691, 1692, 1, 0, 0, 0, 1692, 1693, 1, 0, 0, 0, 1693, 1694, 5, 33, 0, 0, 1694, 1696, 5, 41, 0, 0, 1695,
		1697, 5, 163, 0, 0, 1696, 1695, 1, 0, 0, 0, 1696, 1697, 1, 0, 0, 0, 1697, 1698, 1, 0, 0, 0, 1698, 1699, 5, 150, 0,
		0, 1699, 245, 1, 0, 0, 0, 1700, 1701, 5, 163, 0, 0, 1701, 1703, 5, 149, 0, 0, 1702, 1700, 1, 0, 0, 0, 1702, 1703, 1,
		0, 0, 0, 1703, 1704, 1, 0, 0, 0, 1704, 1705, 5, 45, 0, 0, 1705, 1706, 3, 184, 92, 0, 1706, 1710, 5, 101, 0, 0, 1707,
		1709, 3, 444, 222, 0, 1708, 1707, 1, 0, 0, 0, 1709, 1712, 1, 0, 0, 0, 1710, 1708, 1, 0, 0, 0, 1710, 1711, 1, 0, 0,
		0, 1711, 1724, 1, 0, 0, 0, 1712, 1710, 1, 0, 0, 0, 1713, 1714, 5, 32, 0, 0, 1714, 1715, 3, 184, 92, 0, 1715, 1719,
		5, 101, 0, 0, 1716, 1718, 3, 444, 222, 0, 1717, 1716, 1, 0, 0, 0, 1718, 1721, 1, 0, 0, 0, 1719, 1717, 1, 0, 0, 0,
		1719, 1720, 1, 0, 0, 0, 1720, 1723, 1, 0, 0, 0, 1721, 1719, 1, 0, 0, 0, 1722, 1713, 1, 0, 0, 0, 1723, 1726, 1, 0, 0,
		0, 1724, 1722, 1, 0, 0, 0, 1724, 1725, 1, 0, 0, 0, 1725, 1734, 1, 0, 0, 0, 1726, 1724, 1, 0, 0, 0, 1727, 1731, 5,
		31, 0, 0, 1728, 1730, 3, 444, 222, 0, 1729, 1728, 1, 0, 0, 0, 1730, 1733, 1, 0, 0, 0, 1731, 1729, 1, 0, 0, 0, 1731,
		1732, 1, 0, 0, 0, 1732, 1735, 1, 0, 0, 0, 1733, 1731, 1, 0, 0, 0, 1734, 1727, 1, 0, 0, 0, 1734, 1735, 1, 0, 0, 0,
		1735, 1736, 1, 0, 0, 0, 1736, 1737, 5, 33, 0, 0, 1737, 1739, 5, 45, 0, 0, 1738, 1740, 5, 163, 0, 0, 1739, 1738, 1,
		0, 0, 0, 1739, 1740, 1, 0, 0, 0, 1740, 1741, 1, 0, 0, 0, 1741, 1742, 5, 150, 0, 0, 1742, 247, 1, 0, 0, 0, 1743,
		1746, 3, 484, 242, 0, 1744, 1746, 3, 500, 250, 0, 1745, 1743, 1, 0, 0, 0, 1745, 1744, 1, 0, 0, 0, 1746, 249, 1, 0,
		0, 0, 1747, 1748, 5, 104, 0, 0, 1748, 1749, 5, 163, 0, 0, 1749, 1750, 5, 150, 0, 0, 1750, 251, 1, 0, 0, 0, 1751,
		1761, 3, 362, 181, 0, 1752, 1761, 3, 418, 209, 0, 1753, 1761, 3, 140, 70, 0, 1754, 1761, 3, 264, 132, 0, 1755, 1761,
		3, 346, 173, 0, 1756, 1761, 3, 206, 103, 0, 1757, 1761, 3, 26, 13, 0, 1758, 1761, 3, 2, 1, 0, 1759, 1761, 3, 200,
		100, 0, 1760, 1751, 1, 0, 0, 0, 1760, 1752, 1, 0, 0, 0, 1760, 1753, 1, 0, 0, 0, 1760, 1754, 1, 0, 0, 0, 1760, 1755,
		1, 0, 0, 0, 1760, 1756, 1, 0, 0, 0, 1760, 1757, 1, 0, 0, 0, 1760, 1758, 1, 0, 0, 0, 1760, 1759, 1, 0, 0, 0, 1761,
		253, 1, 0, 0, 0, 1762, 1765, 3, 318, 159, 0, 1763, 1765, 3, 500, 250, 0, 1764, 1762, 1, 0, 0, 0, 1764, 1763, 1, 0,
		0, 0, 1765, 255, 1, 0, 0, 0, 1766, 1767, 5, 143, 0, 0, 1767, 1772, 3, 138, 69, 0, 1768, 1769, 5, 151, 0, 0, 1769,
		1771, 3, 138, 69, 0, 1770, 1768, 1, 0, 0, 0, 1771, 1774, 1, 0, 0, 0, 1772, 1770, 1, 0, 0, 0, 1772, 1773, 1, 0, 0, 0,
		1773, 1775, 1, 0, 0, 0, 1774, 1772, 1, 0, 0, 0, 1775, 1776, 5, 144, 0, 0, 1776, 257, 1, 0, 0, 0, 1777, 1778, 3, 318,
		159, 0, 1778, 1779, 5, 79, 0, 0, 1779, 1780, 5, 142, 0, 0, 1780, 259, 1, 0, 0, 0, 1781, 1783, 5, 23, 0, 0, 1782,
		1781, 1, 0, 0, 0, 1782, 1783, 1, 0, 0, 0, 1783, 1784, 1, 0, 0, 0, 1784, 1795, 3, 318, 159, 0, 1785, 1786, 5, 34, 0,
		0, 1786, 1790, 3, 318, 159, 0, 1787, 1788, 5, 143, 0, 0, 1788, 1789, 5, 163, 0, 0, 1789, 1791, 5, 144, 0, 0, 1790,
		1787, 1, 0, 0, 0, 1790, 1791, 1, 0, 0, 0, 1791, 1795, 1, 0, 0, 0, 1792, 1793, 5, 24, 0, 0, 1793, 1795, 3, 318, 159,
		0, 1794, 1782, 1, 0, 0, 0, 1794, 1785, 1, 0, 0, 0, 1794, 1792, 1, 0, 0, 0, 1795, 261, 1, 0, 0, 0, 1796, 1801, 5,
		163, 0, 0, 1797, 1798, 5, 151, 0, 0, 1798, 1800, 5, 163, 0, 0, 1799, 1797, 1, 0, 0, 0, 1800, 1803, 1, 0, 0, 0, 1801,
		1799, 1, 0, 0, 0, 1801, 1802, 1, 0, 0, 0, 1802, 1807, 1, 0, 0, 0, 1803, 1801, 1, 0, 0, 0, 1804, 1807, 5, 68, 0, 0,
		1805, 1807, 5, 10, 0, 0, 1806, 1796, 1, 0, 0, 0, 1806, 1804, 1, 0, 0, 0, 1806, 1805, 1, 0, 0, 0, 1807, 263, 1, 0, 0,
		0, 1808, 1809, 5, 79, 0, 0, 1809, 1810, 5, 142, 0, 0, 1810, 265, 1, 0, 0, 0, 1811, 1812, 3, 394, 197, 0, 1812, 267,
		1, 0, 0, 0, 1813, 1815, 5, 25, 0, 0, 1814, 1813, 1, 0, 0, 0, 1814, 1815, 1, 0, 0, 0, 1815, 1816, 1, 0, 0, 0, 1816,
		1817, 3, 242, 121, 0, 1817, 1819, 5, 149, 0, 0, 1818, 1820, 5, 47, 0, 0, 1819, 1818, 1, 0, 0, 0, 1819, 1820, 1, 0,
		0, 0, 1820, 1821, 1, 0, 0, 0, 1821, 1824, 3, 484, 242, 0, 1822, 1823, 5, 141, 0, 0, 1823, 1825, 3, 184, 92, 0, 1824,
		1822, 1, 0, 0, 0, 1824, 1825, 1, 0, 0, 0, 1825, 269, 1, 0, 0, 0, 1826, 1833, 3, 268, 134, 0, 1827, 1833, 3, 298,
		149, 0, 1828, 1833, 3, 274, 137, 0, 1829, 1833, 3, 294, 147, 0, 1830, 1833, 3, 288, 144, 0, 1831, 1833, 3, 280, 140,
		0, 1832, 1826, 1, 0, 0, 0, 1832, 1827, 1, 0, 0, 0, 1832, 1828, 1, 0, 0, 0, 1832, 1829, 1, 0, 0, 0, 1832, 1830, 1, 0,
		0, 0, 1832, 1831, 1, 0, 0, 0, 1833, 271, 1, 0, 0, 0, 1834, 1835, 3, 270, 135, 0, 1835, 273, 1, 0, 0, 0, 1836, 1837,
		5, 36, 0, 0, 1837, 1838, 3, 242, 121, 0, 1838, 1839, 5, 149, 0, 0, 1839, 1840, 3, 484, 242, 0, 1840, 275, 1, 0, 0,
		0, 1841, 1843, 7, 12, 0, 0, 1842, 1841, 1, 0, 0, 0, 1842, 1843, 1, 0, 0, 0, 1843, 1844, 1, 0, 0, 0, 1844, 1845, 5,
		39, 0, 0, 1845, 1853, 3, 132, 66, 0, 1846, 1848, 5, 71, 0, 0, 1847, 1846, 1, 0, 0, 0, 1847, 1848, 1, 0, 0, 0, 1848,
		1849, 1, 0, 0, 0, 1849, 1850, 5, 143, 0, 0, 1850, 1851, 3, 214, 107, 0, 1851, 1852, 5, 144, 0, 0, 1852, 1854, 1, 0,
		0, 0, 1853, 1847, 1, 0, 0, 0, 1853, 1854, 1, 0, 0, 0, 1854, 1855, 1, 0, 0, 0, 1855, 1856, 5, 86, 0, 0, 1856, 1857,
		3, 318, 159, 0, 1857, 277, 1, 0, 0, 0, 1858, 1863, 3, 272, 136, 0, 1859, 1860, 5, 150, 0, 0, 1860, 1862, 3, 272,
		136, 0, 1861, 1859, 1, 0, 0, 0, 1862, 1865, 1, 0, 0, 0, 1863, 1861, 1, 0, 0, 0, 1863, 1864, 1, 0, 0, 0, 1864, 1867,
		1, 0, 0, 0, 1865, 1863, 1, 0, 0, 0, 1866, 1868, 5, 150, 0, 0, 1867, 1866, 1, 0, 0, 0, 1867, 1868, 1, 0, 0, 0, 1868,
		279, 1, 0, 0, 0, 1869, 1870, 5, 70, 0, 0, 1870, 1871, 5, 163, 0, 0, 1871, 1872, 5, 50, 0, 0, 1872, 1873, 5, 59, 0,
		0, 1873, 1874, 3, 318, 159, 0, 1874, 1875, 3, 282, 141, 0, 1875, 281, 1, 0, 0, 0, 1876, 1883, 3, 232, 116, 0, 1877,
		1878, 5, 42, 0, 0, 1878, 1879, 5, 56, 0, 0, 1879, 1880, 5, 143, 0, 0, 1880, 1881, 7, 13, 0, 0, 1881, 1883, 5, 144,
		0, 0, 1882, 1876, 1, 0, 0, 0, 1882, 1877, 1, 0, 0, 0, 1883, 283, 1, 0, 0, 0, 1884, 1885, 5, 75, 0, 0, 1885, 1893, 5,
		163, 0, 0, 1886, 1888, 5, 71, 0, 0, 1887, 1886, 1, 0, 0, 0, 1887, 1888, 1, 0, 0, 0, 1888, 1889, 1, 0, 0, 0, 1889,
		1890, 5, 143, 0, 0, 1890, 1891, 3, 214, 107, 0, 1891, 1892, 5, 144, 0, 0, 1892, 1894, 1, 0, 0, 0, 1893, 1887, 1, 0,
		0, 0, 1893, 1894, 1, 0, 0, 0, 1894, 285, 1, 0, 0, 0, 1895, 1897, 5, 93, 0, 0, 1896, 1895, 1, 0, 0, 0, 1896, 1897, 1,
		0, 0, 0, 1897, 1898, 1, 0, 0, 0, 1898, 1899, 3, 242, 121, 0, 1899, 1900, 5, 149, 0, 0, 1900, 1901, 3, 312, 156, 0,
		1901, 287, 1, 0, 0, 0, 1902, 1905, 3, 292, 146, 0, 1903, 1904, 5, 50, 0, 0, 1904, 1906, 3, 290, 145, 0, 1905, 1903,
		1, 0, 0, 0, 1905, 1906, 1, 0, 0, 0, 1906, 289, 1, 0, 0, 0, 1907, 1910, 3, 318, 159, 0, 1908, 1910, 5, 142, 0, 0,
		1909, 1907, 1, 0, 0, 0, 1909, 1908, 1, 0, 0, 0, 1910, 291, 1, 0, 0, 0, 1911, 1914, 3, 276, 138, 0, 1912, 1914, 3,
		284, 142, 0, 1913, 1911, 1, 0, 0, 0, 1913, 1912, 1, 0, 0, 0, 1914, 293, 1, 0, 0, 0, 1915, 1916, 5, 104, 0, 0, 1916,
		1919, 5, 163, 0, 0, 1917, 1918, 5, 50, 0, 0, 1918, 1920, 3, 252, 126, 0, 1919, 1917, 1, 0, 0, 0, 1919, 1920, 1, 0,
		0, 0, 1920, 295, 1, 0, 0, 0, 1921, 1924, 3, 484, 242, 0, 1922, 1924, 3, 500, 250, 0, 1923, 1921, 1, 0, 0, 0, 1923,
		1922, 1, 0, 0, 0, 1924, 297, 1, 0, 0, 0, 1925, 1927, 5, 109, 0, 0, 1926, 1925, 1, 0, 0, 0, 1926, 1927, 1, 0, 0, 0,
		1927, 1928, 1, 0, 0, 0, 1928, 1929, 3, 242, 121, 0, 1929, 1931, 5, 149, 0, 0, 1930, 1932, 3, 310, 155, 0, 1931,
		1930, 1, 0, 0, 0, 1931, 1932, 1, 0, 0, 0, 1932, 1933, 1, 0, 0, 0, 1933, 1936, 3, 296, 148, 0, 1934, 1935, 5, 141, 0,
		0, 1935, 1937, 3, 98, 49, 0, 1936, 1934, 1, 0, 0, 0, 1936, 1937, 1, 0, 0, 0, 1937, 299, 1, 0, 0, 0, 1938, 1939, 5,
		118, 0, 0, 1939, 1943, 3, 184, 92, 0, 1940, 1941, 5, 37, 0, 0, 1941, 1943, 3, 340, 170, 0, 1942, 1938, 1, 0, 0, 0,
		1942, 1940, 1, 0, 0, 0, 1943, 301, 1, 0, 0, 0, 1944, 1945, 5, 52, 0, 0, 1945, 1950, 5, 163, 0, 0, 1946, 1947, 5,
		151, 0, 0, 1947, 1949, 5, 163, 0, 0, 1948, 1946, 1, 0, 0, 0, 1949, 1952, 1, 0, 0, 0, 1950, 1948, 1, 0, 0, 0, 1950,
		1951, 1, 0, 0, 0, 1951, 1953, 1, 0, 0, 0, 1952, 1950, 1, 0, 0, 0, 1953, 1954, 5, 150, 0, 0, 1954, 303, 1, 0, 0, 0,
		1955, 1963, 3, 164, 82, 0, 1956, 1963, 3, 106, 53, 0, 1957, 1963, 3, 330, 165, 0, 1958, 1963, 3, 334, 167, 0, 1959,
		1963, 3, 120, 60, 0, 1960, 1963, 3, 20, 10, 0, 1961, 1963, 3, 326, 163, 0, 1962, 1955, 1, 0, 0, 0, 1962, 1956, 1, 0,
		0, 0, 1962, 1957, 1, 0, 0, 0, 1962, 1958, 1, 0, 0, 0, 1962, 1959, 1, 0, 0, 0, 1962, 1960, 1, 0, 0, 0, 1962, 1961, 1,
		0, 0, 0, 1963, 305, 1, 0, 0, 0, 1964, 1970, 3, 324, 162, 0, 1965, 1970, 3, 178, 89, 0, 1966, 1970, 5, 162, 0, 0,
		1967, 1970, 5, 160, 0, 0, 1968, 1970, 5, 63, 0, 0, 1969, 1964, 1, 0, 0, 0, 1969, 1965, 1, 0, 0, 0, 1969, 1966, 1, 0,
		0, 0, 1969, 1967, 1, 0, 0, 0, 1969, 1968, 1, 0, 0, 0, 1970, 307, 1, 0, 0, 0, 1971, 1972, 5, 163, 0, 0, 1972, 1974,
		5, 149, 0, 0, 1973, 1971, 1, 0, 0, 0, 1973, 1974, 1, 0, 0, 0, 1974, 1976, 1, 0, 0, 0, 1975, 1977, 3, 300, 150, 0,
		1976, 1975, 1, 0, 0, 0, 1976, 1977, 1, 0, 0, 0, 1977, 1978, 1, 0, 0, 0, 1978, 1982, 5, 54, 0, 0, 1979, 1981, 3, 444,
		222, 0, 1980, 1979, 1, 0, 0, 0, 1981, 1984, 1, 0, 0, 0, 1982, 1980, 1, 0, 0, 0, 1982, 1983, 1, 0, 0, 0, 1983, 1985,
		1, 0, 0, 0, 1984, 1982, 1, 0, 0, 0, 1985, 1986, 5, 33, 0, 0, 1986, 1988, 5, 54, 0, 0, 1987, 1989, 5, 163, 0, 0,
		1988, 1987, 1, 0, 0, 0, 1988, 1989, 1, 0, 0, 0, 1989, 1990, 1, 0, 0, 0, 1990, 1991, 5, 150, 0, 0, 1991, 309, 1, 0,
		0, 0, 1992, 1993, 7, 14, 0, 0, 1993, 311, 1, 0, 0, 0, 1994, 1998, 3, 458, 229, 0, 1995, 1998, 3, 32, 16, 0, 1996,
		1998, 3, 408, 204, 0, 1997, 1994, 1, 0, 0, 0, 1997, 1995, 1, 0, 0, 0, 1997, 1996, 1, 0, 0, 0, 1998, 313, 1, 0, 0, 0,
		1999, 2000, 5, 110, 0, 0, 2000, 2001, 5, 163, 0, 0, 2001, 2002, 5, 64, 0, 0, 2002, 2003, 3, 484, 242, 0, 2003, 2007,
		5, 50, 0, 0, 2004, 2006, 3, 316, 158, 0, 2005, 2004, 1, 0, 0, 0, 2006, 2009, 1, 0, 0, 0, 2007, 2005, 1, 0, 0, 0,
		2007, 2008, 1, 0, 0, 0, 2008, 2010, 1, 0, 0, 0, 2009, 2007, 1, 0, 0, 0, 2010, 2011, 5, 33, 0, 0, 2011, 2013, 5, 110,
		0, 0, 2012, 2014, 5, 163, 0, 0, 2013, 2012, 1, 0, 0, 0, 2013, 2014, 1, 0, 0, 0, 2014, 2015, 1, 0, 0, 0, 2015, 2016,
		5, 150, 0, 0, 2016, 315, 1, 0, 0, 0, 2017, 2018, 3, 400, 200, 0, 2018, 2019, 5, 149, 0, 0, 2019, 2020, 3, 150, 75,
		0, 2020, 2021, 5, 150, 0, 0, 2021, 317, 1, 0, 0, 0, 2022, 2023, 6, 159, -1, 0, 2023, 2028, 5, 163, 0, 0, 2024, 2028,
		5, 162, 0, 0, 2025, 2028, 5, 161, 0, 0, 2026, 2028, 3, 188, 94, 0, 2027, 2022, 1, 0, 0, 0, 2027, 2024, 1, 0, 0, 0,
		2027, 2025, 1, 0, 0, 0, 2027, 2026, 1, 0, 0, 0, 2028, 2063, 1, 0, 0, 0, 2029, 2030, 10, 5, 0, 0, 2030, 2031, 5, 153,
		0, 0, 2031, 2062, 3, 486, 243, 0, 2032, 2033, 10, 4, 0, 0, 2033, 2034, 5, 143, 0, 0, 2034, 2039, 3, 184, 92, 0,
		2035, 2036, 5, 151, 0, 0, 2036, 2038, 3, 184, 92, 0, 2037, 2035, 1, 0, 0, 0, 2038, 2041, 1, 0, 0, 0, 2039, 2037, 1,
		0, 0, 0, 2039, 2040, 1, 0, 0, 0, 2040, 2042, 1, 0, 0, 0, 2041, 2039, 1, 0, 0, 0, 2042, 2043, 5, 144, 0, 0, 2043,
		2062, 1, 0, 0, 0, 2044, 2045, 10, 3, 0, 0, 2045, 2046, 5, 143, 0, 0, 2046, 2047, 3, 138, 69, 0, 2047, 2048, 5, 144,
		0, 0, 2048, 2062, 1, 0, 0, 0, 2049, 2051, 10, 2, 0, 0, 2050, 2052, 3, 452, 226, 0, 2051, 2050, 1, 0, 0, 0, 2051,
		2052, 1, 0, 0, 0, 2052, 2053, 1, 0, 0, 0, 2053, 2054, 5, 157, 0, 0, 2054, 2059, 3, 44, 22, 0, 2055, 2056, 5, 143, 0,
		0, 2056, 2057, 3, 184, 92, 0, 2057, 2058, 5, 144, 0, 0, 2058, 2060, 1, 0, 0, 0, 2059, 2055, 1, 0, 0, 0, 2059, 2060,
		1, 0, 0, 0, 2060, 2062, 1, 0, 0, 0, 2061, 2029, 1, 0, 0, 0, 2061, 2032, 1, 0, 0, 0, 2061, 2044, 1, 0, 0, 0, 2061,
		2049, 1, 0, 0, 0, 2062, 2065, 1, 0, 0, 0, 2063, 2061, 1, 0, 0, 0, 2063, 2064, 1, 0, 0, 0, 2064, 319, 1, 0, 0, 0,
		2065, 2063, 1, 0, 0, 0, 2066, 2067, 5, 163, 0, 0, 2067, 2069, 5, 149, 0, 0, 2068, 2066, 1, 0, 0, 0, 2068, 2069, 1,
		0, 0, 0, 2069, 2070, 1, 0, 0, 0, 2070, 2072, 5, 60, 0, 0, 2071, 2073, 5, 163, 0, 0, 2072, 2071, 1, 0, 0, 0, 2072,
		2073, 1, 0, 0, 0, 2073, 2076, 1, 0, 0, 0, 2074, 2075, 5, 117, 0, 0, 2075, 2077, 3, 184, 92, 0, 2076, 2074, 1, 0, 0,
		0, 2076, 2077, 1, 0, 0, 0, 2077, 2078, 1, 0, 0, 0, 2078, 2079, 5, 150, 0, 0, 2079, 321, 1, 0, 0, 0, 2080, 2081, 5,
		163, 0, 0, 2081, 2083, 5, 149, 0, 0, 2082, 2080, 1, 0, 0, 0, 2082, 2083, 1, 0, 0, 0, 2083, 2084, 1, 0, 0, 0, 2084,
		2085, 5, 63, 0, 0, 2085, 2086, 5, 150, 0, 0, 2086, 323, 1, 0, 0, 0, 2087, 2090, 5, 159, 0, 0, 2088, 2090, 3, 348,
		174, 0, 2089, 2087, 1, 0, 0, 0, 2089, 2088, 1, 0, 0, 0, 2090, 325, 1, 0, 0, 0, 2091, 2092, 5, 70, 0, 0, 2092, 2093,
		5, 19, 0, 0, 2093, 2094, 5, 163, 0, 0, 2094, 2098, 5, 50, 0, 0, 2095, 2097, 3, 328, 164, 0, 2096, 2095, 1, 0, 0, 0,
		2097, 2100, 1, 0, 0, 0, 2098, 2096, 1, 0, 0, 0, 2098, 2099, 1, 0, 0, 0, 2099, 2101, 1, 0, 0, 0, 2100, 2098, 1, 0, 0,
		0, 2101, 2104, 5, 33, 0, 0, 2102, 2103, 5, 70, 0, 0, 2103, 2105, 5, 19, 0, 0, 2104, 2102, 1, 0, 0, 0, 2104, 2105, 1,
		0, 0, 0, 2105, 2107, 1, 0, 0, 0, 2106, 2108, 5, 163, 0, 0, 2107, 2106, 1, 0, 0, 0, 2107, 2108, 1, 0, 0, 0, 2108,
		2109, 1, 0, 0, 0, 2109, 2110, 5, 150, 0, 0, 2110, 327, 1, 0, 0, 0, 2111, 2129, 3, 472, 236, 0, 2112, 2129, 3, 470,
		235, 0, 2113, 2129, 3, 476, 238, 0, 2114, 2129, 3, 330, 165, 0, 2115, 2129, 3, 326, 163, 0, 2116, 2129, 3, 334, 167,
		0, 2117, 2129, 3, 494, 247, 0, 2118, 2129, 3, 482, 241, 0, 2119, 2129, 3, 114, 57, 0, 2120, 2129, 3, 508, 254, 0,
		2121, 2129, 3, 198, 99, 0, 2122, 2129, 3, 12, 6, 0, 2123, 2129, 3, 42, 21, 0, 2124, 2129, 3, 46, 23, 0, 2125, 2129,
		3, 502, 251, 0, 2126, 2129, 3, 238, 119, 0, 2127, 2129, 3, 236, 118, 0, 2128, 2111, 1, 0, 0, 0, 2128, 2112, 1, 0, 0,
		0, 2128, 2113, 1, 0, 0, 0, 2128, 2114, 1, 0, 0, 0, 2128, 2115, 1, 0, 0, 0, 2128, 2116, 1, 0, 0, 0, 2128, 2117, 1, 0,
		0, 0, 2128, 2118, 1, 0, 0, 0, 2128, 2119, 1, 0, 0, 0, 2128, 2120, 1, 0, 0, 0, 2128, 2121, 1, 0, 0, 0, 2128, 2122, 1,
		0, 0, 0, 2128, 2123, 1, 0, 0, 0, 2128, 2124, 1, 0, 0, 0, 2128, 2125, 1, 0, 0, 0, 2128, 2126, 1, 0, 0, 0, 2128, 2127,
		1, 0, 0, 0, 2129, 329, 1, 0, 0, 0, 2130, 2131, 5, 70, 0, 0, 2131, 2132, 5, 163, 0, 0, 2132, 2134, 5, 50, 0, 0, 2133,
		2135, 3, 230, 115, 0, 2134, 2133, 1, 0, 0, 0, 2134, 2135, 1, 0, 0, 0, 2135, 2139, 1, 0, 0, 0, 2136, 2138, 3, 332,
		166, 0, 2137, 2136, 1, 0, 0, 0, 2138, 2141, 1, 0, 0, 0, 2139, 2137, 1, 0, 0, 0, 2139, 2140, 1, 0, 0, 0, 2140, 2142,
		1, 0, 0, 0, 2141, 2139, 1, 0, 0, 0, 2142, 2144, 5, 33, 0, 0, 2143, 2145, 5, 70, 0, 0, 2144, 2143, 1, 0, 0, 0, 2144,
		2145, 1, 0, 0, 0, 2145, 2147, 1, 0, 0, 0, 2146, 2148, 5, 163, 0, 0, 2147, 2146, 1, 0, 0, 0, 2147, 2148, 1, 0, 0, 0,
		2148, 2149, 1, 0, 0, 0, 2149, 2150, 5, 150, 0, 0, 2150, 331, 1, 0, 0, 0, 2151, 2170, 3, 472, 236, 0, 2152, 2170, 3,
		476, 238, 0, 2153, 2170, 3, 330, 165, 0, 2154, 2170, 3, 334, 167, 0, 2155, 2170, 3, 494, 247, 0, 2156, 2170, 3, 482,
		241, 0, 2157, 2170, 3, 114, 57, 0, 2158, 2170, 3, 448, 224, 0, 2159, 2170, 3, 508, 254, 0, 2160, 2170, 3, 198, 99,
		0, 2161, 2170, 3, 12, 6, 0, 2162, 2170, 3, 72, 36, 0, 2163, 2170, 3, 42, 21, 0, 2164, 2170, 3, 46, 23, 0, 2165,
		2170, 3, 136, 68, 0, 2166, 2170, 3, 502, 251, 0, 2167, 2170, 3, 238, 119, 0, 2168, 2170, 3, 236, 118, 0, 2169, 2151,
		1, 0, 0, 0, 2169, 2152, 1, 0, 0, 0, 2169, 2153, 1, 0, 0, 0, 2169, 2154, 1, 0, 0, 0, 2169, 2155, 1, 0, 0, 0, 2169,
		2156, 1, 0, 0, 0, 2169, 2157, 1, 0, 0, 0, 2169, 2158, 1, 0, 0, 0, 2169, 2159, 1, 0, 0, 0, 2169, 2160, 1, 0, 0, 0,
		2169, 2161, 1, 0, 0, 0, 2169, 2162, 1, 0, 0, 0, 2169, 2163, 1, 0, 0, 0, 2169, 2164, 1, 0, 0, 0, 2169, 2165, 1, 0, 0,
		0, 2169, 2166, 1, 0, 0, 0, 2169, 2167, 1, 0, 0, 0, 2169, 2168, 1, 0, 0, 0, 2170, 333, 1, 0, 0, 0, 2171, 2172, 5, 70,
		0, 0, 2172, 2173, 5, 163, 0, 0, 2173, 2174, 5, 50, 0, 0, 2174, 2175, 5, 59, 0, 0, 2175, 2177, 3, 318, 159, 0, 2176,
		2178, 3, 232, 116, 0, 2177, 2176, 1, 0, 0, 0, 2177, 2178, 1, 0, 0, 0, 2178, 2179, 1, 0, 0, 0, 2179, 2180, 5, 150, 0,
		0, 2180, 335, 1, 0, 0, 0, 2181, 2182, 5, 155, 0, 0, 2182, 2183, 5, 163, 0, 0, 2183, 2188, 5, 153, 0, 0, 2184, 2185,
		5, 163, 0, 0, 2185, 2187, 5, 153, 0, 0, 2186, 2184, 1, 0, 0, 0, 2187, 2190, 1, 0, 0, 0, 2188, 2186, 1, 0, 0, 0,
		2188, 2189, 1, 0, 0, 0, 2189, 2191, 1, 0, 0, 0, 2190, 2188, 1, 0, 0, 0, 2191, 2192, 5, 163, 0, 0, 2192, 337, 1, 0,
		0, 0, 2193, 2194, 5, 71, 0, 0, 2194, 2196, 5, 56, 0, 0, 2195, 2193, 1, 0, 0, 0, 2195, 2196, 1, 0, 0, 0, 2196, 2197,
		1, 0, 0, 0, 2197, 2198, 5, 143, 0, 0, 2198, 2199, 3, 40, 20, 0, 2199, 2200, 5, 144, 0, 0, 2200, 339, 1, 0, 0, 0,
		2201, 2202, 5, 163, 0, 0, 2202, 2203, 5, 47, 0, 0, 2203, 2204, 3, 138, 69, 0, 2204, 341, 1, 0, 0, 0, 2205, 2206, 3,
		344, 172, 0, 2206, 2207, 5, 153, 0, 0, 2207, 2209, 1, 0, 0, 0, 2208, 2205, 1, 0, 0, 0, 2209, 2212, 1, 0, 0, 0, 2210,
		2208, 1, 0, 0, 0, 2210, 2211, 1, 0, 0, 0, 2211, 2213, 1, 0, 0, 0, 2212, 2210, 1, 0, 0, 0, 2213, 2214, 5, 163, 0, 0,
		2214, 343, 1, 0, 0, 0, 2215, 2216, 5, 163, 0, 0, 2216, 345, 1, 0, 0, 0, 2217, 2218, 5, 106, 0, 0, 2218, 2219, 5,
		142, 0, 0, 2219, 347, 1, 0, 0, 0, 2220, 2222, 5, 159, 0, 0, 2221, 2220, 1, 0, 0, 0, 2221, 2222, 1, 0, 0, 0, 2222,
		2223, 1, 0, 0, 0, 2223, 2224, 3, 318, 159, 0, 2224, 349, 1, 0, 0, 0, 2225, 2226, 3, 394, 197, 0, 2226, 2227, 5, 106,
		0, 0, 2227, 2228, 5, 163, 0, 0, 2228, 2232, 5, 150, 0, 0, 2229, 2231, 3, 422, 211, 0, 2230, 2229, 1, 0, 0, 0, 2231,
		2234, 1, 0, 0, 0, 2232, 2230, 1, 0, 0, 0, 2232, 2233, 1, 0, 0, 0, 2233, 2235, 1, 0, 0, 0, 2234, 2232, 1, 0, 0, 0,
		2235, 2236, 5, 33, 0, 0, 2236, 2238, 5, 106, 0, 0, 2237, 2239, 5, 163, 0, 0, 2238, 2237, 1, 0, 0, 0, 2238, 2239, 1,
		0, 0, 0, 2239, 351, 1, 0, 0, 0, 2240, 2241, 5, 163, 0, 0, 2241, 2243, 5, 149, 0, 0, 2242, 2240, 1, 0, 0, 0, 2242,
		2243, 1, 0, 0, 0, 2243, 2244, 1, 0, 0, 0, 2244, 2247, 5, 86, 0, 0, 2245, 2246, 5, 117, 0, 0, 2246, 2248, 3, 184, 92,
		0, 2247, 2245, 1, 0, 0, 0, 2247, 2248, 1, 0, 0, 0, 2248, 2249, 1, 0, 0, 0, 2249, 2250, 5, 150, 0, 0, 2250, 353, 1,
		0, 0, 0, 2251, 2252, 5, 72, 0, 0, 2252, 2253, 5, 143, 0, 0, 2253, 2258, 3, 286, 143, 0, 2254, 2255, 5, 150, 0, 0,
		2255, 2257, 3, 286, 143, 0, 2256, 2254, 1, 0, 0, 0, 2257, 2260, 1, 0, 0, 0, 2258, 2256, 1, 0, 0, 0, 2258, 2259, 1,
		0, 0, 0, 2259, 2262, 1, 0, 0, 0, 2260, 2258, 1, 0, 0, 0, 2261, 2263, 5, 150, 0, 0, 2262, 2261, 1, 0, 0, 0, 2262,
		2263, 1, 0, 0, 0, 2263, 2264, 1, 0, 0, 0, 2264, 2265, 5, 144, 0, 0, 2265, 2266, 5, 150, 0, 0, 2266, 355, 1, 0, 0, 0,
		2267, 2268, 5, 72, 0, 0, 2268, 2269, 5, 56, 0, 0, 2269, 2270, 5, 143, 0, 0, 2270, 2271, 3, 40, 20, 0, 2271, 2272, 5,
		144, 0, 0, 2272, 357, 1, 0, 0, 0, 2273, 2285, 3, 318, 159, 0, 2274, 2285, 3, 306, 153, 0, 2275, 2285, 3, 10, 5, 0,
		2276, 2285, 3, 220, 110, 0, 2277, 2285, 3, 390, 195, 0, 2278, 2285, 3, 492, 246, 0, 2279, 2285, 3, 18, 9, 0, 2280,
		2281, 5, 143, 0, 0, 2281, 2282, 3, 184, 92, 0, 2282, 2283, 5, 144, 0, 0, 2283, 2285, 1, 0, 0, 0, 2284, 2273, 1, 0,
		0, 0, 2284, 2274, 1, 0, 0, 0, 2284, 2275, 1, 0, 0, 0, 2284, 2276, 1, 0, 0, 0, 2284, 2277, 1, 0, 0, 0, 2284, 2278, 1,
		0, 0, 0, 2284, 2279, 1, 0, 0, 0, 2284, 2280, 1, 0, 0, 0, 2285, 359, 1, 0, 0, 0, 2286, 2287, 5, 74, 0, 0, 2287, 2288,
		3, 508, 254, 0, 2288, 361, 1, 0, 0, 0, 2289, 2290, 5, 74, 0, 0, 2290, 363, 1, 0, 0, 0, 2291, 2293, 3, 318, 159, 0,
		2292, 2294, 3, 232, 116, 0, 2293, 2292, 1, 0, 0, 0, 2293, 2294, 1, 0, 0, 0, 2294, 2296, 1, 0, 0, 0, 2295, 2297, 3,
		338, 169, 0, 2296, 2295, 1, 0, 0, 0, 2296, 2297, 1, 0, 0, 0, 2297, 365, 1, 0, 0, 0, 2298, 2299, 5, 163, 0, 0, 2299,
		2301, 5, 149, 0, 0, 2300, 2298, 1, 0, 0, 0, 2300, 2301, 1, 0, 0, 0, 2301, 2302, 1, 0, 0, 0, 2302, 2303, 3, 364, 182,
		0, 2303, 2304, 5, 150, 0, 0, 2304, 367, 1, 0, 0, 0, 2305, 2306, 5, 75, 0, 0, 2306, 2314, 5, 163, 0, 0, 2307, 2309,
		5, 71, 0, 0, 2308, 2307, 1, 0, 0, 0, 2308, 2309, 1, 0, 0, 0, 2309, 2310, 1, 0, 0, 0, 2310, 2311, 5, 143, 0, 0, 2311,
		2312, 3, 214, 107, 0, 2312, 2313, 5, 144, 0, 0, 2313, 2315, 1, 0, 0, 0, 2314, 2308, 1, 0, 0, 0, 2314, 2315, 1, 0, 0,
		0, 2315, 369, 1, 0, 0, 0, 2316, 2334, 3, 472, 236, 0, 2317, 2334, 3, 470, 235, 0, 2318, 2334, 3, 476, 238, 0, 2319,
		2334, 3, 330, 165, 0, 2320, 2334, 3, 326, 163, 0, 2321, 2334, 3, 334, 167, 0, 2322, 2334, 3, 494, 247, 0, 2323,
		2334, 3, 482, 241, 0, 2324, 2334, 3, 114, 57, 0, 2325, 2334, 3, 508, 254, 0, 2326, 2334, 3, 198, 99, 0, 2327, 2334,
		3, 12, 6, 0, 2328, 2334, 3, 42, 21, 0, 2329, 2334, 3, 46, 23, 0, 2330, 2334, 3, 502, 251, 0, 2331, 2334, 3, 238,
		119, 0, 2332, 2334, 3, 236, 118, 0, 2333, 2316, 1, 0, 0, 0, 2333, 2317, 1, 0, 0, 0, 2333, 2318, 1, 0, 0, 0, 2333,
		2319, 1, 0, 0, 0, 2333, 2320, 1, 0, 0, 0, 2333, 2321, 1, 0, 0, 0, 2333, 2322, 1, 0, 0, 0, 2333, 2323, 1, 0, 0, 0,
		2333, 2324, 1, 0, 0, 0, 2333, 2325, 1, 0, 0, 0, 2333, 2326, 1, 0, 0, 0, 2333, 2327, 1, 0, 0, 0, 2333, 2328, 1, 0, 0,
		0, 2333, 2329, 1, 0, 0, 0, 2333, 2330, 1, 0, 0, 0, 2333, 2331, 1, 0, 0, 0, 2333, 2332, 1, 0, 0, 0, 2334, 371, 1, 0,
		0, 0, 2335, 2338, 3, 440, 220, 0, 2336, 2338, 5, 10, 0, 0, 2337, 2335, 1, 0, 0, 0, 2337, 2336, 1, 0, 0, 0, 2338,
		373, 1, 0, 0, 0, 2339, 2340, 5, 163, 0, 0, 2340, 2342, 5, 149, 0, 0, 2341, 2339, 1, 0, 0, 0, 2341, 2342, 1, 0, 0, 0,
		2342, 2343, 1, 0, 0, 0, 2343, 2348, 5, 76, 0, 0, 2344, 2345, 5, 143, 0, 0, 2345, 2346, 3, 372, 186, 0, 2346, 2347,
		5, 144, 0, 0, 2347, 2349, 1, 0, 0, 0, 2348, 2344, 1, 0, 0, 0, 2348, 2349, 1, 0, 0, 0, 2349, 2351, 1, 0, 0, 0, 2350,
		2352, 5, 50, 0, 0, 2351, 2350, 1, 0, 0, 0, 2351, 2352, 1, 0, 0, 0, 2352, 2356, 1, 0, 0, 0, 2353, 2355, 3, 370, 185,
		0, 2354, 2353, 1, 0, 0, 0, 2355, 2358, 1, 0, 0, 0, 2356, 2354, 1, 0, 0, 0, 2356, 2357, 1, 0, 0, 0, 2357, 2359, 1, 0,
		0, 0, 2358, 2356, 1, 0, 0, 0, 2359, 2363, 5, 17, 0, 0, 2360, 2362, 3, 444, 222, 0, 2361, 2360, 1, 0, 0, 0, 2362,
		2365, 1, 0, 0, 0, 2363, 2361, 1, 0, 0, 0, 2363, 2364, 1, 0, 0, 0, 2364, 2366, 1, 0, 0, 0, 2365, 2363, 1, 0, 0, 0,
		2366, 2367, 5, 33, 0, 0, 2367, 2369, 5, 76, 0, 0, 2368, 2370, 5, 163, 0, 0, 2369, 2368, 1, 0, 0, 0, 2369, 2370, 1,
		0, 0, 0, 2370, 2371, 1, 0, 0, 0, 2371, 2372, 5, 150, 0, 0, 2372, 375, 1, 0, 0, 0, 2373, 2374, 5, 163, 0, 0, 2374,
		2376, 5, 149, 0, 0, 2375, 2373, 1, 0, 0, 0, 2375, 2376, 1, 0, 0, 0, 2376, 2377, 1, 0, 0, 0, 2377, 2378, 5, 73, 0, 0,
		2378, 2383, 5, 76, 0, 0, 2379, 2380, 5, 143, 0, 0, 2380, 2381, 3, 440, 220, 0, 2381, 2382, 5, 144, 0, 0, 2382, 2384,
		1, 0, 0, 0, 2383, 2379, 1, 0, 0, 0, 2383, 2384, 1, 0, 0, 0, 2384, 2386, 1, 0, 0, 0, 2385, 2387, 5, 50, 0, 0, 2386,
		2385, 1, 0, 0, 0, 2386, 2387, 1, 0, 0, 0, 2387, 2391, 1, 0, 0, 0, 2388, 2390, 3, 370, 185, 0, 2389, 2388, 1, 0, 0,
		0, 2390, 2393, 1, 0, 0, 0, 2391, 2389, 1, 0, 0, 0, 2391, 2392, 1, 0, 0, 0, 2392, 2394, 1, 0, 0, 0, 2393, 2391, 1, 0,
		0, 0, 2394, 2398, 5, 17, 0, 0, 2395, 2397, 3, 444, 222, 0, 2396, 2395, 1, 0, 0, 0, 2397, 2400, 1, 0, 0, 0, 2398,
		2396, 1, 0, 0, 0, 2398, 2399, 1, 0, 0, 0, 2399, 2401, 1, 0, 0, 0, 2400, 2398, 1, 0, 0, 0, 2401, 2403, 5, 33, 0, 0,
		2402, 2404, 5, 73, 0, 0, 2403, 2402, 1, 0, 0, 0, 2403, 2404, 1, 0, 0, 0, 2404, 2405, 1, 0, 0, 0, 2405, 2407, 5, 76,
		0, 0, 2406, 2408, 5, 163, 0, 0, 2407, 2406, 1, 0, 0, 0, 2407, 2408, 1, 0, 0, 0, 2408, 2409, 1, 0, 0, 0, 2409, 2410,
		5, 150, 0, 0, 2410, 377, 1, 0, 0, 0, 2411, 2412, 5, 77, 0, 0, 2412, 2416, 5, 19, 0, 0, 2413, 2415, 3, 380, 190, 0,
		2414, 2413, 1, 0, 0, 0, 2415, 2418, 1, 0, 0, 0, 2416, 2414, 1, 0, 0, 0, 2416, 2417, 1, 0, 0, 0, 2417, 2419, 1, 0, 0,
		0, 2418, 2416, 1, 0, 0, 0, 2419, 2420, 5, 33, 0, 0, 2420, 2421, 5, 77, 0, 0, 2421, 2423, 5, 19, 0, 0, 2422, 2424, 5,
		163, 0, 0, 2423, 2422, 1, 0, 0, 0, 2423, 2424, 1, 0, 0, 0, 2424, 379, 1, 0, 0, 0, 2425, 2443, 3, 472, 236, 0, 2426,
		2443, 3, 470, 235, 0, 2427, 2443, 3, 476, 238, 0, 2428, 2443, 3, 330, 165, 0, 2429, 2443, 3, 326, 163, 0, 2430,
		2443, 3, 334, 167, 0, 2431, 2443, 3, 494, 247, 0, 2432, 2443, 3, 482, 241, 0, 2433, 2443, 3, 114, 57, 0, 2434, 2443,
		3, 508, 254, 0, 2435, 2443, 3, 198, 99, 0, 2436, 2443, 3, 12, 6, 0, 2437, 2443, 3, 42, 21, 0, 2438, 2443, 3, 46, 23,
		0, 2439, 2443, 3, 502, 251, 0, 2440, 2443, 3, 238, 119, 0, 2441, 2443, 3, 236, 118, 0, 2442, 2425, 1, 0, 0, 0, 2442,
		2426, 1, 0, 0, 0, 2442, 2427, 1, 0, 0, 0, 2442, 2428, 1, 0, 0, 0, 2442, 2429, 1, 0, 0, 0, 2442, 2430, 1, 0, 0, 0,
		2442, 2431, 1, 0, 0, 0, 2442, 2432, 1, 0, 0, 0, 2442, 2433, 1, 0, 0, 0, 2442, 2434, 1, 0, 0, 0, 2442, 2435, 1, 0, 0,
		0, 2442, 2436, 1, 0, 0, 0, 2442, 2437, 1, 0, 0, 0, 2442, 2438, 1, 0, 0, 0, 2442, 2439, 1, 0, 0, 0, 2442, 2440, 1, 0,
		0, 0, 2442, 2441, 1, 0, 0, 0, 2443, 381, 1, 0, 0, 0, 2444, 2448, 5, 77, 0, 0, 2445, 2447, 3, 384, 192, 0, 2446,
		2445, 1, 0, 0, 0, 2447, 2450, 1, 0, 0, 0, 2448, 2446, 1, 0, 0, 0, 2448, 2449, 1, 0, 0, 0, 2449, 2451, 1, 0, 0, 0,
		2450, 2448, 1, 0, 0, 0, 2451, 2452, 5, 33, 0, 0, 2452, 2454, 5, 77, 0, 0, 2453, 2455, 5, 163, 0, 0, 2454, 2453, 1,
		0, 0, 0, 2454, 2455, 1, 0, 0, 0, 2455, 383, 1, 0, 0, 0, 2456, 2463, 3, 472, 236, 0, 2457, 2463, 3, 476, 238, 0,
		2458, 2463, 3, 360, 180, 0, 2459, 2463, 3, 12, 6, 0, 2460, 2463, 3, 46, 23, 0, 2461, 2463, 3, 502, 251, 0, 2462,
		2456, 1, 0, 0, 0, 2462, 2457, 1, 0, 0, 0, 2462, 2458, 1, 0, 0, 0, 2462, 2459, 1, 0, 0, 0, 2462, 2460, 1, 0, 0, 0,
		2462, 2461, 1, 0, 0, 0, 2463, 385, 1, 0, 0, 0, 2464, 2467, 3, 382, 191, 0, 2465, 2467, 3, 378, 189, 0, 2466, 2464,
		1, 0, 0, 0, 2466, 2465, 1, 0, 0, 0, 2467, 387, 1, 0, 0, 0, 2468, 2469, 5, 59, 0, 0, 2469, 2471, 3, 318, 159, 0,
		2470, 2472, 3, 232, 116, 0, 2471, 2470, 1, 0, 0, 0, 2471, 2472, 1, 0, 0, 0, 2472, 389, 1, 0, 0, 0, 2473, 2474, 3,
		318, 159, 0, 2474, 2481, 5, 157, 0, 0, 2475, 2482, 1, 0, 0, 0, 2476, 2477, 5, 143, 0, 0, 2477, 2478, 3, 184, 92, 0,
		2478, 2479, 5, 144, 0, 0, 2479, 2482, 1, 0, 0, 0, 2480, 2482, 3, 10, 5, 0, 2481, 2475, 1, 0, 0, 0, 2481, 2476, 1, 0,
		0, 0, 2481, 2480, 1, 0, 0, 0, 2482, 391, 1, 0, 0, 0, 2483, 2487, 3, 318, 159, 0, 2484, 2487, 3, 460, 230, 0, 2485,
		2487, 3, 184, 92, 0, 2486, 2483, 1, 0, 0, 0, 2486, 2484, 1, 0, 0, 0, 2486, 2485, 1, 0, 0, 0, 2487, 393, 1, 0, 0, 0,
		2488, 2489, 5, 79, 0, 0, 2489, 2490, 3, 392, 196, 0, 2490, 395, 1, 0, 0, 0, 2491, 2492, 5, 143, 0, 0, 2492, 2497, 3,
		398, 199, 0, 2493, 2494, 5, 151, 0, 0, 2494, 2496, 3, 398, 199, 0, 2495, 2493, 1, 0, 0, 0, 2496, 2499, 1, 0, 0, 0,
		2497, 2495, 1, 0, 0, 0, 2497, 2498, 1, 0, 0, 0, 2498, 2500, 1, 0, 0, 0, 2499, 2497, 1, 0, 0, 0, 2500, 2501, 5, 144,
		0, 0, 2501, 397, 1, 0, 0, 0, 2502, 2503, 5, 163, 0, 0, 2503, 2504, 3, 146, 73, 0, 2504, 399, 1, 0, 0, 0, 2505, 2510,
		5, 163, 0, 0, 2506, 2507, 5, 151, 0, 0, 2507, 2509, 5, 163, 0, 0, 2508, 2506, 1, 0, 0, 0, 2509, 2512, 1, 0, 0, 0,
		2510, 2508, 1, 0, 0, 0, 2510, 2511, 1, 0, 0, 0, 2511, 401, 1, 0, 0, 0, 2512, 2510, 1, 0, 0, 0, 2513, 2514, 5, 163,
		0, 0, 2514, 2515, 3, 414, 207, 0, 2515, 403, 1, 0, 0, 0, 2516, 2521, 3, 402, 201, 0, 2517, 2518, 5, 151, 0, 0, 2518,
		2520, 3, 402, 201, 0, 2519, 2517, 1, 0, 0, 0, 2520, 2523, 1, 0, 0, 0, 2521, 2519, 1, 0, 0, 0, 2521, 2522, 1, 0, 0,
		0, 2522, 405, 1, 0, 0, 0, 2523, 2521, 1, 0, 0, 0, 2524, 2528, 5, 80, 0, 0, 2525, 2527, 3, 148, 74, 0, 2526, 2525, 1,
		0, 0, 0, 2527, 2530, 1, 0, 0, 0, 2528, 2526, 1, 0, 0, 0, 2528, 2529, 1, 0, 0, 0, 2529, 2531, 1, 0, 0, 0, 2530, 2528,
		1, 0, 0, 0, 2531, 2532, 5, 33, 0, 0, 2532, 2534, 5, 80, 0, 0, 2533, 2535, 5, 163, 0, 0, 2534, 2533, 1, 0, 0, 0,
		2534, 2535, 1, 0, 0, 0, 2535, 407, 1, 0, 0, 0, 2536, 2537, 5, 110, 0, 0, 2537, 2540, 3, 318, 159, 0, 2538, 2539, 5,
		64, 0, 0, 2539, 2541, 3, 484, 242, 0, 2540, 2538, 1, 0, 0, 0, 2540, 2541, 1, 0, 0, 0, 2541, 409, 1, 0, 0, 0, 2542,
		2543, 5, 156, 0, 0, 2543, 2545, 5, 153, 0, 0, 2544, 2542, 1, 0, 0, 0, 2545, 2548, 1, 0, 0, 0, 2546, 2544, 1, 0, 0,
		0, 2546, 2547, 1, 0, 0, 0, 2547, 2549, 1, 0, 0, 0, 2548, 2546, 1, 0, 0, 0, 2549, 2550, 3, 342, 171, 0, 2550, 411, 1,
		0, 0, 0, 2551, 2552, 5, 163, 0, 0, 2552, 2554, 5, 149, 0, 0, 2553, 2551, 1, 0, 0, 0, 2553, 2554, 1, 0, 0, 0, 2554,
		2555, 1, 0, 0, 0, 2555, 2556, 5, 85, 0, 0, 2556, 2559, 3, 184, 92, 0, 2557, 2558, 5, 91, 0, 0, 2558, 2560, 3, 184,
		92, 0, 2559, 2557, 1, 0, 0, 0, 2559, 2560, 1, 0, 0, 0, 2560, 2561, 1, 0, 0, 0, 2561, 2562, 5, 150, 0, 0, 2562, 413,
		1, 0, 0, 0, 2563, 2569, 3, 318, 159, 0, 2564, 2565, 5, 143, 0, 0, 2565, 2566, 3, 156, 78, 0, 2566, 2567, 5, 144, 0,
		0, 2567, 2569, 1, 0, 0, 0, 2568, 2563, 1, 0, 0, 0, 2568, 2564, 1, 0, 0, 0, 2569, 415, 1, 0, 0, 0, 2570, 2573, 3,
		352, 176, 0, 2571, 2573, 3, 504, 252, 0, 2572, 2570, 1, 0, 0, 0, 2572, 2571, 1, 0, 0, 0, 2573, 417, 1, 0, 0, 0,
		2574, 2575, 5, 142, 0, 0, 2575, 419, 1, 0, 0, 0, 2576, 2581, 3, 180, 90, 0, 2577, 2581, 3, 266, 133, 0, 2578, 2581,
		3, 208, 104, 0, 2579, 2581, 3, 350, 175, 0, 2580, 2576, 1, 0, 0, 0, 2580, 2577, 1, 0, 0, 0, 2580, 2578, 1, 0, 0, 0,
		2580, 2579, 1, 0, 0, 0, 2581, 421, 1, 0, 0, 0, 2582, 2583, 5, 163, 0, 0, 2583, 2585, 5, 121, 0, 0, 2584, 2586, 5,
		159, 0, 0, 2585, 2584, 1, 0, 0, 0, 2585, 2586, 1, 0, 0, 0, 2586, 2587, 1, 0, 0, 0, 2587, 2588, 5, 163, 0, 0, 2588,
		2589, 5, 150, 0, 0, 2589, 423, 1, 0, 0, 0, 2590, 2591, 3, 184, 92, 0, 2591, 2592, 5, 117, 0, 0, 2592, 2593, 3, 68,
		34, 0, 2593, 2594, 5, 151, 0, 0, 2594, 2596, 1, 0, 0, 0, 2595, 2590, 1, 0, 0, 0, 2596, 2599, 1, 0, 0, 0, 2597, 2595,
		1, 0, 0, 0, 2597, 2598, 1, 0, 0, 0, 2598, 2600, 1, 0, 0, 0, 2599, 2597, 1, 0, 0, 0, 2600, 2601, 3, 184, 92, 0, 2601,
		2602, 5, 117, 0, 0, 2602, 2603, 3, 68, 34, 0, 2603, 425, 1, 0, 0, 0, 2604, 2605, 5, 116, 0, 0, 2605, 2606, 3, 184,
		92, 0, 2606, 2608, 5, 90, 0, 0, 2607, 2609, 5, 154, 0, 0, 2608, 2607, 1, 0, 0, 0, 2608, 2609, 1, 0, 0, 0, 2609,
		2610, 1, 0, 0, 0, 2610, 2611, 3, 488, 244, 0, 2611, 2612, 5, 140, 0, 0, 2612, 2613, 5, 38, 0, 0, 2613, 2614, 7, 15,
		0, 0, 2614, 2615, 3, 424, 212, 0, 2615, 2616, 5, 150, 0, 0, 2616, 427, 1, 0, 0, 0, 2617, 2620, 5, 163, 0, 0, 2618,
		2619, 5, 153, 0, 0, 2619, 2621, 5, 163, 0, 0, 2620, 2618, 1, 0, 0, 0, 2621, 2622, 1, 0, 0, 0, 2622, 2620, 1, 0, 0,
		0, 2622, 2623, 1, 0, 0, 0, 2623, 2635, 1, 0, 0, 0, 2624, 2629, 5, 163, 0, 0, 2625, 2626, 5, 153, 0, 0, 2626, 2628,
		5, 163, 0, 0, 2627, 2625, 1, 0, 0, 0, 2628, 2631, 1, 0, 0, 0, 2629, 2627, 1, 0, 0, 0, 2629, 2630, 1, 0, 0, 0, 2630,
		2632, 1, 0, 0, 0, 2631, 2629, 1, 0, 0, 0, 2632, 2633, 5, 153, 0, 0, 2633, 2635, 5, 10, 0, 0, 2634, 2617, 1, 0, 0, 0,
		2634, 2624, 1, 0, 0, 0, 2635, 429, 1, 0, 0, 0, 2636, 2639, 3, 434, 217, 0, 2637, 2639, 3, 426, 213, 0, 2638, 2636,
		1, 0, 0, 0, 2638, 2637, 1, 0, 0, 0, 2639, 431, 1, 0, 0, 0, 2640, 2641, 5, 116, 0, 0, 2641, 2642, 3, 184, 92, 0,
		2642, 2644, 5, 90, 0, 0, 2643, 2645, 5, 154, 0, 0, 2644, 2643, 1, 0, 0, 0, 2644, 2645, 1, 0, 0, 0, 2645, 2646, 1, 0,
		0, 0, 2646, 2647, 3, 488, 244, 0, 2647, 2648, 5, 141, 0, 0, 2648, 2649, 3, 424, 212, 0, 2649, 2650, 5, 150, 0, 0,
		2650, 433, 1, 0, 0, 0, 2651, 2652, 5, 116, 0, 0, 2652, 2653, 3, 184, 92, 0, 2653, 2655, 5, 90, 0, 0, 2654, 2656, 5,
		154, 0, 0, 2655, 2654, 1, 0, 0, 0, 2655, 2656, 1, 0, 0, 0, 2656, 2657, 1, 0, 0, 0, 2657, 2658, 3, 488, 244, 0, 2658,
		2659, 5, 140, 0, 0, 2659, 2660, 3, 126, 63, 0, 2660, 2661, 3, 436, 218, 0, 2661, 2662, 5, 150, 0, 0, 2662, 435, 1,
		0, 0, 0, 2663, 2664, 3, 512, 256, 0, 2664, 2665, 5, 117, 0, 0, 2665, 2666, 3, 68, 34, 0, 2666, 2667, 5, 151, 0, 0,
		2667, 2669, 1, 0, 0, 0, 2668, 2663, 1, 0, 0, 0, 2669, 2672, 1, 0, 0, 0, 2670, 2668, 1, 0, 0, 0, 2670, 2671, 1, 0, 0,
		0, 2671, 2673, 1, 0, 0, 0, 2672, 2670, 1, 0, 0, 0, 2673, 2674, 3, 512, 256, 0, 2674, 2675, 5, 117, 0, 0, 2675, 2676,
		3, 68, 34, 0, 2676, 437, 1, 0, 0, 0, 2677, 2678, 5, 65, 0, 0, 2678, 2679, 3, 440, 220, 0, 2679, 439, 1, 0, 0, 0,
		2680, 2685, 3, 318, 159, 0, 2681, 2682, 5, 151, 0, 0, 2682, 2684, 3, 318, 159, 0, 2683, 2681, 1, 0, 0, 0, 2684,
		2687, 1, 0, 0, 0, 2685, 2683, 1, 0, 0, 0, 2685, 2686, 1, 0, 0, 0, 2686, 441, 1, 0, 0, 0, 2687, 2685, 1, 0, 0, 0,
		2688, 2689, 5, 163, 0, 0, 2689, 2691, 5, 149, 0, 0, 2690, 2688, 1, 0, 0, 0, 2690, 2691, 1, 0, 0, 0, 2691, 2692, 1,
		0, 0, 0, 2692, 2694, 5, 18, 0, 0, 2693, 2695, 5, 50, 0, 0, 2694, 2693, 1, 0, 0, 0, 2694, 2695, 1, 0, 0, 0, 2695,
		2699, 1, 0, 0, 0, 2696, 2698, 3, 370, 185, 0, 2697, 2696, 1, 0, 0, 0, 2698, 2701, 1, 0, 0, 0, 2699, 2697, 1, 0, 0,
		0, 2699, 2700, 1, 0, 0, 0, 2700, 2702, 1, 0, 0, 0, 2701, 2699, 1, 0, 0, 0, 2702, 2706, 5, 17, 0, 0, 2703, 2705, 3,
		444, 222, 0, 2704, 2703, 1, 0, 0, 0, 2705, 2708, 1, 0, 0, 0, 2706, 2704, 1, 0, 0, 0, 2706, 2707, 1, 0, 0, 0, 2707,
		2709, 1, 0, 0, 0, 2708, 2706, 1, 0, 0, 0, 2709, 2711, 5, 33, 0, 0, 2710, 2712, 5, 18, 0, 0, 2711, 2710, 1, 0, 0, 0,
		2711, 2712, 1, 0, 0, 0, 2712, 2714, 1, 0, 0, 0, 2713, 2715, 5, 163, 0, 0, 2714, 2713, 1, 0, 0, 0, 2714, 2715, 1, 0,
		0, 0, 2715, 2716, 1, 0, 0, 0, 2716, 2717, 5, 150, 0, 0, 2717, 443, 1, 0, 0, 0, 2718, 2733, 3, 510, 255, 0, 2719,
		2733, 3, 36, 18, 0, 2720, 2733, 3, 412, 206, 0, 2721, 2733, 3, 446, 223, 0, 2722, 2733, 3, 506, 253, 0, 2723, 2733,
		3, 366, 183, 0, 2724, 2733, 3, 246, 123, 0, 2725, 2733, 3, 62, 31, 0, 2726, 2733, 3, 308, 154, 0, 2727, 2733, 3,
		320, 160, 0, 2728, 2733, 3, 182, 91, 0, 2729, 2733, 3, 416, 208, 0, 2730, 2733, 3, 322, 161, 0, 2731, 2733, 3, 442,
		221, 0, 2732, 2718, 1, 0, 0, 0, 2732, 2719, 1, 0, 0, 0, 2732, 2720, 1, 0, 0, 0, 2732, 2721, 1, 0, 0, 0, 2732, 2722,
		1, 0, 0, 0, 2732, 2723, 1, 0, 0, 0, 2732, 2724, 1, 0, 0, 0, 2732, 2725, 1, 0, 0, 0, 2732, 2726, 1, 0, 0, 0, 2732,
		2727, 1, 0, 0, 0, 2732, 2728, 1, 0, 0, 0, 2732, 2729, 1, 0, 0, 0, 2732, 2730, 1, 0, 0, 0, 2732, 2731, 1, 0, 0, 0,
		2733, 445, 1, 0, 0, 0, 2734, 2735, 5, 163, 0, 0, 2735, 2737, 5, 149, 0, 0, 2736, 2734, 1, 0, 0, 0, 2736, 2737, 1, 0,
		0, 0, 2737, 2741, 1, 0, 0, 0, 2738, 2742, 3, 464, 232, 0, 2739, 2742, 3, 102, 51, 0, 2740, 2742, 3, 430, 215, 0,
		2741, 2738, 1, 0, 0, 0, 2741, 2739, 1, 0, 0, 0, 2741, 2740, 1, 0, 0, 0, 2742, 447, 1, 0, 0, 0, 2743, 2744, 5, 93, 0,
		0, 2744, 2745, 3, 242, 121, 0, 2745, 2746, 5, 149, 0, 0, 2746, 2748, 3, 484, 242, 0, 2747, 2749, 7, 16, 0, 0, 2748,
		2747, 1, 0, 0, 0, 2748, 2749, 1, 0, 0, 0, 2749, 2752, 1, 0, 0, 0, 2750, 2751, 5, 141, 0, 0, 2751, 2753, 3, 184, 92,
		0, 2752, 2750, 1, 0, 0, 0, 2752, 2753, 1, 0, 0, 0, 2753, 2754, 1, 0, 0, 0, 2754, 2755, 5, 150, 0, 0, 2755, 449, 1,
		0, 0, 0, 2756, 2761, 3, 318, 159, 0, 2757, 2758, 5, 151, 0, 0, 2758, 2760, 3, 318, 159, 0, 2759, 2757, 1, 0, 0, 0,
		2760, 2763, 1, 0, 0, 0, 2761, 2759, 1, 0, 0, 0, 2761, 2762, 1, 0, 0, 0, 2762, 2767, 1, 0, 0, 0, 2763, 2761, 1, 0, 0,
		0, 2764, 2767, 5, 68, 0, 0, 2765, 2767, 5, 10, 0, 0, 2766, 2756, 1, 0, 0, 0, 2766, 2764, 1, 0, 0, 0, 2766, 2765, 1,
		0, 0, 0, 2767, 451, 1, 0, 0, 0, 2768, 2777, 5, 145, 0, 0, 2769, 2774, 3, 318, 159, 0, 2770, 2771, 5, 151, 0, 0,
		2771, 2773, 3, 318, 159, 0, 2772, 2770, 1, 0, 0, 0, 2773, 2776, 1, 0, 0, 0, 2774, 2772, 1, 0, 0, 0, 2774, 2775, 1,
		0, 0, 0, 2775, 2778, 1, 0, 0, 0, 2776, 2774, 1, 0, 0, 0, 2777, 2769, 1, 0, 0, 0, 2777, 2778, 1, 0, 0, 0, 2778, 2781,
		1, 0, 0, 0, 2779, 2780, 5, 86, 0, 0, 2780, 2782, 3, 318, 159, 0, 2781, 2779, 1, 0, 0, 0, 2781, 2782, 1, 0, 0, 0,
		2782, 2783, 1, 0, 0, 0, 2783, 2784, 5, 146, 0, 0, 2784, 453, 1, 0, 0, 0, 2785, 2786, 5, 37, 0, 0, 2786, 2787, 3, 76,
		38, 0, 2787, 2788, 3, 48, 24, 0, 2788, 2792, 5, 150, 0, 0, 2789, 2790, 5, 33, 0, 0, 2790, 2791, 5, 37, 0, 0, 2791,
		2793, 5, 150, 0, 0, 2792, 2789, 1, 0, 0, 0, 2792, 2793, 1, 0, 0, 0, 2793, 455, 1, 0, 0, 0, 2794, 2795, 3, 488, 244,
		0, 2795, 2796, 5, 140, 0, 0, 2796, 2797, 5, 38, 0, 0, 2797, 2798, 7, 15, 0, 0, 2798, 2799, 3, 100, 50, 0, 2799,
		2800, 5, 150, 0, 0, 2800, 457, 1, 0, 0, 0, 2801, 2803, 3, 310, 155, 0, 2802, 2801, 1, 0, 0, 0, 2802, 2803, 1, 0, 0,
		0, 2803, 2804, 1, 0, 0, 0, 2804, 2806, 3, 296, 148, 0, 2805, 2807, 5, 21, 0, 0, 2806, 2805, 1, 0, 0, 0, 2806, 2807,
		1, 0, 0, 0, 2807, 2810, 1, 0, 0, 0, 2808, 2809, 5, 141, 0, 0, 2809, 2811, 3, 98, 49, 0, 2810, 2808, 1, 0, 0, 0,
		2810, 2811, 1, 0, 0, 0, 2811, 459, 1, 0, 0, 0, 2812, 2813, 3, 184, 92, 0, 2813, 2814, 3, 134, 67, 0, 2814, 2815, 3,
		184, 92, 0, 2815, 461, 1, 0, 0, 0, 2816, 2817, 3, 488, 244, 0, 2817, 2818, 5, 140, 0, 0, 2818, 2819, 7, 15, 0, 0,
		2819, 2820, 5, 150, 0, 0, 2820, 463, 1, 0, 0, 0, 2821, 2825, 3, 466, 233, 0, 2822, 2825, 3, 456, 228, 0, 2823, 2825,
		3, 462, 231, 0, 2824, 2821, 1, 0, 0, 0, 2824, 2822, 1, 0, 0, 0, 2824, 2823, 1, 0, 0, 0, 2825, 465, 1, 0, 0, 0, 2826,
		2827, 3, 488, 244, 0, 2827, 2829, 5, 140, 0, 0, 2828, 2830, 3, 126, 63, 0, 2829, 2828, 1, 0, 0, 0, 2829, 2830, 1, 0,
		0, 0, 2830, 2831, 1, 0, 0, 0, 2831, 2832, 3, 512, 256, 0, 2832, 2833, 5, 150, 0, 0, 2833, 467, 1, 0, 0, 0, 2834,
		2835, 3, 488, 244, 0, 2835, 2836, 5, 141, 0, 0, 2836, 2837, 3, 100, 50, 0, 2837, 2838, 5, 150, 0, 0, 2838, 469, 1,
		0, 0, 0, 2839, 2840, 3, 480, 240, 0, 2840, 2844, 5, 50, 0, 0, 2841, 2843, 3, 474, 237, 0, 2842, 2841, 1, 0, 0, 0,
		2843, 2846, 1, 0, 0, 0, 2844, 2842, 1, 0, 0, 0, 2844, 2845, 1, 0, 0, 0, 2845, 2847, 1, 0, 0, 0, 2846, 2844, 1, 0, 0,
		0, 2847, 2851, 5, 17, 0, 0, 2848, 2850, 3, 444, 222, 0, 2849, 2848, 1, 0, 0, 0, 2850, 2853, 1, 0, 0, 0, 2851, 2849,
		1, 0, 0, 0, 2851, 2852, 1, 0, 0, 0, 2852, 2854, 1, 0, 0, 0, 2853, 2851, 1, 0, 0, 0, 2854, 2856, 5, 33, 0, 0, 2855,
		2857, 3, 478, 239, 0, 2856, 2855, 1, 0, 0, 0, 2856, 2857, 1, 0, 0, 0, 2857, 2859, 1, 0, 0, 0, 2858, 2860, 3, 132,
		66, 0, 2859, 2858, 1, 0, 0, 0, 2859, 2860, 1, 0, 0, 0, 2860, 2861, 1, 0, 0, 0, 2861, 2862, 5, 150, 0, 0, 2862, 471,
		1, 0, 0, 0, 2863, 2864, 3, 480, 240, 0, 2864, 2865, 5, 150, 0, 0, 2865, 473, 1, 0, 0, 0, 2866, 2884, 3, 472, 236, 0,
		2867, 2884, 3, 470, 235, 0, 2868, 2884, 3, 476, 238, 0, 2869, 2884, 3, 330, 165, 0, 2870, 2884, 3, 326, 163, 0,
		2871, 2884, 3, 334, 167, 0, 2872, 2884, 3, 494, 247, 0, 2873, 2884, 3, 482, 241, 0, 2874, 2884, 3, 114, 57, 0, 2875,
		2884, 3, 508, 254, 0, 2876, 2884, 3, 198, 99, 0, 2877, 2884, 3, 12, 6, 0, 2878, 2884, 3, 42, 21, 0, 2879, 2884, 3,
		46, 23, 0, 2880, 2884, 3, 502, 251, 0, 2881, 2884, 3, 238, 119, 0, 2882, 2884, 3, 236, 118, 0, 2883, 2866, 1, 0, 0,
		0, 2883, 2867, 1, 0, 0, 0, 2883, 2868, 1, 0, 0, 0, 2883, 2869, 1, 0, 0, 0, 2883, 2870, 1, 0, 0, 0, 2883, 2871, 1, 0,
		0, 0, 2883, 2872, 1, 0, 0, 0, 2883, 2873, 1, 0, 0, 0, 2883, 2874, 1, 0, 0, 0, 2883, 2875, 1, 0, 0, 0, 2883, 2876, 1,
		0, 0, 0, 2883, 2877, 1, 0, 0, 0, 2883, 2878, 1, 0, 0, 0, 2883, 2879, 1, 0, 0, 0, 2883, 2880, 1, 0, 0, 0, 2883, 2881,
		1, 0, 0, 0, 2883, 2882, 1, 0, 0, 0, 2884, 475, 1, 0, 0, 0, 2885, 2886, 3, 478, 239, 0, 2886, 2887, 5, 163, 0, 0,
		2887, 2888, 5, 50, 0, 0, 2888, 2889, 5, 59, 0, 0, 2889, 2891, 3, 318, 159, 0, 2890, 2892, 3, 452, 226, 0, 2891,
		2890, 1, 0, 0, 0, 2891, 2892, 1, 0, 0, 0, 2892, 2894, 1, 0, 0, 0, 2893, 2895, 3, 232, 116, 0, 2894, 2893, 1, 0, 0,
		0, 2894, 2895, 1, 0, 0, 0, 2895, 2896, 1, 0, 0, 0, 2896, 2897, 5, 150, 0, 0, 2897, 477, 1, 0, 0, 0, 2898, 2899, 7,
		17, 0, 0, 2899, 479, 1, 0, 0, 0, 2900, 2903, 3, 368, 184, 0, 2901, 2903, 3, 222, 111, 0, 2902, 2900, 1, 0, 0, 0,
		2902, 2901, 1, 0, 0, 0, 2903, 481, 1, 0, 0, 0, 2904, 2905, 5, 98, 0, 0, 2905, 2906, 5, 163, 0, 0, 2906, 2907, 5, 50,
		0, 0, 2907, 2908, 3, 484, 242, 0, 2908, 2909, 5, 150, 0, 0, 2909, 483, 1, 0, 0, 0, 2910, 2912, 3, 414, 207, 0, 2911,
		2910, 1, 0, 0, 0, 2911, 2912, 1, 0, 0, 0, 2912, 2913, 1, 0, 0, 0, 2913, 2915, 3, 318, 159, 0, 2914, 2916, 3, 118,
		59, 0, 2915, 2914, 1, 0, 0, 0, 2915, 2916, 1, 0, 0, 0, 2916, 485, 1, 0, 0, 0, 2917, 2918, 7, 18, 0, 0, 2918, 487, 1,
		0, 0, 0, 2919, 2922, 3, 318, 159, 0, 2920, 2922, 3, 10, 5, 0, 2921, 2919, 1, 0, 0, 0, 2921, 2920, 1, 0, 0, 0, 2922,
		489, 1, 0, 0, 0, 2923, 2924, 5, 37, 0, 0, 2924, 2925, 3, 184, 92, 0, 2925, 491, 1, 0, 0, 0, 2926, 2927, 3, 318, 159,
		0, 2927, 2928, 5, 143, 0, 0, 2928, 2929, 3, 184, 92, 0, 2929, 2930, 5, 144, 0, 0, 2930, 493, 1, 0, 0, 0, 2931, 2934,
		3, 218, 109, 0, 2932, 2934, 3, 250, 125, 0, 2933, 2931, 1, 0, 0, 0, 2933, 2932, 1, 0, 0, 0, 2934, 495, 1, 0, 0, 0,
		2935, 2942, 3, 420, 210, 0, 2936, 2942, 3, 78, 39, 0, 2937, 2942, 3, 4, 2, 0, 2938, 2942, 3, 204, 102, 0, 2939,
		2942, 3, 386, 193, 0, 2940, 2942, 3, 388, 194, 0, 2941, 2935, 1, 0, 0, 0, 2941, 2936, 1, 0, 0, 0, 2941, 2937, 1, 0,
		0, 0, 2941, 2938, 1, 0, 0, 0, 2941, 2939, 1, 0, 0, 0, 2941, 2940, 1, 0, 0, 0, 2942, 497, 1, 0, 0, 0, 2943, 2944, 5,
		13, 0, 0, 2944, 2945, 5, 143, 0, 0, 2945, 2950, 3, 258, 129, 0, 2946, 2947, 5, 151, 0, 0, 2947, 2949, 3, 258, 129,
		0, 2948, 2946, 1, 0, 0, 0, 2949, 2952, 1, 0, 0, 0, 2950, 2948, 1, 0, 0, 0, 2950, 2951, 1, 0, 0, 0, 2951, 2953, 1, 0,
		0, 0, 2952, 2950, 1, 0, 0, 0, 2953, 2954, 5, 144, 0, 0, 2954, 2955, 5, 64, 0, 0, 2955, 2956, 3, 484, 242, 0, 2956,
		499, 1, 0, 0, 0, 2957, 2958, 5, 104, 0, 0, 2958, 2959, 5, 50, 0, 0, 2959, 2960, 3, 252, 126, 0, 2960, 501, 1, 0, 0,
		0, 2961, 2962, 5, 108, 0, 0, 2962, 2967, 3, 428, 214, 0, 2963, 2964, 5, 151, 0, 0, 2964, 2966, 3, 428, 214, 0, 2965,
		2963, 1, 0, 0, 0, 2966, 2969, 1, 0, 0, 0, 2967, 2965, 1, 0, 0, 0, 2967, 2968, 1, 0, 0, 0, 2968, 2970, 1, 0, 0, 0,
		2969, 2967, 1, 0, 0, 0, 2970, 2971, 5, 150, 0, 0, 2971, 503, 1, 0, 0, 0, 2972, 2973, 5, 163, 0, 0, 2973, 2975, 5,
		149, 0, 0, 2974, 2972, 1, 0, 0, 0, 2974, 2975, 1, 0, 0, 0, 2975, 2976, 1, 0, 0, 0, 2976, 2977, 5, 86, 0, 0, 2977,
		2978, 3, 100, 50, 0, 2978, 2979, 5, 150, 0, 0, 2979, 505, 1, 0, 0, 0, 2980, 2981, 5, 163, 0, 0, 2981, 2983, 5, 149,
		0, 0, 2982, 2980, 1, 0, 0, 0, 2982, 2983, 1, 0, 0, 0, 2983, 2986, 1, 0, 0, 0, 2984, 2987, 3, 468, 234, 0, 2985,
		2987, 3, 432, 216, 0, 2986, 2984, 1, 0, 0, 0, 2986, 2985, 1, 0, 0, 0, 2987, 507, 1, 0, 0, 0, 2988, 2990, 5, 92, 0,
		0, 2989, 2988, 1, 0, 0, 0, 2989, 2990, 1, 0, 0, 0, 2990, 2991, 1, 0, 0, 0, 2991, 2992, 5, 109, 0, 0, 2992, 2993, 3,
		242, 121, 0, 2993, 2994, 5, 149, 0, 0, 2994, 2996, 3, 484, 242, 0, 2995, 2997, 3, 232, 116, 0, 2996, 2995, 1, 0, 0,
		0, 2996, 2997, 1, 0, 0, 0, 2997, 3000, 1, 0, 0, 0, 2998, 2999, 5, 141, 0, 0, 2999, 3001, 3, 184, 92, 0, 3000, 2998,
		1, 0, 0, 0, 3000, 3001, 1, 0, 0, 0, 3001, 3002, 1, 0, 0, 0, 3002, 3003, 5, 150, 0, 0, 3003, 509, 1, 0, 0, 0, 3004,
		3005, 5, 163, 0, 0, 3005, 3007, 5, 149, 0, 0, 3006, 3004, 1, 0, 0, 0, 3006, 3007, 1, 0, 0, 0, 3007, 3008, 1, 0, 0,
		0, 3008, 3010, 5, 115, 0, 0, 3009, 3011, 3, 438, 219, 0, 3010, 3009, 1, 0, 0, 0, 3010, 3011, 1, 0, 0, 0, 3011, 3013,
		1, 0, 0, 0, 3012, 3014, 3, 96, 48, 0, 3013, 3012, 1, 0, 0, 0, 3013, 3014, 1, 0, 0, 0, 3014, 3016, 1, 0, 0, 0, 3015,
		3017, 3, 490, 245, 0, 3016, 3015, 1, 0, 0, 0, 3016, 3017, 1, 0, 0, 0, 3017, 3018, 1, 0, 0, 0, 3018, 3019, 5, 150, 0,
		0, 3019, 511, 1, 0, 0, 0, 3020, 3025, 3, 514, 257, 0, 3021, 3022, 5, 151, 0, 0, 3022, 3024, 3, 514, 257, 0, 3023,
		3021, 1, 0, 0, 0, 3024, 3027, 1, 0, 0, 0, 3025, 3023, 1, 0, 0, 0, 3025, 3026, 1, 0, 0, 0, 3026, 3030, 1, 0, 0, 0,
		3027, 3025, 1, 0, 0, 0, 3028, 3030, 5, 105, 0, 0, 3029, 3020, 1, 0, 0, 0, 3029, 3028, 1, 0, 0, 0, 3030, 513, 1, 0,
		0, 0, 3031, 3034, 3, 184, 92, 0, 3032, 3033, 5, 8, 0, 0, 3033, 3035, 3, 184, 92, 0, 3034, 3032, 1, 0, 0, 0, 3034,
		3035, 1, 0, 0, 0, 3035, 3042, 1, 0, 0, 0, 3036, 3039, 5, 63, 0, 0, 3037, 3038, 5, 8, 0, 0, 3038, 3040, 3, 184, 92,
		0, 3039, 3037, 1, 0, 0, 0, 3039, 3040, 1, 0, 0, 0, 3040, 3042, 1, 0, 0, 0, 3041, 3031, 1, 0, 0, 0, 3041, 3036, 1, 0,
		0, 0, 3042, 515, 1, 0, 0, 0, 351, 526, 532, 540, 548, 557, 562, 573, 583, 590, 595, 598, 607, 612, 617, 620, 625,
		629, 635, 637, 649, 656, 665, 671, 675, 679, 687, 696, 717, 720, 723, 730, 736, 765, 773, 775, 784, 787, 793, 795,
		801, 803, 808, 815, 821, 828, 842, 847, 853, 861, 866, 876, 882, 889, 897, 900, 909, 912, 915, 919, 922, 930, 933,
		944, 956, 959, 967, 970, 977, 980, 991, 994, 1001, 1004, 1009, 1014, 1017, 1027, 1032, 1037, 1040, 1045, 1056, 1064,
		1068, 1073, 1088, 1093, 1103, 1109, 1112, 1119, 1123, 1127, 1135, 1148, 1156, 1161, 1169, 1177, 1185, 1188, 1193,
		1200, 1217, 1231, 1237, 1246, 1250, 1257, 1264, 1269, 1275, 1281, 1284, 1289, 1296, 1299, 1303, 1306, 1330, 1334,
		1341, 1346, 1356, 1368, 1375, 1379, 1383, 1393, 1413, 1415, 1420, 1425, 1451, 1458, 1468, 1492, 1496, 1501, 1507,
		1513, 1520, 1526, 1539, 1544, 1550, 1555, 1562, 1567, 1572, 1576, 1581, 1586, 1589, 1598, 1602, 1615, 1627, 1642,
		1657, 1665, 1673, 1681, 1687, 1691, 1696, 1702, 1710, 1719, 1724, 1731, 1734, 1739, 1745, 1760, 1764, 1772, 1782,
		1790, 1794, 1801, 1806, 1814, 1819, 1824, 1832, 1842, 1847, 1853, 1863, 1867, 1882, 1887, 1893, 1896, 1905, 1909,
		1913, 1919, 1923, 1926, 1931, 1936, 1942, 1950, 1962, 1969, 1973, 1976, 1982, 1988, 1997, 2007, 2013, 2027, 2039,
		2051, 2059, 2061, 2063, 2068, 2072, 2076, 2082, 2089, 2098, 2104, 2107, 2128, 2134, 2139, 2144, 2147, 2169, 2177,
		2188, 2195, 2210, 2221, 2232, 2238, 2242, 2247, 2258, 2262, 2284, 2293, 2296, 2300, 2308, 2314, 2333, 2337, 2341,
		2348, 2351, 2356, 2363, 2369, 2375, 2383, 2386, 2391, 2398, 2403, 2407, 2416, 2423, 2442, 2448, 2454, 2462, 2466,
		2471, 2481, 2486, 2497, 2510, 2521, 2528, 2534, 2540, 2546, 2553, 2559, 2568, 2572, 2580, 2585, 2597, 2608, 2622,
		2629, 2634, 2638, 2644, 2655, 2670, 2685, 2690, 2694, 2699, 2706, 2711, 2714, 2732, 2736, 2741, 2748, 2752, 2761,
		2766, 2774, 2777, 2781, 2792, 2802, 2806, 2810, 2824, 2829, 2844, 2851, 2856, 2859, 2883, 2891, 2894, 2902, 2911,
		2915, 2921, 2933, 2941, 2950, 2967, 2974, 2982, 2986, 2989, 2996, 3000, 3006, 3010, 3013, 3016, 3025, 3029, 3034,
		3039, 3041
	)


class VHDLParser(Parser):
	grammarFileName = "VHDLParser.g4"

	atn = ATNDeserializer().deserialize(serializedATN())

	decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

	sharedContextCache = PredictionContextCache()

	literalNames = (
		"<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", "'abs'", "'access'", "'after'",
		"'alias'", "'all'", "'and'", "'architecture'", "'array'", "'assert'", "'attribute'", "'assume'", "'begin'",
		"'block'", "'body'", "'buffer'", "'bus'", "'case'", "'component'", "'configuration'", "'constant'", "'context'",
		"'cover'", "'default'", "'disconnect'", "'downto'", "'else'", "'elsif'", "'end'", "'entity'", "'exit'", "'file'",
		"'for'", "'force'", "'function'", "'fairness'", "'generate'", "'generic'", "'guarded'", "'group'", "'if'",
		"'impure'", "'in'", "'inertial'", "'inout'", "'is'", "'label'", "'library'", "'linkage'", "'loop'", "'literal'",
		"'map'", "'mod'", "'nand'", "'new'", "'next'", "'nor'", "'not'", "'null'", "'of'", "'on'", "'open'", "'or'",
		"'others'", "'out'", "'package'", "'parameter'", "'port'", "'postponed'", "'private'", "'procedure'", "'process'",
		"'protected'", "'pure'", "'range'", "'record'", "'register'", "'reject'", "'release'", "'rem'", "'report'",
		"'return'", "'rol'", "'ror'", "'restrict'", "'select'", "'severity'", "'shared'", "'signal'", "'sla'", "'sll'",
		"'sra'", "'srl'", "'subtype'", "'strong'", "'sequence'", "'then'", "'to'", "'transport'", "'type'", "'unaffected'",
		"'units'", "'until'", "'use'", "'variable'", "'view'", "'vpkg'", "'vmode'", "'vprop'", "'vunit'", "'wait'",
		"'with'", "'when'", "'while'", "'xnor'", "'xor'", "'='", "'/='", "'<'", "'>'", "'>='", "'?='", "'?/='", "'?<'",
		"'?<='", "'?>'", "'?>='", "'+'", "'-'", "'*'", "'/'", "'**'", "'&'", "'??'", "'=>'", "'<='", "':='", "'<>'", "'('",
		"')'", "'['", "']'", "'<<'", "'>>'", "':'", "';'", "','", "'|'", "'.'", "'?'", "'@'", "'^'", "'''", "'\"'"
	)

	symbolicNames = (
		"<INVALID>", "LINEBREAK", "WHITESPACE", "COMMENT_LINE", "COMMENT_BLOCK", "TOOLDIRECTIVE", "OP_ABS", "KW_ACCESS",
		"KW_AFTER", "KW_ALIAS", "KW_ALL", "OP_AND", "KW_ARCHITECTURE", "KW_ARRAY", "KW_ASSERT", "KW_ATTRIBUTE",
		"KW_PSL_ASSUME", "KW_BEGIN", "KW_BLOCK", "KW_BODY", "KW_BUFFER", "KW_BUS", "KW_CASE", "KW_COMPONENT",
		"KW_CONFIGURATION", "KW_CONSTANT", "KW_CONTEXT", "KW_PSL_COVER", "KW_DEFAULT", "KW_DISCONNECT", "KW_DOWNTO",
		"KW_ELSE", "KW_ELSIF", "KW_END", "KW_ENTITY", "KW_EXIT", "KW_FILE", "KW_FOR", "KW_FORCE", "KW_FUNCTION",
		"KW_PSL_FAIRNESS", "KW_GENERATE", "KW_GENERIC", "KW_GUARDED", "KW_GROUP", "KW_IF", "KW_IMPURE", "KW_IN",
		"KW_INERTIAL", "KW_INOUT", "KW_IS", "KW_LABEL", "KW_LIBRARY", "KW_LINKAGE", "KW_LOOP", "KW_PSL_LITERAL", "KW_MAP",
		"OP_MOD", "OP_NAND", "KW_NEW", "KW_NEXT", "OP_NOR", "OP_NOT", "KW_NULL", "KW_OF", "KW_ON", "KW_OPEN", "OP_OR",
		"KW_OTHERS", "KW_OUT", "KW_PACKAGE", "KW_PARAMETER", "KW_PORT", "KW_POSTPONED", "KW_PRIVATE", "KW_PROCEDURE",
		"KW_PROCESS", "KW_PROTECTED", "KW_PURE", "KW_RANGE", "KW_RECORD", "KW_REGISTER", "KW_REJECT", "KW_RELEASE",
		"OP_REM", "KW_REPORT", "KW_RETURN", "OP_ROL", "OP_ROR", "KW_PSL_RESTRICT", "KW_SELECT", "KW_SEVERITY", "KW_SHARED",
		"KW_SIGNAL", "OP_SLA", "OP_SLL", "OP_SRA", "OP_SRL", "KW_SUBTYPE", "KW_PSL_STRONG", "KW_PSL_SEQUENCE", "KW_THEN",
		"KW_TO", "KW_TRANSPORT", "KW_TYPE", "KW_UNAFFECTED", "KW_UNITS", "KW_UNTIL", "KW_USE", "KW_VARIABLE", "KW_VIEW",
		"KW_PSL_VPKG", "KW_PSL_VMODE", "KW_PSL_VPROP", "KW_PSL_VUNIT", "KW_WAIT", "KW_WITH", "KW_WHEN", "KW_WHILE",
		"OP_XNOR", "OP_XOR", "OP_EQ", "OP_NE", "OP_LT", "OP_GT", "OP_GE", "OP_IEQ", "OP_INE", "OP_ILT", "OP_ILE", "OP_IGT",
		"OP_IGE", "OP_PLUS", "OP_MINUS", "OP_MUL", "OP_DIV", "OP_POW", "OP_CONCAT", "OP_CONDITION", "TOK_RARROW",
		"TOK_SIG_ASSIGN", "TOK_VAR_ASSIGN", "TOK_BOX", "TOK_LP", "TOK_RP", "TOK_LB", "TOK_RB", "TOK_DLA", "TOK_DRA",
		"TOK_COLON", "TOK_SEMICOL", "TOK_COMMA", "TOK_BAR", "TOK_DOT", "TOK_QUESTION", "TOK_AT", "TOK_CIRCUMFLEX",
		"TOK_TICK", "TOK_DQUOTE", "LIT_ABSTRACT", "LIT_BIT_STRING", "LIT_CHARACTER", "LIT_STRING", "LIT_IDENTIFIER"
	)

	RULE_rule_AbsolutePathname = 0
	RULE_rule_AccessIncompleteTypeDefinition = 1
	RULE_rule_AccessTypeDefinition = 2
	RULE_rule_ActualDesignator = 3
	RULE_rule_ActualPart = 4
	RULE_rule_Aggregate = 5
	RULE_rule_AliasDeclaration = 6
	RULE_rule_AliasDesignator = 7
	RULE_rule_AliasIndication = 8
	RULE_rule_Allocator = 9
	RULE_rule_Architecture = 10
	RULE_rule_ArchitectureStatement = 11
	RULE_rule_ArrayConstraint = 12
	RULE_rule_ArrayIncompleteTypeDefinition = 13
	RULE_rule_ArrayIndexIncompleteType = 14
	RULE_rule_ArrayIndexIncompleteTypeList = 15
	RULE_rule_ArrayModeViewIndication = 16
	RULE_rule_Assertion = 17
	RULE_rule_AssertionStatement = 18
	RULE_rule_AssociationElement = 19
	RULE_rule_AssociationList = 20
	RULE_rule_AttributeDeclaration = 21
	RULE_rule_AttributeDesignator = 22
	RULE_rule_AttributeSpecification = 23
	RULE_rule_BindingIndication = 24
	RULE_rule_BlockConfiguration = 25
	RULE_rule_BlockDeclarativeItem = 26
	RULE_rule_BlockSpecification = 27
	RULE_rule_BlockStatement = 28
	RULE_rule_CaseGenerateAlternative = 29
	RULE_rule_CaseGenerateStatement = 30
	RULE_rule_CaseStatement = 31
	RULE_rule_CaseStatementAlternative = 32
	RULE_rule_Choice = 33
	RULE_rule_Choices = 34
	RULE_rule_ComponentConfiguration = 35
	RULE_rule_ComponentDeclaration = 36
	RULE_rule_ComponentInstantiationStatement = 37
	RULE_rule_ComponentSpecification = 38
	RULE_rule_CompositeTypeDefinition = 39
	RULE_rule_CompoundConfigurationSpecification = 40
	RULE_rule_ConcurrentAssertionStatement = 41
	RULE_rule_ConcurrentConditionalSignalAssignment = 42
	RULE_rule_ConcurrentProcedureCallStatement = 43
	RULE_rule_ConcurrentSelectedSignalAssignment = 44
	RULE_rule_ConcurrentSignalAssignmentStatement = 45
	RULE_rule_ConcurrentSimpleSignalAssignment = 46
	RULE_rule_ConcurrentStatement = 47
	RULE_rule_ConditionClause = 48
	RULE_rule_ConditionalExpression = 49
	RULE_rule_ConditionalOrUnaffectedExpression = 50
	RULE_rule_ConditionalSignalAssignment = 51
	RULE_rule_ConditionalWaveforms = 52
	RULE_rule_ConfigurationDeclaration = 53
	RULE_rule_ConfigurationDeclarativeItem = 54
	RULE_rule_ConfigurationItem = 55
	RULE_rule_ConfigurationSpecification = 56
	RULE_rule_ConstantDeclaration = 57
	RULE_rule_ConstrainedArrayDefinition = 58
	RULE_rule_Constraint = 59
	RULE_rule_ContextDeclaration = 60
	RULE_rule_ContextItem = 61
	RULE_rule_ContextReference = 62
	RULE_rule_DelayMechanism = 63
	RULE_rule_DesignFile = 64
	RULE_rule_DesignUnit = 65
	RULE_rule_Designator = 66
	RULE_rule_Direction = 67
	RULE_rule_DisconnectionSpecification = 68
	RULE_rule_DiscreteRange = 69
	RULE_rule_DiscreteIncompleteTypeDefinition = 70
	RULE_rule_ElementArrayModeViewIndication = 71
	RULE_rule_ElementAssociation = 72
	RULE_rule_ElementConstraint = 73
	RULE_rule_ElementDeclaration = 74
	RULE_rule_ElementModeIndication = 75
	RULE_rule_ElementModeViewIndication = 76
	RULE_rule_ElementRecordModeViewIndication = 77
	RULE_rule_ElementResolution = 78
	RULE_rule_EntityAspect = 79
	RULE_rule_EntityClass = 80
	RULE_rule_EntityClassEntry = 81
	RULE_rule_EntityDeclaration = 82
	RULE_rule_EntityDeclarativeItem = 83
	RULE_rule_EntityDesignator = 84
	RULE_rule_EntityNameList = 85
	RULE_rule_EntitySpecification = 86
	RULE_rule_EntityStatement = 87
	RULE_rule_EntityTag = 88
	RULE_rule_EnumerationLiteral = 89
	RULE_rule_EnumerationTypeDefinition = 90
	RULE_rule_ExitStatement = 91
	RULE_rule_Expression = 92
	RULE_rule_ExpressionOrUnaffected = 93
	RULE_rule_ExternalName = 94
	RULE_rule_ExternalConstantName = 95
	RULE_rule_ExternalSignalName = 96
	RULE_rule_ExternalVariableName = 97
	RULE_rule_ExternalPathname = 98
	RULE_rule_FileDeclaration = 99
	RULE_rule_FileIncompleteTypeDefinition = 100
	RULE_rule_FileOpenInformation = 101
	RULE_rule_FileTypeDefinition = 102
	RULE_rule_FloatingIncompleteTypeDefinition = 103
	RULE_rule_FloatingTypeDefinition = 104
	RULE_rule_ForGenerateStatement = 105
	RULE_rule_FormalDesignator = 106
	RULE_rule_FormalParameterList = 107
	RULE_rule_FormalPart = 108
	RULE_rule_FullTypeDeclaration = 109
	RULE_rule_FunctionCall = 110
	RULE_rule_FunctionSpecification = 111
	RULE_rule_GenerateSpecification = 112
	RULE_rule_GenerateStatement = 113
	RULE_rule_GenerateStatementBody = 114
	RULE_rule_GenericClause = 115
	RULE_rule_GenericMapAspect = 116
	RULE_rule_GroupConstituent = 117
	RULE_rule_GroupDeclaration = 118
	RULE_rule_GroupTemplateDeclaration = 119
	RULE_rule_GuardedSignalSpecification = 120
	RULE_rule_IdentifierList = 121
	RULE_rule_IfGenerateStatement = 122
	RULE_rule_IfStatement = 123
	RULE_rule_IncompleteSubtypeIndication = 124
	RULE_rule_IncompleteTypeDeclaration = 125
	RULE_rule_IncompleteTypeDefinition = 126
	RULE_rule_IncompleteTypeMark = 127
	RULE_rule_IndexConstraint = 128
	RULE_rule_IndexSubtypeDefinition = 129
	RULE_rule_InstantiatedUnit = 130
	RULE_rule_InstantiationList = 131
	RULE_rule_IntegerIncompleteTypeDefinition = 132
	RULE_rule_IntegerTypeDefinition = 133
	RULE_rule_InterfaceConstantDeclaration = 134
	RULE_rule_InterfaceDeclaration = 135
	RULE_rule_InterfaceElement = 136
	RULE_rule_InterfaceFileDeclaration = 137
	RULE_rule_InterfaceFunctionSpecification = 138
	RULE_rule_InterfaceList = 139
	RULE_rule_InterfacePackageDeclaration = 140
	RULE_rule_InterfacePackageGenericMapAspect = 141
	RULE_rule_InterfaceProcedureSpecification = 142
	RULE_rule_InterfaceSignalDeclaration = 143
	RULE_rule_InterfaceSubprogramDeclaration = 144
	RULE_rule_InterfaceSubprogramDefault = 145
	RULE_rule_InterfaceSubprogramSpecification = 146
	RULE_rule_InterfaceTypeDeclaration = 147
	RULE_rule_InterfaceTypeIndication = 148
	RULE_rule_InterfaceVariableDeclaration = 149
	RULE_rule_IterationScheme = 150
	RULE_rule_LibraryClause = 151
	RULE_rule_LibraryUnit = 152
	RULE_rule_Literal = 153
	RULE_rule_LoopStatement = 154
	RULE_rule_Mode = 155
	RULE_rule_ModeIndication = 156
	RULE_rule_ModeViewDeclaration = 157
	RULE_rule_ModeViewElementDefinition = 158
	RULE_rule_Name = 159
	RULE_rule_NextStatement = 160
	RULE_rule_NullStatement = 161
	RULE_rule_NumericLiteral = 162
	RULE_rule_PackageBody = 163
	RULE_rule_PackageBodyDeclarativeItem = 164
	RULE_rule_PackageDeclaration = 165
	RULE_rule_PackageDeclarativeItem = 166
	RULE_rule_PackageInstantiationDeclaration = 167
	RULE_rule_PackagePathname = 168
	RULE_rule_ParameterMapAspect = 169
	RULE_rule_ParameterSpecification = 170
	RULE_rule_PartialPathname = 171
	RULE_rule_PathnameElement = 172
	RULE_rule_PhysicalIncompleteTypeDefinition = 173
	RULE_rule_PhysicalLiteral = 174
	RULE_rule_PhysicalTypeDefinition = 175
	RULE_rule_PlainReturnStatement = 176
	RULE_rule_PortClause = 177
	RULE_rule_PortMapAspect = 178
	RULE_rule_Primary = 179
	RULE_rule_PrivateVariableDeclaration = 180
	RULE_rule_PrivateIncompleteTypeDefinition = 181
	RULE_rule_ProcedureCall = 182
	RULE_rule_ProcedureCallStatement = 183
	RULE_rule_ProcedureSpecification = 184
	RULE_rule_ProcessDeclarativeItem = 185
	RULE_rule_ProcessSensitivityList = 186
	RULE_rule_ProcessStatement = 187
	RULE_rule_PostponedProcessStatement = 188
	RULE_rule_ProtectedTypeBody = 189
	RULE_rule_ProtectedTypeBodyDeclarativeItem = 190
	RULE_rule_ProtectedTypeDeclaration = 191
	RULE_rule_ProtectedTypeDeclarativeItem = 192
	RULE_rule_ProtectedTypeDefinition = 193
	RULE_rule_ProtectedTypeInstantiationDefinition = 194
	RULE_rule_QualifiedExpression = 195
	RULE_rule_Range = 196
	RULE_rule_RangeConstraint = 197
	RULE_rule_RecordConstraint = 198
	RULE_rule_RecordElementConstraint = 199
	RULE_rule_RecordElementList = 200
	RULE_rule_RecordElementResolution = 201
	RULE_rule_RecordResolution = 202
	RULE_rule_RecordTypeDefinition = 203
	RULE_rule_RecordModeViewIndication = 204
	RULE_rule_RelativePathname = 205
	RULE_rule_ReportStatement = 206
	RULE_rule_ResolutionIndication = 207
	RULE_rule_ReturnStatement = 208
	RULE_rule_ScalarIncompleteTypeDefinition = 209
	RULE_rule_ScalarTypeDefinition = 210
	RULE_rule_SecondaryUnitDeclaration = 211
	RULE_rule_SelectedExpressions = 212
	RULE_rule_SelectedForceAssignment = 213
	RULE_rule_SelectedName2 = 214
	RULE_rule_SelectedSignalAssignment = 215
	RULE_rule_SelectedVariableAssignment = 216
	RULE_rule_SelectedWaveformAssignment = 217
	RULE_rule_SelectedWaveforms = 218
	RULE_rule_SensitivityClause = 219
	RULE_rule_SensitivityList = 220
	RULE_rule_SequentialBlockStatement = 221
	RULE_rule_SequentialStatement = 222
	RULE_rule_SignalAssignmentStatement = 223
	RULE_rule_SignalDeclaration = 224
	RULE_rule_SignalList = 225
	RULE_rule_Signature = 226
	RULE_rule_SimpleConfigurationSpecification = 227
	RULE_rule_SimpleForceAssignment = 228
	RULE_rule_SimpleModeIndication = 229
	RULE_rule_SimpleRange = 230
	RULE_rule_SimpleReleaseAssignment = 231
	RULE_rule_SimpleSignalAssignment = 232
	RULE_rule_SimpleWaveformAssignment = 233
	RULE_rule_SimpleVariableAssignment = 234
	RULE_rule_SubprogramBody = 235
	RULE_rule_SubprogramDeclaration = 236
	RULE_rule_SubprogramDeclarativeItem = 237
	RULE_rule_SubprogramInstantiationDeclaration = 238
	RULE_rule_SubprogramKind = 239
	RULE_rule_SubprogramSpecification = 240
	RULE_rule_SubtypeDeclaration = 241
	RULE_rule_SubtypeIndication = 242
	RULE_rule_Suffix = 243
	RULE_rule_Target = 244
	RULE_rule_TimeoutClause = 245
	RULE_rule_TypeConversion = 246
	RULE_rule_TypeDeclaration = 247
	RULE_rule_TypeDefinition = 248
	RULE_rule_UnboundArrayDefinition = 249
	RULE_rule_UnspecifiedTypeIndication = 250
	RULE_rule_UseClause = 251
	RULE_rule_ValueReturnStatement = 252
	RULE_rule_VariableAssignmentStatement = 253
	RULE_rule_VariableDeclaration = 254
	RULE_rule_WaitStatement = 255
	RULE_rule_Waveform = 256
	RULE_rule_WaveformElement = 257

	ruleNames = (
		"rule_AbsolutePathname", "rule_AccessIncompleteTypeDefinition", "rule_AccessTypeDefinition",
		"rule_ActualDesignator", "rule_ActualPart", "rule_Aggregate", "rule_AliasDeclaration", "rule_AliasDesignator",
		"rule_AliasIndication", "rule_Allocator", "rule_Architecture", "rule_ArchitectureStatement", "rule_ArrayConstraint",
		"rule_ArrayIncompleteTypeDefinition", "rule_ArrayIndexIncompleteType", "rule_ArrayIndexIncompleteTypeList",
		"rule_ArrayModeViewIndication", "rule_Assertion", "rule_AssertionStatement", "rule_AssociationElement",
		"rule_AssociationList", "rule_AttributeDeclaration", "rule_AttributeDesignator", "rule_AttributeSpecification",
		"rule_BindingIndication", "rule_BlockConfiguration", "rule_BlockDeclarativeItem", "rule_BlockSpecification",
		"rule_BlockStatement", "rule_CaseGenerateAlternative", "rule_CaseGenerateStatement", "rule_CaseStatement",
		"rule_CaseStatementAlternative", "rule_Choice", "rule_Choices", "rule_ComponentConfiguration",
		"rule_ComponentDeclaration", "rule_ComponentInstantiationStatement", "rule_ComponentSpecification",
		"rule_CompositeTypeDefinition", "rule_CompoundConfigurationSpecification", "rule_ConcurrentAssertionStatement",
		"rule_ConcurrentConditionalSignalAssignment", "rule_ConcurrentProcedureCallStatement",
		"rule_ConcurrentSelectedSignalAssignment", "rule_ConcurrentSignalAssignmentStatement",
		"rule_ConcurrentSimpleSignalAssignment", "rule_ConcurrentStatement", "rule_ConditionClause",
		"rule_ConditionalExpression", "rule_ConditionalOrUnaffectedExpression", "rule_ConditionalSignalAssignment",
		"rule_ConditionalWaveforms", "rule_ConfigurationDeclaration", "rule_ConfigurationDeclarativeItem",
		"rule_ConfigurationItem", "rule_ConfigurationSpecification", "rule_ConstantDeclaration",
		"rule_ConstrainedArrayDefinition", "rule_Constraint", "rule_ContextDeclaration", "rule_ContextItem",
		"rule_ContextReference", "rule_DelayMechanism", "rule_DesignFile", "rule_DesignUnit", "rule_Designator",
		"rule_Direction", "rule_DisconnectionSpecification", "rule_DiscreteRange", "rule_DiscreteIncompleteTypeDefinition",
		"rule_ElementArrayModeViewIndication", "rule_ElementAssociation", "rule_ElementConstraint",
		"rule_ElementDeclaration", "rule_ElementModeIndication", "rule_ElementModeViewIndication",
		"rule_ElementRecordModeViewIndication", "rule_ElementResolution", "rule_EntityAspect", "rule_EntityClass",
		"rule_EntityClassEntry", "rule_EntityDeclaration", "rule_EntityDeclarativeItem", "rule_EntityDesignator",
		"rule_EntityNameList", "rule_EntitySpecification", "rule_EntityStatement", "rule_EntityTag",
		"rule_EnumerationLiteral", "rule_EnumerationTypeDefinition", "rule_ExitStatement", "rule_Expression",
		"rule_ExpressionOrUnaffected", "rule_ExternalName", "rule_ExternalConstantName", "rule_ExternalSignalName",
		"rule_ExternalVariableName", "rule_ExternalPathname", "rule_FileDeclaration", "rule_FileIncompleteTypeDefinition",
		"rule_FileOpenInformation", "rule_FileTypeDefinition", "rule_FloatingIncompleteTypeDefinition",
		"rule_FloatingTypeDefinition", "rule_ForGenerateStatement", "rule_FormalDesignator", "rule_FormalParameterList",
		"rule_FormalPart", "rule_FullTypeDeclaration", "rule_FunctionCall", "rule_FunctionSpecification",
		"rule_GenerateSpecification", "rule_GenerateStatement", "rule_GenerateStatementBody", "rule_GenericClause",
		"rule_GenericMapAspect", "rule_GroupConstituent", "rule_GroupDeclaration", "rule_GroupTemplateDeclaration",
		"rule_GuardedSignalSpecification", "rule_IdentifierList", "rule_IfGenerateStatement", "rule_IfStatement",
		"rule_IncompleteSubtypeIndication", "rule_IncompleteTypeDeclaration", "rule_IncompleteTypeDefinition",
		"rule_IncompleteTypeMark", "rule_IndexConstraint", "rule_IndexSubtypeDefinition", "rule_InstantiatedUnit",
		"rule_InstantiationList", "rule_IntegerIncompleteTypeDefinition", "rule_IntegerTypeDefinition",
		"rule_InterfaceConstantDeclaration", "rule_InterfaceDeclaration", "rule_InterfaceElement",
		"rule_InterfaceFileDeclaration", "rule_InterfaceFunctionSpecification", "rule_InterfaceList",
		"rule_InterfacePackageDeclaration", "rule_InterfacePackageGenericMapAspect", "rule_InterfaceProcedureSpecification",
		"rule_InterfaceSignalDeclaration", "rule_InterfaceSubprogramDeclaration", "rule_InterfaceSubprogramDefault",
		"rule_InterfaceSubprogramSpecification", "rule_InterfaceTypeDeclaration", "rule_InterfaceTypeIndication",
		"rule_InterfaceVariableDeclaration", "rule_IterationScheme", "rule_LibraryClause", "rule_LibraryUnit",
		"rule_Literal", "rule_LoopStatement", "rule_Mode", "rule_ModeIndication", "rule_ModeViewDeclaration",
		"rule_ModeViewElementDefinition", "rule_Name", "rule_NextStatement", "rule_NullStatement", "rule_NumericLiteral",
		"rule_PackageBody", "rule_PackageBodyDeclarativeItem", "rule_PackageDeclaration", "rule_PackageDeclarativeItem",
		"rule_PackageInstantiationDeclaration", "rule_PackagePathname", "rule_ParameterMapAspect",
		"rule_ParameterSpecification", "rule_PartialPathname", "rule_PathnameElement",
		"rule_PhysicalIncompleteTypeDefinition", "rule_PhysicalLiteral", "rule_PhysicalTypeDefinition",
		"rule_PlainReturnStatement", "rule_PortClause", "rule_PortMapAspect", "rule_Primary",
		"rule_PrivateVariableDeclaration", "rule_PrivateIncompleteTypeDefinition", "rule_ProcedureCall",
		"rule_ProcedureCallStatement", "rule_ProcedureSpecification", "rule_ProcessDeclarativeItem",
		"rule_ProcessSensitivityList", "rule_ProcessStatement", "rule_PostponedProcessStatement", "rule_ProtectedTypeBody",
		"rule_ProtectedTypeBodyDeclarativeItem", "rule_ProtectedTypeDeclaration", "rule_ProtectedTypeDeclarativeItem",
		"rule_ProtectedTypeDefinition", "rule_ProtectedTypeInstantiationDefinition", "rule_QualifiedExpression",
		"rule_Range", "rule_RangeConstraint", "rule_RecordConstraint", "rule_RecordElementConstraint",
		"rule_RecordElementList", "rule_RecordElementResolution", "rule_RecordResolution", "rule_RecordTypeDefinition",
		"rule_RecordModeViewIndication", "rule_RelativePathname", "rule_ReportStatement", "rule_ResolutionIndication",
		"rule_ReturnStatement", "rule_ScalarIncompleteTypeDefinition", "rule_ScalarTypeDefinition",
		"rule_SecondaryUnitDeclaration", "rule_SelectedExpressions", "rule_SelectedForceAssignment", "rule_SelectedName2",
		"rule_SelectedSignalAssignment", "rule_SelectedVariableAssignment", "rule_SelectedWaveformAssignment",
		"rule_SelectedWaveforms", "rule_SensitivityClause", "rule_SensitivityList", "rule_SequentialBlockStatement",
		"rule_SequentialStatement", "rule_SignalAssignmentStatement", "rule_SignalDeclaration", "rule_SignalList",
		"rule_Signature", "rule_SimpleConfigurationSpecification", "rule_SimpleForceAssignment",
		"rule_SimpleModeIndication", "rule_SimpleRange", "rule_SimpleReleaseAssignment", "rule_SimpleSignalAssignment",
		"rule_SimpleWaveformAssignment", "rule_SimpleVariableAssignment", "rule_SubprogramBody",
		"rule_SubprogramDeclaration", "rule_SubprogramDeclarativeItem", "rule_SubprogramInstantiationDeclaration",
		"rule_SubprogramKind", "rule_SubprogramSpecification", "rule_SubtypeDeclaration", "rule_SubtypeIndication",
		"rule_Suffix", "rule_Target", "rule_TimeoutClause", "rule_TypeConversion", "rule_TypeDeclaration",
		"rule_TypeDefinition", "rule_UnboundArrayDefinition", "rule_UnspecifiedTypeIndication", "rule_UseClause",
		"rule_ValueReturnStatement", "rule_VariableAssignmentStatement", "rule_VariableDeclaration", "rule_WaitStatement",
		"rule_Waveform", "rule_WaveformElement"
	)

	EOF = Token.EOF
	LINEBREAK = 1
	WHITESPACE = 2
	COMMENT_LINE = 3
	COMMENT_BLOCK = 4
	TOOLDIRECTIVE = 5
	OP_ABS = 6
	KW_ACCESS = 7
	KW_AFTER = 8
	KW_ALIAS = 9
	KW_ALL = 10
	OP_AND = 11
	KW_ARCHITECTURE = 12
	KW_ARRAY = 13
	KW_ASSERT = 14
	KW_ATTRIBUTE = 15
	KW_PSL_ASSUME = 16
	KW_BEGIN = 17
	KW_BLOCK = 18
	KW_BODY = 19
	KW_BUFFER = 20
	KW_BUS = 21
	KW_CASE = 22
	KW_COMPONENT = 23
	KW_CONFIGURATION = 24
	KW_CONSTANT = 25
	KW_CONTEXT = 26
	KW_PSL_COVER = 27
	KW_DEFAULT = 28
	KW_DISCONNECT = 29
	KW_DOWNTO = 30
	KW_ELSE = 31
	KW_ELSIF = 32
	KW_END = 33
	KW_ENTITY = 34
	KW_EXIT = 35
	KW_FILE = 36
	KW_FOR = 37
	KW_FORCE = 38
	KW_FUNCTION = 39
	KW_PSL_FAIRNESS = 40
	KW_GENERATE = 41
	KW_GENERIC = 42
	KW_GUARDED = 43
	KW_GROUP = 44
	KW_IF = 45
	KW_IMPURE = 46
	KW_IN = 47
	KW_INERTIAL = 48
	KW_INOUT = 49
	KW_IS = 50
	KW_LABEL = 51
	KW_LIBRARY = 52
	KW_LINKAGE = 53
	KW_LOOP = 54
	KW_PSL_LITERAL = 55
	KW_MAP = 56
	OP_MOD = 57
	OP_NAND = 58
	KW_NEW = 59
	KW_NEXT = 60
	OP_NOR = 61
	OP_NOT = 62
	KW_NULL = 63
	KW_OF = 64
	KW_ON = 65
	KW_OPEN = 66
	OP_OR = 67
	KW_OTHERS = 68
	KW_OUT = 69
	KW_PACKAGE = 70
	KW_PARAMETER = 71
	KW_PORT = 72
	KW_POSTPONED = 73
	KW_PRIVATE = 74
	KW_PROCEDURE = 75
	KW_PROCESS = 76
	KW_PROTECTED = 77
	KW_PURE = 78
	KW_RANGE = 79
	KW_RECORD = 80
	KW_REGISTER = 81
	KW_REJECT = 82
	KW_RELEASE = 83
	OP_REM = 84
	KW_REPORT = 85
	KW_RETURN = 86
	OP_ROL = 87
	OP_ROR = 88
	KW_PSL_RESTRICT = 89
	KW_SELECT = 90
	KW_SEVERITY = 91
	KW_SHARED = 92
	KW_SIGNAL = 93
	OP_SLA = 94
	OP_SLL = 95
	OP_SRA = 96
	OP_SRL = 97
	KW_SUBTYPE = 98
	KW_PSL_STRONG = 99
	KW_PSL_SEQUENCE = 100
	KW_THEN = 101
	KW_TO = 102
	KW_TRANSPORT = 103
	KW_TYPE = 104
	KW_UNAFFECTED = 105
	KW_UNITS = 106
	KW_UNTIL = 107
	KW_USE = 108
	KW_VARIABLE = 109
	KW_VIEW = 110
	KW_PSL_VPKG = 111
	KW_PSL_VMODE = 112
	KW_PSL_VPROP = 113
	KW_PSL_VUNIT = 114
	KW_WAIT = 115
	KW_WITH = 116
	KW_WHEN = 117
	KW_WHILE = 118
	OP_XNOR = 119
	OP_XOR = 120
	OP_EQ = 121
	OP_NE = 122
	OP_LT = 123
	OP_GT = 124
	OP_GE = 125
	OP_IEQ = 126
	OP_INE = 127
	OP_ILT = 128
	OP_ILE = 129
	OP_IGT = 130
	OP_IGE = 131
	OP_PLUS = 132
	OP_MINUS = 133
	OP_MUL = 134
	OP_DIV = 135
	OP_POW = 136
	OP_CONCAT = 137
	OP_CONDITION = 138
	TOK_RARROW = 139
	TOK_SIG_ASSIGN = 140
	TOK_VAR_ASSIGN = 141
	TOK_BOX = 142
	TOK_LP = 143
	TOK_RP = 144
	TOK_LB = 145
	TOK_RB = 146
	TOK_DLA = 147
	TOK_DRA = 148
	TOK_COLON = 149
	TOK_SEMICOL = 150
	TOK_COMMA = 151
	TOK_BAR = 152
	TOK_DOT = 153
	TOK_QUESTION = 154
	TOK_AT = 155
	TOK_CIRCUMFLEX = 156
	TOK_TICK = 157
	TOK_DQUOTE = 158
	LIT_ABSTRACT = 159
	LIT_BIT_STRING = 160
	LIT_CHARACTER = 161
	LIT_STRING = 162
	LIT_IDENTIFIER = 163

	def __init__(self, input: TokenStream, output: TextIO = stdout):
		super().__init__(input, output)
		self.checkVersion("4.12.0")
		self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
		self._predicates = None

	class Rule_AbsolutePathnameContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def TOK_DOT(self):
			return self.getToken(VHDLParser.TOK_DOT, 0)

		def rule_PartialPathname(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PartialPathnameContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_AbsolutePathname

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_AbsolutePathname"):
				return visitor.visitRule_AbsolutePathname(self)
			else:
				return visitor.visitChildren(self)

	def rule_AbsolutePathname(self):

		localctx = VHDLParser.Rule_AbsolutePathnameContext(self, self._ctx, self.state)
		self.enterRule(localctx, 0, self.RULE_rule_AbsolutePathname)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 516
			self.match(VHDLParser.TOK_DOT)
			self.state = 517
			self.rule_PartialPathname()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_AccessIncompleteTypeDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_ACCESS(self):
			return self.getToken(VHDLParser.KW_ACCESS, 0)

		def rule_IncompleteSubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IncompleteSubtypeIndicationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_AccessIncompleteTypeDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_AccessIncompleteTypeDefinition"):
				return visitor.visitRule_AccessIncompleteTypeDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_AccessIncompleteTypeDefinition(self):

		localctx = VHDLParser.Rule_AccessIncompleteTypeDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 2, self.RULE_rule_AccessIncompleteTypeDefinition)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 519
			self.match(VHDLParser.KW_ACCESS)
			self.state = 520
			self.rule_IncompleteSubtypeIndication()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_AccessTypeDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext

		def KW_ACCESS(self):
			return self.getToken(VHDLParser.KW_ACCESS, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_AccessTypeDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_AccessTypeDefinition"):
				return visitor.visitRule_AccessTypeDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_AccessTypeDefinition(self):

		localctx = VHDLParser.Rule_AccessTypeDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 4, self.RULE_rule_AccessTypeDefinition)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 522
			self.match(VHDLParser.KW_ACCESS)
			self.state = 523
			localctx.subtypeIndication = self.rule_SubtypeIndication()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ActualDesignatorContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.inertial = None  # Token
			self.expression = None  # Rule_ExpressionContext
			self.name = None  # Rule_NameContext
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext
			self.open_ = None  # Token

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def KW_INERTIAL(self):
			return self.getToken(VHDLParser.KW_INERTIAL, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def KW_OPEN(self):
			return self.getToken(VHDLParser.KW_OPEN, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ActualDesignator

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ActualDesignator"):
				return visitor.visitRule_ActualDesignator(self)
			else:
				return visitor.visitChildren(self)

	def rule_ActualDesignator(self):

		localctx = VHDLParser.Rule_ActualDesignatorContext(self, self._ctx, self.state)
		self.enterRule(localctx, 6, self.RULE_rule_ActualDesignator)
		self._la = 0  # Token type
		try:
			self.state = 532
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 1, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 526
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == 48:
					self.state = 525
					localctx.inertial = self.match(VHDLParser.KW_INERTIAL)

				self.state = 528
				localctx.expression = self.rule_Expression(0)
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 529
				localctx.name = self.rule_Name(0)
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 530
				localctx.subtypeIndication = self.rule_SubtypeIndication()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 531
				localctx.open_ = self.match(VHDLParser.KW_OPEN)
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ActualPartContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.actualDesignator = None  # Rule_ActualDesignatorContext
			self.conversion = None  # Rule_NameContext

		def rule_ActualDesignator(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ActualDesignatorContext, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ActualPart

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ActualPart"):
				return visitor.visitRule_ActualPart(self)
			else:
				return visitor.visitChildren(self)

	def rule_ActualPart(self):

		localctx = VHDLParser.Rule_ActualPartContext(self, self._ctx, self.state)
		self.enterRule(localctx, 8, self.RULE_rule_ActualPart)
		try:
			self.state = 540
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 2, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 534
				localctx.actualDesignator = self.rule_ActualDesignator()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 535
				localctx.conversion = self.rule_Name(0)
				self.state = 536
				self.match(VHDLParser.TOK_LP)
				self.state = 537
				localctx.actualDesignator = self.rule_ActualDesignator()
				self.state = 538
				self.match(VHDLParser.TOK_RP)
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_AggregateContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_ElementAssociation = None  # Rule_ElementAssociationContext
			self.element = list()  # of Rule_ElementAssociationContexts

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def rule_ElementAssociation(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ElementAssociationContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ElementAssociationContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Aggregate

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Aggregate"):
				return visitor.visitRule_Aggregate(self)
			else:
				return visitor.visitChildren(self)

	def rule_Aggregate(self):

		localctx = VHDLParser.Rule_AggregateContext(self, self._ctx, self.state)
		self.enterRule(localctx, 10, self.RULE_rule_Aggregate)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 542
			self.match(VHDLParser.TOK_LP)
			self.state = 543
			localctx._rule_ElementAssociation = self.rule_ElementAssociation()
			localctx.element.append(localctx._rule_ElementAssociation)
			self.state = 548
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == 151:
				self.state = 544
				self.match(VHDLParser.TOK_COMMA)
				self.state = 545
				localctx._rule_ElementAssociation = self.rule_ElementAssociation()
				localctx.element.append(localctx._rule_ElementAssociation)
				self.state = 550
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 551
			self.match(VHDLParser.TOK_RP)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_AliasDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.aliasDesignator = None  # Rule_AliasDesignatorContext
			self.aliasIndication = None  # Rule_AliasIndicationContext
			self.aliasTarget = None  # Rule_NameContext
			self.signature = None  # Rule_SignatureContext

		def KW_ALIAS(self):
			return self.getToken(VHDLParser.KW_ALIAS, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_AliasDesignator(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AliasDesignatorContext, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def rule_AliasIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AliasIndicationContext, 0)

		def rule_Signature(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SignatureContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_AliasDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_AliasDeclaration"):
				return visitor.visitRule_AliasDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_AliasDeclaration(self):

		localctx = VHDLParser.Rule_AliasDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 12, self.RULE_rule_AliasDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 553
			self.match(VHDLParser.KW_ALIAS)
			self.state = 554
			localctx.aliasDesignator = self.rule_AliasDesignator()
			self.state = 557
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 149:
				self.state = 555
				self.match(VHDLParser.TOK_COLON)
				self.state = 556
				localctx.aliasIndication = self.rule_AliasIndication()

			self.state = 559
			self.match(VHDLParser.KW_IS)
			self.state = 560
			localctx.aliasTarget = self.rule_Name(0)
			self.state = 562
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 145:
				self.state = 561
				localctx.signature = self.rule_Signature()

			self.state = 564
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_AliasDesignatorContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def LIT_CHARACTER(self):
			return self.getToken(VHDLParser.LIT_CHARACTER, 0)

		def LIT_STRING(self):
			return self.getToken(VHDLParser.LIT_STRING, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_AliasDesignator

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_AliasDesignator"):
				return visitor.visitRule_AliasDesignator(self)
			else:
				return visitor.visitChildren(self)

	def rule_AliasDesignator(self):

		localctx = VHDLParser.Rule_AliasDesignatorContext(self, self._ctx, self.state)
		self.enterRule(localctx, 14, self.RULE_rule_AliasDesignator)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 566
			_la = self._input.LA(1)
			if not (((((_la - 161)) & ~0x3f) == 0 and ((1 << (_la - 161)) & 7) != 0)):
				self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_AliasIndicationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_AliasIndication

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_AliasIndication"):
				return visitor.visitRule_AliasIndication(self)
			else:
				return visitor.visitChildren(self)

	def rule_AliasIndication(self):

		localctx = VHDLParser.Rule_AliasIndicationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 16, self.RULE_rule_AliasIndication)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 568
			localctx.subtypeIndication = self.rule_SubtypeIndication()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_AllocatorContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext
			self.qualifiedExpression = None  # Rule_QualifiedExpressionContext

		def KW_NEW(self):
			return self.getToken(VHDLParser.KW_NEW, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def rule_QualifiedExpression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_QualifiedExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Allocator

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Allocator"):
				return visitor.visitRule_Allocator(self)
			else:
				return visitor.visitChildren(self)

	def rule_Allocator(self):

		localctx = VHDLParser.Rule_AllocatorContext(self, self._ctx, self.state)
		self.enterRule(localctx, 18, self.RULE_rule_Allocator)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 570
			self.match(VHDLParser.KW_NEW)
			self.state = 573
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 6, self._ctx)
			if la_ == 1:
				self.state = 571
				localctx.subtypeIndication = self.rule_SubtypeIndication()
				pass

			elif la_ == 2:
				self.state = 572
				localctx.qualifiedExpression = self.rule_QualifiedExpression()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ArchitectureContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.name = None  # Token
			self.entityName = None  # Token
			self._rule_BlockDeclarativeItem = None  # Rule_BlockDeclarativeItemContext
			self.declarativeItems = list()  # of Rule_BlockDeclarativeItemContexts
			self._rule_ConcurrentStatement = None  # Rule_ConcurrentStatementContext
			self.statements = list()  # of Rule_ConcurrentStatementContexts
			self.name2 = None  # Token

		def KW_ARCHITECTURE(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_ARCHITECTURE)
			else:
				return self.getToken(VHDLParser.KW_ARCHITECTURE, i)

		def KW_OF(self):
			return self.getToken(VHDLParser.KW_OF, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def KW_BEGIN(self):
			return self.getToken(VHDLParser.KW_BEGIN, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def rule_BlockDeclarativeItem(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_BlockDeclarativeItemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_BlockDeclarativeItemContext, i)

		def rule_ConcurrentStatement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ConcurrentStatementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ConcurrentStatementContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Architecture

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Architecture"):
				return visitor.visitRule_Architecture(self)
			else:
				return visitor.visitChildren(self)

	def rule_Architecture(self):

		localctx = VHDLParser.Rule_ArchitectureContext(self, self._ctx, self.state)
		self.enterRule(localctx, 20, self.RULE_rule_Architecture)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 575
			self.match(VHDLParser.KW_ARCHITECTURE)
			self.state = 576
			localctx.name = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 577
			self.match(VHDLParser.KW_OF)
			self.state = 578
			localctx.entityName = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 579
			self.match(VHDLParser.KW_IS)
			self.state = 583
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & 88717423313408) != 0) or (
				(((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 1941606236449) != 0):
				self.state = 580
				localctx._rule_BlockDeclarativeItem = self.rule_BlockDeclarativeItem()
				localctx.declarativeItems.append(localctx._rule_BlockDeclarativeItem)
				self.state = 585
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 586
			self.match(VHDLParser.KW_BEGIN)
			self.state = 590
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 5188146770730811393) != 0) or (
				(((_la - 116)) & ~0x3f) == 0 and ((1 << (_la - 116)) & 246292886323201) != 0):
				self.state = 587
				localctx._rule_ConcurrentStatement = self.rule_ConcurrentStatement()
				localctx.statements.append(localctx._rule_ConcurrentStatement)
				self.state = 592
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 593
			self.match(VHDLParser.KW_END)
			self.state = 595
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 12:
				self.state = 594
				self.match(VHDLParser.KW_ARCHITECTURE)

			self.state = 598
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 597
				localctx.name2 = self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 600
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ArchitectureStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.blockStatement = None  # Rule_BlockStatementContext
			self.processStatement = None  # Rule_ProcessStatementContext
			self.postponedProcessStatement = None  # Rule_PostponedProcessStatementContext
			self.label = None  # Token
			self.procedureCallStatement = None  # Rule_ConcurrentProcedureCallStatementContext
			self.assertionStatement = None  # Rule_ConcurrentAssertionStatementContext
			self.postponed = None  # Token
			self.signalAssignmentStatement = None  # Rule_ConcurrentSignalAssignmentStatementContext
			self.instantiationStatement = None  # Rule_ComponentInstantiationStatementContext
			self.generateStatement = None  # Rule_GenerateStatementContext

		def rule_BlockStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_BlockStatementContext, 0)

		def rule_ProcessStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ProcessStatementContext, 0)

		def rule_PostponedProcessStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PostponedProcessStatementContext, 0)

		def rule_ConcurrentProcedureCallStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConcurrentProcedureCallStatementContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def rule_ConcurrentAssertionStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConcurrentAssertionStatementContext, 0)

		def rule_ConcurrentSignalAssignmentStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConcurrentSignalAssignmentStatementContext, 0)

		def KW_POSTPONED(self):
			return self.getToken(VHDLParser.KW_POSTPONED, 0)

		def rule_ComponentInstantiationStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ComponentInstantiationStatementContext, 0)

		def rule_GenerateStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GenerateStatementContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ArchitectureStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ArchitectureStatement"):
				return visitor.visitRule_ArchitectureStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_ArchitectureStatement(self):

		localctx = VHDLParser.Rule_ArchitectureStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 22, self.RULE_rule_ArchitectureStatement)
		try:
			self.state = 625
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 15, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 602
				localctx.blockStatement = self.rule_BlockStatement()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 603
				localctx.processStatement = self.rule_ProcessStatement()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 604
				localctx.postponedProcessStatement = self.rule_PostponedProcessStatement()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 607
				self._errHandler.sync(self)
				la_ = self._interp.adaptivePredict(self._input, 11, self._ctx)
				if la_ == 1:
					self.state = 605
					localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
					self.state = 606
					self.match(VHDLParser.TOK_COLON)

				self.state = 609
				localctx.procedureCallStatement = self.rule_ConcurrentProcedureCallStatement()
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 612
				self._errHandler.sync(self)
				la_ = self._interp.adaptivePredict(self._input, 12, self._ctx)
				if la_ == 1:
					self.state = 610
					localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
					self.state = 611
					self.match(VHDLParser.TOK_COLON)

				self.state = 614
				localctx.assertionStatement = self.rule_ConcurrentAssertionStatement()
				pass

			elif la_ == 6:
				self.enterOuterAlt(localctx, 6)
				self.state = 617
				self._errHandler.sync(self)
				la_ = self._interp.adaptivePredict(self._input, 13, self._ctx)
				if la_ == 1:
					self.state = 615
					localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
					self.state = 616
					self.match(VHDLParser.TOK_COLON)

				self.state = 620
				self._errHandler.sync(self)
				la_ = self._interp.adaptivePredict(self._input, 14, self._ctx)
				if la_ == 1:
					self.state = 619
					localctx.postponed = self.match(VHDLParser.KW_POSTPONED)

				self.state = 622
				localctx.signalAssignmentStatement = self.rule_ConcurrentSignalAssignmentStatement()
				pass

			elif la_ == 7:
				self.enterOuterAlt(localctx, 7)
				self.state = 623
				localctx.instantiationStatement = self.rule_ComponentInstantiationStatement()
				pass

			elif la_ == 8:
				self.enterOuterAlt(localctx, 8)
				self.state = 624
				localctx.generateStatement = self.rule_GenerateStatement()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ArrayConstraintContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_IndexConstraint(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IndexConstraintContext, 0)

		def rule_ElementConstraint(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ElementConstraintContext, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def KW_OPEN(self):
			return self.getToken(VHDLParser.KW_OPEN, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ArrayConstraint

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ArrayConstraint"):
				return visitor.visitRule_ArrayConstraint(self)
			else:
				return visitor.visitChildren(self)

	def rule_ArrayConstraint(self):

		localctx = VHDLParser.Rule_ArrayConstraintContext(self, self._ctx, self.state)
		self.enterRule(localctx, 24, self.RULE_rule_ArrayConstraint)
		try:
			self.state = 637
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 18, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 627
				self.rule_IndexConstraint()
				self.state = 629
				self._errHandler.sync(self)
				la_ = self._interp.adaptivePredict(self._input, 16, self._ctx)
				if la_ == 1:
					self.state = 628
					self.rule_ElementConstraint()

				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 631
				self.match(VHDLParser.TOK_LP)
				self.state = 632
				self.match(VHDLParser.KW_OPEN)
				self.state = 633
				self.match(VHDLParser.TOK_RP)
				self.state = 635
				self._errHandler.sync(self)
				la_ = self._interp.adaptivePredict(self._input, 17, self._ctx)
				if la_ == 1:
					self.state = 634
					self.rule_ElementConstraint()

				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ArrayIncompleteTypeDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_ARRAY(self):
			return self.getToken(VHDLParser.KW_ARRAY, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def rule_ArrayIndexIncompleteTypeList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ArrayIndexIncompleteTypeListContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def KW_OF(self):
			return self.getToken(VHDLParser.KW_OF, 0)

		def rule_IncompleteSubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IncompleteSubtypeIndicationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ArrayIncompleteTypeDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ArrayIncompleteTypeDefinition"):
				return visitor.visitRule_ArrayIncompleteTypeDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_ArrayIncompleteTypeDefinition(self):

		localctx = VHDLParser.Rule_ArrayIncompleteTypeDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 26, self.RULE_rule_ArrayIncompleteTypeDefinition)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 639
			self.match(VHDLParser.KW_ARRAY)
			self.state = 640
			self.match(VHDLParser.TOK_LP)
			self.state = 641
			self.rule_ArrayIndexIncompleteTypeList()
			self.state = 642
			self.match(VHDLParser.TOK_RP)
			self.state = 643
			self.match(VHDLParser.KW_OF)
			self.state = 644
			self.rule_IncompleteSubtypeIndication()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ArrayIndexIncompleteTypeContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_IndexSubtypeDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IndexSubtypeDefinitionContext, 0)

		def rule_IndexConstraint(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IndexConstraintContext, 0)

		def rule_UnspecifiedTypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_UnspecifiedTypeIndicationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ArrayIndexIncompleteType

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ArrayIndexIncompleteType"):
				return visitor.visitRule_ArrayIndexIncompleteType(self)
			else:
				return visitor.visitChildren(self)

	def rule_ArrayIndexIncompleteType(self):

		localctx = VHDLParser.Rule_ArrayIndexIncompleteTypeContext(self, self._ctx, self.state)
		self.enterRule(localctx, 28, self.RULE_rule_ArrayIndexIncompleteType)
		try:
			self.state = 649
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [147, 161, 162, 163]:
				self.enterOuterAlt(localctx, 1)
				self.state = 646
				self.rule_IndexSubtypeDefinition()
				pass
			elif token in [143]:
				self.enterOuterAlt(localctx, 2)
				self.state = 647
				self.rule_IndexConstraint()
				pass
			elif token in [104]:
				self.enterOuterAlt(localctx, 3)
				self.state = 648
				self.rule_UnspecifiedTypeIndication()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ArrayIndexIncompleteTypeListContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_ArrayIndexIncompleteType(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ArrayIndexIncompleteTypeContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ArrayIndexIncompleteTypeContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ArrayIndexIncompleteTypeList

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ArrayIndexIncompleteTypeList"):
				return visitor.visitRule_ArrayIndexIncompleteTypeList(self)
			else:
				return visitor.visitChildren(self)

	def rule_ArrayIndexIncompleteTypeList(self):

		localctx = VHDLParser.Rule_ArrayIndexIncompleteTypeListContext(self, self._ctx, self.state)
		self.enterRule(localctx, 30, self.RULE_rule_ArrayIndexIncompleteTypeList)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 651
			self.rule_ArrayIndexIncompleteType()
			self.state = 656
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == 151:
				self.state = 652
				self.match(VHDLParser.TOK_COMMA)
				self.state = 653
				self.rule_ArrayIndexIncompleteType()
				self.state = 658
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ArrayModeViewIndicationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_VIEW(self):
			return self.getToken(VHDLParser.KW_VIEW, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def KW_OF(self):
			return self.getToken(VHDLParser.KW_OF, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ArrayModeViewIndication

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ArrayModeViewIndication"):
				return visitor.visitRule_ArrayModeViewIndication(self)
			else:
				return visitor.visitChildren(self)

	def rule_ArrayModeViewIndication(self):

		localctx = VHDLParser.Rule_ArrayModeViewIndicationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 32, self.RULE_rule_ArrayModeViewIndication)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 659
			self.match(VHDLParser.KW_VIEW)
			self.state = 660
			self.match(VHDLParser.TOK_LP)
			self.state = 661
			self.rule_Name(0)
			self.state = 662
			self.match(VHDLParser.TOK_RP)
			self.state = 665
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 64:
				self.state = 663
				self.match(VHDLParser.KW_OF)
				self.state = 664
				self.rule_SubtypeIndication()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_AssertionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.assertCondition = None  # Rule_ExpressionContext
			self.reportExpression = None  # Rule_ExpressionContext
			self.severityExpression = None  # Rule_ExpressionContext

		def KW_ASSERT(self):
			return self.getToken(VHDLParser.KW_ASSERT, 0)

		def rule_Expression(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ExpressionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, i)

		def KW_REPORT(self):
			return self.getToken(VHDLParser.KW_REPORT, 0)

		def KW_SEVERITY(self):
			return self.getToken(VHDLParser.KW_SEVERITY, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Assertion

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Assertion"):
				return visitor.visitRule_Assertion(self)
			else:
				return visitor.visitChildren(self)

	def rule_Assertion(self):

		localctx = VHDLParser.Rule_AssertionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 34, self.RULE_rule_Assertion)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 667
			self.match(VHDLParser.KW_ASSERT)
			self.state = 668
			localctx.assertCondition = self.rule_Expression(0)
			self.state = 671
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 85:
				self.state = 669
				self.match(VHDLParser.KW_REPORT)
				self.state = 670
				localctx.reportExpression = self.rule_Expression(0)

			self.state = 675
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 91:
				self.state = 673
				self.match(VHDLParser.KW_SEVERITY)
				self.state = 674
				localctx.severityExpression = self.rule_Expression(0)


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_AssertionStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token
			self.assertion = None  # Rule_AssertionContext

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_Assertion(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AssertionContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_AssertionStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_AssertionStatement"):
				return visitor.visitRule_AssertionStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_AssertionStatement(self):

		localctx = VHDLParser.Rule_AssertionStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 36, self.RULE_rule_AssertionStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 679
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 677
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 678
				self.match(VHDLParser.TOK_COLON)

			self.state = 681
			localctx.assertion = self.rule_Assertion()
			self.state = 682
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_AssociationElementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.formal = None  # Rule_FormalPartContext
			self.actual = None  # Rule_ActualPartContext

		def rule_ActualPart(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ActualPartContext, 0)

		def TOK_RARROW(self):
			return self.getToken(VHDLParser.TOK_RARROW, 0)

		def rule_FormalPart(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FormalPartContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_AssociationElement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_AssociationElement"):
				return visitor.visitRule_AssociationElement(self)
			else:
				return visitor.visitChildren(self)

	def rule_AssociationElement(self):

		localctx = VHDLParser.Rule_AssociationElementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 38, self.RULE_rule_AssociationElement)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 687
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 25, self._ctx)
			if la_ == 1:
				self.state = 684
				localctx.formal = self.rule_FormalPart()
				self.state = 685
				self.match(VHDLParser.TOK_RARROW)

			self.state = 689
			localctx.actual = self.rule_ActualPart()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_AssociationListContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_AssociationElement = None  # Rule_AssociationElementContext
			self.element = list()  # of Rule_AssociationElementContexts

		def rule_AssociationElement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_AssociationElementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_AssociationElementContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_AssociationList

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_AssociationList"):
				return visitor.visitRule_AssociationList(self)
			else:
				return visitor.visitChildren(self)

	def rule_AssociationList(self):

		localctx = VHDLParser.Rule_AssociationListContext(self, self._ctx, self.state)
		self.enterRule(localctx, 40, self.RULE_rule_AssociationList)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 691
			localctx._rule_AssociationElement = self.rule_AssociationElement()
			localctx.element.append(localctx._rule_AssociationElement)
			self.state = 696
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == 151:
				self.state = 692
				self.match(VHDLParser.TOK_COMMA)
				self.state = 693
				localctx._rule_AssociationElement = self.rule_AssociationElement()
				localctx.element.append(localctx._rule_AssociationElement)
				self.state = 698
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_AttributeDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token
			self.name = None  # Rule_NameContext

		def KW_ATTRIBUTE(self):
			return self.getToken(VHDLParser.KW_ATTRIBUTE, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_AttributeDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_AttributeDeclaration"):
				return visitor.visitRule_AttributeDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_AttributeDeclaration(self):

		localctx = VHDLParser.Rule_AttributeDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 42, self.RULE_rule_AttributeDeclaration)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 699
			self.match(VHDLParser.KW_ATTRIBUTE)
			self.state = 700
			localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 701
			self.match(VHDLParser.TOK_COLON)
			self.state = 702
			localctx.name = self.rule_Name(0)
			self.state = 703
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_AttributeDesignatorContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_RANGE(self):
			return self.getToken(VHDLParser.KW_RANGE, 0)

		def KW_RECORD(self):
			return self.getToken(VHDLParser.KW_RECORD, 0)

		def KW_SIGNAL(self):
			return self.getToken(VHDLParser.KW_SIGNAL, 0)

		def KW_SUBTYPE(self):
			return self.getToken(VHDLParser.KW_SUBTYPE, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_AttributeDesignator

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_AttributeDesignator"):
				return visitor.visitRule_AttributeDesignator(self)
			else:
				return visitor.visitChildren(self)

	def rule_AttributeDesignator(self):

		localctx = VHDLParser.Rule_AttributeDesignatorContext(self, self._ctx, self.state)
		self.enterRule(localctx, 44, self.RULE_rule_AttributeDesignator)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 705
			_la = self._input.LA(1)
			if not (((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 540675) != 0) or _la == 163):
				self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_AttributeSpecificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.designator = None  # Token
			self.entitySpecification = None  # Rule_EntitySpecificationContext
			self.expression = None  # Rule_ConditionalExpressionContext

		def KW_ATTRIBUTE(self):
			return self.getToken(VHDLParser.KW_ATTRIBUTE, 0)

		def KW_OF(self):
			return self.getToken(VHDLParser.KW_OF, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def rule_EntitySpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_EntitySpecificationContext, 0)

		def rule_ConditionalExpression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConditionalExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_AttributeSpecification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_AttributeSpecification"):
				return visitor.visitRule_AttributeSpecification(self)
			else:
				return visitor.visitChildren(self)

	def rule_AttributeSpecification(self):

		localctx = VHDLParser.Rule_AttributeSpecificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 46, self.RULE_rule_AttributeSpecification)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 707
			self.match(VHDLParser.KW_ATTRIBUTE)
			self.state = 708
			localctx.designator = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 709
			self.match(VHDLParser.KW_OF)
			self.state = 710
			localctx.entitySpecification = self.rule_EntitySpecification()
			self.state = 711
			self.match(VHDLParser.KW_IS)
			self.state = 712
			localctx.expression = self.rule_ConditionalExpression()
			self.state = 713
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_BindingIndicationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.entityAspect = None  # Rule_EntityAspectContext
			self.genericMapAspect = None  # Rule_GenericMapAspectContext
			self.portMapAspect = None  # Rule_PortMapAspectContext

		def KW_USE(self):
			return self.getToken(VHDLParser.KW_USE, 0)

		def rule_EntityAspect(self):
			return self.getTypedRuleContext(VHDLParser.Rule_EntityAspectContext, 0)

		def rule_GenericMapAspect(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GenericMapAspectContext, 0)

		def rule_PortMapAspect(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PortMapAspectContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_BindingIndication

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_BindingIndication"):
				return visitor.visitRule_BindingIndication(self)
			else:
				return visitor.visitChildren(self)

	def rule_BindingIndication(self):

		localctx = VHDLParser.Rule_BindingIndicationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 48, self.RULE_rule_BindingIndication)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 717
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 108:
				self.state = 715
				self.match(VHDLParser.KW_USE)
				self.state = 716
				localctx.entityAspect = self.rule_EntityAspect()

			self.state = 720
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 42:
				self.state = 719
				localctx.genericMapAspect = self.rule_GenericMapAspect()

			self.state = 723
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 72:
				self.state = 722
				localctx.portMapAspect = self.rule_PortMapAspect()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_BlockConfigurationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.blockSpecification = None  # Rule_BlockSpecificationContext
			self._rule_UseClause = None  # Rule_UseClauseContext
			self.useClauses = list()  # of Rule_UseClauseContexts
			self._rule_ConfigurationItem = None  # Rule_ConfigurationItemContext
			self.configurationItems = list()  # of Rule_ConfigurationItemContexts

		def KW_FOR(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_FOR)
			else:
				return self.getToken(VHDLParser.KW_FOR, i)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_BlockSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_BlockSpecificationContext, 0)

		def rule_UseClause(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_UseClauseContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_UseClauseContext, i)

		def rule_ConfigurationItem(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ConfigurationItemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ConfigurationItemContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_BlockConfiguration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_BlockConfiguration"):
				return visitor.visitRule_BlockConfiguration(self)
			else:
				return visitor.visitChildren(self)

	def rule_BlockConfiguration(self):

		localctx = VHDLParser.Rule_BlockConfigurationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 50, self.RULE_rule_BlockConfiguration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 725
			self.match(VHDLParser.KW_FOR)
			self.state = 726
			localctx.blockSpecification = self.rule_BlockSpecification()
			self.state = 730
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == 108:
				self.state = 727
				localctx._rule_UseClause = self.rule_UseClause()
				localctx.useClauses.append(localctx._rule_UseClause)
				self.state = 732
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 736
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == 37:
				self.state = 733
				localctx._rule_ConfigurationItem = self.rule_ConfigurationItem()
				localctx.configurationItems.append(localctx._rule_ConfigurationItem)
				self.state = 738
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 739
			self.match(VHDLParser.KW_END)
			self.state = 740
			self.match(VHDLParser.KW_FOR)
			self.state = 741
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_BlockDeclarativeItemContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_SubprogramDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramDeclarationContext, 0)

		def rule_SubprogramBody(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramBodyContext, 0)

		def rule_SubprogramInstantiationDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramInstantiationDeclarationContext, 0)

		def rule_PackageDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PackageDeclarationContext, 0)

		def rule_PackageBody(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PackageBodyContext, 0)

		def rule_PackageInstantiationDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PackageInstantiationDeclarationContext, 0)

		def rule_TypeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_TypeDeclarationContext, 0)

		def rule_SubtypeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeDeclarationContext, 0)

		def rule_ModeViewDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ModeViewDeclarationContext, 0)

		def rule_ConstantDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConstantDeclarationContext, 0)

		def rule_SignalDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SignalDeclarationContext, 0)

		def rule_VariableDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_VariableDeclarationContext, 0)

		def rule_FileDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FileDeclarationContext, 0)

		def rule_AliasDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AliasDeclarationContext, 0)

		def rule_ComponentDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ComponentDeclarationContext, 0)

		def rule_AttributeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AttributeDeclarationContext, 0)

		def rule_AttributeSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AttributeSpecificationContext, 0)

		def rule_ConfigurationSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConfigurationSpecificationContext, 0)

		def rule_DisconnectionSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_DisconnectionSpecificationContext, 0)

		def rule_UseClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_UseClauseContext, 0)

		def rule_GroupTemplateDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GroupTemplateDeclarationContext, 0)

		def rule_GroupDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GroupDeclarationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_BlockDeclarativeItem

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_BlockDeclarativeItem"):
				return visitor.visitRule_BlockDeclarativeItem(self)
			else:
				return visitor.visitChildren(self)

	def rule_BlockDeclarativeItem(self):

		localctx = VHDLParser.Rule_BlockDeclarativeItemContext(self, self._ctx, self.state)
		self.enterRule(localctx, 52, self.RULE_rule_BlockDeclarativeItem)
		try:
			self.state = 765
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 32, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 743
				self.rule_SubprogramDeclaration()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 744
				self.rule_SubprogramBody()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 745
				self.rule_SubprogramInstantiationDeclaration()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 746
				self.rule_PackageDeclaration()
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 747
				self.rule_PackageBody()
				pass

			elif la_ == 6:
				self.enterOuterAlt(localctx, 6)
				self.state = 748
				self.rule_PackageInstantiationDeclaration()
				pass

			elif la_ == 7:
				self.enterOuterAlt(localctx, 7)
				self.state = 749
				self.rule_TypeDeclaration()
				pass

			elif la_ == 8:
				self.enterOuterAlt(localctx, 8)
				self.state = 750
				self.rule_SubtypeDeclaration()
				pass

			elif la_ == 9:
				self.enterOuterAlt(localctx, 9)
				self.state = 751
				self.rule_ModeViewDeclaration()
				pass

			elif la_ == 10:
				self.enterOuterAlt(localctx, 10)
				self.state = 752
				self.rule_ConstantDeclaration()
				pass

			elif la_ == 11:
				self.enterOuterAlt(localctx, 11)
				self.state = 753
				self.rule_SignalDeclaration()
				pass

			elif la_ == 12:
				self.enterOuterAlt(localctx, 12)
				self.state = 754
				self.rule_VariableDeclaration()
				pass

			elif la_ == 13:
				self.enterOuterAlt(localctx, 13)
				self.state = 755
				self.rule_FileDeclaration()
				pass

			elif la_ == 14:
				self.enterOuterAlt(localctx, 14)
				self.state = 756
				self.rule_AliasDeclaration()
				pass

			elif la_ == 15:
				self.enterOuterAlt(localctx, 15)
				self.state = 757
				self.rule_ComponentDeclaration()
				pass

			elif la_ == 16:
				self.enterOuterAlt(localctx, 16)
				self.state = 758
				self.rule_AttributeDeclaration()
				pass

			elif la_ == 17:
				self.enterOuterAlt(localctx, 17)
				self.state = 759
				self.rule_AttributeSpecification()
				pass

			elif la_ == 18:
				self.enterOuterAlt(localctx, 18)
				self.state = 760
				self.rule_ConfigurationSpecification()
				pass

			elif la_ == 19:
				self.enterOuterAlt(localctx, 19)
				self.state = 761
				self.rule_DisconnectionSpecification()
				pass

			elif la_ == 20:
				self.enterOuterAlt(localctx, 20)
				self.state = 762
				self.rule_UseClause()
				pass

			elif la_ == 21:
				self.enterOuterAlt(localctx, 21)
				self.state = 763
				self.rule_GroupTemplateDeclaration()
				pass

			elif la_ == 22:
				self.enterOuterAlt(localctx, 22)
				self.state = 764
				self.rule_GroupDeclaration()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_BlockSpecificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.name = None  # Rule_NameContext
			self.label = None  # Token

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def rule_GenerateSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GenerateSpecificationContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_BlockSpecification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_BlockSpecification"):
				return visitor.visitRule_BlockSpecification(self)
			else:
				return visitor.visitChildren(self)

	def rule_BlockSpecification(self):

		localctx = VHDLParser.Rule_BlockSpecificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 54, self.RULE_rule_BlockSpecification)
		self._la = 0  # Token type
		try:
			self.state = 775
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 34, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 767
				localctx.name = self.rule_Name(0)
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 768
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 773
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == 143:
					self.state = 769
					self.match(VHDLParser.TOK_LP)
					self.state = 770
					self.rule_GenerateSpecification()
					self.state = 771
					self.match(VHDLParser.TOK_RP)

				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_BlockStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token
			self.guardExpression = None  # Rule_ExpressionContext
			self.genericClause = None  # Rule_GenericClauseContext
			self.genericMapAspect = None  # Rule_GenericMapAspectContext
			self.portClause = None  # Rule_PortClauseContext
			self.portMapAspect = None  # Rule_PortMapAspectContext
			self._rule_BlockDeclarativeItem = None  # Rule_BlockDeclarativeItemContext
			self.blockDeclarativeItem = list()  # of Rule_BlockDeclarativeItemContexts
			self._rule_ConcurrentStatement = None  # Rule_ConcurrentStatementContext
			self.blockStatements = list()  # of Rule_ConcurrentStatementContexts
			self.label2 = None  # Token

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def KW_BLOCK(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_BLOCK)
			else:
				return self.getToken(VHDLParser.KW_BLOCK, i)

		def KW_BEGIN(self):
			return self.getToken(VHDLParser.KW_BEGIN, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_SEMICOL)
			else:
				return self.getToken(VHDLParser.TOK_SEMICOL, i)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def rule_GenericClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GenericClauseContext, 0)

		def rule_PortClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PortClauseContext, 0)

		def rule_BlockDeclarativeItem(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_BlockDeclarativeItemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_BlockDeclarativeItemContext, i)

		def rule_ConcurrentStatement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ConcurrentStatementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ConcurrentStatementContext, i)

		def rule_GenericMapAspect(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GenericMapAspectContext, 0)

		def rule_PortMapAspect(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PortMapAspectContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_BlockStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_BlockStatement"):
				return visitor.visitRule_BlockStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_BlockStatement(self):

		localctx = VHDLParser.Rule_BlockStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 56, self.RULE_rule_BlockStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 777
			localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 778
			self.match(VHDLParser.TOK_COLON)
			self.state = 779
			self.match(VHDLParser.KW_BLOCK)
			self.state = 784
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 143:
				self.state = 780
				self.match(VHDLParser.TOK_LP)
				self.state = 781
				localctx.guardExpression = self.rule_Expression(0)
				self.state = 782
				self.match(VHDLParser.TOK_RP)

			self.state = 787
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 50:
				self.state = 786
				self.match(VHDLParser.KW_IS)

			self.state = 795
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 42:
				self.state = 789
				localctx.genericClause = self.rule_GenericClause()
				self.state = 793
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == 42:
					self.state = 790
					localctx.genericMapAspect = self.rule_GenericMapAspect()
					self.state = 791
					self.match(VHDLParser.TOK_SEMICOL)

			self.state = 803
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 72:
				self.state = 797
				localctx.portClause = self.rule_PortClause()
				self.state = 801
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == 72:
					self.state = 798
					localctx.portMapAspect = self.rule_PortMapAspect()
					self.state = 799
					self.match(VHDLParser.TOK_SEMICOL)

			self.state = 808
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & 88717423313408) != 0) or (
				(((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 1941606236449) != 0):
				self.state = 805
				localctx._rule_BlockDeclarativeItem = self.rule_BlockDeclarativeItem()
				localctx.blockDeclarativeItem.append(localctx._rule_BlockDeclarativeItem)
				self.state = 810
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 811
			self.match(VHDLParser.KW_BEGIN)
			self.state = 815
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 5188146770730811393) != 0) or (
				(((_la - 116)) & ~0x3f) == 0 and ((1 << (_la - 116)) & 246292886323201) != 0):
				self.state = 812
				localctx._rule_ConcurrentStatement = self.rule_ConcurrentStatement()
				localctx.blockStatements.append(localctx._rule_ConcurrentStatement)
				self.state = 817
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 818
			self.match(VHDLParser.KW_END)
			self.state = 819
			self.match(VHDLParser.KW_BLOCK)
			self.state = 821
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 820
				localctx.label2 = self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 823
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_CaseGenerateAlternativeContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.alternativeLabel = None  # Token

		def KW_WHEN(self):
			return self.getToken(VHDLParser.KW_WHEN, 0)

		def rule_Choices(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ChoicesContext, 0)

		def TOK_RARROW(self):
			return self.getToken(VHDLParser.TOK_RARROW, 0)

		def rule_GenerateStatementBody(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GenerateStatementBodyContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_CaseGenerateAlternative

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_CaseGenerateAlternative"):
				return visitor.visitRule_CaseGenerateAlternative(self)
			else:
				return visitor.visitChildren(self)

	def rule_CaseGenerateAlternative(self):

		localctx = VHDLParser.Rule_CaseGenerateAlternativeContext(self, self._ctx, self.state)
		self.enterRule(localctx, 58, self.RULE_rule_CaseGenerateAlternative)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 825
			self.match(VHDLParser.KW_WHEN)
			self.state = 828
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 44, self._ctx)
			if la_ == 1:
				self.state = 826
				localctx.alternativeLabel = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 827
				self.match(VHDLParser.TOK_COLON)

			self.state = 830
			self.rule_Choices()
			self.state = 831
			self.match(VHDLParser.TOK_RARROW)
			self.state = 832
			self.rule_GenerateStatementBody()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_CaseGenerateStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token
			self.expression = None  # Rule_ExpressionContext
			self._rule_CaseGenerateAlternative = None  # Rule_CaseGenerateAlternativeContext
			self.alternatives = list()  # of Rule_CaseGenerateAlternativeContexts
			self.label2 = None  # Token

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def KW_CASE(self):
			return self.getToken(VHDLParser.KW_CASE, 0)

		def KW_GENERATE(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_GENERATE)
			else:
				return self.getToken(VHDLParser.KW_GENERATE, i)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def rule_CaseGenerateAlternative(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_CaseGenerateAlternativeContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_CaseGenerateAlternativeContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_CaseGenerateStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_CaseGenerateStatement"):
				return visitor.visitRule_CaseGenerateStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_CaseGenerateStatement(self):

		localctx = VHDLParser.Rule_CaseGenerateStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 60, self.RULE_rule_CaseGenerateStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 834
			localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 835
			self.match(VHDLParser.TOK_COLON)
			self.state = 836
			self.match(VHDLParser.KW_CASE)
			self.state = 837
			localctx.expression = self.rule_Expression(0)
			self.state = 838
			self.match(VHDLParser.KW_GENERATE)
			self.state = 840
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while True:
				self.state = 839
				localctx._rule_CaseGenerateAlternative = self.rule_CaseGenerateAlternative()
				localctx.alternatives.append(localctx._rule_CaseGenerateAlternative)
				self.state = 842
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if not (_la == 117):
					break

			self.state = 844
			self.match(VHDLParser.KW_END)
			self.state = 845
			self.match(VHDLParser.KW_GENERATE)
			self.state = 847
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 846
				localctx.label2 = self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 849
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_CaseStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token
			self.expression = None  # Rule_ExpressionContext
			self._rule_CaseStatementAlternative = None  # Rule_CaseStatementAlternativeContext
			self.alternatives = list()  # of Rule_CaseStatementAlternativeContexts
			self.label2 = None  # Token

		def KW_CASE(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_CASE)
			else:
				return self.getToken(VHDLParser.KW_CASE, i)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def rule_CaseStatementAlternative(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_CaseStatementAlternativeContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_CaseStatementAlternativeContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_CaseStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_CaseStatement"):
				return visitor.visitRule_CaseStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_CaseStatement(self):

		localctx = VHDLParser.Rule_CaseStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 62, self.RULE_rule_CaseStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 853
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 851
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 852
				self.match(VHDLParser.TOK_COLON)

			self.state = 855
			self.match(VHDLParser.KW_CASE)
			self.state = 856
			localctx.expression = self.rule_Expression(0)
			self.state = 857
			self.match(VHDLParser.KW_IS)
			self.state = 859
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while True:
				self.state = 858
				localctx._rule_CaseStatementAlternative = self.rule_CaseStatementAlternative()
				localctx.alternatives.append(localctx._rule_CaseStatementAlternative)
				self.state = 861
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if not (_la == 117):
					break

			self.state = 863
			self.match(VHDLParser.KW_END)
			self.state = 864
			self.match(VHDLParser.KW_CASE)
			self.state = 866
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 865
				localctx.label2 = self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 868
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_CaseStatementAlternativeContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_SequentialStatement = None  # Rule_SequentialStatementContext
			self.statements = list()  # of Rule_SequentialStatementContexts

		def KW_WHEN(self):
			return self.getToken(VHDLParser.KW_WHEN, 0)

		def rule_Choices(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ChoicesContext, 0)

		def TOK_RARROW(self):
			return self.getToken(VHDLParser.TOK_RARROW, 0)

		def rule_SequentialStatement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_SequentialStatementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_SequentialStatementContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_CaseStatementAlternative

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_CaseStatementAlternative"):
				return visitor.visitRule_CaseStatementAlternative(self)
			else:
				return visitor.visitChildren(self)

	def rule_CaseStatementAlternative(self):

		localctx = VHDLParser.Rule_CaseStatementAlternativeContext(self, self._ctx, self.state)
		self.enterRule(localctx, 64, self.RULE_rule_CaseStatementAlternative)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 870
			self.match(VHDLParser.KW_WHEN)
			self.state = 871
			self.rule_Choices()
			self.state = 872
			self.match(VHDLParser.TOK_RARROW)
			self.state = 876
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & -8052400777563193344) != 0) or (
				(((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & 4899916406390259715) != 0) or (
				(((_la - 161)) & ~0x3f) == 0 and ((1 << (_la - 161)) & 7) != 0):
				self.state = 873
				localctx._rule_SequentialStatement = self.rule_SequentialStatement()
				localctx.statements.append(localctx._rule_SequentialStatement)
				self.state = 878
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ChoiceContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def rule_DiscreteRange(self):
			return self.getTypedRuleContext(VHDLParser.Rule_DiscreteRangeContext, 0)

		def KW_OTHERS(self):
			return self.getToken(VHDLParser.KW_OTHERS, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Choice

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Choice"):
				return visitor.visitRule_Choice(self)
			else:
				return visitor.visitChildren(self)

	def rule_Choice(self):

		localctx = VHDLParser.Rule_ChoiceContext(self, self._ctx, self.state)
		self.enterRule(localctx, 66, self.RULE_rule_Choice)
		try:
			self.state = 882
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 51, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 879
				self.rule_Expression(0)
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 880
				self.rule_DiscreteRange()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 881
				self.match(VHDLParser.KW_OTHERS)
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ChoicesContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_Choice = None  # Rule_ChoiceContext
			self.choices = list()  # of Rule_ChoiceContexts

		def rule_Choice(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ChoiceContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ChoiceContext, i)

		def TOK_BAR(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_BAR)
			else:
				return self.getToken(VHDLParser.TOK_BAR, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Choices

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Choices"):
				return visitor.visitRule_Choices(self)
			else:
				return visitor.visitChildren(self)

	def rule_Choices(self):

		localctx = VHDLParser.Rule_ChoicesContext(self, self._ctx, self.state)
		self.enterRule(localctx, 68, self.RULE_rule_Choices)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 884
			localctx._rule_Choice = self.rule_Choice()
			localctx.choices.append(localctx._rule_Choice)
			self.state = 889
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == 152:
				self.state = 885
				self.match(VHDLParser.TOK_BAR)
				self.state = 886
				localctx._rule_Choice = self.rule_Choice()
				localctx.choices.append(localctx._rule_Choice)
				self.state = 891
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ComponentConfigurationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.componentSpecification = None  # Rule_ComponentSpecificationContext
			self.bindingIndication = None  # Rule_BindingIndicationContext
			self.blockConfiguration = None  # Rule_BlockConfigurationContext

		def KW_FOR(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_FOR)
			else:
				return self.getToken(VHDLParser.KW_FOR, i)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_SEMICOL)
			else:
				return self.getToken(VHDLParser.TOK_SEMICOL, i)

		def rule_ComponentSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ComponentSpecificationContext, 0)

		def rule_BindingIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_BindingIndicationContext, 0)

		def rule_BlockConfiguration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_BlockConfigurationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ComponentConfiguration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ComponentConfiguration"):
				return visitor.visitRule_ComponentConfiguration(self)
			else:
				return visitor.visitChildren(self)

	def rule_ComponentConfiguration(self):

		localctx = VHDLParser.Rule_ComponentConfigurationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 70, self.RULE_rule_ComponentConfiguration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 892
			self.match(VHDLParser.KW_FOR)
			self.state = 893
			localctx.componentSpecification = self.rule_ComponentSpecification()
			self.state = 897
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 42 or _la == 72 or _la == 108 or _la == 150:
				self.state = 894
				localctx.bindingIndication = self.rule_BindingIndication()
				self.state = 895
				self.match(VHDLParser.TOK_SEMICOL)

			self.state = 900
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 37:
				self.state = 899
				localctx.blockConfiguration = self.rule_BlockConfiguration()

			self.state = 902
			self.match(VHDLParser.KW_END)
			self.state = 903
			self.match(VHDLParser.KW_FOR)
			self.state = 904
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ComponentDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.name = None  # Token
			self.genericClause = None  # Rule_GenericClauseContext
			self.portClause = None  # Rule_PortClauseContext
			self.name2 = None  # Token

		def KW_COMPONENT(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_COMPONENT)
			else:
				return self.getToken(VHDLParser.KW_COMPONENT, i)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def rule_GenericClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GenericClauseContext, 0)

		def rule_PortClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PortClauseContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ComponentDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ComponentDeclaration"):
				return visitor.visitRule_ComponentDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_ComponentDeclaration(self):

		localctx = VHDLParser.Rule_ComponentDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 72, self.RULE_rule_ComponentDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 906
			self.match(VHDLParser.KW_COMPONENT)
			self.state = 907
			localctx.name = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 909
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 50:
				self.state = 908
				self.match(VHDLParser.KW_IS)

			self.state = 912
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 42:
				self.state = 911
				localctx.genericClause = self.rule_GenericClause()

			self.state = 915
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 72:
				self.state = 914
				localctx.portClause = self.rule_PortClause()

			self.state = 917
			self.match(VHDLParser.KW_END)
			self.state = 919
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 23:
				self.state = 918
				self.match(VHDLParser.KW_COMPONENT)

			self.state = 922
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 921
				localctx.name2 = self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 924
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ComponentInstantiationStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token
			self.instantiatedUnit = None  # Rule_InstantiatedUnitContext
			self.genericMapAspect = None  # Rule_GenericMapAspectContext
			self.portMapAspect = None  # Rule_PortMapAspectContext

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def rule_InstantiatedUnit(self):
			return self.getTypedRuleContext(VHDLParser.Rule_InstantiatedUnitContext, 0)

		def rule_GenericMapAspect(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GenericMapAspectContext, 0)

		def rule_PortMapAspect(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PortMapAspectContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ComponentInstantiationStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ComponentInstantiationStatement"):
				return visitor.visitRule_ComponentInstantiationStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_ComponentInstantiationStatement(self):

		localctx = VHDLParser.Rule_ComponentInstantiationStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 74, self.RULE_rule_ComponentInstantiationStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 926
			localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 927
			self.match(VHDLParser.TOK_COLON)
			self.state = 928
			localctx.instantiatedUnit = self.rule_InstantiatedUnit()
			self.state = 930
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 42:
				self.state = 929
				localctx.genericMapAspect = self.rule_GenericMapAspect()

			self.state = 933
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 72:
				self.state = 932
				localctx.portMapAspect = self.rule_PortMapAspect()

			self.state = 935
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ComponentSpecificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.instantiationList = None  # Rule_InstantiationListContext

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def rule_InstantiationList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_InstantiationListContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ComponentSpecification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ComponentSpecification"):
				return visitor.visitRule_ComponentSpecification(self)
			else:
				return visitor.visitChildren(self)

	def rule_ComponentSpecification(self):

		localctx = VHDLParser.Rule_ComponentSpecificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 76, self.RULE_rule_ComponentSpecification)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 937
			localctx.instantiationList = self.rule_InstantiationList()
			self.state = 938
			self.match(VHDLParser.TOK_COLON)
			self.state = 939
			self.rule_Name(0)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_CompositeTypeDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.constrainedArrayDefinition = None  # Rule_ConstrainedArrayDefinitionContext
			self.unboundedArrayDefinition = None  # Rule_UnboundArrayDefinitionContext
			self.recordTypeDefinition = None  # Rule_RecordTypeDefinitionContext

		def rule_ConstrainedArrayDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConstrainedArrayDefinitionContext, 0)

		def rule_UnboundArrayDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_UnboundArrayDefinitionContext, 0)

		def rule_RecordTypeDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_RecordTypeDefinitionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_CompositeTypeDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_CompositeTypeDefinition"):
				return visitor.visitRule_CompositeTypeDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_CompositeTypeDefinition(self):

		localctx = VHDLParser.Rule_CompositeTypeDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 78, self.RULE_rule_CompositeTypeDefinition)
		try:
			self.state = 944
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 62, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 941
				localctx.constrainedArrayDefinition = self.rule_ConstrainedArrayDefinition()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 942
				localctx.unboundedArrayDefinition = self.rule_UnboundArrayDefinition()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 943
				localctx.recordTypeDefinition = self.rule_RecordTypeDefinition()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_CompoundConfigurationSpecificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_FOR(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_FOR)
			else:
				return self.getToken(VHDLParser.KW_FOR, i)

		def rule_ComponentSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ComponentSpecificationContext, 0)

		def rule_BindingIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_BindingIndicationContext, 0)

		def TOK_SEMICOL(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_SEMICOL)
			else:
				return self.getToken(VHDLParser.TOK_SEMICOL, i)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_CompoundConfigurationSpecification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_CompoundConfigurationSpecification"):
				return visitor.visitRule_CompoundConfigurationSpecification(self)
			else:
				return visitor.visitChildren(self)

	def rule_CompoundConfigurationSpecification(self):

		localctx = VHDLParser.Rule_CompoundConfigurationSpecificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 80, self.RULE_rule_CompoundConfigurationSpecification)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 946
			self.match(VHDLParser.KW_FOR)
			self.state = 947
			self.rule_ComponentSpecification()
			self.state = 948
			self.rule_BindingIndication()
			self.state = 949
			self.match(VHDLParser.TOK_SEMICOL)
			self.state = 950
			self.match(VHDLParser.KW_END)
			self.state = 951
			self.match(VHDLParser.KW_FOR)
			self.state = 952
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ConcurrentAssertionStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token
			self.postponed = None  # Token

		def rule_Assertion(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AssertionContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def KW_POSTPONED(self):
			return self.getToken(VHDLParser.KW_POSTPONED, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ConcurrentAssertionStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ConcurrentAssertionStatement"):
				return visitor.visitRule_ConcurrentAssertionStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_ConcurrentAssertionStatement(self):

		localctx = VHDLParser.Rule_ConcurrentAssertionStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 82, self.RULE_rule_ConcurrentAssertionStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 956
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 954
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 955
				self.match(VHDLParser.TOK_COLON)

			self.state = 959
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 73:
				self.state = 958
				localctx.postponed = self.match(VHDLParser.KW_POSTPONED)

			self.state = 961
			self.rule_Assertion()
			self.state = 962
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ConcurrentConditionalSignalAssignmentContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.guarded = None  # Token
			self.delayMechanism = None  # Rule_DelayMechanismContext
			self.conditionalWaveforms = None  # Rule_ConditionalWaveformsContext

		def rule_Target(self):
			return self.getTypedRuleContext(VHDLParser.Rule_TargetContext, 0)

		def TOK_SIG_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_SIG_ASSIGN, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_ConditionalWaveforms(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConditionalWaveformsContext, 0)

		def KW_GUARDED(self):
			return self.getToken(VHDLParser.KW_GUARDED, 0)

		def rule_DelayMechanism(self):
			return self.getTypedRuleContext(VHDLParser.Rule_DelayMechanismContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ConcurrentConditionalSignalAssignment

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ConcurrentConditionalSignalAssignment"):
				return visitor.visitRule_ConcurrentConditionalSignalAssignment(self)
			else:
				return visitor.visitChildren(self)

	def rule_ConcurrentConditionalSignalAssignment(self):

		localctx = VHDLParser.Rule_ConcurrentConditionalSignalAssignmentContext(self, self._ctx, self.state)
		self.enterRule(localctx, 84, self.RULE_rule_ConcurrentConditionalSignalAssignment)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 964
			self.rule_Target()
			self.state = 965
			self.match(VHDLParser.TOK_SIG_ASSIGN)
			self.state = 967
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 43:
				self.state = 966
				localctx.guarded = self.match(VHDLParser.KW_GUARDED)

			self.state = 970
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 36028814198833153) != 0):
				self.state = 969
				localctx.delayMechanism = self.rule_DelayMechanism()

			self.state = 972
			localctx.conditionalWaveforms = self.rule_ConditionalWaveforms()
			self.state = 973
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ConcurrentProcedureCallStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token
			self.postponed = None  # Token
			self.procedureCall = None  # Rule_ProcedureCallContext

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_ProcedureCall(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ProcedureCallContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def KW_POSTPONED(self):
			return self.getToken(VHDLParser.KW_POSTPONED, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ConcurrentProcedureCallStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ConcurrentProcedureCallStatement"):
				return visitor.visitRule_ConcurrentProcedureCallStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_ConcurrentProcedureCallStatement(self):

		localctx = VHDLParser.Rule_ConcurrentProcedureCallStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 86, self.RULE_rule_ConcurrentProcedureCallStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 977
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 67, self._ctx)
			if la_ == 1:
				self.state = 975
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 976
				self.match(VHDLParser.TOK_COLON)

			self.state = 980
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 73:
				self.state = 979
				localctx.postponed = self.match(VHDLParser.KW_POSTPONED)

			self.state = 982
			localctx.procedureCall = self.rule_ProcedureCall()
			self.state = 983
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ConcurrentSelectedSignalAssignmentContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.expression = None  # Rule_ExpressionContext
			self.target = None  # Rule_TargetContext
			self.guarded = None  # Token
			self.delayMechanism = None  # Rule_DelayMechanismContext
			self.selectedWaveforms = None  # Rule_SelectedWaveformsContext

		def KW_WITH(self):
			return self.getToken(VHDLParser.KW_WITH, 0)

		def KW_SELECT(self):
			return self.getToken(VHDLParser.KW_SELECT, 0)

		def TOK_SIG_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_SIG_ASSIGN, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def rule_Target(self):
			return self.getTypedRuleContext(VHDLParser.Rule_TargetContext, 0)

		def rule_SelectedWaveforms(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SelectedWaveformsContext, 0)

		def KW_GUARDED(self):
			return self.getToken(VHDLParser.KW_GUARDED, 0)

		def rule_DelayMechanism(self):
			return self.getTypedRuleContext(VHDLParser.Rule_DelayMechanismContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ConcurrentSelectedSignalAssignment

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ConcurrentSelectedSignalAssignment"):
				return visitor.visitRule_ConcurrentSelectedSignalAssignment(self)
			else:
				return visitor.visitChildren(self)

	def rule_ConcurrentSelectedSignalAssignment(self):

		localctx = VHDLParser.Rule_ConcurrentSelectedSignalAssignmentContext(self, self._ctx, self.state)
		self.enterRule(localctx, 88, self.RULE_rule_ConcurrentSelectedSignalAssignment)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 985
			self.match(VHDLParser.KW_WITH)
			self.state = 986
			localctx.expression = self.rule_Expression(0)
			self.state = 987
			self.match(VHDLParser.KW_SELECT)
			self.state = 988
			localctx.target = self.rule_Target()
			self.state = 989
			self.match(VHDLParser.TOK_SIG_ASSIGN)
			self.state = 991
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 43:
				self.state = 990
				localctx.guarded = self.match(VHDLParser.KW_GUARDED)

			self.state = 994
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 36028814198833153) != 0):
				self.state = 993
				localctx.delayMechanism = self.rule_DelayMechanism()

			self.state = 996
			localctx.selectedWaveforms = self.rule_SelectedWaveforms()
			self.state = 997
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ConcurrentSignalAssignmentStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token
			self.postponed = None  # Token

		def rule_ConcurrentSimpleSignalAssignment(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConcurrentSimpleSignalAssignmentContext, 0)

		def rule_ConcurrentConditionalSignalAssignment(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConcurrentConditionalSignalAssignmentContext, 0)

		def rule_ConcurrentSelectedSignalAssignment(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConcurrentSelectedSignalAssignmentContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def KW_POSTPONED(self):
			return self.getToken(VHDLParser.KW_POSTPONED, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ConcurrentSignalAssignmentStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ConcurrentSignalAssignmentStatement"):
				return visitor.visitRule_ConcurrentSignalAssignmentStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_ConcurrentSignalAssignmentStatement(self):

		localctx = VHDLParser.Rule_ConcurrentSignalAssignmentStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 90, self.RULE_rule_ConcurrentSignalAssignmentStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1001
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 71, self._ctx)
			if la_ == 1:
				self.state = 999
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 1000
				self.match(VHDLParser.TOK_COLON)

			self.state = 1004
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 73:
				self.state = 1003
				localctx.postponed = self.match(VHDLParser.KW_POSTPONED)

			self.state = 1009
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 73, self._ctx)
			if la_ == 1:
				self.state = 1006
				self.rule_ConcurrentSimpleSignalAssignment()
				pass

			elif la_ == 2:
				self.state = 1007
				self.rule_ConcurrentConditionalSignalAssignment()
				pass

			elif la_ == 3:
				self.state = 1008
				self.rule_ConcurrentSelectedSignalAssignment()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ConcurrentSimpleSignalAssignmentContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.target = None  # Rule_TargetContext
			self.guarded = None  # Token
			self.delayMechanism = None  # Rule_DelayMechanismContext
			self.waveform = None  # Rule_WaveformContext

		def TOK_SIG_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_SIG_ASSIGN, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_Target(self):
			return self.getTypedRuleContext(VHDLParser.Rule_TargetContext, 0)

		def rule_Waveform(self):
			return self.getTypedRuleContext(VHDLParser.Rule_WaveformContext, 0)

		def KW_GUARDED(self):
			return self.getToken(VHDLParser.KW_GUARDED, 0)

		def rule_DelayMechanism(self):
			return self.getTypedRuleContext(VHDLParser.Rule_DelayMechanismContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ConcurrentSimpleSignalAssignment

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ConcurrentSimpleSignalAssignment"):
				return visitor.visitRule_ConcurrentSimpleSignalAssignment(self)
			else:
				return visitor.visitChildren(self)

	def rule_ConcurrentSimpleSignalAssignment(self):

		localctx = VHDLParser.Rule_ConcurrentSimpleSignalAssignmentContext(self, self._ctx, self.state)
		self.enterRule(localctx, 92, self.RULE_rule_ConcurrentSimpleSignalAssignment)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1011
			localctx.target = self.rule_Target()
			self.state = 1012
			self.match(VHDLParser.TOK_SIG_ASSIGN)
			self.state = 1014
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 43:
				self.state = 1013
				localctx.guarded = self.match(VHDLParser.KW_GUARDED)

			self.state = 1017
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 36028814198833153) != 0):
				self.state = 1016
				localctx.delayMechanism = self.rule_DelayMechanism()

			self.state = 1019
			localctx.waveform = self.rule_Waveform()
			self.state = 1020
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ConcurrentStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.blockStatement = None  # Rule_BlockStatementContext
			self.processStatement = None  # Rule_ProcessStatementContext
			self.postponedProcessStatement = None  # Rule_PostponedProcessStatementContext
			self.label = None  # Token
			self.procedureCallStatement = None  # Rule_ConcurrentProcedureCallStatementContext
			self.assertionStatement = None  # Rule_ConcurrentAssertionStatementContext
			self.postponed = None  # Token
			self.signalAssignmentStatement = None  # Rule_ConcurrentSignalAssignmentStatementContext
			self.instantiationStatement = None  # Rule_ComponentInstantiationStatementContext
			self.generateStatement = None  # Rule_GenerateStatementContext

		def rule_BlockStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_BlockStatementContext, 0)

		def rule_ProcessStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ProcessStatementContext, 0)

		def rule_PostponedProcessStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PostponedProcessStatementContext, 0)

		def rule_ConcurrentProcedureCallStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConcurrentProcedureCallStatementContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def rule_ConcurrentAssertionStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConcurrentAssertionStatementContext, 0)

		def rule_ConcurrentSignalAssignmentStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConcurrentSignalAssignmentStatementContext, 0)

		def KW_POSTPONED(self):
			return self.getToken(VHDLParser.KW_POSTPONED, 0)

		def rule_ComponentInstantiationStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ComponentInstantiationStatementContext, 0)

		def rule_GenerateStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GenerateStatementContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ConcurrentStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ConcurrentStatement"):
				return visitor.visitRule_ConcurrentStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_ConcurrentStatement(self):

		localctx = VHDLParser.Rule_ConcurrentStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 94, self.RULE_rule_ConcurrentStatement)
		try:
			self.state = 1045
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 80, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1022
				localctx.blockStatement = self.rule_BlockStatement()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1023
				localctx.processStatement = self.rule_ProcessStatement()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 1024
				localctx.postponedProcessStatement = self.rule_PostponedProcessStatement()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 1027
				self._errHandler.sync(self)
				la_ = self._interp.adaptivePredict(self._input, 76, self._ctx)
				if la_ == 1:
					self.state = 1025
					localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
					self.state = 1026
					self.match(VHDLParser.TOK_COLON)

				self.state = 1029
				localctx.procedureCallStatement = self.rule_ConcurrentProcedureCallStatement()
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 1032
				self._errHandler.sync(self)
				la_ = self._interp.adaptivePredict(self._input, 77, self._ctx)
				if la_ == 1:
					self.state = 1030
					localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
					self.state = 1031
					self.match(VHDLParser.TOK_COLON)

				self.state = 1034
				localctx.assertionStatement = self.rule_ConcurrentAssertionStatement()
				pass

			elif la_ == 6:
				self.enterOuterAlt(localctx, 6)
				self.state = 1037
				self._errHandler.sync(self)
				la_ = self._interp.adaptivePredict(self._input, 78, self._ctx)
				if la_ == 1:
					self.state = 1035
					localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
					self.state = 1036
					self.match(VHDLParser.TOK_COLON)

				self.state = 1040
				self._errHandler.sync(self)
				la_ = self._interp.adaptivePredict(self._input, 79, self._ctx)
				if la_ == 1:
					self.state = 1039
					localctx.postponed = self.match(VHDLParser.KW_POSTPONED)

				self.state = 1042
				localctx.signalAssignmentStatement = self.rule_ConcurrentSignalAssignmentStatement()
				pass

			elif la_ == 7:
				self.enterOuterAlt(localctx, 7)
				self.state = 1043
				localctx.instantiationStatement = self.rule_ComponentInstantiationStatement()
				pass

			elif la_ == 8:
				self.enterOuterAlt(localctx, 8)
				self.state = 1044
				localctx.generateStatement = self.rule_GenerateStatement()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ConditionClauseContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.condition = None  # Rule_ExpressionContext

		def KW_UNTIL(self):
			return self.getToken(VHDLParser.KW_UNTIL, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ConditionClause

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ConditionClause"):
				return visitor.visitRule_ConditionClause(self)
			else:
				return visitor.visitChildren(self)

	def rule_ConditionClause(self):

		localctx = VHDLParser.Rule_ConditionClauseContext(self, self._ctx, self.state)
		self.enterRule(localctx, 96, self.RULE_rule_ConditionClause)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1047
			self.match(VHDLParser.KW_UNTIL)
			self.state = 1048
			localctx.condition = self.rule_Expression(0)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ConditionalExpressionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.left = None  # Rule_ExpressionContext
			self.condition = None  # Rule_ExpressionContext
			self.right = None  # Rule_ExpressionContext

		def rule_Expression(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ExpressionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, i)

		def KW_WHEN(self):
			return self.getToken(VHDLParser.KW_WHEN, 0)

		def KW_ELSE(self):
			return self.getToken(VHDLParser.KW_ELSE, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ConditionalExpression

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ConditionalExpression"):
				return visitor.visitRule_ConditionalExpression(self)
			else:
				return visitor.visitChildren(self)

	def rule_ConditionalExpression(self):

		localctx = VHDLParser.Rule_ConditionalExpressionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 98, self.RULE_rule_ConditionalExpression)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1050
			localctx.left = self.rule_Expression(0)
			self.state = 1056
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 117:
				self.state = 1051
				self.match(VHDLParser.KW_WHEN)
				self.state = 1052
				localctx.condition = self.rule_Expression(0)
				self.state = 1053
				self.match(VHDLParser.KW_ELSE)
				self.state = 1054
				localctx.right = self.rule_Expression(0)


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ConditionalOrUnaffectedExpressionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.left = None  # Rule_ExpressionOrUnaffectedContext
			self.condition = None  # Rule_ExpressionContext
			self.right = None  # Rule_ExpressionOrUnaffectedContext
			self.finalCondition = None  # Rule_ExpressionContext

		def rule_ExpressionOrUnaffected(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ExpressionOrUnaffectedContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ExpressionOrUnaffectedContext, i)

		def KW_WHEN(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_WHEN)
			else:
				return self.getToken(VHDLParser.KW_WHEN, i)

		def KW_ELSE(self):
			return self.getToken(VHDLParser.KW_ELSE, 0)

		def rule_Expression(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ExpressionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ConditionalOrUnaffectedExpression

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ConditionalOrUnaffectedExpression"):
				return visitor.visitRule_ConditionalOrUnaffectedExpression(self)
			else:
				return visitor.visitChildren(self)

	def rule_ConditionalOrUnaffectedExpression(self):

		localctx = VHDLParser.Rule_ConditionalOrUnaffectedExpressionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 100, self.RULE_rule_ConditionalOrUnaffectedExpression)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1058
			localctx.left = self.rule_ExpressionOrUnaffected()
			self.state = 1064
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 82, self._ctx)
			if la_ == 1:
				self.state = 1059
				self.match(VHDLParser.KW_WHEN)
				self.state = 1060
				localctx.condition = self.rule_Expression(0)
				self.state = 1061
				self.match(VHDLParser.KW_ELSE)
				self.state = 1062
				localctx.right = self.rule_ExpressionOrUnaffected()

			self.state = 1068
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 117:
				self.state = 1066
				self.match(VHDLParser.KW_WHEN)
				self.state = 1067
				localctx.finalCondition = self.rule_Expression(0)


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ConditionalSignalAssignmentContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.target = None  # Rule_TargetContext
			self.delayMechanism = None  # Rule_DelayMechanismContext
			self.conditionalWaveforms = None  # Rule_ConditionalWaveformsContext

		def TOK_SIG_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_SIG_ASSIGN, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_Target(self):
			return self.getTypedRuleContext(VHDLParser.Rule_TargetContext, 0)

		def rule_ConditionalWaveforms(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConditionalWaveformsContext, 0)

		def rule_DelayMechanism(self):
			return self.getTypedRuleContext(VHDLParser.Rule_DelayMechanismContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ConditionalSignalAssignment

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ConditionalSignalAssignment"):
				return visitor.visitRule_ConditionalSignalAssignment(self)
			else:
				return visitor.visitChildren(self)

	def rule_ConditionalSignalAssignment(self):

		localctx = VHDLParser.Rule_ConditionalSignalAssignmentContext(self, self._ctx, self.state)
		self.enterRule(localctx, 102, self.RULE_rule_ConditionalSignalAssignment)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1070
			localctx.target = self.rule_Target()
			self.state = 1071
			self.match(VHDLParser.TOK_SIG_ASSIGN)
			self.state = 1073
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 36028814198833153) != 0):
				self.state = 1072
				localctx.delayMechanism = self.rule_DelayMechanism()

			self.state = 1075
			localctx.conditionalWaveforms = self.rule_ConditionalWaveforms()
			self.state = 1076
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ConditionalWaveformsContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.waveform = None  # Rule_WaveformContext
			self.condition = None  # Rule_ExpressionContext
			self._rule_Waveform = None  # Rule_WaveformContext
			self.waveforms = list()  # of Rule_WaveformContexts
			self._rule_Expression = None  # Rule_ExpressionContext
			self.conditions = list()  # of Rule_ExpressionContexts
			self.lastCondition = None  # Rule_ExpressionContext

		def KW_WHEN(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_WHEN)
			else:
				return self.getToken(VHDLParser.KW_WHEN, i)

		def rule_Waveform(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_WaveformContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_WaveformContext, i)

		def rule_Expression(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ExpressionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, i)

		def KW_ELSE(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_ELSE)
			else:
				return self.getToken(VHDLParser.KW_ELSE, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ConditionalWaveforms

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ConditionalWaveforms"):
				return visitor.visitRule_ConditionalWaveforms(self)
			else:
				return visitor.visitChildren(self)

	def rule_ConditionalWaveforms(self):

		localctx = VHDLParser.Rule_ConditionalWaveformsContext(self, self._ctx, self.state)
		self.enterRule(localctx, 104, self.RULE_rule_ConditionalWaveforms)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1078
			localctx.waveform = self.rule_Waveform()
			self.state = 1079
			self.match(VHDLParser.KW_WHEN)
			self.state = 1080
			localctx.condition = self.rule_Expression(0)
			self.state = 1088
			self._errHandler.sync(self)
			_alt = self._interp.adaptivePredict(self._input, 85, self._ctx)
			while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
				if _alt == 1:
					self.state = 1081
					self.match(VHDLParser.KW_ELSE)
					self.state = 1082
					localctx._rule_Waveform = self.rule_Waveform()
					localctx.waveforms.append(localctx._rule_Waveform)
					self.state = 1083
					self.match(VHDLParser.KW_WHEN)
					self.state = 1084
					localctx._rule_Expression = self.rule_Expression(0)
					localctx.conditions.append(localctx._rule_Expression)
				self.state = 1090
				self._errHandler.sync(self)
				_alt = self._interp.adaptivePredict(self._input, 85, self._ctx)

			self.state = 1093
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 31:
				self.state = 1091
				self.match(VHDLParser.KW_ELSE)
				self.state = 1092
				localctx.lastCondition = self.rule_Expression(0)


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ConfigurationDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.name = None  # Token
			self.entityName = None  # Rule_NameContext
			self._rule_ConfigurationDeclarativeItem = None  # Rule_ConfigurationDeclarativeItemContext
			self.configurationDeclarativeItem = list()  # of Rule_ConfigurationDeclarativeItemContexts
			self.blockConfiguration = None  # Rule_BlockConfigurationContext
			self.name2 = None  # Token

		def KW_CONFIGURATION(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_CONFIGURATION)
			else:
				return self.getToken(VHDLParser.KW_CONFIGURATION, i)

		def KW_OF(self):
			return self.getToken(VHDLParser.KW_OF, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def rule_BlockConfiguration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_BlockConfigurationContext, 0)

		def rule_ConfigurationDeclarativeItem(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ConfigurationDeclarativeItemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ConfigurationDeclarativeItemContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ConfigurationDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ConfigurationDeclaration"):
				return visitor.visitRule_ConfigurationDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_ConfigurationDeclaration(self):

		localctx = VHDLParser.Rule_ConfigurationDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 106, self.RULE_rule_ConfigurationDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1095
			self.match(VHDLParser.KW_CONFIGURATION)
			self.state = 1096
			localctx.name = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 1097
			self.match(VHDLParser.KW_OF)
			self.state = 1098
			localctx.entityName = self.rule_Name(0)
			self.state = 1099
			self.match(VHDLParser.KW_IS)
			self.state = 1103
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == 15 or _la == 44 or _la == 108:
				self.state = 1100
				localctx._rule_ConfigurationDeclarativeItem = self.rule_ConfigurationDeclarativeItem()
				localctx.configurationDeclarativeItem.append(localctx._rule_ConfigurationDeclarativeItem)
				self.state = 1105
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1106
			localctx.blockConfiguration = self.rule_BlockConfiguration()
			self.state = 1107
			self.match(VHDLParser.KW_END)
			self.state = 1109
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 24:
				self.state = 1108
				self.match(VHDLParser.KW_CONFIGURATION)

			self.state = 1112
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 1111
				localctx.name2 = self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 1114
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ConfigurationDeclarativeItemContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_UseClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_UseClauseContext, 0)

		def rule_AttributeSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AttributeSpecificationContext, 0)

		def rule_GroupDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GroupDeclarationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ConfigurationDeclarativeItem

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ConfigurationDeclarativeItem"):
				return visitor.visitRule_ConfigurationDeclarativeItem(self)
			else:
				return visitor.visitChildren(self)

	def rule_ConfigurationDeclarativeItem(self):

		localctx = VHDLParser.Rule_ConfigurationDeclarativeItemContext(self, self._ctx, self.state)
		self.enterRule(localctx, 108, self.RULE_rule_ConfigurationDeclarativeItem)
		try:
			self.state = 1119
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [108]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1116
				self.rule_UseClause()
				pass
			elif token in [15]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1117
				self.rule_AttributeSpecification()
				pass
			elif token in [44]:
				self.enterOuterAlt(localctx, 3)
				self.state = 1118
				self.rule_GroupDeclaration()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ConfigurationItemContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_BlockConfiguration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_BlockConfigurationContext, 0)

		def rule_ComponentConfiguration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ComponentConfigurationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ConfigurationItem

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ConfigurationItem"):
				return visitor.visitRule_ConfigurationItem(self)
			else:
				return visitor.visitChildren(self)

	def rule_ConfigurationItem(self):

		localctx = VHDLParser.Rule_ConfigurationItemContext(self, self._ctx, self.state)
		self.enterRule(localctx, 110, self.RULE_rule_ConfigurationItem)
		try:
			self.state = 1123
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 91, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1121
				self.rule_BlockConfiguration()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1122
				self.rule_ComponentConfiguration()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ConfigurationSpecificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_SimpleConfigurationSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SimpleConfigurationSpecificationContext, 0)

		def rule_CompoundConfigurationSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_CompoundConfigurationSpecificationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ConfigurationSpecification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ConfigurationSpecification"):
				return visitor.visitRule_ConfigurationSpecification(self)
			else:
				return visitor.visitChildren(self)

	def rule_ConfigurationSpecification(self):

		localctx = VHDLParser.Rule_ConfigurationSpecificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 112, self.RULE_rule_ConfigurationSpecification)
		try:
			self.state = 1127
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 92, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1125
				self.rule_SimpleConfigurationSpecification()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1126
				self.rule_CompoundConfigurationSpecification()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ConstantDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.name = None  # Rule_IdentifierListContext
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext
			self.expression = None  # Rule_ConditionalExpressionContext

		def KW_CONSTANT(self):
			return self.getToken(VHDLParser.KW_CONSTANT, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_IdentifierList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IdentifierListContext, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def TOK_VAR_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_VAR_ASSIGN, 0)

		def rule_ConditionalExpression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConditionalExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ConstantDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ConstantDeclaration"):
				return visitor.visitRule_ConstantDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_ConstantDeclaration(self):

		localctx = VHDLParser.Rule_ConstantDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 114, self.RULE_rule_ConstantDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1129
			self.match(VHDLParser.KW_CONSTANT)
			self.state = 1130
			localctx.name = self.rule_IdentifierList()
			self.state = 1131
			self.match(VHDLParser.TOK_COLON)
			self.state = 1132
			localctx.subtypeIndication = self.rule_SubtypeIndication()
			self.state = 1135
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 141:
				self.state = 1133
				self.match(VHDLParser.TOK_VAR_ASSIGN)
				self.state = 1134
				localctx.expression = self.rule_ConditionalExpression()

			self.state = 1137
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ConstrainedArrayDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext

		def KW_ARRAY(self):
			return self.getToken(VHDLParser.KW_ARRAY, 0)

		def rule_IndexConstraint(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IndexConstraintContext, 0)

		def KW_OF(self):
			return self.getToken(VHDLParser.KW_OF, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ConstrainedArrayDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ConstrainedArrayDefinition"):
				return visitor.visitRule_ConstrainedArrayDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_ConstrainedArrayDefinition(self):

		localctx = VHDLParser.Rule_ConstrainedArrayDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 116, self.RULE_rule_ConstrainedArrayDefinition)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1139
			self.match(VHDLParser.KW_ARRAY)
			self.state = 1140
			self.rule_IndexConstraint()
			self.state = 1141
			self.match(VHDLParser.KW_OF)
			self.state = 1142
			localctx.subtypeIndication = self.rule_SubtypeIndication()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ConstraintContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_SimpleRange(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SimpleRangeContext, 0)

		def rule_RangeConstraint(self):
			return self.getTypedRuleContext(VHDLParser.Rule_RangeConstraintContext, 0)

		def rule_ArrayConstraint(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ArrayConstraintContext, 0)

		def rule_RecordConstraint(self):
			return self.getTypedRuleContext(VHDLParser.Rule_RecordConstraintContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Constraint

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Constraint"):
				return visitor.visitRule_Constraint(self)
			else:
				return visitor.visitChildren(self)

	def rule_Constraint(self):

		localctx = VHDLParser.Rule_ConstraintContext(self, self._ctx, self.state)
		self.enterRule(localctx, 118, self.RULE_rule_Constraint)
		try:
			self.state = 1148
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 94, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1144
				self.rule_SimpleRange()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1145
				self.rule_RangeConstraint()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 1146
				self.rule_ArrayConstraint()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 1147
				self.rule_RecordConstraint()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ContextDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.name = None  # Token
			self._rule_ContextItem = None  # Rule_ContextItemContext
			self.contextItems = list()  # of Rule_ContextItemContexts
			self.name2 = None  # Token

		def KW_CONTEXT(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_CONTEXT)
			else:
				return self.getToken(VHDLParser.KW_CONTEXT, i)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def rule_ContextItem(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ContextItemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ContextItemContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ContextDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ContextDeclaration"):
				return visitor.visitRule_ContextDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_ContextDeclaration(self):

		localctx = VHDLParser.Rule_ContextDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 120, self.RULE_rule_ContextDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1150
			self.match(VHDLParser.KW_CONTEXT)
			self.state = 1151
			localctx.name = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 1152
			self.match(VHDLParser.KW_IS)
			self.state = 1156
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == 26 or _la == 52 or _la == 108:
				self.state = 1153
				localctx._rule_ContextItem = self.rule_ContextItem()
				localctx.contextItems.append(localctx._rule_ContextItem)
				self.state = 1158
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1159
			self.match(VHDLParser.KW_END)
			self.state = 1161
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 26:
				self.state = 1160
				self.match(VHDLParser.KW_CONTEXT)

			self.state = 1163
			localctx.name2 = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 1164
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ContextItemContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.libraryClause = None  # Rule_LibraryClauseContext
			self.useClause = None  # Rule_UseClauseContext
			self.contextReference = None  # Rule_ContextReferenceContext

		def rule_LibraryClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_LibraryClauseContext, 0)

		def rule_UseClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_UseClauseContext, 0)

		def rule_ContextReference(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ContextReferenceContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ContextItem

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ContextItem"):
				return visitor.visitRule_ContextItem(self)
			else:
				return visitor.visitChildren(self)

	def rule_ContextItem(self):

		localctx = VHDLParser.Rule_ContextItemContext(self, self._ctx, self.state)
		self.enterRule(localctx, 122, self.RULE_rule_ContextItem)
		try:
			self.state = 1169
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [52]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1166
				localctx.libraryClause = self.rule_LibraryClause()
				pass
			elif token in [108]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1167
				localctx.useClause = self.rule_UseClause()
				pass
			elif token in [26]:
				self.enterOuterAlt(localctx, 3)
				self.state = 1168
				localctx.contextReference = self.rule_ContextReference()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ContextReferenceContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_SelectedName2 = None  # Rule_SelectedName2Context
			self.names = list()  # of Rule_SelectedName2Contexts

		def KW_CONTEXT(self):
			return self.getToken(VHDLParser.KW_CONTEXT, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_SelectedName2(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_SelectedName2Context)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_SelectedName2Context, i)

		def TOK_COLON(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COLON)
			else:
				return self.getToken(VHDLParser.TOK_COLON, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ContextReference

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ContextReference"):
				return visitor.visitRule_ContextReference(self)
			else:
				return visitor.visitChildren(self)

	def rule_ContextReference(self):

		localctx = VHDLParser.Rule_ContextReferenceContext(self, self._ctx, self.state)
		self.enterRule(localctx, 124, self.RULE_rule_ContextReference)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1171
			self.match(VHDLParser.KW_CONTEXT)
			self.state = 1172
			localctx._rule_SelectedName2 = self.rule_SelectedName2()
			localctx.names.append(localctx._rule_SelectedName2)
			self.state = 1177
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == 149:
				self.state = 1173
				self.match(VHDLParser.TOK_COLON)
				self.state = 1174
				localctx._rule_SelectedName2 = self.rule_SelectedName2()
				localctx.names.append(localctx._rule_SelectedName2)
				self.state = 1179
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1180
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_DelayMechanismContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.expression = None  # Rule_ExpressionContext

		def KW_TRANSPORT(self):
			return self.getToken(VHDLParser.KW_TRANSPORT, 0)

		def KW_INERTIAL(self):
			return self.getToken(VHDLParser.KW_INERTIAL, 0)

		def KW_REJECT(self):
			return self.getToken(VHDLParser.KW_REJECT, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_DelayMechanism

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_DelayMechanism"):
				return visitor.visitRule_DelayMechanism(self)
			else:
				return visitor.visitChildren(self)

	def rule_DelayMechanism(self):

		localctx = VHDLParser.Rule_DelayMechanismContext(self, self._ctx, self.state)
		self.enterRule(localctx, 126, self.RULE_rule_DelayMechanism)
		self._la = 0  # Token type
		try:
			self.state = 1188
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [103]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1182
				self.match(VHDLParser.KW_TRANSPORT)
				pass
			elif token in [48, 82]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1185
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == 82:
					self.state = 1183
					self.match(VHDLParser.KW_REJECT)
					self.state = 1184
					localctx.expression = self.rule_Expression(0)

				self.state = 1187
				self.match(VHDLParser.KW_INERTIAL)
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_DesignFileContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_DesignUnit = None  # Rule_DesignUnitContext
			self.designUnits = list()  # of Rule_DesignUnitContexts

		def EOF(self):
			return self.getToken(VHDLParser.EOF, 0)

		def rule_DesignUnit(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_DesignUnitContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_DesignUnitContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_DesignFile

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_DesignFile"):
				return visitor.visitRule_DesignFile(self)
			else:
				return visitor.visitChildren(self)

	def rule_DesignFile(self):

		localctx = VHDLParser.Rule_DesignFileContext(self, self._ctx, self.state)
		self.enterRule(localctx, 128, self.RULE_rule_DesignFile)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1191
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while True:
				self.state = 1190
				localctx._rule_DesignUnit = self.rule_DesignUnit()
				localctx.designUnits.append(localctx._rule_DesignUnit)
				self.state = 1193
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 4503616891129856) != 0) or _la == 70 or _la == 108):
					break

			self.state = 1195
			self.match(VHDLParser.EOF)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_DesignUnitContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_ContextItem = None  # Rule_ContextItemContext
			self.contextItems = list()  # of Rule_ContextItemContexts
			self.libraryUnit = None  # Rule_LibraryUnitContext

		def rule_LibraryUnit(self):
			return self.getTypedRuleContext(VHDLParser.Rule_LibraryUnitContext, 0)

		def rule_ContextItem(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ContextItemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ContextItemContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_DesignUnit

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_DesignUnit"):
				return visitor.visitRule_DesignUnit(self)
			else:
				return visitor.visitChildren(self)

	def rule_DesignUnit(self):

		localctx = VHDLParser.Rule_DesignUnitContext(self, self._ctx, self.state)
		self.enterRule(localctx, 130, self.RULE_rule_DesignUnit)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1200
			self._errHandler.sync(self)
			_alt = self._interp.adaptivePredict(self._input, 102, self._ctx)
			while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
				if _alt == 1:
					self.state = 1197
					localctx._rule_ContextItem = self.rule_ContextItem()
					localctx.contextItems.append(localctx._rule_ContextItem)
				self.state = 1202
				self._errHandler.sync(self)
				_alt = self._interp.adaptivePredict(self._input, 102, self._ctx)

			self.state = 1203
			localctx.libraryUnit = self.rule_LibraryUnit()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_DesignatorContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def LIT_STRING(self):
			return self.getToken(VHDLParser.LIT_STRING, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Designator

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Designator"):
				return visitor.visitRule_Designator(self)
			else:
				return visitor.visitChildren(self)

	def rule_Designator(self):

		localctx = VHDLParser.Rule_DesignatorContext(self, self._ctx, self.state)
		self.enterRule(localctx, 132, self.RULE_rule_Designator)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1205
			_la = self._input.LA(1)
			if not (_la == 162 or _la == 163):
				self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_DirectionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.direction = None  # Token

		def KW_TO(self):
			return self.getToken(VHDLParser.KW_TO, 0)

		def KW_DOWNTO(self):
			return self.getToken(VHDLParser.KW_DOWNTO, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Direction

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Direction"):
				return visitor.visitRule_Direction(self)
			else:
				return visitor.visitChildren(self)

	def rule_Direction(self):

		localctx = VHDLParser.Rule_DirectionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 134, self.RULE_rule_Direction)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1207
			localctx.direction = self._input.LT(1)
			_la = self._input.LA(1)
			if not (_la == 30 or _la == 102):
				localctx.direction = self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_DisconnectionSpecificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.guardedSignalSpecification = None  # Rule_GuardedSignalSpecificationContext
			self.expression = None  # Rule_ExpressionContext

		def KW_DISCONNECT(self):
			return self.getToken(VHDLParser.KW_DISCONNECT, 0)

		def KW_AFTER(self):
			return self.getToken(VHDLParser.KW_AFTER, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_GuardedSignalSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GuardedSignalSpecificationContext, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_DisconnectionSpecification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_DisconnectionSpecification"):
				return visitor.visitRule_DisconnectionSpecification(self)
			else:
				return visitor.visitChildren(self)

	def rule_DisconnectionSpecification(self):

		localctx = VHDLParser.Rule_DisconnectionSpecificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 136, self.RULE_rule_DisconnectionSpecification)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1209
			self.match(VHDLParser.KW_DISCONNECT)
			self.state = 1210
			localctx.guardedSignalSpecification = self.rule_GuardedSignalSpecification()
			self.state = 1211
			self.match(VHDLParser.KW_AFTER)
			self.state = 1212
			localctx.expression = self.rule_Expression(0)
			self.state = 1213
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_DiscreteRangeContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext
			self.range_ = None  # Rule_RangeContext

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def rule_Range(self):
			return self.getTypedRuleContext(VHDLParser.Rule_RangeContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_DiscreteRange

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_DiscreteRange"):
				return visitor.visitRule_DiscreteRange(self)
			else:
				return visitor.visitChildren(self)

	def rule_DiscreteRange(self):

		localctx = VHDLParser.Rule_DiscreteRangeContext(self, self._ctx, self.state)
		self.enterRule(localctx, 138, self.RULE_rule_DiscreteRange)
		try:
			self.state = 1217
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 103, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1215
				localctx.subtypeIndication = self.rule_SubtypeIndication()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1216
				localctx.range_ = self.rule_Range()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_DiscreteIncompleteTypeDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_BOX(self):
			return self.getToken(VHDLParser.TOK_BOX, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_DiscreteIncompleteTypeDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_DiscreteIncompleteTypeDefinition"):
				return visitor.visitRule_DiscreteIncompleteTypeDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_DiscreteIncompleteTypeDefinition(self):

		localctx = VHDLParser.Rule_DiscreteIncompleteTypeDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 140, self.RULE_rule_DiscreteIncompleteTypeDefinition)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1219
			self.match(VHDLParser.TOK_LP)
			self.state = 1220
			self.match(VHDLParser.TOK_BOX)
			self.state = 1221
			self.match(VHDLParser.TOK_RP)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ElementArrayModeViewIndicationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.name = None  # Rule_NameContext

		def KW_VIEW(self):
			return self.getToken(VHDLParser.KW_VIEW, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ElementArrayModeViewIndication

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ElementArrayModeViewIndication"):
				return visitor.visitRule_ElementArrayModeViewIndication(self)
			else:
				return visitor.visitChildren(self)

	def rule_ElementArrayModeViewIndication(self):

		localctx = VHDLParser.Rule_ElementArrayModeViewIndicationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 142, self.RULE_rule_ElementArrayModeViewIndication)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1223
			self.match(VHDLParser.KW_VIEW)
			self.state = 1224
			self.match(VHDLParser.TOK_LP)
			self.state = 1225
			localctx.name = self.rule_Name(0)
			self.state = 1226
			self.match(VHDLParser.TOK_RP)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ElementAssociationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.choices = None  # Rule_ChoicesContext
			self.expression = None  # Rule_ExpressionContext

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def TOK_RARROW(self):
			return self.getToken(VHDLParser.TOK_RARROW, 0)

		def rule_Choices(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ChoicesContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ElementAssociation

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ElementAssociation"):
				return visitor.visitRule_ElementAssociation(self)
			else:
				return visitor.visitChildren(self)

	def rule_ElementAssociation(self):

		localctx = VHDLParser.Rule_ElementAssociationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 144, self.RULE_rule_ElementAssociation)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1231
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 104, self._ctx)
			if la_ == 1:
				self.state = 1228
				localctx.choices = self.rule_Choices()
				self.state = 1229
				self.match(VHDLParser.TOK_RARROW)

			self.state = 1233
			localctx.expression = self.rule_Expression(0)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ElementConstraintContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.arrayConstraint = None  # Rule_ArrayConstraintContext
			self.recordConstraint = None  # Rule_RecordConstraintContext

		def rule_ArrayConstraint(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ArrayConstraintContext, 0)

		def rule_RecordConstraint(self):
			return self.getTypedRuleContext(VHDLParser.Rule_RecordConstraintContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ElementConstraint

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ElementConstraint"):
				return visitor.visitRule_ElementConstraint(self)
			else:
				return visitor.visitChildren(self)

	def rule_ElementConstraint(self):

		localctx = VHDLParser.Rule_ElementConstraintContext(self, self._ctx, self.state)
		self.enterRule(localctx, 146, self.RULE_rule_ElementConstraint)
		try:
			self.state = 1237
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 105, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1235
				localctx.arrayConstraint = self.rule_ArrayConstraint()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1236
				localctx.recordConstraint = self.rule_RecordConstraint()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ElementDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.identifierList = None  # Rule_IdentifierListContext
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_IdentifierList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IdentifierListContext, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ElementDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ElementDeclaration"):
				return visitor.visitRule_ElementDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_ElementDeclaration(self):

		localctx = VHDLParser.Rule_ElementDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 148, self.RULE_rule_ElementDeclaration)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1239
			localctx.identifierList = self.rule_IdentifierList()
			self.state = 1240
			self.match(VHDLParser.TOK_COLON)
			self.state = 1241
			localctx.subtypeIndication = self.rule_SubtypeIndication()
			self.state = 1242
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ElementModeIndicationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_Mode(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ModeContext, 0)

		def rule_ElementModeViewIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ElementModeViewIndicationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ElementModeIndication

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ElementModeIndication"):
				return visitor.visitRule_ElementModeIndication(self)
			else:
				return visitor.visitChildren(self)

	def rule_ElementModeIndication(self):

		localctx = VHDLParser.Rule_ElementModeIndicationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 150, self.RULE_rule_ElementModeIndication)
		try:
			self.state = 1246
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [20, 47, 49, 53, 69]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1244
				self.rule_Mode()
				pass
			elif token in [110]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1245
				self.rule_ElementModeViewIndication()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ElementModeViewIndicationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_ElementArrayModeViewIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ElementArrayModeViewIndicationContext, 0)

		def rule_ElementRecordModeViewIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ElementRecordModeViewIndicationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ElementModeViewIndication

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ElementModeViewIndication"):
				return visitor.visitRule_ElementModeViewIndication(self)
			else:
				return visitor.visitChildren(self)

	def rule_ElementModeViewIndication(self):

		localctx = VHDLParser.Rule_ElementModeViewIndicationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 152, self.RULE_rule_ElementModeViewIndication)
		try:
			self.state = 1250
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 107, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1248
				self.rule_ElementArrayModeViewIndication()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1249
				self.rule_ElementRecordModeViewIndication()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ElementRecordModeViewIndicationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.name = None  # Rule_NameContext

		def KW_VIEW(self):
			return self.getToken(VHDLParser.KW_VIEW, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ElementRecordModeViewIndication

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ElementRecordModeViewIndication"):
				return visitor.visitRule_ElementRecordModeViewIndication(self)
			else:
				return visitor.visitChildren(self)

	def rule_ElementRecordModeViewIndication(self):

		localctx = VHDLParser.Rule_ElementRecordModeViewIndicationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 154, self.RULE_rule_ElementRecordModeViewIndication)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1252
			self.match(VHDLParser.KW_VIEW)
			self.state = 1253
			localctx.name = self.rule_Name(0)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ElementResolutionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_ResolutionIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ResolutionIndicationContext, 0)

		def rule_RecordResolution(self):
			return self.getTypedRuleContext(VHDLParser.Rule_RecordResolutionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ElementResolution

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ElementResolution"):
				return visitor.visitRule_ElementResolution(self)
			else:
				return visitor.visitChildren(self)

	def rule_ElementResolution(self):

		localctx = VHDLParser.Rule_ElementResolutionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 156, self.RULE_rule_ElementResolution)
		try:
			self.state = 1257
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 108, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1255
				self.rule_ResolutionIndication()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1256
				self.rule_RecordResolution()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_EntityAspectContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.entityName = None  # Rule_NameContext
			self.architectureName = None  # Token
			self.configurationName = None  # Rule_NameContext

		def KW_ENTITY(self):
			return self.getToken(VHDLParser.KW_ENTITY, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def KW_CONFIGURATION(self):
			return self.getToken(VHDLParser.KW_CONFIGURATION, 0)

		def KW_OPEN(self):
			return self.getToken(VHDLParser.KW_OPEN, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_EntityAspect

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_EntityAspect"):
				return visitor.visitRule_EntityAspect(self)
			else:
				return visitor.visitChildren(self)

	def rule_EntityAspect(self):

		localctx = VHDLParser.Rule_EntityAspectContext(self, self._ctx, self.state)
		self.enterRule(localctx, 158, self.RULE_rule_EntityAspect)
		self._la = 0  # Token type
		try:
			self.state = 1269
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [34]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1259
				self.match(VHDLParser.KW_ENTITY)
				self.state = 1260
				localctx.entityName = self.rule_Name(0)
				self.state = 1264
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == 143:
					self.state = 1261
					self.match(VHDLParser.TOK_LP)
					self.state = 1262
					localctx.architectureName = self.match(VHDLParser.LIT_IDENTIFIER)
					self.state = 1263
					self.match(VHDLParser.TOK_RP)

				pass
			elif token in [24]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1266
				self.match(VHDLParser.KW_CONFIGURATION)
				self.state = 1267
				localctx.configurationName = self.rule_Name(0)
				pass
			elif token in [66]:
				self.enterOuterAlt(localctx, 3)
				self.state = 1268
				self.match(VHDLParser.KW_OPEN)
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_EntityClassContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_ENTITY(self):
			return self.getToken(VHDLParser.KW_ENTITY, 0)

		def KW_ARCHITECTURE(self):
			return self.getToken(VHDLParser.KW_ARCHITECTURE, 0)

		def KW_CONFIGURATION(self):
			return self.getToken(VHDLParser.KW_CONFIGURATION, 0)

		def KW_PROCEDURE(self):
			return self.getToken(VHDLParser.KW_PROCEDURE, 0)

		def KW_FUNCTION(self):
			return self.getToken(VHDLParser.KW_FUNCTION, 0)

		def KW_PACKAGE(self):
			return self.getToken(VHDLParser.KW_PACKAGE, 0)

		def KW_TYPE(self):
			return self.getToken(VHDLParser.KW_TYPE, 0)

		def KW_SUBTYPE(self):
			return self.getToken(VHDLParser.KW_SUBTYPE, 0)

		def KW_CONSTANT(self):
			return self.getToken(VHDLParser.KW_CONSTANT, 0)

		def KW_SIGNAL(self):
			return self.getToken(VHDLParser.KW_SIGNAL, 0)

		def KW_VARIABLE(self):
			return self.getToken(VHDLParser.KW_VARIABLE, 0)

		def KW_COMPONENT(self):
			return self.getToken(VHDLParser.KW_COMPONENT, 0)

		def KW_LABEL(self):
			return self.getToken(VHDLParser.KW_LABEL, 0)

		def KW_UNITS(self):
			return self.getToken(VHDLParser.KW_UNITS, 0)

		def KW_GROUP(self):
			return self.getToken(VHDLParser.KW_GROUP, 0)

		def KW_FILE(self):
			return self.getToken(VHDLParser.KW_FILE, 0)

		def KW_VIEW(self):
			return self.getToken(VHDLParser.KW_VIEW, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_EntityClass

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_EntityClass"):
				return visitor.visitRule_EntityClass(self)
			else:
				return visitor.visitChildren(self)

	def rule_EntityClass(self):

		localctx = VHDLParser.Rule_EntityClassContext(self, self._ctx, self.state)
		self.enterRule(localctx, 160, self.RULE_rule_EntityClass)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1271
			_la = self._input.LA(1)
			if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 2270027713613824) != 0) or (
				(((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 1735443611681) != 0)):
				self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_EntityClassEntryContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_EntityClass(self):
			return self.getTypedRuleContext(VHDLParser.Rule_EntityClassContext, 0)

		def TOK_BOX(self):
			return self.getToken(VHDLParser.TOK_BOX, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_EntityClassEntry

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_EntityClassEntry"):
				return visitor.visitRule_EntityClassEntry(self)
			else:
				return visitor.visitChildren(self)

	def rule_EntityClassEntry(self):

		localctx = VHDLParser.Rule_EntityClassEntryContext(self, self._ctx, self.state)
		self.enterRule(localctx, 162, self.RULE_rule_EntityClassEntry)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1273
			self.rule_EntityClass()
			self.state = 1275
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 142:
				self.state = 1274
				self.match(VHDLParser.TOK_BOX)


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_EntityDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.name = None  # Token
			self.genericClause = None  # Rule_GenericClauseContext
			self.portClause = None  # Rule_PortClauseContext
			self.declarations = None  # Rule_EntityDeclarativeItemContext
			self.statements = None  # Rule_EntityStatementContext
			self.name2 = None  # Token

		def KW_ENTITY(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_ENTITY)
			else:
				return self.getToken(VHDLParser.KW_ENTITY, i)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def KW_BEGIN(self):
			return self.getToken(VHDLParser.KW_BEGIN, 0)

		def rule_GenericClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GenericClauseContext, 0)

		def rule_PortClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PortClauseContext, 0)

		def rule_EntityDeclarativeItem(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_EntityDeclarativeItemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_EntityDeclarativeItemContext, i)

		def rule_EntityStatement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_EntityStatementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_EntityStatementContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_EntityDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_EntityDeclaration"):
				return visitor.visitRule_EntityDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_EntityDeclaration(self):

		localctx = VHDLParser.Rule_EntityDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 164, self.RULE_rule_EntityDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1277
			self.match(VHDLParser.KW_ENTITY)
			self.state = 1278
			localctx.name = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 1279
			self.match(VHDLParser.KW_IS)
			self.state = 1281
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 42:
				self.state = 1280
				localctx.genericClause = self.rule_GenericClause()

			self.state = 1284
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 72:
				self.state = 1283
				localctx.portClause = self.rule_PortClause()

			self.state = 1289
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & 88579975971328) != 0) or (
				(((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 1941606236449) != 0):
				self.state = 1286
				localctx.declarations = self.rule_EntityDeclarativeItem()
				self.state = 1291
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1299
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 17:
				self.state = 1292
				self.match(VHDLParser.KW_BEGIN)
				self.state = 1296
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				while ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 5188146770730811393) != 0) or (
					(((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & 114689) != 0):
					self.state = 1293
					localctx.statements = self.rule_EntityStatement()
					self.state = 1298
					self._errHandler.sync(self)
					_la = self._input.LA(1)

			self.state = 1301
			self.match(VHDLParser.KW_END)
			self.state = 1303
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 34:
				self.state = 1302
				self.match(VHDLParser.KW_ENTITY)

			self.state = 1306
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 1305
				localctx.name2 = self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 1308
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_EntityDeclarativeItemContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_SubprogramDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramDeclarationContext, 0)

		def rule_SubprogramBody(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramBodyContext, 0)

		def rule_SubprogramInstantiationDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramInstantiationDeclarationContext, 0)

		def rule_PackageDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PackageDeclarationContext, 0)

		def rule_PackageBody(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PackageBodyContext, 0)

		def rule_PackageInstantiationDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PackageInstantiationDeclarationContext, 0)

		def rule_TypeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_TypeDeclarationContext, 0)

		def rule_SubtypeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeDeclarationContext, 0)

		def rule_ModeViewDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ModeViewDeclarationContext, 0)

		def rule_ConstantDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConstantDeclarationContext, 0)

		def rule_SignalDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SignalDeclarationContext, 0)

		def rule_VariableDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_VariableDeclarationContext, 0)

		def rule_FileDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FileDeclarationContext, 0)

		def rule_AliasDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AliasDeclarationContext, 0)

		def rule_AttributeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AttributeDeclarationContext, 0)

		def rule_AttributeSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AttributeSpecificationContext, 0)

		def rule_DisconnectionSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_DisconnectionSpecificationContext, 0)

		def rule_UseClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_UseClauseContext, 0)

		def rule_GroupTemplateDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GroupTemplateDeclarationContext, 0)

		def rule_GroupDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GroupDeclarationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_EntityDeclarativeItem

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_EntityDeclarativeItem"):
				return visitor.visitRule_EntityDeclarativeItem(self)
			else:
				return visitor.visitChildren(self)

	def rule_EntityDeclarativeItem(self):

		localctx = VHDLParser.Rule_EntityDeclarativeItemContext(self, self._ctx, self.state)
		self.enterRule(localctx, 166, self.RULE_rule_EntityDeclarativeItem)
		try:
			self.state = 1330
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 119, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1310
				self.rule_SubprogramDeclaration()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1311
				self.rule_SubprogramBody()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 1312
				self.rule_SubprogramInstantiationDeclaration()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 1313
				self.rule_PackageDeclaration()
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 1314
				self.rule_PackageBody()
				pass

			elif la_ == 6:
				self.enterOuterAlt(localctx, 6)
				self.state = 1315
				self.rule_PackageInstantiationDeclaration()
				pass

			elif la_ == 7:
				self.enterOuterAlt(localctx, 7)
				self.state = 1316
				self.rule_TypeDeclaration()
				pass

			elif la_ == 8:
				self.enterOuterAlt(localctx, 8)
				self.state = 1317
				self.rule_SubtypeDeclaration()
				pass

			elif la_ == 9:
				self.enterOuterAlt(localctx, 9)
				self.state = 1318
				self.rule_ModeViewDeclaration()
				pass

			elif la_ == 10:
				self.enterOuterAlt(localctx, 10)
				self.state = 1319
				self.rule_ConstantDeclaration()
				pass

			elif la_ == 11:
				self.enterOuterAlt(localctx, 11)
				self.state = 1320
				self.rule_SignalDeclaration()
				pass

			elif la_ == 12:
				self.enterOuterAlt(localctx, 12)
				self.state = 1321
				self.rule_VariableDeclaration()
				pass

			elif la_ == 13:
				self.enterOuterAlt(localctx, 13)
				self.state = 1322
				self.rule_FileDeclaration()
				pass

			elif la_ == 14:
				self.enterOuterAlt(localctx, 14)
				self.state = 1323
				self.rule_AliasDeclaration()
				pass

			elif la_ == 15:
				self.enterOuterAlt(localctx, 15)
				self.state = 1324
				self.rule_AttributeDeclaration()
				pass

			elif la_ == 16:
				self.enterOuterAlt(localctx, 16)
				self.state = 1325
				self.rule_AttributeSpecification()
				pass

			elif la_ == 17:
				self.enterOuterAlt(localctx, 17)
				self.state = 1326
				self.rule_DisconnectionSpecification()
				pass

			elif la_ == 18:
				self.enterOuterAlt(localctx, 18)
				self.state = 1327
				self.rule_UseClause()
				pass

			elif la_ == 19:
				self.enterOuterAlt(localctx, 19)
				self.state = 1328
				self.rule_GroupTemplateDeclaration()
				pass

			elif la_ == 20:
				self.enterOuterAlt(localctx, 20)
				self.state = 1329
				self.rule_GroupDeclaration()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_EntityDesignatorContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.entityTag = None  # Rule_EntityTagContext
			self.signature = None  # Rule_SignatureContext

		def rule_EntityTag(self):
			return self.getTypedRuleContext(VHDLParser.Rule_EntityTagContext, 0)

		def rule_Signature(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SignatureContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_EntityDesignator

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_EntityDesignator"):
				return visitor.visitRule_EntityDesignator(self)
			else:
				return visitor.visitChildren(self)

	def rule_EntityDesignator(self):

		localctx = VHDLParser.Rule_EntityDesignatorContext(self, self._ctx, self.state)
		self.enterRule(localctx, 168, self.RULE_rule_EntityDesignator)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1332
			localctx.entityTag = self.rule_EntityTag()
			self.state = 1334
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 145:
				self.state = 1333
				localctx.signature = self.rule_Signature()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_EntityNameListContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_EntityDesignator = None  # Rule_EntityDesignatorContext
			self.entityDesignators = list()  # of Rule_EntityDesignatorContexts

		def rule_EntityDesignator(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_EntityDesignatorContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_EntityDesignatorContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def KW_OTHERS(self):
			return self.getToken(VHDLParser.KW_OTHERS, 0)

		def KW_ALL(self):
			return self.getToken(VHDLParser.KW_ALL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_EntityNameList

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_EntityNameList"):
				return visitor.visitRule_EntityNameList(self)
			else:
				return visitor.visitChildren(self)

	def rule_EntityNameList(self):

		localctx = VHDLParser.Rule_EntityNameListContext(self, self._ctx, self.state)
		self.enterRule(localctx, 170, self.RULE_rule_EntityNameList)
		self._la = 0  # Token type
		try:
			self.state = 1346
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [161, 162, 163]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1336
				localctx._rule_EntityDesignator = self.rule_EntityDesignator()
				localctx.entityDesignators.append(localctx._rule_EntityDesignator)
				self.state = 1341
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				while _la == 151:
					self.state = 1337
					self.match(VHDLParser.TOK_COMMA)
					self.state = 1338
					localctx._rule_EntityDesignator = self.rule_EntityDesignator()
					localctx.entityDesignators.append(localctx._rule_EntityDesignator)
					self.state = 1343
					self._errHandler.sync(self)
					_la = self._input.LA(1)

				pass
			elif token in [68]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1344
				self.match(VHDLParser.KW_OTHERS)
				pass
			elif token in [10]:
				self.enterOuterAlt(localctx, 3)
				self.state = 1345
				self.match(VHDLParser.KW_ALL)
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_EntitySpecificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.entityNameList = None  # Rule_EntityNameListContext
			self.entityClass = None  # Rule_EntityClassContext

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def rule_EntityNameList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_EntityNameListContext, 0)

		def rule_EntityClass(self):
			return self.getTypedRuleContext(VHDLParser.Rule_EntityClassContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_EntitySpecification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_EntitySpecification"):
				return visitor.visitRule_EntitySpecification(self)
			else:
				return visitor.visitChildren(self)

	def rule_EntitySpecification(self):

		localctx = VHDLParser.Rule_EntitySpecificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 172, self.RULE_rule_EntitySpecification)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1348
			localctx.entityNameList = self.rule_EntityNameList()
			self.state = 1349
			self.match(VHDLParser.TOK_COLON)
			self.state = 1350
			localctx.entityClass = self.rule_EntityClass()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_EntityStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_ConcurrentAssertionStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConcurrentAssertionStatementContext, 0)

		def rule_ConcurrentProcedureCallStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConcurrentProcedureCallStatementContext, 0)

		def rule_ProcessStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ProcessStatementContext, 0)

		def rule_PostponedProcessStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PostponedProcessStatementContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_EntityStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_EntityStatement"):
				return visitor.visitRule_EntityStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_EntityStatement(self):

		localctx = VHDLParser.Rule_EntityStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 174, self.RULE_rule_EntityStatement)
		try:
			self.state = 1356
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 123, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1352
				self.rule_ConcurrentAssertionStatement()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1353
				self.rule_ConcurrentProcedureCallStatement()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 1354
				self.rule_ProcessStatement()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 1355
				self.rule_PostponedProcessStatement()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_EntityTagContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def LIT_CHARACTER(self):
			return self.getToken(VHDLParser.LIT_CHARACTER, 0)

		def LIT_STRING(self):
			return self.getToken(VHDLParser.LIT_STRING, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_EntityTag

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_EntityTag"):
				return visitor.visitRule_EntityTag(self)
			else:
				return visitor.visitChildren(self)

	def rule_EntityTag(self):

		localctx = VHDLParser.Rule_EntityTagContext(self, self._ctx, self.state)
		self.enterRule(localctx, 176, self.RULE_rule_EntityTag)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1358
			_la = self._input.LA(1)
			if not (((((_la - 161)) & ~0x3f) == 0 and ((1 << (_la - 161)) & 7) != 0)):
				self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_EnumerationLiteralContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def LIT_CHARACTER(self):
			return self.getToken(VHDLParser.LIT_CHARACTER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_EnumerationLiteral

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_EnumerationLiteral"):
				return visitor.visitRule_EnumerationLiteral(self)
			else:
				return visitor.visitChildren(self)

	def rule_EnumerationLiteral(self):

		localctx = VHDLParser.Rule_EnumerationLiteralContext(self, self._ctx, self.state)
		self.enterRule(localctx, 178, self.RULE_rule_EnumerationLiteral)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1360
			_la = self._input.LA(1)
			if not (_la == 161 or _la == 163):
				self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_EnumerationTypeDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_EnumerationLiteral = None  # Rule_EnumerationLiteralContext
			self.enumerationLiterals = list()  # of Rule_EnumerationLiteralContexts

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def rule_EnumerationLiteral(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_EnumerationLiteralContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_EnumerationLiteralContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_EnumerationTypeDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_EnumerationTypeDefinition"):
				return visitor.visitRule_EnumerationTypeDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_EnumerationTypeDefinition(self):

		localctx = VHDLParser.Rule_EnumerationTypeDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 180, self.RULE_rule_EnumerationTypeDefinition)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1362
			self.match(VHDLParser.TOK_LP)
			self.state = 1363
			localctx._rule_EnumerationLiteral = self.rule_EnumerationLiteral()
			localctx.enumerationLiterals.append(localctx._rule_EnumerationLiteral)
			self.state = 1368
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == 151:
				self.state = 1364
				self.match(VHDLParser.TOK_COMMA)
				self.state = 1365
				localctx._rule_EnumerationLiteral = self.rule_EnumerationLiteral()
				localctx.enumerationLiterals.append(localctx._rule_EnumerationLiteral)
				self.state = 1370
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1371
			self.match(VHDLParser.TOK_RP)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ExitStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token
			self.referencedLabel = None  # Token
			self.condition = None  # Rule_ExpressionContext

		def KW_EXIT(self):
			return self.getToken(VHDLParser.KW_EXIT, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def KW_WHEN(self):
			return self.getToken(VHDLParser.KW_WHEN, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ExitStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ExitStatement"):
				return visitor.visitRule_ExitStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_ExitStatement(self):

		localctx = VHDLParser.Rule_ExitStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 182, self.RULE_rule_ExitStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1375
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 1373
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 1374
				self.match(VHDLParser.TOK_COLON)

			self.state = 1377
			self.match(VHDLParser.KW_EXIT)
			self.state = 1379
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 1378
				localctx.referencedLabel = self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 1383
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 117:
				self.state = 1381
				self.match(VHDLParser.KW_WHEN)
				self.state = 1382
				localctx.condition = self.rule_Expression(0)

			self.state = 1385
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ExpressionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Expression

		def copyFrom(self, ctx: ParserRuleContext):
			super().copyFrom(ctx)

	class BinaryOpContext(Rule_ExpressionContext):

		def __init__(self, parser, ctx: ParserRuleContext):  # actually a VHDLParser.Rule_ExpressionContext
			super().__init__(parser)
			self.left = None  # Rule_ExpressionContext
			self.operator = None  # Token
			self.right = None  # Rule_ExpressionContext
			self.copyFrom(ctx)

		def rule_Expression(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ExpressionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, i)

		def OP_POW(self):
			return self.getToken(VHDLParser.OP_POW, 0)

		def OP_MUL(self):
			return self.getToken(VHDLParser.OP_MUL, 0)

		def OP_DIV(self):
			return self.getToken(VHDLParser.OP_DIV, 0)

		def OP_MOD(self):
			return self.getToken(VHDLParser.OP_MOD, 0)

		def OP_REM(self):
			return self.getToken(VHDLParser.OP_REM, 0)

		def OP_PLUS(self):
			return self.getToken(VHDLParser.OP_PLUS, 0)

		def OP_MINUS(self):
			return self.getToken(VHDLParser.OP_MINUS, 0)

		def OP_CONCAT(self):
			return self.getToken(VHDLParser.OP_CONCAT, 0)

		def OP_SLL(self):
			return self.getToken(VHDLParser.OP_SLL, 0)

		def OP_SRL(self):
			return self.getToken(VHDLParser.OP_SRL, 0)

		def OP_SLA(self):
			return self.getToken(VHDLParser.OP_SLA, 0)

		def OP_SRA(self):
			return self.getToken(VHDLParser.OP_SRA, 0)

		def OP_ROL(self):
			return self.getToken(VHDLParser.OP_ROL, 0)

		def OP_ROR(self):
			return self.getToken(VHDLParser.OP_ROR, 0)

		def OP_EQ(self):
			return self.getToken(VHDLParser.OP_EQ, 0)

		def OP_NE(self):
			return self.getToken(VHDLParser.OP_NE, 0)

		def OP_LT(self):
			return self.getToken(VHDLParser.OP_LT, 0)

		def TOK_SIG_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_SIG_ASSIGN, 0)

		def OP_GT(self):
			return self.getToken(VHDLParser.OP_GT, 0)

		def OP_GE(self):
			return self.getToken(VHDLParser.OP_GE, 0)

		def OP_IEQ(self):
			return self.getToken(VHDLParser.OP_IEQ, 0)

		def OP_INE(self):
			return self.getToken(VHDLParser.OP_INE, 0)

		def OP_ILT(self):
			return self.getToken(VHDLParser.OP_ILT, 0)

		def OP_ILE(self):
			return self.getToken(VHDLParser.OP_ILE, 0)

		def OP_IGT(self):
			return self.getToken(VHDLParser.OP_IGT, 0)

		def OP_IGE(self):
			return self.getToken(VHDLParser.OP_IGE, 0)

		def OP_AND(self):
			return self.getToken(VHDLParser.OP_AND, 0)

		def OP_OR(self):
			return self.getToken(VHDLParser.OP_OR, 0)

		def OP_NAND(self):
			return self.getToken(VHDLParser.OP_NAND, 0)

		def OP_NOR(self):
			return self.getToken(VHDLParser.OP_NOR, 0)

		def OP_XOR(self):
			return self.getToken(VHDLParser.OP_XOR, 0)

		def OP_XNOR(self):
			return self.getToken(VHDLParser.OP_XNOR, 0)

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitBinaryOp"):
				return visitor.visitBinaryOp(self)
			else:
				return visitor.visitChildren(self)

	class PrimaryOpContext(Rule_ExpressionContext):

		def __init__(self, parser, ctx: ParserRuleContext):  # actually a VHDLParser.Rule_ExpressionContext
			super().__init__(parser)
			self.copyFrom(ctx)

		def rule_Primary(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PrimaryContext, 0)

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitPrimaryOp"):
				return visitor.visitPrimaryOp(self)
			else:
				return visitor.visitChildren(self)

	class UnaryOpContext(Rule_ExpressionContext):

		def __init__(self, parser, ctx: ParserRuleContext):  # actually a VHDLParser.Rule_ExpressionContext
			super().__init__(parser)
			self.operator = None  # Token
			self.right = None  # Rule_ExpressionContext
			self.copyFrom(ctx)

		def OP_CONDITION(self):
			return self.getToken(VHDLParser.OP_CONDITION, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def OP_ABS(self):
			return self.getToken(VHDLParser.OP_ABS, 0)

		def OP_NOT(self):
			return self.getToken(VHDLParser.OP_NOT, 0)

		def OP_AND(self):
			return self.getToken(VHDLParser.OP_AND, 0)

		def OP_OR(self):
			return self.getToken(VHDLParser.OP_OR, 0)

		def OP_NAND(self):
			return self.getToken(VHDLParser.OP_NAND, 0)

		def OP_NOR(self):
			return self.getToken(VHDLParser.OP_NOR, 0)

		def OP_XOR(self):
			return self.getToken(VHDLParser.OP_XOR, 0)

		def OP_XNOR(self):
			return self.getToken(VHDLParser.OP_XNOR, 0)

		def OP_PLUS(self):
			return self.getToken(VHDLParser.OP_PLUS, 0)

		def OP_MINUS(self):
			return self.getToken(VHDLParser.OP_MINUS, 0)

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitUnaryOp"):
				return visitor.visitUnaryOp(self)
			else:
				return visitor.visitChildren(self)

	def rule_Expression(self, _p: int = 0):
		_parentctx = self._ctx
		_parentState = self.state
		localctx = VHDLParser.Rule_ExpressionContext(self, self._ctx, _parentState)
		_prevctx = localctx
		_startState = 184
		self.enterRecursionRule(localctx, 184, self.RULE_rule_Expression, _p)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1393
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [59, 63, 143, 147, 159, 160, 161, 162, 163]:
				localctx = VHDLParser.PrimaryOpContext(self, localctx)
				self._ctx = localctx
				_prevctx = localctx

				self.state = 1388
				self.rule_Primary()
				pass
			elif token in [138]:
				localctx = VHDLParser.UnaryOpContext(self, localctx)
				self._ctx = localctx
				_prevctx = localctx
				self.state = 1389
				localctx.operator = self.match(VHDLParser.OP_CONDITION)
				self.state = 1390
				localctx.right = self.rule_Expression(8)
				pass
			elif token in [6, 11, 58, 61, 62, 67, 119, 120, 132, 133]:
				localctx = VHDLParser.UnaryOpContext(self, localctx)
				self._ctx = localctx
				_prevctx = localctx
				self.state = 1391
				localctx.operator = self._input.LT(1)
				_la = self._input.LA(1)
				if not (((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & 2418432999897956385) != 0) or (
					(((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 24579) != 0)):
					localctx.operator = self._errHandler.recoverInline(self)
				else:
					self._errHandler.reportMatch(self)
					self.consume()
				self.state = 1392
				localctx.right = self.rule_Expression(7)
				pass
			else:
				raise NoViableAltException(self)

			self._ctx.stop = self._input.LT(-1)
			self.state = 1415
			self._errHandler.sync(self)
			_alt = self._interp.adaptivePredict(self._input, 130, self._ctx)
			while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
				if _alt == 1:
					if self._parseListeners is not None:
						self.triggerExitRuleEvent()
					_prevctx = localctx
					self.state = 1413
					self._errHandler.sync(self)
					la_ = self._interp.adaptivePredict(self._input, 129, self._ctx)
					if la_ == 1:
						localctx = VHDLParser.BinaryOpContext(self,
																									VHDLParser.Rule_ExpressionContext(self, _parentctx, _parentState))
						localctx.left = _prevctx
						self.pushNewRecursionContext(localctx, _startState, self.RULE_rule_Expression)
						self.state = 1395
						if not self.precpred(self._ctx, 6):
							from antlr4.error.Errors import FailedPredicateException
							raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
						self.state = 1396
						localctx.operator = self.match(VHDLParser.OP_POW)
						self.state = 1397
						localctx.right = self.rule_Expression(6)
						pass

					elif la_ == 2:
						localctx = VHDLParser.BinaryOpContext(self,
																									VHDLParser.Rule_ExpressionContext(self, _parentctx, _parentState))
						localctx.left = _prevctx
						self.pushNewRecursionContext(localctx, _startState, self.RULE_rule_Expression)
						self.state = 1398
						if not self.precpred(self._ctx, 5):
							from antlr4.error.Errors import FailedPredicateException
							raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
						self.state = 1399
						localctx.operator = self._input.LT(1)
						_la = self._input.LA(1)
						if not (_la == 57 or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 3377699720527873) != 0)):
							localctx.operator = self._errHandler.recoverInline(self)
						else:
							self._errHandler.reportMatch(self)
							self.consume()
						self.state = 1400
						localctx.right = self.rule_Expression(6)
						pass

					elif la_ == 3:
						localctx = VHDLParser.BinaryOpContext(self,
																									VHDLParser.Rule_ExpressionContext(self, _parentctx, _parentState))
						localctx.left = _prevctx
						self.pushNewRecursionContext(localctx, _startState, self.RULE_rule_Expression)
						self.state = 1401
						if not self.precpred(self._ctx, 4):
							from antlr4.error.Errors import FailedPredicateException
							raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
						self.state = 1402
						localctx.operator = self._input.LT(1)
						_la = self._input.LA(1)
						if not (((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 35) != 0)):
							localctx.operator = self._errHandler.recoverInline(self)
						else:
							self._errHandler.reportMatch(self)
							self.consume()
						self.state = 1403
						localctx.right = self.rule_Expression(5)
						pass

					elif la_ == 4:
						localctx = VHDLParser.BinaryOpContext(self,
																									VHDLParser.Rule_ExpressionContext(self, _parentctx, _parentState))
						localctx.left = _prevctx
						self.pushNewRecursionContext(localctx, _startState, self.RULE_rule_Expression)
						self.state = 1404
						if not self.precpred(self._ctx, 3):
							from antlr4.error.Errors import FailedPredicateException
							raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
						self.state = 1405
						localctx.operator = self._input.LT(1)
						_la = self._input.LA(1)
						if not (((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 1923) != 0)):
							localctx.operator = self._errHandler.recoverInline(self)
						else:
							self._errHandler.reportMatch(self)
							self.consume()
						self.state = 1406
						localctx.right = self.rule_Expression(4)
						pass

					elif la_ == 5:
						localctx = VHDLParser.BinaryOpContext(self,
																									VHDLParser.Rule_ExpressionContext(self, _parentctx, _parentState))
						localctx.left = _prevctx
						self.pushNewRecursionContext(localctx, _startState, self.RULE_rule_Expression)
						self.state = 1407
						if not self.precpred(self._ctx, 2):
							from antlr4.error.Errors import FailedPredicateException
							raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
						self.state = 1408
						localctx.operator = self._input.LT(1)
						_la = self._input.LA(1)
						if not (((((_la - 121)) & ~0x3f) == 0 and ((1 << (_la - 121)) & 526335) != 0)):
							localctx.operator = self._errHandler.recoverInline(self)
						else:
							self._errHandler.reportMatch(self)
							self.consume()
						self.state = 1409
						localctx.right = self.rule_Expression(3)
						pass

					elif la_ == 6:
						localctx = VHDLParser.BinaryOpContext(self,
																									VHDLParser.Rule_ExpressionContext(self, _parentctx, _parentState))
						localctx.left = _prevctx
						self.pushNewRecursionContext(localctx, _startState, self.RULE_rule_Expression)
						self.state = 1410
						if not self.precpred(self._ctx, 1):
							from antlr4.error.Errors import FailedPredicateException
							raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
						self.state = 1411
						localctx.operator = self._input.LT(1)
						_la = self._input.LA(1)
						if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 2594073385365407744) != 0) or (
							(((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 13510798882111489) != 0)):
							localctx.operator = self._errHandler.recoverInline(self)
						else:
							self._errHandler.reportMatch(self)
							self.consume()
						self.state = 1412
						localctx.right = self.rule_Expression(2)
						pass

				self.state = 1417
				self._errHandler.sync(self)
				_alt = self._interp.adaptivePredict(self._input, 130, self._ctx)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.unrollRecursionContexts(_parentctx)
		return localctx

	class Rule_ExpressionOrUnaffectedContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def KW_UNAFFECTED(self):
			return self.getToken(VHDLParser.KW_UNAFFECTED, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ExpressionOrUnaffected

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ExpressionOrUnaffected"):
				return visitor.visitRule_ExpressionOrUnaffected(self)
			else:
				return visitor.visitChildren(self)

	def rule_ExpressionOrUnaffected(self):

		localctx = VHDLParser.Rule_ExpressionOrUnaffectedContext(self, self._ctx, self.state)
		self.enterRule(localctx, 186, self.RULE_rule_ExpressionOrUnaffected)
		try:
			self.state = 1420
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [6, 11, 58, 59, 61, 62, 63, 67, 119, 120, 132, 133, 138, 143, 147, 159, 160, 161, 162, 163]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1418
				self.rule_Expression(0)
				pass
			elif token in [105]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1419
				self.match(VHDLParser.KW_UNAFFECTED)
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ExternalNameContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_ExternalConstantName(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExternalConstantNameContext, 0)

		def rule_ExternalSignalName(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExternalSignalNameContext, 0)

		def rule_ExternalVariableName(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExternalVariableNameContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ExternalName

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ExternalName"):
				return visitor.visitRule_ExternalName(self)
			else:
				return visitor.visitChildren(self)

	def rule_ExternalName(self):

		localctx = VHDLParser.Rule_ExternalNameContext(self, self._ctx, self.state)
		self.enterRule(localctx, 188, self.RULE_rule_ExternalName)
		try:
			self.state = 1425
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 132, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1422
				self.rule_ExternalConstantName()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1423
				self.rule_ExternalSignalName()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 1424
				self.rule_ExternalVariableName()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ExternalConstantNameContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def TOK_DLA(self):
			return self.getToken(VHDLParser.TOK_DLA, 0)

		def KW_CONSTANT(self):
			return self.getToken(VHDLParser.KW_CONSTANT, 0)

		def rule_ExternalPathname(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExternalPathnameContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def rule_InterfaceTypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_InterfaceTypeIndicationContext, 0)

		def TOK_DRA(self):
			return self.getToken(VHDLParser.TOK_DRA, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ExternalConstantName

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ExternalConstantName"):
				return visitor.visitRule_ExternalConstantName(self)
			else:
				return visitor.visitChildren(self)

	def rule_ExternalConstantName(self):

		localctx = VHDLParser.Rule_ExternalConstantNameContext(self, self._ctx, self.state)
		self.enterRule(localctx, 190, self.RULE_rule_ExternalConstantName)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1427
			self.match(VHDLParser.TOK_DLA)
			self.state = 1428
			self.match(VHDLParser.KW_CONSTANT)
			self.state = 1429
			self.rule_ExternalPathname()
			self.state = 1430
			self.match(VHDLParser.TOK_COLON)
			self.state = 1431
			self.rule_InterfaceTypeIndication()
			self.state = 1432
			self.match(VHDLParser.TOK_DRA)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ExternalSignalNameContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def TOK_DLA(self):
			return self.getToken(VHDLParser.TOK_DLA, 0)

		def KW_SIGNAL(self):
			return self.getToken(VHDLParser.KW_SIGNAL, 0)

		def rule_ExternalPathname(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExternalPathnameContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def rule_InterfaceTypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_InterfaceTypeIndicationContext, 0)

		def TOK_DRA(self):
			return self.getToken(VHDLParser.TOK_DRA, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ExternalSignalName

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ExternalSignalName"):
				return visitor.visitRule_ExternalSignalName(self)
			else:
				return visitor.visitChildren(self)

	def rule_ExternalSignalName(self):

		localctx = VHDLParser.Rule_ExternalSignalNameContext(self, self._ctx, self.state)
		self.enterRule(localctx, 192, self.RULE_rule_ExternalSignalName)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1434
			self.match(VHDLParser.TOK_DLA)
			self.state = 1435
			self.match(VHDLParser.KW_SIGNAL)
			self.state = 1436
			self.rule_ExternalPathname()
			self.state = 1437
			self.match(VHDLParser.TOK_COLON)
			self.state = 1438
			self.rule_InterfaceTypeIndication()
			self.state = 1439
			self.match(VHDLParser.TOK_DRA)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ExternalVariableNameContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def TOK_DLA(self):
			return self.getToken(VHDLParser.TOK_DLA, 0)

		def KW_VARIABLE(self):
			return self.getToken(VHDLParser.KW_VARIABLE, 0)

		def rule_ExternalPathname(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExternalPathnameContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def rule_InterfaceTypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_InterfaceTypeIndicationContext, 0)

		def TOK_DRA(self):
			return self.getToken(VHDLParser.TOK_DRA, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ExternalVariableName

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ExternalVariableName"):
				return visitor.visitRule_ExternalVariableName(self)
			else:
				return visitor.visitChildren(self)

	def rule_ExternalVariableName(self):

		localctx = VHDLParser.Rule_ExternalVariableNameContext(self, self._ctx, self.state)
		self.enterRule(localctx, 194, self.RULE_rule_ExternalVariableName)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1441
			self.match(VHDLParser.TOK_DLA)
			self.state = 1442
			self.match(VHDLParser.KW_VARIABLE)
			self.state = 1443
			self.rule_ExternalPathname()
			self.state = 1444
			self.match(VHDLParser.TOK_COLON)
			self.state = 1445
			self.rule_InterfaceTypeIndication()
			self.state = 1446
			self.match(VHDLParser.TOK_DRA)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ExternalPathnameContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_PackagePathname(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PackagePathnameContext, 0)

		def rule_AbsolutePathname(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AbsolutePathnameContext, 0)

		def rule_RelativePathname(self):
			return self.getTypedRuleContext(VHDLParser.Rule_RelativePathnameContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ExternalPathname

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ExternalPathname"):
				return visitor.visitRule_ExternalPathname(self)
			else:
				return visitor.visitChildren(self)

	def rule_ExternalPathname(self):

		localctx = VHDLParser.Rule_ExternalPathnameContext(self, self._ctx, self.state)
		self.enterRule(localctx, 196, self.RULE_rule_ExternalPathname)
		try:
			self.state = 1451
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [155]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1448
				self.rule_PackagePathname()
				pass
			elif token in [153]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1449
				self.rule_AbsolutePathname()
				pass
			elif token in [156, 163]:
				self.enterOuterAlt(localctx, 3)
				self.state = 1450
				self.rule_RelativePathname()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_FileDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.identifierList = None  # Rule_IdentifierListContext
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext

		def KW_FILE(self):
			return self.getToken(VHDLParser.KW_FILE, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_IdentifierList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IdentifierListContext, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def rule_FileOpenInformation(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FileOpenInformationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_FileDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_FileDeclaration"):
				return visitor.visitRule_FileDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_FileDeclaration(self):

		localctx = VHDLParser.Rule_FileDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 198, self.RULE_rule_FileDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1453
			self.match(VHDLParser.KW_FILE)
			self.state = 1454
			localctx.identifierList = self.rule_IdentifierList()
			self.state = 1455
			self.match(VHDLParser.TOK_COLON)
			self.state = 1456
			localctx.subtypeIndication = self.rule_SubtypeIndication()
			self.state = 1458
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 50 or _la == 66:
				self.state = 1457
				self.rule_FileOpenInformation()

			self.state = 1460
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_FileIncompleteTypeDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_FILE(self):
			return self.getToken(VHDLParser.KW_FILE, 0)

		def KW_OF(self):
			return self.getToken(VHDLParser.KW_OF, 0)

		def rule_IncompleteTypeMark(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IncompleteTypeMarkContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_FileIncompleteTypeDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_FileIncompleteTypeDefinition"):
				return visitor.visitRule_FileIncompleteTypeDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_FileIncompleteTypeDefinition(self):

		localctx = VHDLParser.Rule_FileIncompleteTypeDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 200, self.RULE_rule_FileIncompleteTypeDefinition)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1462
			self.match(VHDLParser.KW_FILE)
			self.state = 1463
			self.match(VHDLParser.KW_OF)
			self.state = 1464
			self.rule_IncompleteTypeMark()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_FileOpenInformationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.openKindExpression = None  # Rule_ExpressionContext
			self.fileNameExpression = None  # Rule_ExpressionContext

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def rule_Expression(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ExpressionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, i)

		def KW_OPEN(self):
			return self.getToken(VHDLParser.KW_OPEN, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_FileOpenInformation

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_FileOpenInformation"):
				return visitor.visitRule_FileOpenInformation(self)
			else:
				return visitor.visitChildren(self)

	def rule_FileOpenInformation(self):

		localctx = VHDLParser.Rule_FileOpenInformationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 202, self.RULE_rule_FileOpenInformation)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1468
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 66:
				self.state = 1466
				self.match(VHDLParser.KW_OPEN)
				self.state = 1467
				localctx.openKindExpression = self.rule_Expression(0)

			self.state = 1470
			self.match(VHDLParser.KW_IS)
			self.state = 1471
			localctx.fileNameExpression = self.rule_Expression(0)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_FileTypeDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_FILE(self):
			return self.getToken(VHDLParser.KW_FILE, 0)

		def KW_OF(self):
			return self.getToken(VHDLParser.KW_OF, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_FileTypeDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_FileTypeDefinition"):
				return visitor.visitRule_FileTypeDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_FileTypeDefinition(self):

		localctx = VHDLParser.Rule_FileTypeDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 204, self.RULE_rule_FileTypeDefinition)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1473
			self.match(VHDLParser.KW_FILE)
			self.state = 1474
			self.match(VHDLParser.KW_OF)
			self.state = 1475
			self.rule_Name(0)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_FloatingIncompleteTypeDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_RANGE(self):
			return self.getToken(VHDLParser.KW_RANGE, 0)

		def TOK_BOX(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_BOX)
			else:
				return self.getToken(VHDLParser.TOK_BOX, i)

		def TOK_DOT(self):
			return self.getToken(VHDLParser.TOK_DOT, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_FloatingIncompleteTypeDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_FloatingIncompleteTypeDefinition"):
				return visitor.visitRule_FloatingIncompleteTypeDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_FloatingIncompleteTypeDefinition(self):

		localctx = VHDLParser.Rule_FloatingIncompleteTypeDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 206, self.RULE_rule_FloatingIncompleteTypeDefinition)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1477
			self.match(VHDLParser.KW_RANGE)
			self.state = 1478
			self.match(VHDLParser.TOK_BOX)
			self.state = 1479
			self.match(VHDLParser.TOK_DOT)
			self.state = 1480
			self.match(VHDLParser.TOK_BOX)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_FloatingTypeDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_RangeConstraint(self):
			return self.getTypedRuleContext(VHDLParser.Rule_RangeConstraintContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_FloatingTypeDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_FloatingTypeDefinition"):
				return visitor.visitRule_FloatingTypeDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_FloatingTypeDefinition(self):

		localctx = VHDLParser.Rule_FloatingTypeDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 208, self.RULE_rule_FloatingTypeDefinition)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1482
			self.rule_RangeConstraint()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ForGenerateStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token
			self._rule_BlockDeclarativeItem = None  # Rule_BlockDeclarativeItemContext
			self.declaredItems = list()  # of Rule_BlockDeclarativeItemContexts
			self._rule_ConcurrentStatement = None  # Rule_ConcurrentStatementContext
			self.statements = list()  # of Rule_ConcurrentStatementContexts
			self.label2 = None  # Token

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def KW_FOR(self):
			return self.getToken(VHDLParser.KW_FOR, 0)

		def rule_ParameterSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ParameterSpecificationContext, 0)

		def KW_GENERATE(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_GENERATE)
			else:
				return self.getToken(VHDLParser.KW_GENERATE, i)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def KW_BEGIN(self):
			return self.getToken(VHDLParser.KW_BEGIN, 0)

		def rule_ConcurrentStatement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ConcurrentStatementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ConcurrentStatementContext, i)

		def rule_BlockDeclarativeItem(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_BlockDeclarativeItemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_BlockDeclarativeItemContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ForGenerateStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ForGenerateStatement"):
				return visitor.visitRule_ForGenerateStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_ForGenerateStatement(self):

		localctx = VHDLParser.Rule_ForGenerateStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 210, self.RULE_rule_ForGenerateStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1484
			localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 1485
			self.match(VHDLParser.TOK_COLON)
			self.state = 1486
			self.match(VHDLParser.KW_FOR)
			self.state = 1487
			self.rule_ParameterSpecification()
			self.state = 1488
			self.match(VHDLParser.KW_GENERATE)
			self.state = 1496
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if (((_la) & ~0x3f) == 0 and ((1 << _la) & 88717423444480) != 0) or (
				(((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 1941606236449) != 0):
				self.state = 1492
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				while (((_la) & ~0x3f) == 0 and ((1 << _la) & 88717423313408) != 0) or (
					(((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 1941606236449) != 0):
					self.state = 1489
					localctx._rule_BlockDeclarativeItem = self.rule_BlockDeclarativeItem()
					localctx.declaredItems.append(localctx._rule_BlockDeclarativeItem)
					self.state = 1494
					self._errHandler.sync(self)
					_la = self._input.LA(1)

				self.state = 1495
				self.match(VHDLParser.KW_BEGIN)

			self.state = 1501
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 5188146770730811393) != 0) or (
				(((_la - 116)) & ~0x3f) == 0 and ((1 << (_la - 116)) & 246292886323201) != 0):
				self.state = 1498
				localctx._rule_ConcurrentStatement = self.rule_ConcurrentStatement()
				localctx.statements.append(localctx._rule_ConcurrentStatement)
				self.state = 1503
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1504
			self.match(VHDLParser.KW_END)
			self.state = 1505
			self.match(VHDLParser.KW_GENERATE)
			self.state = 1507
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 1506
				localctx.label2 = self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 1509
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_FormalDesignatorContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.signature = None  # Rule_SignatureContext

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def rule_Signature(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SignatureContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_FormalDesignator

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_FormalDesignator"):
				return visitor.visitRule_FormalDesignator(self)
			else:
				return visitor.visitChildren(self)

	def rule_FormalDesignator(self):

		localctx = VHDLParser.Rule_FormalDesignatorContext(self, self._ctx, self.state)
		self.enterRule(localctx, 212, self.RULE_rule_FormalDesignator)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1511
			self.rule_Name(0)
			self.state = 1513
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 145:
				self.state = 1512
				localctx.signature = self.rule_Signature()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_FormalParameterListContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_InterfaceList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_InterfaceListContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_FormalParameterList

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_FormalParameterList"):
				return visitor.visitRule_FormalParameterList(self)
			else:
				return visitor.visitChildren(self)

	def rule_FormalParameterList(self):

		localctx = VHDLParser.Rule_FormalParameterListContext(self, self._ctx, self.state)
		self.enterRule(localctx, 214, self.RULE_rule_FormalParameterList)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1515
			self.rule_InterfaceList()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_FormalPartContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_FormalDesignator(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FormalDesignatorContext, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_FormalPart

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_FormalPart"):
				return visitor.visitRule_FormalPart(self)
			else:
				return visitor.visitChildren(self)

	def rule_FormalPart(self):

		localctx = VHDLParser.Rule_FormalPartContext(self, self._ctx, self.state)
		self.enterRule(localctx, 216, self.RULE_rule_FormalPart)
		try:
			self.state = 1526
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 142, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1517
				self.rule_FormalDesignator()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1520
				self._errHandler.sync(self)
				la_ = self._interp.adaptivePredict(self._input, 141, self._ctx)
				if la_ == 1:
					self.state = 1518
					self.rule_Name(0)
					pass

				elif la_ == 2:
					self.state = 1519
					self.rule_Name(0)
					pass

				self.state = 1522
				self.match(VHDLParser.TOK_LP)
				self.state = 1523
				self.rule_FormalDesignator()
				self.state = 1524
				self.match(VHDLParser.TOK_RP)
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_FullTypeDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.name = None  # Token

		def KW_TYPE(self):
			return self.getToken(VHDLParser.KW_TYPE, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def rule_TypeDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_TypeDefinitionContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_FullTypeDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_FullTypeDeclaration"):
				return visitor.visitRule_FullTypeDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_FullTypeDeclaration(self):

		localctx = VHDLParser.Rule_FullTypeDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 218, self.RULE_rule_FullTypeDeclaration)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1528
			self.match(VHDLParser.KW_TYPE)
			self.state = 1529
			localctx.name = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 1530
			self.match(VHDLParser.KW_IS)
			self.state = 1531
			self.rule_TypeDefinition()
			self.state = 1532
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_FunctionCallContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.name = None  # Rule_NameContext
			self.genericMapAspect = None  # Rule_GenericMapAspectContext
			self.parameterMapAspect = None  # Rule_ParameterMapAspectContext

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def rule_GenericMapAspect(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GenericMapAspectContext, 0)

		def rule_ParameterMapAspect(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ParameterMapAspectContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_FunctionCall

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_FunctionCall"):
				return visitor.visitRule_FunctionCall(self)
			else:
				return visitor.visitChildren(self)

	def rule_FunctionCall(self):

		localctx = VHDLParser.Rule_FunctionCallContext(self, self._ctx, self.state)
		self.enterRule(localctx, 220, self.RULE_rule_FunctionCall)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1534
			localctx.name = self.rule_Name(0)
			self.state = 1535
			localctx.genericMapAspect = self.rule_GenericMapAspect()
			self.state = 1536
			localctx.parameterMapAspect = self.rule_ParameterMapAspect()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_FunctionSpecificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.returnIdentifier = None  # Token

		def KW_FUNCTION(self):
			return self.getToken(VHDLParser.KW_FUNCTION, 0)

		def rule_Designator(self):
			return self.getTypedRuleContext(VHDLParser.Rule_DesignatorContext, 0)

		def KW_RETURN(self):
			return self.getToken(VHDLParser.KW_RETURN, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def rule_FormalParameterList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FormalParameterListContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def KW_OF(self):
			return self.getToken(VHDLParser.KW_OF, 0)

		def KW_PURE(self):
			return self.getToken(VHDLParser.KW_PURE, 0)

		def KW_IMPURE(self):
			return self.getToken(VHDLParser.KW_IMPURE, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def KW_PARAMETER(self):
			return self.getToken(VHDLParser.KW_PARAMETER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_FunctionSpecification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_FunctionSpecification"):
				return visitor.visitRule_FunctionSpecification(self)
			else:
				return visitor.visitChildren(self)

	def rule_FunctionSpecification(self):

		localctx = VHDLParser.Rule_FunctionSpecificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 222, self.RULE_rule_FunctionSpecification)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1539
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 46 or _la == 78:
				self.state = 1538
				_la = self._input.LA(1)
				if not (_la == 46 or _la == 78):
					self._errHandler.recoverInline(self)
				else:
					self._errHandler.reportMatch(self)
					self.consume()

			self.state = 1541
			self.match(VHDLParser.KW_FUNCTION)
			self.state = 1542
			self.rule_Designator()
			self.state = 1550
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 71 or _la == 143:
				self.state = 1544
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == 71:
					self.state = 1543
					self.match(VHDLParser.KW_PARAMETER)

				self.state = 1546
				self.match(VHDLParser.TOK_LP)
				self.state = 1547
				self.rule_FormalParameterList()
				self.state = 1548
				self.match(VHDLParser.TOK_RP)

			self.state = 1552
			self.match(VHDLParser.KW_RETURN)
			self.state = 1555
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 146, self._ctx)
			if la_ == 1:
				self.state = 1553
				localctx.returnIdentifier = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 1554
				self.match(VHDLParser.KW_OF)

			self.state = 1557
			self.rule_Name(0)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_GenerateSpecificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_DiscreteRange(self):
			return self.getTypedRuleContext(VHDLParser.Rule_DiscreteRangeContext, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_GenerateSpecification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_GenerateSpecification"):
				return visitor.visitRule_GenerateSpecification(self)
			else:
				return visitor.visitChildren(self)

	def rule_GenerateSpecification(self):

		localctx = VHDLParser.Rule_GenerateSpecificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 224, self.RULE_rule_GenerateSpecification)
		try:
			self.state = 1562
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 147, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1559
				self.rule_DiscreteRange()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1560
				self.rule_Expression(0)
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 1561
				self.match(VHDLParser.LIT_IDENTIFIER)
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_GenerateStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_ForGenerateStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ForGenerateStatementContext, 0)

		def rule_IfGenerateStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IfGenerateStatementContext, 0)

		def rule_CaseGenerateStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_CaseGenerateStatementContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_GenerateStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_GenerateStatement"):
				return visitor.visitRule_GenerateStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_GenerateStatement(self):

		localctx = VHDLParser.Rule_GenerateStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 226, self.RULE_rule_GenerateStatement)
		try:
			self.state = 1567
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 148, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1564
				self.rule_ForGenerateStatement()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1565
				self.rule_IfGenerateStatement()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 1566
				self.rule_CaseGenerateStatement()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_GenerateStatementBodyContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_BlockDeclarativeItem = None  # Rule_BlockDeclarativeItemContext
			self.declaredItems = list()  # of Rule_BlockDeclarativeItemContexts
			self._rule_ConcurrentStatement = None  # Rule_ConcurrentStatementContext
			self.statements = list()  # of Rule_ConcurrentStatementContexts
			self.label = None  # Token

		def KW_BEGIN(self):
			return self.getToken(VHDLParser.KW_BEGIN, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_ConcurrentStatement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ConcurrentStatementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ConcurrentStatementContext, i)

		def rule_BlockDeclarativeItem(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_BlockDeclarativeItemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_BlockDeclarativeItemContext, i)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_GenerateStatementBody

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_GenerateStatementBody"):
				return visitor.visitRule_GenerateStatementBody(self)
			else:
				return visitor.visitChildren(self)

	def rule_GenerateStatementBody(self):

		localctx = VHDLParser.Rule_GenerateStatementBodyContext(self, self._ctx, self.state)
		self.enterRule(localctx, 228, self.RULE_rule_GenerateStatementBody)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1576
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if (((_la) & ~0x3f) == 0 and ((1 << _la) & 88717423444480) != 0) or (
				(((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 1941606236449) != 0):
				self.state = 1572
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				while (((_la) & ~0x3f) == 0 and ((1 << _la) & 88717423313408) != 0) or (
					(((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 1941606236449) != 0):
					self.state = 1569
					localctx._rule_BlockDeclarativeItem = self.rule_BlockDeclarativeItem()
					localctx.declaredItems.append(localctx._rule_BlockDeclarativeItem)
					self.state = 1574
					self._errHandler.sync(self)
					_la = self._input.LA(1)

				self.state = 1575
				self.match(VHDLParser.KW_BEGIN)

			self.state = 1581
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 5188146770730811393) != 0) or (
				(((_la - 116)) & ~0x3f) == 0 and ((1 << (_la - 116)) & 246292886323201) != 0):
				self.state = 1578
				localctx._rule_ConcurrentStatement = self.rule_ConcurrentStatement()
				localctx.statements.append(localctx._rule_ConcurrentStatement)
				self.state = 1583
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1589
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 153, self._ctx)
			if la_ == 1:
				self.state = 1584
				self.match(VHDLParser.KW_END)
				self.state = 1586
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == 163:
					self.state = 1585
					localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)

				self.state = 1588
				self.match(VHDLParser.TOK_SEMICOL)


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_GenericClauseContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_InterfaceElement = None  # Rule_InterfaceElementContext
			self.elements = list()  # of Rule_InterfaceElementContexts

		def KW_GENERIC(self):
			return self.getToken(VHDLParser.KW_GENERIC, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def TOK_SEMICOL(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_SEMICOL)
			else:
				return self.getToken(VHDLParser.TOK_SEMICOL, i)

		def rule_InterfaceElement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_InterfaceElementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_InterfaceElementContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_GenericClause

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_GenericClause"):
				return visitor.visitRule_GenericClause(self)
			else:
				return visitor.visitChildren(self)

	def rule_GenericClause(self):

		localctx = VHDLParser.Rule_GenericClauseContext(self, self._ctx, self.state)
		self.enterRule(localctx, 230, self.RULE_rule_GenericClause)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1591
			self.match(VHDLParser.KW_GENERIC)
			self.state = 1592
			self.match(VHDLParser.TOK_LP)
			self.state = 1593
			localctx._rule_InterfaceElement = self.rule_InterfaceElement()
			localctx.elements.append(localctx._rule_InterfaceElement)
			self.state = 1598
			self._errHandler.sync(self)
			_alt = self._interp.adaptivePredict(self._input, 154, self._ctx)
			while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
				if _alt == 1:
					self.state = 1594
					self.match(VHDLParser.TOK_SEMICOL)
					self.state = 1595
					localctx._rule_InterfaceElement = self.rule_InterfaceElement()
					localctx.elements.append(localctx._rule_InterfaceElement)
				self.state = 1600
				self._errHandler.sync(self)
				_alt = self._interp.adaptivePredict(self._input, 154, self._ctx)

			self.state = 1602
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 150:
				self.state = 1601
				self.match(VHDLParser.TOK_SEMICOL)

			self.state = 1604
			self.match(VHDLParser.TOK_RP)
			self.state = 1605
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_GenericMapAspectContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.associationList = None  # Rule_AssociationListContext

		def KW_GENERIC(self):
			return self.getToken(VHDLParser.KW_GENERIC, 0)

		def KW_MAP(self):
			return self.getToken(VHDLParser.KW_MAP, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def rule_AssociationList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AssociationListContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_GenericMapAspect

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_GenericMapAspect"):
				return visitor.visitRule_GenericMapAspect(self)
			else:
				return visitor.visitChildren(self)

	def rule_GenericMapAspect(self):

		localctx = VHDLParser.Rule_GenericMapAspectContext(self, self._ctx, self.state)
		self.enterRule(localctx, 232, self.RULE_rule_GenericMapAspect)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1607
			self.match(VHDLParser.KW_GENERIC)
			self.state = 1608
			self.match(VHDLParser.KW_MAP)
			self.state = 1609
			self.match(VHDLParser.TOK_LP)
			self.state = 1610
			localctx.associationList = self.rule_AssociationList()
			self.state = 1611
			self.match(VHDLParser.TOK_RP)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_GroupConstituentContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def LIT_CHARACTER(self):
			return self.getToken(VHDLParser.LIT_CHARACTER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_GroupConstituent

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_GroupConstituent"):
				return visitor.visitRule_GroupConstituent(self)
			else:
				return visitor.visitChildren(self)

	def rule_GroupConstituent(self):

		localctx = VHDLParser.Rule_GroupConstituentContext(self, self._ctx, self.state)
		self.enterRule(localctx, 234, self.RULE_rule_GroupConstituent)
		try:
			self.state = 1615
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 156, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1613
				self.rule_Name(0)
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1614
				self.match(VHDLParser.LIT_CHARACTER)
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_GroupDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.name = None  # Token
			self._rule_GroupConstituent = None  # Rule_GroupConstituentContext
			self.constituents = list()  # of Rule_GroupConstituentContexts

		def KW_GROUP(self):
			return self.getToken(VHDLParser.KW_GROUP, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def rule_GroupConstituent(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_GroupConstituentContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_GroupConstituentContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_GroupDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_GroupDeclaration"):
				return visitor.visitRule_GroupDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_GroupDeclaration(self):

		localctx = VHDLParser.Rule_GroupDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 236, self.RULE_rule_GroupDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1617
			self.match(VHDLParser.KW_GROUP)
			self.state = 1618
			localctx.name = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 1619
			self.match(VHDLParser.TOK_COLON)
			self.state = 1620
			self.rule_Name(0)
			self.state = 1621
			self.match(VHDLParser.TOK_LP)
			self.state = 1622
			localctx._rule_GroupConstituent = self.rule_GroupConstituent()
			localctx.constituents.append(localctx._rule_GroupConstituent)
			self.state = 1627
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == 151:
				self.state = 1623
				self.match(VHDLParser.TOK_COMMA)
				self.state = 1624
				localctx._rule_GroupConstituent = self.rule_GroupConstituent()
				localctx.constituents.append(localctx._rule_GroupConstituent)
				self.state = 1629
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1630
			self.match(VHDLParser.TOK_RP)
			self.state = 1631
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_GroupTemplateDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.name = None  # Token
			self._rule_EntityClassEntry = None  # Rule_EntityClassEntryContext
			self.entityClasses = list()  # of Rule_EntityClassEntryContexts

		def KW_GROUP(self):
			return self.getToken(VHDLParser.KW_GROUP, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def rule_EntityClassEntry(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_EntityClassEntryContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_EntityClassEntryContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_GroupTemplateDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_GroupTemplateDeclaration"):
				return visitor.visitRule_GroupTemplateDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_GroupTemplateDeclaration(self):

		localctx = VHDLParser.Rule_GroupTemplateDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 238, self.RULE_rule_GroupTemplateDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1633
			self.match(VHDLParser.KW_GROUP)
			self.state = 1634
			localctx.name = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 1635
			self.match(VHDLParser.KW_IS)
			self.state = 1636
			self.match(VHDLParser.TOK_LP)
			self.state = 1637
			localctx._rule_EntityClassEntry = self.rule_EntityClassEntry()
			localctx.entityClasses.append(localctx._rule_EntityClassEntry)
			self.state = 1642
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == 151:
				self.state = 1638
				self.match(VHDLParser.TOK_COMMA)
				self.state = 1639
				localctx._rule_EntityClassEntry = self.rule_EntityClassEntry()
				localctx.entityClasses.append(localctx._rule_EntityClassEntry)
				self.state = 1644
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1645
			self.match(VHDLParser.TOK_RP)
			self.state = 1646
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_GuardedSignalSpecificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_SignalList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SignalListContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_GuardedSignalSpecification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_GuardedSignalSpecification"):
				return visitor.visitRule_GuardedSignalSpecification(self)
			else:
				return visitor.visitChildren(self)

	def rule_GuardedSignalSpecification(self):

		localctx = VHDLParser.Rule_GuardedSignalSpecificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 240, self.RULE_rule_GuardedSignalSpecification)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1648
			self.rule_SignalList()
			self.state = 1649
			self.match(VHDLParser.TOK_COLON)
			self.state = 1650
			self.rule_Name(0)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_IdentifierListContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._LIT_IDENTIFIER = None  # Token
			self.identifiers = list()  # of Tokens

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_IdentifierList

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_IdentifierList"):
				return visitor.visitRule_IdentifierList(self)
			else:
				return visitor.visitChildren(self)

	def rule_IdentifierList(self):

		localctx = VHDLParser.Rule_IdentifierListContext(self, self._ctx, self.state)
		self.enterRule(localctx, 242, self.RULE_rule_IdentifierList)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1652
			localctx._LIT_IDENTIFIER = self.match(VHDLParser.LIT_IDENTIFIER)
			localctx.identifiers.append(localctx._LIT_IDENTIFIER)
			self.state = 1657
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == 151:
				self.state = 1653
				self.match(VHDLParser.TOK_COMMA)
				self.state = 1654
				localctx._LIT_IDENTIFIER = self.match(VHDLParser.LIT_IDENTIFIER)
				localctx.identifiers.append(localctx._LIT_IDENTIFIER)
				self.state = 1659
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_IfGenerateStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token
			self.ifAlternativeLabel = None  # Token
			self.ifCondition = None  # Rule_ExpressionContext
			self.ifBody = None  # Rule_GenerateStatementBodyContext
			self._LIT_IDENTIFIER = None  # Token
			self.elsifAlternativeLabel = list()  # of Tokens
			self._rule_Expression = None  # Rule_ExpressionContext
			self.elsifCondition = list()  # of Rule_ExpressionContexts
			self._rule_GenerateStatementBody = None  # Rule_GenerateStatementBodyContext
			self.elsifBody = list()  # of Rule_GenerateStatementBodyContexts
			self.elseAlternativeLabel = list()  # of Tokens
			self.elseBody = None  # Rule_GenerateStatementBodyContext
			self.label2 = None  # Token

		def TOK_COLON(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COLON)
			else:
				return self.getToken(VHDLParser.TOK_COLON, i)

		def KW_IF(self):
			return self.getToken(VHDLParser.KW_IF, 0)

		def KW_GENERATE(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_GENERATE)
			else:
				return self.getToken(VHDLParser.KW_GENERATE, i)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def rule_Expression(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ExpressionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, i)

		def rule_GenerateStatementBody(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_GenerateStatementBodyContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_GenerateStatementBodyContext, i)

		def KW_ELSIF(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_ELSIF)
			else:
				return self.getToken(VHDLParser.KW_ELSIF, i)

		def KW_ELSE(self):
			return self.getToken(VHDLParser.KW_ELSE, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_IfGenerateStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_IfGenerateStatement"):
				return visitor.visitRule_IfGenerateStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_IfGenerateStatement(self):

		localctx = VHDLParser.Rule_IfGenerateStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 244, self.RULE_rule_IfGenerateStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1660
			localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 1661
			self.match(VHDLParser.TOK_COLON)
			self.state = 1662
			self.match(VHDLParser.KW_IF)
			self.state = 1665
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 160, self._ctx)
			if la_ == 1:
				self.state = 1663
				localctx.ifAlternativeLabel = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 1664
				self.match(VHDLParser.TOK_COLON)

			self.state = 1667
			localctx.ifCondition = self.rule_Expression(0)
			self.state = 1668
			self.match(VHDLParser.KW_GENERATE)
			self.state = 1669
			localctx.ifBody = self.rule_GenerateStatementBody()
			self.state = 1681
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == 32:
				self.state = 1670
				self.match(VHDLParser.KW_ELSIF)
				self.state = 1673
				self._errHandler.sync(self)
				la_ = self._interp.adaptivePredict(self._input, 161, self._ctx)
				if la_ == 1:
					self.state = 1671
					localctx._LIT_IDENTIFIER = self.match(VHDLParser.LIT_IDENTIFIER)
					localctx.elsifAlternativeLabel.append(localctx._LIT_IDENTIFIER)
					self.state = 1672
					self.match(VHDLParser.TOK_COLON)

				self.state = 1675
				localctx._rule_Expression = self.rule_Expression(0)
				localctx.elsifCondition.append(localctx._rule_Expression)
				self.state = 1676
				self.match(VHDLParser.KW_GENERATE)
				self.state = 1677
				localctx._rule_GenerateStatementBody = self.rule_GenerateStatementBody()
				localctx.elsifBody.append(localctx._rule_GenerateStatementBody)
				self.state = 1683
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1691
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 31:
				self.state = 1684
				self.match(VHDLParser.KW_ELSE)
				self.state = 1687
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == 163:
					self.state = 1685
					localctx._LIT_IDENTIFIER = self.match(VHDLParser.LIT_IDENTIFIER)
					localctx.elseAlternativeLabel.append(localctx._LIT_IDENTIFIER)
					self.state = 1686
					self.match(VHDLParser.TOK_COLON)

				self.state = 1689
				self.match(VHDLParser.KW_GENERATE)
				self.state = 1690
				localctx.elseBody = self.rule_GenerateStatementBody()

			self.state = 1693
			self.match(VHDLParser.KW_END)
			self.state = 1694
			self.match(VHDLParser.KW_GENERATE)
			self.state = 1696
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 1695
				localctx.label2 = self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 1698
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_IfStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token
			self.condition = None  # Rule_ExpressionContext
			self._rule_SequentialStatement = None  # Rule_SequentialStatementContext
			self.thenStatements = list()  # of Rule_SequentialStatementContexts
			self.elseifStatements = list()  # of Rule_SequentialStatementContexts
			self.elseStatements = list()  # of Rule_SequentialStatementContexts
			self.label2 = None  # Token

		def KW_IF(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_IF)
			else:
				return self.getToken(VHDLParser.KW_IF, i)

		def KW_THEN(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_THEN)
			else:
				return self.getToken(VHDLParser.KW_THEN, i)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_Expression(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ExpressionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, i)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def KW_ELSIF(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_ELSIF)
			else:
				return self.getToken(VHDLParser.KW_ELSIF, i)

		def KW_ELSE(self):
			return self.getToken(VHDLParser.KW_ELSE, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def rule_SequentialStatement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_SequentialStatementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_SequentialStatementContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_IfStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_IfStatement"):
				return visitor.visitRule_IfStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_IfStatement(self):

		localctx = VHDLParser.Rule_IfStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 246, self.RULE_rule_IfStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1702
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 1700
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 1701
				self.match(VHDLParser.TOK_COLON)

			self.state = 1704
			self.match(VHDLParser.KW_IF)
			self.state = 1705
			localctx.condition = self.rule_Expression(0)
			self.state = 1706
			self.match(VHDLParser.KW_THEN)
			self.state = 1710
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & -8052400777563193344) != 0) or (
				(((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & 4899916406390259715) != 0) or (
				(((_la - 161)) & ~0x3f) == 0 and ((1 << (_la - 161)) & 7) != 0):
				self.state = 1707
				localctx._rule_SequentialStatement = self.rule_SequentialStatement()
				localctx.thenStatements.append(localctx._rule_SequentialStatement)
				self.state = 1712
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1724
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == 32:
				self.state = 1713
				self.match(VHDLParser.KW_ELSIF)
				self.state = 1714
				localctx.condition = self.rule_Expression(0)
				self.state = 1715
				self.match(VHDLParser.KW_THEN)
				self.state = 1719
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				while (((_la) & ~0x3f) == 0 and ((1 << _la) & -8052400777563193344) != 0) or (
					(((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & 4899916406390259715) != 0) or (
					(((_la - 161)) & ~0x3f) == 0 and ((1 << (_la - 161)) & 7) != 0):
					self.state = 1716
					localctx._rule_SequentialStatement = self.rule_SequentialStatement()
					localctx.elseifStatements.append(localctx._rule_SequentialStatement)
					self.state = 1721
					self._errHandler.sync(self)
					_la = self._input.LA(1)

				self.state = 1726
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1734
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 31:
				self.state = 1727
				self.match(VHDLParser.KW_ELSE)
				self.state = 1731
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				while (((_la) & ~0x3f) == 0 and ((1 << _la) & -8052400777563193344) != 0) or (
					(((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & 4899916406390259715) != 0) or (
					(((_la - 161)) & ~0x3f) == 0 and ((1 << (_la - 161)) & 7) != 0):
					self.state = 1728
					localctx._rule_SequentialStatement = self.rule_SequentialStatement()
					localctx.elseStatements.append(localctx._rule_SequentialStatement)
					self.state = 1733
					self._errHandler.sync(self)
					_la = self._input.LA(1)

			self.state = 1736
			self.match(VHDLParser.KW_END)
			self.state = 1737
			self.match(VHDLParser.KW_IF)
			self.state = 1739
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 1738
				localctx.label2 = self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 1741
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_IncompleteSubtypeIndicationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def rule_UnspecifiedTypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_UnspecifiedTypeIndicationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_IncompleteSubtypeIndication

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_IncompleteSubtypeIndication"):
				return visitor.visitRule_IncompleteSubtypeIndication(self)
			else:
				return visitor.visitChildren(self)

	def rule_IncompleteSubtypeIndication(self):

		localctx = VHDLParser.Rule_IncompleteSubtypeIndicationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 248, self.RULE_rule_IncompleteSubtypeIndication)
		try:
			self.state = 1745
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [143, 147, 161, 162, 163]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1743
				self.rule_SubtypeIndication()
				pass
			elif token in [104]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1744
				self.rule_UnspecifiedTypeIndication()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_IncompleteTypeDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.name = None  # Token

		def KW_TYPE(self):
			return self.getToken(VHDLParser.KW_TYPE, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_IncompleteTypeDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_IncompleteTypeDeclaration"):
				return visitor.visitRule_IncompleteTypeDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_IncompleteTypeDeclaration(self):

		localctx = VHDLParser.Rule_IncompleteTypeDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 250, self.RULE_rule_IncompleteTypeDeclaration)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1747
			self.match(VHDLParser.KW_TYPE)
			self.state = 1748
			localctx.name = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 1749
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_IncompleteTypeDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_PrivateIncompleteTypeDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PrivateIncompleteTypeDefinitionContext, 0)

		def rule_ScalarIncompleteTypeDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ScalarIncompleteTypeDefinitionContext, 0)

		def rule_DiscreteIncompleteTypeDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_DiscreteIncompleteTypeDefinitionContext, 0)

		def rule_IntegerIncompleteTypeDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IntegerIncompleteTypeDefinitionContext, 0)

		def rule_PhysicalIncompleteTypeDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PhysicalIncompleteTypeDefinitionContext, 0)

		def rule_FloatingIncompleteTypeDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FloatingIncompleteTypeDefinitionContext, 0)

		def rule_ArrayIncompleteTypeDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ArrayIncompleteTypeDefinitionContext, 0)

		def rule_AccessIncompleteTypeDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AccessIncompleteTypeDefinitionContext, 0)

		def rule_FileIncompleteTypeDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FileIncompleteTypeDefinitionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_IncompleteTypeDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_IncompleteTypeDefinition"):
				return visitor.visitRule_IncompleteTypeDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_IncompleteTypeDefinition(self):

		localctx = VHDLParser.Rule_IncompleteTypeDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 252, self.RULE_rule_IncompleteTypeDefinition)
		try:
			self.state = 1760
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 174, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1751
				self.rule_PrivateIncompleteTypeDefinition()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1752
				self.rule_ScalarIncompleteTypeDefinition()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 1753
				self.rule_DiscreteIncompleteTypeDefinition()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 1754
				self.rule_IntegerIncompleteTypeDefinition()
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 1755
				self.rule_PhysicalIncompleteTypeDefinition()
				pass

			elif la_ == 6:
				self.enterOuterAlt(localctx, 6)
				self.state = 1756
				self.rule_FloatingIncompleteTypeDefinition()
				pass

			elif la_ == 7:
				self.enterOuterAlt(localctx, 7)
				self.state = 1757
				self.rule_ArrayIncompleteTypeDefinition()
				pass

			elif la_ == 8:
				self.enterOuterAlt(localctx, 8)
				self.state = 1758
				self.rule_AccessIncompleteTypeDefinition()
				pass

			elif la_ == 9:
				self.enterOuterAlt(localctx, 9)
				self.state = 1759
				self.rule_FileIncompleteTypeDefinition()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_IncompleteTypeMarkContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def rule_UnspecifiedTypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_UnspecifiedTypeIndicationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_IncompleteTypeMark

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_IncompleteTypeMark"):
				return visitor.visitRule_IncompleteTypeMark(self)
			else:
				return visitor.visitChildren(self)

	def rule_IncompleteTypeMark(self):

		localctx = VHDLParser.Rule_IncompleteTypeMarkContext(self, self._ctx, self.state)
		self.enterRule(localctx, 254, self.RULE_rule_IncompleteTypeMark)
		try:
			self.state = 1764
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [147, 161, 162, 163]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1762
				self.rule_Name(0)
				pass
			elif token in [104]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1763
				self.rule_UnspecifiedTypeIndication()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_IndexConstraintContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_DiscreteRange = None  # Rule_DiscreteRangeContext
			self.ranges = list()  # of Rule_DiscreteRangeContexts

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def rule_DiscreteRange(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_DiscreteRangeContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_DiscreteRangeContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_IndexConstraint

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_IndexConstraint"):
				return visitor.visitRule_IndexConstraint(self)
			else:
				return visitor.visitChildren(self)

	def rule_IndexConstraint(self):

		localctx = VHDLParser.Rule_IndexConstraintContext(self, self._ctx, self.state)
		self.enterRule(localctx, 256, self.RULE_rule_IndexConstraint)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1766
			self.match(VHDLParser.TOK_LP)
			self.state = 1767
			localctx._rule_DiscreteRange = self.rule_DiscreteRange()
			localctx.ranges.append(localctx._rule_DiscreteRange)
			self.state = 1772
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == 151:
				self.state = 1768
				self.match(VHDLParser.TOK_COMMA)
				self.state = 1769
				localctx._rule_DiscreteRange = self.rule_DiscreteRange()
				localctx.ranges.append(localctx._rule_DiscreteRange)
				self.state = 1774
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1775
			self.match(VHDLParser.TOK_RP)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_IndexSubtypeDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.typeMark = None  # Rule_NameContext

		def KW_RANGE(self):
			return self.getToken(VHDLParser.KW_RANGE, 0)

		def TOK_BOX(self):
			return self.getToken(VHDLParser.TOK_BOX, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_IndexSubtypeDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_IndexSubtypeDefinition"):
				return visitor.visitRule_IndexSubtypeDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_IndexSubtypeDefinition(self):

		localctx = VHDLParser.Rule_IndexSubtypeDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 258, self.RULE_rule_IndexSubtypeDefinition)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1777
			localctx.typeMark = self.rule_Name(0)
			self.state = 1778
			self.match(VHDLParser.KW_RANGE)
			self.state = 1779
			self.match(VHDLParser.TOK_BOX)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_InstantiatedUnitContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.component = None  # Token
			self.componentName = None  # Rule_NameContext
			self.entityName = None  # Rule_NameContext
			self.architectureName = None  # Token
			self.configurationName = None  # Rule_NameContext

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def KW_COMPONENT(self):
			return self.getToken(VHDLParser.KW_COMPONENT, 0)

		def KW_ENTITY(self):
			return self.getToken(VHDLParser.KW_ENTITY, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def KW_CONFIGURATION(self):
			return self.getToken(VHDLParser.KW_CONFIGURATION, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_InstantiatedUnit

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_InstantiatedUnit"):
				return visitor.visitRule_InstantiatedUnit(self)
			else:
				return visitor.visitChildren(self)

	def rule_InstantiatedUnit(self):

		localctx = VHDLParser.Rule_InstantiatedUnitContext(self, self._ctx, self.state)
		self.enterRule(localctx, 260, self.RULE_rule_InstantiatedUnit)
		self._la = 0  # Token type
		try:
			self.state = 1794
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [23, 147, 161, 162, 163]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1782
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == 23:
					self.state = 1781
					localctx.component = self.match(VHDLParser.KW_COMPONENT)

				self.state = 1784
				localctx.componentName = self.rule_Name(0)
				pass
			elif token in [34]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1785
				self.match(VHDLParser.KW_ENTITY)
				self.state = 1786
				localctx.entityName = self.rule_Name(0)
				self.state = 1790
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == 143:
					self.state = 1787
					self.match(VHDLParser.TOK_LP)
					self.state = 1788
					localctx.architectureName = self.match(VHDLParser.LIT_IDENTIFIER)
					self.state = 1789
					self.match(VHDLParser.TOK_RP)

				pass
			elif token in [24]:
				self.enterOuterAlt(localctx, 3)
				self.state = 1792
				self.match(VHDLParser.KW_CONFIGURATION)
				self.state = 1793
				localctx.configurationName = self.rule_Name(0)
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_InstantiationListContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._LIT_IDENTIFIER = None  # Token
			self.componentNames = list()  # of Tokens
			self.others = None  # Token
			self.all_ = None  # Token

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def KW_OTHERS(self):
			return self.getToken(VHDLParser.KW_OTHERS, 0)

		def KW_ALL(self):
			return self.getToken(VHDLParser.KW_ALL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_InstantiationList

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_InstantiationList"):
				return visitor.visitRule_InstantiationList(self)
			else:
				return visitor.visitChildren(self)

	def rule_InstantiationList(self):

		localctx = VHDLParser.Rule_InstantiationListContext(self, self._ctx, self.state)
		self.enterRule(localctx, 262, self.RULE_rule_InstantiationList)
		self._la = 0  # Token type
		try:
			self.state = 1806
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [163]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1796
				localctx._LIT_IDENTIFIER = self.match(VHDLParser.LIT_IDENTIFIER)
				localctx.componentNames.append(localctx._LIT_IDENTIFIER)
				self.state = 1801
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				while _la == 151:
					self.state = 1797
					self.match(VHDLParser.TOK_COMMA)
					self.state = 1798
					localctx._LIT_IDENTIFIER = self.match(VHDLParser.LIT_IDENTIFIER)
					localctx.componentNames.append(localctx._LIT_IDENTIFIER)
					self.state = 1803
					self._errHandler.sync(self)
					_la = self._input.LA(1)

				pass
			elif token in [68]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1804
				localctx.others = self.match(VHDLParser.KW_OTHERS)
				pass
			elif token in [10]:
				self.enterOuterAlt(localctx, 3)
				self.state = 1805
				localctx.all_ = self.match(VHDLParser.KW_ALL)
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_IntegerIncompleteTypeDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_RANGE(self):
			return self.getToken(VHDLParser.KW_RANGE, 0)

		def TOK_BOX(self):
			return self.getToken(VHDLParser.TOK_BOX, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_IntegerIncompleteTypeDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_IntegerIncompleteTypeDefinition"):
				return visitor.visitRule_IntegerIncompleteTypeDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_IntegerIncompleteTypeDefinition(self):

		localctx = VHDLParser.Rule_IntegerIncompleteTypeDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 264, self.RULE_rule_IntegerIncompleteTypeDefinition)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1808
			self.match(VHDLParser.KW_RANGE)
			self.state = 1809
			self.match(VHDLParser.TOK_BOX)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_IntegerTypeDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_RangeConstraint(self):
			return self.getTypedRuleContext(VHDLParser.Rule_RangeConstraintContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_IntegerTypeDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_IntegerTypeDefinition"):
				return visitor.visitRule_IntegerTypeDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_IntegerTypeDefinition(self):

		localctx = VHDLParser.Rule_IntegerTypeDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 266, self.RULE_rule_IntegerTypeDefinition)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1811
			self.rule_RangeConstraint()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_InterfaceConstantDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.constantNames = None  # Rule_IdentifierListContext
			self.modeName = None  # Token
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext
			self.defaultValue = None  # Rule_ExpressionContext

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def rule_IdentifierList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IdentifierListContext, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def KW_CONSTANT(self):
			return self.getToken(VHDLParser.KW_CONSTANT, 0)

		def TOK_VAR_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_VAR_ASSIGN, 0)

		def KW_IN(self):
			return self.getToken(VHDLParser.KW_IN, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_InterfaceConstantDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_InterfaceConstantDeclaration"):
				return visitor.visitRule_InterfaceConstantDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_InterfaceConstantDeclaration(self):

		localctx = VHDLParser.Rule_InterfaceConstantDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 268, self.RULE_rule_InterfaceConstantDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1814
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 25:
				self.state = 1813
				self.match(VHDLParser.KW_CONSTANT)

			self.state = 1816
			localctx.constantNames = self.rule_IdentifierList()
			self.state = 1817
			self.match(VHDLParser.TOK_COLON)
			self.state = 1819
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 47:
				self.state = 1818
				localctx.modeName = self.match(VHDLParser.KW_IN)

			self.state = 1821
			localctx.subtypeIndication = self.rule_SubtypeIndication()
			self.state = 1824
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 141:
				self.state = 1822
				self.match(VHDLParser.TOK_VAR_ASSIGN)
				self.state = 1823
				localctx.defaultValue = self.rule_Expression(0)


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_InterfaceDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_InterfaceConstantDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_InterfaceConstantDeclarationContext, 0)

		def rule_InterfaceVariableDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_InterfaceVariableDeclarationContext, 0)

		def rule_InterfaceFileDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_InterfaceFileDeclarationContext, 0)

		def rule_InterfaceTypeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_InterfaceTypeDeclarationContext, 0)

		def rule_InterfaceSubprogramDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_InterfaceSubprogramDeclarationContext, 0)

		def rule_InterfacePackageDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_InterfacePackageDeclarationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_InterfaceDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_InterfaceDeclaration"):
				return visitor.visitRule_InterfaceDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_InterfaceDeclaration(self):

		localctx = VHDLParser.Rule_InterfaceDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 270, self.RULE_rule_InterfaceDeclaration)
		try:
			self.state = 1832
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 185, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1826
				self.rule_InterfaceConstantDeclaration()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1827
				self.rule_InterfaceVariableDeclaration()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 1828
				self.rule_InterfaceFileDeclaration()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 1829
				self.rule_InterfaceTypeDeclaration()
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 1830
				self.rule_InterfaceSubprogramDeclaration()
				pass

			elif la_ == 6:
				self.enterOuterAlt(localctx, 6)
				self.state = 1831
				self.rule_InterfacePackageDeclaration()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_InterfaceElementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_InterfaceDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_InterfaceDeclarationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_InterfaceElement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_InterfaceElement"):
				return visitor.visitRule_InterfaceElement(self)
			else:
				return visitor.visitChildren(self)

	def rule_InterfaceElement(self):

		localctx = VHDLParser.Rule_InterfaceElementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 272, self.RULE_rule_InterfaceElement)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1834
			self.rule_InterfaceDeclaration()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_InterfaceFileDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.names = None  # Rule_IdentifierListContext
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext

		def KW_FILE(self):
			return self.getToken(VHDLParser.KW_FILE, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def rule_IdentifierList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IdentifierListContext, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_InterfaceFileDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_InterfaceFileDeclaration"):
				return visitor.visitRule_InterfaceFileDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_InterfaceFileDeclaration(self):

		localctx = VHDLParser.Rule_InterfaceFileDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 274, self.RULE_rule_InterfaceFileDeclaration)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1836
			self.match(VHDLParser.KW_FILE)
			self.state = 1837
			localctx.names = self.rule_IdentifierList()
			self.state = 1838
			self.match(VHDLParser.TOK_COLON)
			self.state = 1839
			localctx.subtypeIndication = self.rule_SubtypeIndication()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_InterfaceFunctionSpecificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_FUNCTION(self):
			return self.getToken(VHDLParser.KW_FUNCTION, 0)

		def rule_Designator(self):
			return self.getTypedRuleContext(VHDLParser.Rule_DesignatorContext, 0)

		def KW_RETURN(self):
			return self.getToken(VHDLParser.KW_RETURN, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def rule_FormalParameterList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FormalParameterListContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def KW_PURE(self):
			return self.getToken(VHDLParser.KW_PURE, 0)

		def KW_IMPURE(self):
			return self.getToken(VHDLParser.KW_IMPURE, 0)

		def KW_PARAMETER(self):
			return self.getToken(VHDLParser.KW_PARAMETER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_InterfaceFunctionSpecification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_InterfaceFunctionSpecification"):
				return visitor.visitRule_InterfaceFunctionSpecification(self)
			else:
				return visitor.visitChildren(self)

	def rule_InterfaceFunctionSpecification(self):

		localctx = VHDLParser.Rule_InterfaceFunctionSpecificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 276, self.RULE_rule_InterfaceFunctionSpecification)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1842
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 46 or _la == 78:
				self.state = 1841
				_la = self._input.LA(1)
				if not (_la == 46 or _la == 78):
					self._errHandler.recoverInline(self)
				else:
					self._errHandler.reportMatch(self)
					self.consume()

			self.state = 1844
			self.match(VHDLParser.KW_FUNCTION)
			self.state = 1845
			self.rule_Designator()
			self.state = 1853
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 71 or _la == 143:
				self.state = 1847
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == 71:
					self.state = 1846
					self.match(VHDLParser.KW_PARAMETER)

				self.state = 1849
				self.match(VHDLParser.TOK_LP)
				self.state = 1850
				self.rule_FormalParameterList()
				self.state = 1851
				self.match(VHDLParser.TOK_RP)

			self.state = 1855
			self.match(VHDLParser.KW_RETURN)
			self.state = 1856
			self.rule_Name(0)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_InterfaceListContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_InterfaceElement = None  # Rule_InterfaceElementContext
			self.interfaceElements = list()  # of Rule_InterfaceElementContexts

		def rule_InterfaceElement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_InterfaceElementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_InterfaceElementContext, i)

		def TOK_SEMICOL(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_SEMICOL)
			else:
				return self.getToken(VHDLParser.TOK_SEMICOL, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_InterfaceList

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_InterfaceList"):
				return visitor.visitRule_InterfaceList(self)
			else:
				return visitor.visitChildren(self)

	def rule_InterfaceList(self):

		localctx = VHDLParser.Rule_InterfaceListContext(self, self._ctx, self.state)
		self.enterRule(localctx, 278, self.RULE_rule_InterfaceList)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1858
			localctx._rule_InterfaceElement = self.rule_InterfaceElement()
			localctx.interfaceElements.append(localctx._rule_InterfaceElement)
			self.state = 1863
			self._errHandler.sync(self)
			_alt = self._interp.adaptivePredict(self._input, 189, self._ctx)
			while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
				if _alt == 1:
					self.state = 1859
					self.match(VHDLParser.TOK_SEMICOL)
					self.state = 1860
					localctx._rule_InterfaceElement = self.rule_InterfaceElement()
					localctx.interfaceElements.append(localctx._rule_InterfaceElement)
				self.state = 1865
				self._errHandler.sync(self)
				_alt = self._interp.adaptivePredict(self._input, 189, self._ctx)

			self.state = 1867
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 150:
				self.state = 1866
				self.match(VHDLParser.TOK_SEMICOL)


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_InterfacePackageDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.name = None  # Token

		def KW_PACKAGE(self):
			return self.getToken(VHDLParser.KW_PACKAGE, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def KW_NEW(self):
			return self.getToken(VHDLParser.KW_NEW, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def rule_InterfacePackageGenericMapAspect(self):
			return self.getTypedRuleContext(VHDLParser.Rule_InterfacePackageGenericMapAspectContext, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_InterfacePackageDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_InterfacePackageDeclaration"):
				return visitor.visitRule_InterfacePackageDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_InterfacePackageDeclaration(self):

		localctx = VHDLParser.Rule_InterfacePackageDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 280, self.RULE_rule_InterfacePackageDeclaration)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1869
			self.match(VHDLParser.KW_PACKAGE)
			self.state = 1870
			localctx.name = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 1871
			self.match(VHDLParser.KW_IS)
			self.state = 1872
			self.match(VHDLParser.KW_NEW)
			self.state = 1873
			self.rule_Name(0)
			self.state = 1874
			self.rule_InterfacePackageGenericMapAspect()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_InterfacePackageGenericMapAspectContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_GenericMapAspect(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GenericMapAspectContext, 0)

		def KW_GENERIC(self):
			return self.getToken(VHDLParser.KW_GENERIC, 0)

		def KW_MAP(self):
			return self.getToken(VHDLParser.KW_MAP, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def TOK_BOX(self):
			return self.getToken(VHDLParser.TOK_BOX, 0)

		def KW_DEFAULT(self):
			return self.getToken(VHDLParser.KW_DEFAULT, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_InterfacePackageGenericMapAspect

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_InterfacePackageGenericMapAspect"):
				return visitor.visitRule_InterfacePackageGenericMapAspect(self)
			else:
				return visitor.visitChildren(self)

	def rule_InterfacePackageGenericMapAspect(self):

		localctx = VHDLParser.Rule_InterfacePackageGenericMapAspectContext(self, self._ctx, self.state)
		self.enterRule(localctx, 282, self.RULE_rule_InterfacePackageGenericMapAspect)
		self._la = 0  # Token type
		try:
			self.state = 1882
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 191, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1876
				self.rule_GenericMapAspect()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1877
				self.match(VHDLParser.KW_GENERIC)
				self.state = 1878
				self.match(VHDLParser.KW_MAP)
				self.state = 1879
				self.match(VHDLParser.TOK_LP)
				self.state = 1880
				_la = self._input.LA(1)
				if not (_la == 28 or _la == 142):
					self._errHandler.recoverInline(self)
				else:
					self._errHandler.reportMatch(self)
					self.consume()
				self.state = 1881
				self.match(VHDLParser.TOK_RP)
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_InterfaceProcedureSpecificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.name = None  # Token

		def KW_PROCEDURE(self):
			return self.getToken(VHDLParser.KW_PROCEDURE, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def rule_FormalParameterList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FormalParameterListContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def KW_PARAMETER(self):
			return self.getToken(VHDLParser.KW_PARAMETER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_InterfaceProcedureSpecification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_InterfaceProcedureSpecification"):
				return visitor.visitRule_InterfaceProcedureSpecification(self)
			else:
				return visitor.visitChildren(self)

	def rule_InterfaceProcedureSpecification(self):

		localctx = VHDLParser.Rule_InterfaceProcedureSpecificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 284, self.RULE_rule_InterfaceProcedureSpecification)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1884
			self.match(VHDLParser.KW_PROCEDURE)
			self.state = 1885
			localctx.name = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 1893
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 71 or _la == 143:
				self.state = 1887
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == 71:
					self.state = 1886
					self.match(VHDLParser.KW_PARAMETER)

				self.state = 1889
				self.match(VHDLParser.TOK_LP)
				self.state = 1890
				self.rule_FormalParameterList()
				self.state = 1891
				self.match(VHDLParser.TOK_RP)


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_InterfaceSignalDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.modeName = None  # Rule_ModeIndicationContext

		def rule_IdentifierList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IdentifierListContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def rule_ModeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ModeIndicationContext, 0)

		def KW_SIGNAL(self):
			return self.getToken(VHDLParser.KW_SIGNAL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_InterfaceSignalDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_InterfaceSignalDeclaration"):
				return visitor.visitRule_InterfaceSignalDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_InterfaceSignalDeclaration(self):

		localctx = VHDLParser.Rule_InterfaceSignalDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 286, self.RULE_rule_InterfaceSignalDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1896
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 93:
				self.state = 1895
				self.match(VHDLParser.KW_SIGNAL)

			self.state = 1898
			self.rule_IdentifierList()
			self.state = 1899
			self.match(VHDLParser.TOK_COLON)
			self.state = 1900
			localctx.modeName = self.rule_ModeIndication()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_InterfaceSubprogramDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_InterfaceSubprogramSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_InterfaceSubprogramSpecificationContext, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def rule_InterfaceSubprogramDefault(self):
			return self.getTypedRuleContext(VHDLParser.Rule_InterfaceSubprogramDefaultContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_InterfaceSubprogramDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_InterfaceSubprogramDeclaration"):
				return visitor.visitRule_InterfaceSubprogramDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_InterfaceSubprogramDeclaration(self):

		localctx = VHDLParser.Rule_InterfaceSubprogramDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 288, self.RULE_rule_InterfaceSubprogramDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1902
			self.rule_InterfaceSubprogramSpecification()
			self.state = 1905
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 50:
				self.state = 1903
				self.match(VHDLParser.KW_IS)
				self.state = 1904
				self.rule_InterfaceSubprogramDefault()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_InterfaceSubprogramDefaultContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def TOK_BOX(self):
			return self.getToken(VHDLParser.TOK_BOX, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_InterfaceSubprogramDefault

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_InterfaceSubprogramDefault"):
				return visitor.visitRule_InterfaceSubprogramDefault(self)
			else:
				return visitor.visitChildren(self)

	def rule_InterfaceSubprogramDefault(self):

		localctx = VHDLParser.Rule_InterfaceSubprogramDefaultContext(self, self._ctx, self.state)
		self.enterRule(localctx, 290, self.RULE_rule_InterfaceSubprogramDefault)
		try:
			self.state = 1909
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [147, 161, 162, 163]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1907
				self.rule_Name(0)
				pass
			elif token in [142]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1908
				self.match(VHDLParser.TOK_BOX)
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_InterfaceSubprogramSpecificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_InterfaceFunctionSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_InterfaceFunctionSpecificationContext, 0)

		def rule_InterfaceProcedureSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_InterfaceProcedureSpecificationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_InterfaceSubprogramSpecification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_InterfaceSubprogramSpecification"):
				return visitor.visitRule_InterfaceSubprogramSpecification(self)
			else:
				return visitor.visitChildren(self)

	def rule_InterfaceSubprogramSpecification(self):

		localctx = VHDLParser.Rule_InterfaceSubprogramSpecificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 292, self.RULE_rule_InterfaceSubprogramSpecification)
		try:
			self.state = 1913
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [39, 46, 78]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1911
				self.rule_InterfaceFunctionSpecification()
				pass
			elif token in [75]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1912
				self.rule_InterfaceProcedureSpecification()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_InterfaceTypeDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.name = None  # Token

		def KW_TYPE(self):
			return self.getToken(VHDLParser.KW_TYPE, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def rule_IncompleteTypeDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IncompleteTypeDefinitionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_InterfaceTypeDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_InterfaceTypeDeclaration"):
				return visitor.visitRule_InterfaceTypeDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_InterfaceTypeDeclaration(self):

		localctx = VHDLParser.Rule_InterfaceTypeDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 294, self.RULE_rule_InterfaceTypeDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1915
			self.match(VHDLParser.KW_TYPE)
			self.state = 1916
			localctx.name = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 1919
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 50:
				self.state = 1917
				self.match(VHDLParser.KW_IS)
				self.state = 1918
				self.rule_IncompleteTypeDefinition()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_InterfaceTypeIndicationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def rule_UnspecifiedTypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_UnspecifiedTypeIndicationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_InterfaceTypeIndication

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_InterfaceTypeIndication"):
				return visitor.visitRule_InterfaceTypeIndication(self)
			else:
				return visitor.visitChildren(self)

	def rule_InterfaceTypeIndication(self):

		localctx = VHDLParser.Rule_InterfaceTypeIndicationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 296, self.RULE_rule_InterfaceTypeIndication)
		try:
			self.state = 1923
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [143, 147, 161, 162, 163]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1921
				self.rule_SubtypeIndication()
				pass
			elif token in [104]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1922
				self.rule_UnspecifiedTypeIndication()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_InterfaceVariableDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.names = None  # Rule_IdentifierListContext
			self.modeName = None  # Rule_ModeContext
			self.interfaceTypeIndication = None  # Rule_InterfaceTypeIndicationContext
			self.expression = None  # Rule_ConditionalExpressionContext

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def rule_IdentifierList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IdentifierListContext, 0)

		def rule_InterfaceTypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_InterfaceTypeIndicationContext, 0)

		def KW_VARIABLE(self):
			return self.getToken(VHDLParser.KW_VARIABLE, 0)

		def TOK_VAR_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_VAR_ASSIGN, 0)

		def rule_Mode(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ModeContext, 0)

		def rule_ConditionalExpression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConditionalExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_InterfaceVariableDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_InterfaceVariableDeclaration"):
				return visitor.visitRule_InterfaceVariableDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_InterfaceVariableDeclaration(self):

		localctx = VHDLParser.Rule_InterfaceVariableDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 298, self.RULE_rule_InterfaceVariableDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1926
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 109:
				self.state = 1925
				self.match(VHDLParser.KW_VARIABLE)

			self.state = 1928
			localctx.names = self.rule_IdentifierList()
			self.state = 1929
			self.match(VHDLParser.TOK_COLON)
			self.state = 1931
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 562959214444545) != 0):
				self.state = 1930
				localctx.modeName = self.rule_Mode()

			self.state = 1933
			localctx.interfaceTypeIndication = self.rule_InterfaceTypeIndication()
			self.state = 1936
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 141:
				self.state = 1934
				self.match(VHDLParser.TOK_VAR_ASSIGN)
				self.state = 1935
				localctx.expression = self.rule_ConditionalExpression()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_IterationSchemeContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.condition = None  # Rule_ExpressionContext
			self.parameterSpecification = None  # Rule_ParameterSpecificationContext

		def KW_WHILE(self):
			return self.getToken(VHDLParser.KW_WHILE, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def KW_FOR(self):
			return self.getToken(VHDLParser.KW_FOR, 0)

		def rule_ParameterSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ParameterSpecificationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_IterationScheme

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_IterationScheme"):
				return visitor.visitRule_IterationScheme(self)
			else:
				return visitor.visitChildren(self)

	def rule_IterationScheme(self):

		localctx = VHDLParser.Rule_IterationSchemeContext(self, self._ctx, self.state)
		self.enterRule(localctx, 300, self.RULE_rule_IterationScheme)
		try:
			self.state = 1942
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [118]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1938
				self.match(VHDLParser.KW_WHILE)
				self.state = 1939
				localctx.condition = self.rule_Expression(0)
				pass
			elif token in [37]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1940
				self.match(VHDLParser.KW_FOR)
				self.state = 1941
				localctx.parameterSpecification = self.rule_ParameterSpecification()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_LibraryClauseContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._LIT_IDENTIFIER = None  # Token
			self.names = list()  # of Tokens

		def KW_LIBRARY(self):
			return self.getToken(VHDLParser.KW_LIBRARY, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_LibraryClause

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_LibraryClause"):
				return visitor.visitRule_LibraryClause(self)
			else:
				return visitor.visitChildren(self)

	def rule_LibraryClause(self):

		localctx = VHDLParser.Rule_LibraryClauseContext(self, self._ctx, self.state)
		self.enterRule(localctx, 302, self.RULE_rule_LibraryClause)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1944
			self.match(VHDLParser.KW_LIBRARY)
			self.state = 1945
			localctx._LIT_IDENTIFIER = self.match(VHDLParser.LIT_IDENTIFIER)
			localctx.names.append(localctx._LIT_IDENTIFIER)
			self.state = 1950
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == 151:
				self.state = 1946
				self.match(VHDLParser.TOK_COMMA)
				self.state = 1947
				localctx._LIT_IDENTIFIER = self.match(VHDLParser.LIT_IDENTIFIER)
				localctx.names.append(localctx._LIT_IDENTIFIER)
				self.state = 1952
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1953
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_LibraryUnitContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.entity = None  # Rule_EntityDeclarationContext
			self.configuration = None  # Rule_ConfigurationDeclarationContext
			self.package = None  # Rule_PackageDeclarationContext
			self.packageInstance = None  # Rule_PackageInstantiationDeclarationContext
			self.context = None  # Rule_ContextDeclarationContext
			self.architecture = None  # Rule_ArchitectureContext
			self.packageBody = None  # Rule_PackageBodyContext

		def rule_EntityDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_EntityDeclarationContext, 0)

		def rule_ConfigurationDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConfigurationDeclarationContext, 0)

		def rule_PackageDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PackageDeclarationContext, 0)

		def rule_PackageInstantiationDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PackageInstantiationDeclarationContext, 0)

		def rule_ContextDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ContextDeclarationContext, 0)

		def rule_Architecture(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ArchitectureContext, 0)

		def rule_PackageBody(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PackageBodyContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_LibraryUnit

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_LibraryUnit"):
				return visitor.visitRule_LibraryUnit(self)
			else:
				return visitor.visitChildren(self)

	def rule_LibraryUnit(self):

		localctx = VHDLParser.Rule_LibraryUnitContext(self, self._ctx, self.state)
		self.enterRule(localctx, 304, self.RULE_rule_LibraryUnit)
		try:
			self.state = 1962
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 205, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1955
				localctx.entity = self.rule_EntityDeclaration()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1956
				localctx.configuration = self.rule_ConfigurationDeclaration()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 1957
				localctx.package = self.rule_PackageDeclaration()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 1958
				localctx.packageInstance = self.rule_PackageInstantiationDeclaration()
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 1959
				localctx.context = self.rule_ContextDeclaration()
				pass

			elif la_ == 6:
				self.enterOuterAlt(localctx, 6)
				self.state = 1960
				localctx.architecture = self.rule_Architecture()
				pass

			elif la_ == 7:
				self.enterOuterAlt(localctx, 7)
				self.state = 1961
				localctx.packageBody = self.rule_PackageBody()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_LiteralContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_NumericLiteral(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NumericLiteralContext, 0)

		def rule_EnumerationLiteral(self):
			return self.getTypedRuleContext(VHDLParser.Rule_EnumerationLiteralContext, 0)

		def LIT_STRING(self):
			return self.getToken(VHDLParser.LIT_STRING, 0)

		def LIT_BIT_STRING(self):
			return self.getToken(VHDLParser.LIT_BIT_STRING, 0)

		def KW_NULL(self):
			return self.getToken(VHDLParser.KW_NULL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Literal

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Literal"):
				return visitor.visitRule_Literal(self)
			else:
				return visitor.visitChildren(self)

	def rule_Literal(self):

		localctx = VHDLParser.Rule_LiteralContext(self, self._ctx, self.state)
		self.enterRule(localctx, 306, self.RULE_rule_Literal)
		try:
			self.state = 1969
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 206, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1964
				self.rule_NumericLiteral()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1965
				self.rule_EnumerationLiteral()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 1966
				self.match(VHDLParser.LIT_STRING)
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 1967
				self.match(VHDLParser.LIT_BIT_STRING)
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 1968
				self.match(VHDLParser.KW_NULL)
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_LoopStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token
			self.scheme = None  # Rule_IterationSchemeContext
			self._rule_SequentialStatement = None  # Rule_SequentialStatementContext
			self.statements = list()  # of Rule_SequentialStatementContexts
			self.label2 = None  # Token

		def KW_LOOP(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_LOOP)
			else:
				return self.getToken(VHDLParser.KW_LOOP, i)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def rule_IterationScheme(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IterationSchemeContext, 0)

		def rule_SequentialStatement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_SequentialStatementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_SequentialStatementContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_LoopStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_LoopStatement"):
				return visitor.visitRule_LoopStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_LoopStatement(self):

		localctx = VHDLParser.Rule_LoopStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 308, self.RULE_rule_LoopStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1973
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 1971
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 1972
				self.match(VHDLParser.TOK_COLON)

			self.state = 1976
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 37 or _la == 118:
				self.state = 1975
				localctx.scheme = self.rule_IterationScheme()

			self.state = 1978
			self.match(VHDLParser.KW_LOOP)
			self.state = 1982
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & -8052400777563193344) != 0) or (
				(((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & 4899916406390259715) != 0) or (
				(((_la - 161)) & ~0x3f) == 0 and ((1 << (_la - 161)) & 7) != 0):
				self.state = 1979
				localctx._rule_SequentialStatement = self.rule_SequentialStatement()
				localctx.statements.append(localctx._rule_SequentialStatement)
				self.state = 1984
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1985
			self.match(VHDLParser.KW_END)
			self.state = 1986
			self.match(VHDLParser.KW_LOOP)
			self.state = 1988
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 1987
				localctx.label2 = self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 1990
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ModeContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.name = None  # Token

		def KW_IN(self):
			return self.getToken(VHDLParser.KW_IN, 0)

		def KW_OUT(self):
			return self.getToken(VHDLParser.KW_OUT, 0)

		def KW_INOUT(self):
			return self.getToken(VHDLParser.KW_INOUT, 0)

		def KW_BUFFER(self):
			return self.getToken(VHDLParser.KW_BUFFER, 0)

		def KW_LINKAGE(self):
			return self.getToken(VHDLParser.KW_LINKAGE, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Mode

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Mode"):
				return visitor.visitRule_Mode(self)
			else:
				return visitor.visitChildren(self)

	def rule_Mode(self):

		localctx = VHDLParser.Rule_ModeContext(self, self._ctx, self.state)
		self.enterRule(localctx, 310, self.RULE_rule_Mode)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1992
			localctx.name = self._input.LT(1)
			_la = self._input.LA(1)
			if not (((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 562959214444545) != 0)):
				localctx.name = self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ModeIndicationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_SimpleModeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SimpleModeIndicationContext, 0)

		def rule_ArrayModeViewIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ArrayModeViewIndicationContext, 0)

		def rule_RecordModeViewIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_RecordModeViewIndicationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ModeIndication

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ModeIndication"):
				return visitor.visitRule_ModeIndication(self)
			else:
				return visitor.visitChildren(self)

	def rule_ModeIndication(self):

		localctx = VHDLParser.Rule_ModeIndicationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 312, self.RULE_rule_ModeIndication)
		try:
			self.state = 1997
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 211, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1994
				self.rule_SimpleModeIndication()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1995
				self.rule_ArrayModeViewIndication()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 1996
				self.rule_RecordModeViewIndication()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ModeViewDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.name = None  # Token
			self.name2 = None  # Token

		def KW_VIEW(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_VIEW)
			else:
				return self.getToken(VHDLParser.KW_VIEW, i)

		def KW_OF(self):
			return self.getToken(VHDLParser.KW_OF, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def rule_ModeViewElementDefinition(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ModeViewElementDefinitionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ModeViewElementDefinitionContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ModeViewDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ModeViewDeclaration"):
				return visitor.visitRule_ModeViewDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_ModeViewDeclaration(self):

		localctx = VHDLParser.Rule_ModeViewDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 314, self.RULE_rule_ModeViewDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1999
			self.match(VHDLParser.KW_VIEW)
			self.state = 2000
			localctx.name = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 2001
			self.match(VHDLParser.KW_OF)
			self.state = 2002
			self.rule_SubtypeIndication()
			self.state = 2003
			self.match(VHDLParser.KW_IS)
			self.state = 2007
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == 163:
				self.state = 2004
				self.rule_ModeViewElementDefinition()
				self.state = 2009
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 2010
			self.match(VHDLParser.KW_END)
			self.state = 2011
			self.match(VHDLParser.KW_VIEW)
			self.state = 2013
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 2012
				localctx.name2 = self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 2015
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ModeViewElementDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_RecordElementList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_RecordElementListContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def rule_ElementModeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ElementModeIndicationContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ModeViewElementDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ModeViewElementDefinition"):
				return visitor.visitRule_ModeViewElementDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_ModeViewElementDefinition(self):

		localctx = VHDLParser.Rule_ModeViewElementDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 316, self.RULE_rule_ModeViewElementDefinition)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2017
			self.rule_RecordElementList()
			self.state = 2018
			self.match(VHDLParser.TOK_COLON)
			self.state = 2019
			self.rule_ElementModeIndication()
			self.state = 2020
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_NameContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Name

		def copyFrom(self, ctx: ParserRuleContext):
			super().copyFrom(ctx)

	class Rule_CharContext(Rule_NameContext):

		def __init__(self, parser, ctx: ParserRuleContext):  # actually a VHDLParser.Rule_NameContext
			super().__init__(parser)
			self.copyFrom(ctx)

		def LIT_CHARACTER(self):
			return self.getToken(VHDLParser.LIT_CHARACTER, 0)

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Char"):
				return visitor.visitRule_Char(self)
			else:
				return visitor.visitChildren(self)

	class Rule_IndexedNameContext(Rule_NameContext):

		def __init__(self, parser, ctx: ParserRuleContext):  # actually a VHDLParser.Rule_NameContext
			super().__init__(parser)
			self.prefix = None  # Rule_NameContext
			self._rule_Expression = None  # Rule_ExpressionContext
			self.expressions = list()  # of Rule_ExpressionContexts
			self.copyFrom(ctx)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def rule_Expression(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ExpressionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_IndexedName"):
				return visitor.visitRule_IndexedName(self)
			else:
				return visitor.visitChildren(self)

	class Rule_SimpleNameContext(Rule_NameContext):

		def __init__(self, parser, ctx: ParserRuleContext):  # actually a VHDLParser.Rule_NameContext
			super().__init__(parser)
			self.copyFrom(ctx)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SimpleName"):
				return visitor.visitRule_SimpleName(self)
			else:
				return visitor.visitChildren(self)

	class Rule_ExternalContext(Rule_NameContext):

		def __init__(self, parser, ctx: ParserRuleContext):  # actually a VHDLParser.Rule_NameContext
			super().__init__(parser)
			self.copyFrom(ctx)

		def rule_ExternalName(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExternalNameContext, 0)

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_External"):
				return visitor.visitRule_External(self)
			else:
				return visitor.visitChildren(self)

	class Rule_AttributeNameContext(Rule_NameContext):

		def __init__(self, parser, ctx: ParserRuleContext):  # actually a VHDLParser.Rule_NameContext
			super().__init__(parser)
			self.prefix = None  # Rule_NameContext
			self.signature = None  # Rule_SignatureContext
			self.designator = None  # Rule_AttributeDesignatorContext
			self.expression = None  # Rule_ExpressionContext
			self.copyFrom(ctx)

		def TOK_TICK(self):
			return self.getToken(VHDLParser.TOK_TICK, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def rule_AttributeDesignator(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AttributeDesignatorContext, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def rule_Signature(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SignatureContext, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_AttributeName"):
				return visitor.visitRule_AttributeName(self)
			else:
				return visitor.visitChildren(self)

	class Rule_SelectedNameContext(Rule_NameContext):

		def __init__(self, parser, ctx: ParserRuleContext):  # actually a VHDLParser.Rule_NameContext
			super().__init__(parser)
			self.prefix = None  # Rule_NameContext
			self.copyFrom(ctx)

		def TOK_DOT(self):
			return self.getToken(VHDLParser.TOK_DOT, 0)

		def rule_Suffix(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SuffixContext, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SelectedName"):
				return visitor.visitRule_SelectedName(self)
			else:
				return visitor.visitChildren(self)

	class Rule_SliceNameContext(Rule_NameContext):

		def __init__(self, parser, ctx: ParserRuleContext):  # actually a VHDLParser.Rule_NameContext
			super().__init__(parser)
			self.prefix = None  # Rule_NameContext
			self.copyFrom(ctx)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def rule_DiscreteRange(self):
			return self.getTypedRuleContext(VHDLParser.Rule_DiscreteRangeContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SliceName"):
				return visitor.visitRule_SliceName(self)
			else:
				return visitor.visitChildren(self)

	class Rule_OperatorContext(Rule_NameContext):

		def __init__(self, parser, ctx: ParserRuleContext):  # actually a VHDLParser.Rule_NameContext
			super().__init__(parser)
			self.copyFrom(ctx)

		def LIT_STRING(self):
			return self.getToken(VHDLParser.LIT_STRING, 0)

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Operator"):
				return visitor.visitRule_Operator(self)
			else:
				return visitor.visitChildren(self)

	def rule_Name(self, _p: int = 0):
		_parentctx = self._ctx
		_parentState = self.state
		localctx = VHDLParser.Rule_NameContext(self, self._ctx, _parentState)
		_prevctx = localctx
		_startState = 318
		self.enterRecursionRule(localctx, 318, self.RULE_rule_Name, _p)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2027
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [163]:
				localctx = VHDLParser.Rule_SimpleNameContext(self, localctx)
				self._ctx = localctx
				_prevctx = localctx

				self.state = 2023
				self.match(VHDLParser.LIT_IDENTIFIER)
				pass
			elif token in [162]:
				localctx = VHDLParser.Rule_OperatorContext(self, localctx)
				self._ctx = localctx
				_prevctx = localctx
				self.state = 2024
				self.match(VHDLParser.LIT_STRING)
				pass
			elif token in [161]:
				localctx = VHDLParser.Rule_CharContext(self, localctx)
				self._ctx = localctx
				_prevctx = localctx
				self.state = 2025
				self.match(VHDLParser.LIT_CHARACTER)
				pass
			elif token in [147]:
				localctx = VHDLParser.Rule_ExternalContext(self, localctx)
				self._ctx = localctx
				_prevctx = localctx
				self.state = 2026
				self.rule_ExternalName()
				pass
			else:
				raise NoViableAltException(self)

			self._ctx.stop = self._input.LT(-1)
			self.state = 2063
			self._errHandler.sync(self)
			_alt = self._interp.adaptivePredict(self._input, 219, self._ctx)
			while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
				if _alt == 1:
					if self._parseListeners is not None:
						self.triggerExitRuleEvent()
					_prevctx = localctx
					self.state = 2061
					self._errHandler.sync(self)
					la_ = self._interp.adaptivePredict(self._input, 218, self._ctx)
					if la_ == 1:
						localctx = VHDLParser.Rule_SelectedNameContext(self,
																													 VHDLParser.Rule_NameContext(self, _parentctx, _parentState))
						localctx.prefix = _prevctx
						self.pushNewRecursionContext(localctx, _startState, self.RULE_rule_Name)
						self.state = 2029
						if not self.precpred(self._ctx, 5):
							from antlr4.error.Errors import FailedPredicateException
							raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
						self.state = 2030
						self.match(VHDLParser.TOK_DOT)
						self.state = 2031
						self.rule_Suffix()
						pass

					elif la_ == 2:
						localctx = VHDLParser.Rule_IndexedNameContext(self,
																													VHDLParser.Rule_NameContext(self, _parentctx, _parentState))
						localctx.prefix = _prevctx
						self.pushNewRecursionContext(localctx, _startState, self.RULE_rule_Name)
						self.state = 2032
						if not self.precpred(self._ctx, 4):
							from antlr4.error.Errors import FailedPredicateException
							raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
						self.state = 2033
						self.match(VHDLParser.TOK_LP)
						self.state = 2034
						localctx._rule_Expression = self.rule_Expression(0)
						localctx.expressions.append(localctx._rule_Expression)
						self.state = 2039
						self._errHandler.sync(self)
						_la = self._input.LA(1)
						while _la == 151:
							self.state = 2035
							self.match(VHDLParser.TOK_COMMA)
							self.state = 2036
							localctx._rule_Expression = self.rule_Expression(0)
							localctx.expressions.append(localctx._rule_Expression)
							self.state = 2041
							self._errHandler.sync(self)
							_la = self._input.LA(1)

						self.state = 2042
						self.match(VHDLParser.TOK_RP)
						pass

					elif la_ == 3:
						localctx = VHDLParser.Rule_SliceNameContext(self,
																												VHDLParser.Rule_NameContext(self, _parentctx, _parentState))
						localctx.prefix = _prevctx
						self.pushNewRecursionContext(localctx, _startState, self.RULE_rule_Name)
						self.state = 2044
						if not self.precpred(self._ctx, 3):
							from antlr4.error.Errors import FailedPredicateException
							raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
						self.state = 2045
						self.match(VHDLParser.TOK_LP)
						self.state = 2046
						self.rule_DiscreteRange()
						self.state = 2047
						self.match(VHDLParser.TOK_RP)
						pass

					elif la_ == 4:
						localctx = VHDLParser.Rule_AttributeNameContext(self,
																														VHDLParser.Rule_NameContext(self, _parentctx, _parentState))
						localctx.prefix = _prevctx
						self.pushNewRecursionContext(localctx, _startState, self.RULE_rule_Name)
						self.state = 2049
						if not self.precpred(self._ctx, 2):
							from antlr4.error.Errors import FailedPredicateException
							raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
						self.state = 2051
						self._errHandler.sync(self)
						_la = self._input.LA(1)
						if _la == 145:
							self.state = 2050
							localctx.signature = self.rule_Signature()

						self.state = 2053
						self.match(VHDLParser.TOK_TICK)
						self.state = 2054
						localctx.designator = self.rule_AttributeDesignator()
						self.state = 2059
						self._errHandler.sync(self)
						la_ = self._interp.adaptivePredict(self._input, 217, self._ctx)
						if la_ == 1:
							self.state = 2055
							self.match(VHDLParser.TOK_LP)
							self.state = 2056
							localctx.expression = self.rule_Expression(0)
							self.state = 2057
							self.match(VHDLParser.TOK_RP)

						pass

				self.state = 2065
				self._errHandler.sync(self)
				_alt = self._interp.adaptivePredict(self._input, 219, self._ctx)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.unrollRecursionContexts(_parentctx)
		return localctx

	class Rule_NextStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token
			self.referencedLabel = None  # Token
			self.condition = None  # Rule_ExpressionContext

		def KW_NEXT(self):
			return self.getToken(VHDLParser.KW_NEXT, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def KW_WHEN(self):
			return self.getToken(VHDLParser.KW_WHEN, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_NextStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_NextStatement"):
				return visitor.visitRule_NextStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_NextStatement(self):

		localctx = VHDLParser.Rule_NextStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 320, self.RULE_rule_NextStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2068
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 2066
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 2067
				self.match(VHDLParser.TOK_COLON)

			self.state = 2070
			self.match(VHDLParser.KW_NEXT)
			self.state = 2072
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 2071
				localctx.referencedLabel = self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 2076
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 117:
				self.state = 2074
				self.match(VHDLParser.KW_WHEN)
				self.state = 2075
				localctx.condition = self.rule_Expression(0)

			self.state = 2078
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_NullStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token

		def KW_NULL(self):
			return self.getToken(VHDLParser.KW_NULL, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_NullStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_NullStatement"):
				return visitor.visitRule_NullStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_NullStatement(self):

		localctx = VHDLParser.Rule_NullStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 322, self.RULE_rule_NullStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2082
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 2080
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 2081
				self.match(VHDLParser.TOK_COLON)

			self.state = 2084
			self.match(VHDLParser.KW_NULL)
			self.state = 2085
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_NumericLiteralContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_ABSTRACT(self):
			return self.getToken(VHDLParser.LIT_ABSTRACT, 0)

		def rule_PhysicalLiteral(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PhysicalLiteralContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_NumericLiteral

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_NumericLiteral"):
				return visitor.visitRule_NumericLiteral(self)
			else:
				return visitor.visitChildren(self)

	def rule_NumericLiteral(self):

		localctx = VHDLParser.Rule_NumericLiteralContext(self, self._ctx, self.state)
		self.enterRule(localctx, 324, self.RULE_rule_NumericLiteral)
		try:
			self.state = 2089
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 224, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 2087
				self.match(VHDLParser.LIT_ABSTRACT)
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 2088
				self.rule_PhysicalLiteral()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_PackageBodyContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.name = None  # Token
			self._rule_PackageBodyDeclarativeItem = None  # Rule_PackageBodyDeclarativeItemContext
			self.declarativeItem = list()  # of Rule_PackageBodyDeclarativeItemContexts
			self.name2 = None  # Token

		def KW_PACKAGE(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_PACKAGE)
			else:
				return self.getToken(VHDLParser.KW_PACKAGE, i)

		def KW_BODY(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_BODY)
			else:
				return self.getToken(VHDLParser.KW_BODY, i)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def rule_PackageBodyDeclarativeItem(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_PackageBodyDeclarativeItemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_PackageBodyDeclarativeItemContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_PackageBody

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_PackageBody"):
				return visitor.visitRule_PackageBody(self)
			else:
				return visitor.visitChildren(self)

	def rule_PackageBody(self):

		localctx = VHDLParser.Rule_PackageBodyContext(self, self._ctx, self.state)
		self.enterRule(localctx, 326, self.RULE_rule_PackageBody)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2091
			self.match(VHDLParser.KW_PACKAGE)
			self.state = 2092
			self.match(VHDLParser.KW_BODY)
			self.state = 2093
			localctx.name = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 2094
			self.match(VHDLParser.KW_IS)
			self.state = 2098
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & 88579439100416) != 0) or (
				(((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 842086220065) != 0):
				self.state = 2095
				localctx._rule_PackageBodyDeclarativeItem = self.rule_PackageBodyDeclarativeItem()
				localctx.declarativeItem.append(localctx._rule_PackageBodyDeclarativeItem)
				self.state = 2100
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 2101
			self.match(VHDLParser.KW_END)
			self.state = 2104
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 70:
				self.state = 2102
				self.match(VHDLParser.KW_PACKAGE)
				self.state = 2103
				self.match(VHDLParser.KW_BODY)

			self.state = 2107
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 2106
				localctx.name2 = self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 2109
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_PackageBodyDeclarativeItemContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_SubprogramDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramDeclarationContext, 0)

		def rule_SubprogramBody(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramBodyContext, 0)

		def rule_SubprogramInstantiationDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramInstantiationDeclarationContext, 0)

		def rule_PackageDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PackageDeclarationContext, 0)

		def rule_PackageBody(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PackageBodyContext, 0)

		def rule_PackageInstantiationDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PackageInstantiationDeclarationContext, 0)

		def rule_TypeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_TypeDeclarationContext, 0)

		def rule_SubtypeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeDeclarationContext, 0)

		def rule_ConstantDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConstantDeclarationContext, 0)

		def rule_VariableDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_VariableDeclarationContext, 0)

		def rule_FileDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FileDeclarationContext, 0)

		def rule_AliasDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AliasDeclarationContext, 0)

		def rule_AttributeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AttributeDeclarationContext, 0)

		def rule_AttributeSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AttributeSpecificationContext, 0)

		def rule_UseClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_UseClauseContext, 0)

		def rule_GroupTemplateDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GroupTemplateDeclarationContext, 0)

		def rule_GroupDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GroupDeclarationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_PackageBodyDeclarativeItem

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_PackageBodyDeclarativeItem"):
				return visitor.visitRule_PackageBodyDeclarativeItem(self)
			else:
				return visitor.visitChildren(self)

	def rule_PackageBodyDeclarativeItem(self):

		localctx = VHDLParser.Rule_PackageBodyDeclarativeItemContext(self, self._ctx, self.state)
		self.enterRule(localctx, 328, self.RULE_rule_PackageBodyDeclarativeItem)
		try:
			self.state = 2128
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 228, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 2111
				self.rule_SubprogramDeclaration()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 2112
				self.rule_SubprogramBody()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 2113
				self.rule_SubprogramInstantiationDeclaration()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 2114
				self.rule_PackageDeclaration()
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 2115
				self.rule_PackageBody()
				pass

			elif la_ == 6:
				self.enterOuterAlt(localctx, 6)
				self.state = 2116
				self.rule_PackageInstantiationDeclaration()
				pass

			elif la_ == 7:
				self.enterOuterAlt(localctx, 7)
				self.state = 2117
				self.rule_TypeDeclaration()
				pass

			elif la_ == 8:
				self.enterOuterAlt(localctx, 8)
				self.state = 2118
				self.rule_SubtypeDeclaration()
				pass

			elif la_ == 9:
				self.enterOuterAlt(localctx, 9)
				self.state = 2119
				self.rule_ConstantDeclaration()
				pass

			elif la_ == 10:
				self.enterOuterAlt(localctx, 10)
				self.state = 2120
				self.rule_VariableDeclaration()
				pass

			elif la_ == 11:
				self.enterOuterAlt(localctx, 11)
				self.state = 2121
				self.rule_FileDeclaration()
				pass

			elif la_ == 12:
				self.enterOuterAlt(localctx, 12)
				self.state = 2122
				self.rule_AliasDeclaration()
				pass

			elif la_ == 13:
				self.enterOuterAlt(localctx, 13)
				self.state = 2123
				self.rule_AttributeDeclaration()
				pass

			elif la_ == 14:
				self.enterOuterAlt(localctx, 14)
				self.state = 2124
				self.rule_AttributeSpecification()
				pass

			elif la_ == 15:
				self.enterOuterAlt(localctx, 15)
				self.state = 2125
				self.rule_UseClause()
				pass

			elif la_ == 16:
				self.enterOuterAlt(localctx, 16)
				self.state = 2126
				self.rule_GroupTemplateDeclaration()
				pass

			elif la_ == 17:
				self.enterOuterAlt(localctx, 17)
				self.state = 2127
				self.rule_GroupDeclaration()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_PackageDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.name = None  # Token
			self.genericClause = None  # Rule_GenericClauseContext
			self._rule_PackageDeclarativeItem = None  # Rule_PackageDeclarativeItemContext
			self.declarativeItems = list()  # of Rule_PackageDeclarativeItemContexts
			self.name2 = None  # Token

		def KW_PACKAGE(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_PACKAGE)
			else:
				return self.getToken(VHDLParser.KW_PACKAGE, i)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def rule_GenericClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GenericClauseContext, 0)

		def rule_PackageDeclarativeItem(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_PackageDeclarativeItemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_PackageDeclarativeItemContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_PackageDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_PackageDeclaration"):
				return visitor.visitRule_PackageDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_PackageDeclaration(self):

		localctx = VHDLParser.Rule_PackageDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 330, self.RULE_rule_PackageDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2130
			self.match(VHDLParser.KW_PACKAGE)
			self.state = 2131
			localctx.name = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 2132
			self.match(VHDLParser.KW_IS)
			self.state = 2134
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 42:
				self.state = 2133
				localctx.genericClause = self.rule_GenericClause()

			self.state = 2139
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & 88579984359936) != 0) or (
				(((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 842094608673) != 0):
				self.state = 2136
				localctx._rule_PackageDeclarativeItem = self.rule_PackageDeclarativeItem()
				localctx.declarativeItems.append(localctx._rule_PackageDeclarativeItem)
				self.state = 2141
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 2142
			self.match(VHDLParser.KW_END)
			self.state = 2144
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 70:
				self.state = 2143
				self.match(VHDLParser.KW_PACKAGE)

			self.state = 2147
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 2146
				localctx.name2 = self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 2149
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_PackageDeclarativeItemContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.subprogramDeclaration = None  # Rule_SubprogramDeclarationContext
			self.typeDeclaration = None  # Rule_TypeDeclarationContext
			self.subtypeDeclaration = None  # Rule_SubtypeDeclarationContext
			self.constantDeclaration = None  # Rule_ConstantDeclarationContext
			self.signalDeclaration = None  # Rule_SignalDeclarationContext
			self.variableDeclaration = None  # Rule_VariableDeclarationContext
			self.fileDeclaration = None  # Rule_FileDeclarationContext
			self.aliasDeclaration = None  # Rule_AliasDeclarationContext
			self.componentDeclaration = None  # Rule_ComponentDeclarationContext
			self.attributeDeclaration = None  # Rule_AttributeDeclarationContext
			self.attributeSpecification = None  # Rule_AttributeSpecificationContext
			self.disconnectionSpecification = None  # Rule_DisconnectionSpecificationContext
			self.useClause = None  # Rule_UseClauseContext

		def rule_SubprogramDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramDeclarationContext, 0)

		def rule_SubprogramInstantiationDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramInstantiationDeclarationContext, 0)

		def rule_PackageDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PackageDeclarationContext, 0)

		def rule_PackageInstantiationDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PackageInstantiationDeclarationContext, 0)

		def rule_TypeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_TypeDeclarationContext, 0)

		def rule_SubtypeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeDeclarationContext, 0)

		def rule_ConstantDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConstantDeclarationContext, 0)

		def rule_SignalDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SignalDeclarationContext, 0)

		def rule_VariableDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_VariableDeclarationContext, 0)

		def rule_FileDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FileDeclarationContext, 0)

		def rule_AliasDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AliasDeclarationContext, 0)

		def rule_ComponentDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ComponentDeclarationContext, 0)

		def rule_AttributeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AttributeDeclarationContext, 0)

		def rule_AttributeSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AttributeSpecificationContext, 0)

		def rule_DisconnectionSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_DisconnectionSpecificationContext, 0)

		def rule_UseClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_UseClauseContext, 0)

		def rule_GroupTemplateDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GroupTemplateDeclarationContext, 0)

		def rule_GroupDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GroupDeclarationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_PackageDeclarativeItem

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_PackageDeclarativeItem"):
				return visitor.visitRule_PackageDeclarativeItem(self)
			else:
				return visitor.visitChildren(self)

	def rule_PackageDeclarativeItem(self):

		localctx = VHDLParser.Rule_PackageDeclarativeItemContext(self, self._ctx, self.state)
		self.enterRule(localctx, 332, self.RULE_rule_PackageDeclarativeItem)
		try:
			self.state = 2169
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 233, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 2151
				localctx.subprogramDeclaration = self.rule_SubprogramDeclaration()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 2152
				self.rule_SubprogramInstantiationDeclaration()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 2153
				self.rule_PackageDeclaration()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 2154
				self.rule_PackageInstantiationDeclaration()
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 2155
				localctx.typeDeclaration = self.rule_TypeDeclaration()
				pass

			elif la_ == 6:
				self.enterOuterAlt(localctx, 6)
				self.state = 2156
				localctx.subtypeDeclaration = self.rule_SubtypeDeclaration()
				pass

			elif la_ == 7:
				self.enterOuterAlt(localctx, 7)
				self.state = 2157
				localctx.constantDeclaration = self.rule_ConstantDeclaration()
				pass

			elif la_ == 8:
				self.enterOuterAlt(localctx, 8)
				self.state = 2158
				localctx.signalDeclaration = self.rule_SignalDeclaration()
				pass

			elif la_ == 9:
				self.enterOuterAlt(localctx, 9)
				self.state = 2159
				localctx.variableDeclaration = self.rule_VariableDeclaration()
				pass

			elif la_ == 10:
				self.enterOuterAlt(localctx, 10)
				self.state = 2160
				localctx.fileDeclaration = self.rule_FileDeclaration()
				pass

			elif la_ == 11:
				self.enterOuterAlt(localctx, 11)
				self.state = 2161
				localctx.aliasDeclaration = self.rule_AliasDeclaration()
				pass

			elif la_ == 12:
				self.enterOuterAlt(localctx, 12)
				self.state = 2162
				localctx.componentDeclaration = self.rule_ComponentDeclaration()
				pass

			elif la_ == 13:
				self.enterOuterAlt(localctx, 13)
				self.state = 2163
				localctx.attributeDeclaration = self.rule_AttributeDeclaration()
				pass

			elif la_ == 14:
				self.enterOuterAlt(localctx, 14)
				self.state = 2164
				localctx.attributeSpecification = self.rule_AttributeSpecification()
				pass

			elif la_ == 15:
				self.enterOuterAlt(localctx, 15)
				self.state = 2165
				localctx.disconnectionSpecification = self.rule_DisconnectionSpecification()
				pass

			elif la_ == 16:
				self.enterOuterAlt(localctx, 16)
				self.state = 2166
				localctx.useClause = self.rule_UseClause()
				pass

			elif la_ == 17:
				self.enterOuterAlt(localctx, 17)
				self.state = 2167
				self.rule_GroupTemplateDeclaration()
				pass

			elif la_ == 18:
				self.enterOuterAlt(localctx, 18)
				self.state = 2168
				self.rule_GroupDeclaration()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_PackageInstantiationDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.name = None  # Token
			self.genericMasAspect = None  # Rule_GenericMapAspectContext

		def KW_PACKAGE(self):
			return self.getToken(VHDLParser.KW_PACKAGE, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def KW_NEW(self):
			return self.getToken(VHDLParser.KW_NEW, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def rule_GenericMapAspect(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GenericMapAspectContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_PackageInstantiationDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_PackageInstantiationDeclaration"):
				return visitor.visitRule_PackageInstantiationDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_PackageInstantiationDeclaration(self):

		localctx = VHDLParser.Rule_PackageInstantiationDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 334, self.RULE_rule_PackageInstantiationDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2171
			self.match(VHDLParser.KW_PACKAGE)
			self.state = 2172
			localctx.name = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 2173
			self.match(VHDLParser.KW_IS)
			self.state = 2174
			self.match(VHDLParser.KW_NEW)
			self.state = 2175
			self.rule_Name(0)
			self.state = 2177
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 42:
				self.state = 2176
				localctx.genericMasAspect = self.rule_GenericMapAspect()

			self.state = 2179
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_PackagePathnameContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.libraryName = None  # Token
			self.packageName = None  # Token
			self.objectName = None  # Token

		def TOK_AT(self):
			return self.getToken(VHDLParser.TOK_AT, 0)

		def TOK_DOT(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_DOT)
			else:
				return self.getToken(VHDLParser.TOK_DOT, i)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_PackagePathname

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_PackagePathname"):
				return visitor.visitRule_PackagePathname(self)
			else:
				return visitor.visitChildren(self)

	def rule_PackagePathname(self):

		localctx = VHDLParser.Rule_PackagePathnameContext(self, self._ctx, self.state)
		self.enterRule(localctx, 336, self.RULE_rule_PackagePathname)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2181
			self.match(VHDLParser.TOK_AT)
			self.state = 2182
			localctx.libraryName = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 2183
			self.match(VHDLParser.TOK_DOT)
			self.state = 2188
			self._errHandler.sync(self)
			_alt = self._interp.adaptivePredict(self._input, 235, self._ctx)
			while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
				if _alt == 1:
					self.state = 2184
					localctx.packageName = self.match(VHDLParser.LIT_IDENTIFIER)
					self.state = 2185
					self.match(VHDLParser.TOK_DOT)
				self.state = 2190
				self._errHandler.sync(self)
				_alt = self._interp.adaptivePredict(self._input, 235, self._ctx)

			self.state = 2191
			localctx.objectName = self.match(VHDLParser.LIT_IDENTIFIER)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ParameterMapAspectContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def rule_AssociationList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AssociationListContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def KW_PARAMETER(self):
			return self.getToken(VHDLParser.KW_PARAMETER, 0)

		def KW_MAP(self):
			return self.getToken(VHDLParser.KW_MAP, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ParameterMapAspect

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ParameterMapAspect"):
				return visitor.visitRule_ParameterMapAspect(self)
			else:
				return visitor.visitChildren(self)

	def rule_ParameterMapAspect(self):

		localctx = VHDLParser.Rule_ParameterMapAspectContext(self, self._ctx, self.state)
		self.enterRule(localctx, 338, self.RULE_rule_ParameterMapAspect)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2195
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 71:
				self.state = 2193
				self.match(VHDLParser.KW_PARAMETER)
				self.state = 2194
				self.match(VHDLParser.KW_MAP)

			self.state = 2197
			self.match(VHDLParser.TOK_LP)
			self.state = 2198
			self.rule_AssociationList()
			self.state = 2199
			self.match(VHDLParser.TOK_RP)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ParameterSpecificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def KW_IN(self):
			return self.getToken(VHDLParser.KW_IN, 0)

		def rule_DiscreteRange(self):
			return self.getTypedRuleContext(VHDLParser.Rule_DiscreteRangeContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ParameterSpecification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ParameterSpecification"):
				return visitor.visitRule_ParameterSpecification(self)
			else:
				return visitor.visitChildren(self)

	def rule_ParameterSpecification(self):

		localctx = VHDLParser.Rule_ParameterSpecificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 340, self.RULE_rule_ParameterSpecification)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2201
			self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 2202
			self.match(VHDLParser.KW_IN)
			self.state = 2203
			self.rule_DiscreteRange()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_PartialPathnameContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def rule_PathnameElement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_PathnameElementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_PathnameElementContext, i)

		def TOK_DOT(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_DOT)
			else:
				return self.getToken(VHDLParser.TOK_DOT, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_PartialPathname

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_PartialPathname"):
				return visitor.visitRule_PartialPathname(self)
			else:
				return visitor.visitChildren(self)

	def rule_PartialPathname(self):

		localctx = VHDLParser.Rule_PartialPathnameContext(self, self._ctx, self.state)
		self.enterRule(localctx, 342, self.RULE_rule_PartialPathname)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2210
			self._errHandler.sync(self)
			_alt = self._interp.adaptivePredict(self._input, 237, self._ctx)
			while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
				if _alt == 1:
					self.state = 2205
					self.rule_PathnameElement()
					self.state = 2206
					self.match(VHDLParser.TOK_DOT)
				self.state = 2212
				self._errHandler.sync(self)
				_alt = self._interp.adaptivePredict(self._input, 237, self._ctx)

			self.state = 2213
			self.match(VHDLParser.LIT_IDENTIFIER)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_PathnameElementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.nameOrLabel = None  # Token

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_PathnameElement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_PathnameElement"):
				return visitor.visitRule_PathnameElement(self)
			else:
				return visitor.visitChildren(self)

	def rule_PathnameElement(self):

		localctx = VHDLParser.Rule_PathnameElementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 344, self.RULE_rule_PathnameElement)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2215
			localctx.nameOrLabel = self.match(VHDLParser.LIT_IDENTIFIER)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_PhysicalIncompleteTypeDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_UNITS(self):
			return self.getToken(VHDLParser.KW_UNITS, 0)

		def TOK_BOX(self):
			return self.getToken(VHDLParser.TOK_BOX, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_PhysicalIncompleteTypeDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_PhysicalIncompleteTypeDefinition"):
				return visitor.visitRule_PhysicalIncompleteTypeDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_PhysicalIncompleteTypeDefinition(self):

		localctx = VHDLParser.Rule_PhysicalIncompleteTypeDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 346, self.RULE_rule_PhysicalIncompleteTypeDefinition)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2217
			self.match(VHDLParser.KW_UNITS)
			self.state = 2218
			self.match(VHDLParser.TOK_BOX)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_PhysicalLiteralContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def LIT_ABSTRACT(self):
			return self.getToken(VHDLParser.LIT_ABSTRACT, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_PhysicalLiteral

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_PhysicalLiteral"):
				return visitor.visitRule_PhysicalLiteral(self)
			else:
				return visitor.visitChildren(self)

	def rule_PhysicalLiteral(self):

		localctx = VHDLParser.Rule_PhysicalLiteralContext(self, self._ctx, self.state)
		self.enterRule(localctx, 348, self.RULE_rule_PhysicalLiteral)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2221
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 159:
				self.state = 2220
				self.match(VHDLParser.LIT_ABSTRACT)

			self.state = 2223
			self.rule_Name(0)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_PhysicalTypeDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.rangeConstraint = None  # Rule_RangeConstraintContext
			self.primaryUnit = None  # Token
			self._rule_SecondaryUnitDeclaration = None  # Rule_SecondaryUnitDeclarationContext
			self.secondaryUnits = list()  # of Rule_SecondaryUnitDeclarationContexts
			self.name2 = None  # Token

		def KW_UNITS(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_UNITS)
			else:
				return self.getToken(VHDLParser.KW_UNITS, i)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def rule_RangeConstraint(self):
			return self.getTypedRuleContext(VHDLParser.Rule_RangeConstraintContext, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def rule_SecondaryUnitDeclaration(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_SecondaryUnitDeclarationContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_SecondaryUnitDeclarationContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_PhysicalTypeDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_PhysicalTypeDefinition"):
				return visitor.visitRule_PhysicalTypeDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_PhysicalTypeDefinition(self):

		localctx = VHDLParser.Rule_PhysicalTypeDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 350, self.RULE_rule_PhysicalTypeDefinition)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2225
			localctx.rangeConstraint = self.rule_RangeConstraint()
			self.state = 2226
			self.match(VHDLParser.KW_UNITS)
			self.state = 2227
			localctx.primaryUnit = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 2228
			self.match(VHDLParser.TOK_SEMICOL)
			self.state = 2232
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == 163:
				self.state = 2229
				localctx._rule_SecondaryUnitDeclaration = self.rule_SecondaryUnitDeclaration()
				localctx.secondaryUnits.append(localctx._rule_SecondaryUnitDeclaration)
				self.state = 2234
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 2235
			self.match(VHDLParser.KW_END)
			self.state = 2236
			self.match(VHDLParser.KW_UNITS)
			self.state = 2238
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 2237
				localctx.name2 = self.match(VHDLParser.LIT_IDENTIFIER)


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_PlainReturnStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token
			self.condition = None  # Rule_ExpressionContext

		def KW_RETURN(self):
			return self.getToken(VHDLParser.KW_RETURN, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def KW_WHEN(self):
			return self.getToken(VHDLParser.KW_WHEN, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_PlainReturnStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_PlainReturnStatement"):
				return visitor.visitRule_PlainReturnStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_PlainReturnStatement(self):

		localctx = VHDLParser.Rule_PlainReturnStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 352, self.RULE_rule_PlainReturnStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2242
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 2240
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 2241
				self.match(VHDLParser.TOK_COLON)

			self.state = 2244
			self.match(VHDLParser.KW_RETURN)
			self.state = 2247
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 117:
				self.state = 2245
				self.match(VHDLParser.KW_WHEN)
				self.state = 2246
				localctx.condition = self.rule_Expression(0)

			self.state = 2249
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_PortClauseContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_InterfaceSignalDeclaration = None  # Rule_InterfaceSignalDeclarationContext
			self.ports = list()  # of Rule_InterfaceSignalDeclarationContexts

		def KW_PORT(self):
			return self.getToken(VHDLParser.KW_PORT, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def TOK_SEMICOL(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_SEMICOL)
			else:
				return self.getToken(VHDLParser.TOK_SEMICOL, i)

		def rule_InterfaceSignalDeclaration(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_InterfaceSignalDeclarationContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_InterfaceSignalDeclarationContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_PortClause

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_PortClause"):
				return visitor.visitRule_PortClause(self)
			else:
				return visitor.visitChildren(self)

	def rule_PortClause(self):

		localctx = VHDLParser.Rule_PortClauseContext(self, self._ctx, self.state)
		self.enterRule(localctx, 354, self.RULE_rule_PortClause)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2251
			self.match(VHDLParser.KW_PORT)
			self.state = 2252
			self.match(VHDLParser.TOK_LP)
			self.state = 2253
			localctx._rule_InterfaceSignalDeclaration = self.rule_InterfaceSignalDeclaration()
			localctx.ports.append(localctx._rule_InterfaceSignalDeclaration)
			self.state = 2258
			self._errHandler.sync(self)
			_alt = self._interp.adaptivePredict(self._input, 243, self._ctx)
			while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
				if _alt == 1:
					self.state = 2254
					self.match(VHDLParser.TOK_SEMICOL)
					self.state = 2255
					localctx._rule_InterfaceSignalDeclaration = self.rule_InterfaceSignalDeclaration()
					localctx.ports.append(localctx._rule_InterfaceSignalDeclaration)
				self.state = 2260
				self._errHandler.sync(self)
				_alt = self._interp.adaptivePredict(self._input, 243, self._ctx)

			self.state = 2262
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 150:
				self.state = 2261
				self.match(VHDLParser.TOK_SEMICOL)

			self.state = 2264
			self.match(VHDLParser.TOK_RP)
			self.state = 2265
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_PortMapAspectContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.associationList = None  # Rule_AssociationListContext

		def KW_PORT(self):
			return self.getToken(VHDLParser.KW_PORT, 0)

		def KW_MAP(self):
			return self.getToken(VHDLParser.KW_MAP, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def rule_AssociationList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AssociationListContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_PortMapAspect

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_PortMapAspect"):
				return visitor.visitRule_PortMapAspect(self)
			else:
				return visitor.visitChildren(self)

	def rule_PortMapAspect(self):

		localctx = VHDLParser.Rule_PortMapAspectContext(self, self._ctx, self.state)
		self.enterRule(localctx, 356, self.RULE_rule_PortMapAspect)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2267
			self.match(VHDLParser.KW_PORT)
			self.state = 2268
			self.match(VHDLParser.KW_MAP)
			self.state = 2269
			self.match(VHDLParser.TOK_LP)
			self.state = 2270
			localctx.associationList = self.rule_AssociationList()
			self.state = 2271
			self.match(VHDLParser.TOK_RP)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_PrimaryContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.expression = None  # Rule_ExpressionContext

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def rule_Literal(self):
			return self.getTypedRuleContext(VHDLParser.Rule_LiteralContext, 0)

		def rule_Aggregate(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AggregateContext, 0)

		def rule_FunctionCall(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FunctionCallContext, 0)

		def rule_QualifiedExpression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_QualifiedExpressionContext, 0)

		def rule_TypeConversion(self):
			return self.getTypedRuleContext(VHDLParser.Rule_TypeConversionContext, 0)

		def rule_Allocator(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AllocatorContext, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Primary

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Primary"):
				return visitor.visitRule_Primary(self)
			else:
				return visitor.visitChildren(self)

	def rule_Primary(self):

		localctx = VHDLParser.Rule_PrimaryContext(self, self._ctx, self.state)
		self.enterRule(localctx, 358, self.RULE_rule_Primary)
		try:
			self.state = 2284
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 245, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 2273
				self.rule_Name(0)
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 2274
				self.rule_Literal()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 2275
				self.rule_Aggregate()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 2276
				self.rule_FunctionCall()
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 2277
				self.rule_QualifiedExpression()
				pass

			elif la_ == 6:
				self.enterOuterAlt(localctx, 6)
				self.state = 2278
				self.rule_TypeConversion()
				pass

			elif la_ == 7:
				self.enterOuterAlt(localctx, 7)
				self.state = 2279
				self.rule_Allocator()
				pass

			elif la_ == 8:
				self.enterOuterAlt(localctx, 8)
				self.state = 2280
				self.match(VHDLParser.TOK_LP)
				self.state = 2281
				localctx.expression = self.rule_Expression(0)
				self.state = 2282
				self.match(VHDLParser.TOK_RP)
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_PrivateVariableDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_PRIVATE(self):
			return self.getToken(VHDLParser.KW_PRIVATE, 0)

		def rule_VariableDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_VariableDeclarationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_PrivateVariableDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_PrivateVariableDeclaration"):
				return visitor.visitRule_PrivateVariableDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_PrivateVariableDeclaration(self):

		localctx = VHDLParser.Rule_PrivateVariableDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 360, self.RULE_rule_PrivateVariableDeclaration)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2286
			self.match(VHDLParser.KW_PRIVATE)
			self.state = 2287
			self.rule_VariableDeclaration()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_PrivateIncompleteTypeDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_PRIVATE(self):
			return self.getToken(VHDLParser.KW_PRIVATE, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_PrivateIncompleteTypeDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_PrivateIncompleteTypeDefinition"):
				return visitor.visitRule_PrivateIncompleteTypeDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_PrivateIncompleteTypeDefinition(self):

		localctx = VHDLParser.Rule_PrivateIncompleteTypeDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 362, self.RULE_rule_PrivateIncompleteTypeDefinition)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2289
			self.match(VHDLParser.KW_PRIVATE)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ProcedureCallContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.genericMapAspect = None  # Rule_GenericMapAspectContext
			self.parameterMapAspect = None  # Rule_ParameterMapAspectContext

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def rule_GenericMapAspect(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GenericMapAspectContext, 0)

		def rule_ParameterMapAspect(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ParameterMapAspectContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ProcedureCall

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ProcedureCall"):
				return visitor.visitRule_ProcedureCall(self)
			else:
				return visitor.visitChildren(self)

	def rule_ProcedureCall(self):

		localctx = VHDLParser.Rule_ProcedureCallContext(self, self._ctx, self.state)
		self.enterRule(localctx, 364, self.RULE_rule_ProcedureCall)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2291
			self.rule_Name(0)
			self.state = 2293
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 42:
				self.state = 2292
				localctx.genericMapAspect = self.rule_GenericMapAspect()

			self.state = 2296
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 71 or _la == 143:
				self.state = 2295
				localctx.parameterMapAspect = self.rule_ParameterMapAspect()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ProcedureCallStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token

		def rule_ProcedureCall(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ProcedureCallContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ProcedureCallStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ProcedureCallStatement"):
				return visitor.visitRule_ProcedureCallStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_ProcedureCallStatement(self):

		localctx = VHDLParser.Rule_ProcedureCallStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 366, self.RULE_rule_ProcedureCallStatement)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2300
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 248, self._ctx)
			if la_ == 1:
				self.state = 2298
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 2299
				self.match(VHDLParser.TOK_COLON)

			self.state = 2302
			self.rule_ProcedureCall()
			self.state = 2303
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ProcedureSpecificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.name = None  # Token

		def KW_PROCEDURE(self):
			return self.getToken(VHDLParser.KW_PROCEDURE, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def rule_FormalParameterList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FormalParameterListContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def KW_PARAMETER(self):
			return self.getToken(VHDLParser.KW_PARAMETER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ProcedureSpecification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ProcedureSpecification"):
				return visitor.visitRule_ProcedureSpecification(self)
			else:
				return visitor.visitChildren(self)

	def rule_ProcedureSpecification(self):

		localctx = VHDLParser.Rule_ProcedureSpecificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 368, self.RULE_rule_ProcedureSpecification)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2305
			self.match(VHDLParser.KW_PROCEDURE)
			self.state = 2306
			localctx.name = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 2314
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 71 or _la == 143:
				self.state = 2308
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == 71:
					self.state = 2307
					self.match(VHDLParser.KW_PARAMETER)

				self.state = 2310
				self.match(VHDLParser.TOK_LP)
				self.state = 2311
				self.rule_FormalParameterList()
				self.state = 2312
				self.match(VHDLParser.TOK_RP)


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ProcessDeclarativeItemContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_SubprogramDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramDeclarationContext, 0)

		def rule_SubprogramBody(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramBodyContext, 0)

		def rule_SubprogramInstantiationDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramInstantiationDeclarationContext, 0)

		def rule_PackageDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PackageDeclarationContext, 0)

		def rule_PackageBody(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PackageBodyContext, 0)

		def rule_PackageInstantiationDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PackageInstantiationDeclarationContext, 0)

		def rule_TypeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_TypeDeclarationContext, 0)

		def rule_SubtypeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeDeclarationContext, 0)

		def rule_ConstantDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConstantDeclarationContext, 0)

		def rule_VariableDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_VariableDeclarationContext, 0)

		def rule_FileDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FileDeclarationContext, 0)

		def rule_AliasDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AliasDeclarationContext, 0)

		def rule_AttributeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AttributeDeclarationContext, 0)

		def rule_AttributeSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AttributeSpecificationContext, 0)

		def rule_UseClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_UseClauseContext, 0)

		def rule_GroupTemplateDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GroupTemplateDeclarationContext, 0)

		def rule_GroupDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GroupDeclarationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ProcessDeclarativeItem

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ProcessDeclarativeItem"):
				return visitor.visitRule_ProcessDeclarativeItem(self)
			else:
				return visitor.visitChildren(self)

	def rule_ProcessDeclarativeItem(self):

		localctx = VHDLParser.Rule_ProcessDeclarativeItemContext(self, self._ctx, self.state)
		self.enterRule(localctx, 370, self.RULE_rule_ProcessDeclarativeItem)
		try:
			self.state = 2333
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 251, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 2316
				self.rule_SubprogramDeclaration()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 2317
				self.rule_SubprogramBody()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 2318
				self.rule_SubprogramInstantiationDeclaration()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 2319
				self.rule_PackageDeclaration()
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 2320
				self.rule_PackageBody()
				pass

			elif la_ == 6:
				self.enterOuterAlt(localctx, 6)
				self.state = 2321
				self.rule_PackageInstantiationDeclaration()
				pass

			elif la_ == 7:
				self.enterOuterAlt(localctx, 7)
				self.state = 2322
				self.rule_TypeDeclaration()
				pass

			elif la_ == 8:
				self.enterOuterAlt(localctx, 8)
				self.state = 2323
				self.rule_SubtypeDeclaration()
				pass

			elif la_ == 9:
				self.enterOuterAlt(localctx, 9)
				self.state = 2324
				self.rule_ConstantDeclaration()
				pass

			elif la_ == 10:
				self.enterOuterAlt(localctx, 10)
				self.state = 2325
				self.rule_VariableDeclaration()
				pass

			elif la_ == 11:
				self.enterOuterAlt(localctx, 11)
				self.state = 2326
				self.rule_FileDeclaration()
				pass

			elif la_ == 12:
				self.enterOuterAlt(localctx, 12)
				self.state = 2327
				self.rule_AliasDeclaration()
				pass

			elif la_ == 13:
				self.enterOuterAlt(localctx, 13)
				self.state = 2328
				self.rule_AttributeDeclaration()
				pass

			elif la_ == 14:
				self.enterOuterAlt(localctx, 14)
				self.state = 2329
				self.rule_AttributeSpecification()
				pass

			elif la_ == 15:
				self.enterOuterAlt(localctx, 15)
				self.state = 2330
				self.rule_UseClause()
				pass

			elif la_ == 16:
				self.enterOuterAlt(localctx, 16)
				self.state = 2331
				self.rule_GroupTemplateDeclaration()
				pass

			elif la_ == 17:
				self.enterOuterAlt(localctx, 17)
				self.state = 2332
				self.rule_GroupDeclaration()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ProcessSensitivityListContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_SensitivityList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SensitivityListContext, 0)

		def KW_ALL(self):
			return self.getToken(VHDLParser.KW_ALL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ProcessSensitivityList

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ProcessSensitivityList"):
				return visitor.visitRule_ProcessSensitivityList(self)
			else:
				return visitor.visitChildren(self)

	def rule_ProcessSensitivityList(self):

		localctx = VHDLParser.Rule_ProcessSensitivityListContext(self, self._ctx, self.state)
		self.enterRule(localctx, 372, self.RULE_rule_ProcessSensitivityList)
		try:
			self.state = 2337
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [147, 161, 162, 163]:
				self.enterOuterAlt(localctx, 1)
				self.state = 2335
				self.rule_SensitivityList()
				pass
			elif token in [10]:
				self.enterOuterAlt(localctx, 2)
				self.state = 2336
				self.match(VHDLParser.KW_ALL)
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ProcessStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token
			self._rule_ProcessDeclarativeItem = None  # Rule_ProcessDeclarativeItemContext
			self.declaredItems = list()  # of Rule_ProcessDeclarativeItemContexts
			self._rule_SequentialStatement = None  # Rule_SequentialStatementContext
			self.statements = list()  # of Rule_SequentialStatementContexts

		def KW_PROCESS(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_PROCESS)
			else:
				return self.getToken(VHDLParser.KW_PROCESS, i)

		def KW_BEGIN(self):
			return self.getToken(VHDLParser.KW_BEGIN, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def rule_ProcessSensitivityList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ProcessSensitivityListContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def rule_ProcessDeclarativeItem(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ProcessDeclarativeItemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ProcessDeclarativeItemContext, i)

		def rule_SequentialStatement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_SequentialStatementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_SequentialStatementContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ProcessStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ProcessStatement"):
				return visitor.visitRule_ProcessStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_ProcessStatement(self):

		localctx = VHDLParser.Rule_ProcessStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 374, self.RULE_rule_ProcessStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2341
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 2339
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 2340
				self.match(VHDLParser.TOK_COLON)

			self.state = 2343
			self.match(VHDLParser.KW_PROCESS)
			self.state = 2348
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 143:
				self.state = 2344
				self.match(VHDLParser.TOK_LP)
				self.state = 2345
				self.rule_ProcessSensitivityList()
				self.state = 2346
				self.match(VHDLParser.TOK_RP)

			self.state = 2351
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 50:
				self.state = 2350
				self.match(VHDLParser.KW_IS)

			self.state = 2356
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & 88579439100416) != 0) or (
				(((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 842086220065) != 0):
				self.state = 2353
				localctx._rule_ProcessDeclarativeItem = self.rule_ProcessDeclarativeItem()
				localctx.declaredItems.append(localctx._rule_ProcessDeclarativeItem)
				self.state = 2358
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 2359
			self.match(VHDLParser.KW_BEGIN)
			self.state = 2363
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & -8052400777563193344) != 0) or (
				(((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & 4899916406390259715) != 0) or (
				(((_la - 161)) & ~0x3f) == 0 and ((1 << (_la - 161)) & 7) != 0):
				self.state = 2360
				localctx._rule_SequentialStatement = self.rule_SequentialStatement()
				localctx.statements.append(localctx._rule_SequentialStatement)
				self.state = 2365
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 2366
			self.match(VHDLParser.KW_END)
			self.state = 2367
			self.match(VHDLParser.KW_PROCESS)
			self.state = 2369
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 2368
				self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 2371
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_PostponedProcessStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token
			self._rule_ProcessDeclarativeItem = None  # Rule_ProcessDeclarativeItemContext
			self.declaredItems = list()  # of Rule_ProcessDeclarativeItemContexts
			self._rule_SequentialStatement = None  # Rule_SequentialStatementContext
			self.statements = list()  # of Rule_SequentialStatementContexts

		def KW_POSTPONED(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_POSTPONED)
			else:
				return self.getToken(VHDLParser.KW_POSTPONED, i)

		def KW_PROCESS(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_PROCESS)
			else:
				return self.getToken(VHDLParser.KW_PROCESS, i)

		def KW_BEGIN(self):
			return self.getToken(VHDLParser.KW_BEGIN, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def rule_SensitivityList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SensitivityListContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def rule_ProcessDeclarativeItem(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ProcessDeclarativeItemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ProcessDeclarativeItemContext, i)

		def rule_SequentialStatement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_SequentialStatementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_SequentialStatementContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_PostponedProcessStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_PostponedProcessStatement"):
				return visitor.visitRule_PostponedProcessStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_PostponedProcessStatement(self):

		localctx = VHDLParser.Rule_PostponedProcessStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 376, self.RULE_rule_PostponedProcessStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2375
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 2373
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 2374
				self.match(VHDLParser.TOK_COLON)

			self.state = 2377
			self.match(VHDLParser.KW_POSTPONED)
			self.state = 2378
			self.match(VHDLParser.KW_PROCESS)
			self.state = 2383
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 143:
				self.state = 2379
				self.match(VHDLParser.TOK_LP)
				self.state = 2380
				self.rule_SensitivityList()
				self.state = 2381
				self.match(VHDLParser.TOK_RP)

			self.state = 2386
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 50:
				self.state = 2385
				self.match(VHDLParser.KW_IS)

			self.state = 2391
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & 88579439100416) != 0) or (
				(((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 842086220065) != 0):
				self.state = 2388
				localctx._rule_ProcessDeclarativeItem = self.rule_ProcessDeclarativeItem()
				localctx.declaredItems.append(localctx._rule_ProcessDeclarativeItem)
				self.state = 2393
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 2394
			self.match(VHDLParser.KW_BEGIN)
			self.state = 2398
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & -8052400777563193344) != 0) or (
				(((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & 4899916406390259715) != 0) or (
				(((_la - 161)) & ~0x3f) == 0 and ((1 << (_la - 161)) & 7) != 0):
				self.state = 2395
				localctx._rule_SequentialStatement = self.rule_SequentialStatement()
				localctx.statements.append(localctx._rule_SequentialStatement)
				self.state = 2400
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 2401
			self.match(VHDLParser.KW_END)
			self.state = 2403
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 73:
				self.state = 2402
				self.match(VHDLParser.KW_POSTPONED)

			self.state = 2405
			self.match(VHDLParser.KW_PROCESS)
			self.state = 2407
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 2406
				self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 2409
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ProtectedTypeBodyContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_ProtectedTypeBodyDeclarativeItem = None  # Rule_ProtectedTypeBodyDeclarativeItemContext
			self.declaredItems = list()  # of Rule_ProtectedTypeBodyDeclarativeItemContexts
			self.name2 = None  # Token

		def KW_PROTECTED(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_PROTECTED)
			else:
				return self.getToken(VHDLParser.KW_PROTECTED, i)

		def KW_BODY(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_BODY)
			else:
				return self.getToken(VHDLParser.KW_BODY, i)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def rule_ProtectedTypeBodyDeclarativeItem(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ProtectedTypeBodyDeclarativeItemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ProtectedTypeBodyDeclarativeItemContext, i)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ProtectedTypeBody

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ProtectedTypeBody"):
				return visitor.visitRule_ProtectedTypeBody(self)
			else:
				return visitor.visitChildren(self)

	def rule_ProtectedTypeBody(self):

		localctx = VHDLParser.Rule_ProtectedTypeBodyContext(self, self._ctx, self.state)
		self.enterRule(localctx, 378, self.RULE_rule_ProtectedTypeBody)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2411
			self.match(VHDLParser.KW_PROTECTED)
			self.state = 2412
			self.match(VHDLParser.KW_BODY)
			self.state = 2416
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & 88579439100416) != 0) or (
				(((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 842086220065) != 0):
				self.state = 2413
				localctx._rule_ProtectedTypeBodyDeclarativeItem = self.rule_ProtectedTypeBodyDeclarativeItem()
				localctx.declaredItems.append(localctx._rule_ProtectedTypeBodyDeclarativeItem)
				self.state = 2418
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 2419
			self.match(VHDLParser.KW_END)
			self.state = 2420
			self.match(VHDLParser.KW_PROTECTED)
			self.state = 2421
			self.match(VHDLParser.KW_BODY)
			self.state = 2423
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 2422
				localctx.name2 = self.match(VHDLParser.LIT_IDENTIFIER)


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ProtectedTypeBodyDeclarativeItemContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_SubprogramDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramDeclarationContext, 0)

		def rule_SubprogramBody(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramBodyContext, 0)

		def rule_SubprogramInstantiationDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramInstantiationDeclarationContext, 0)

		def rule_PackageDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PackageDeclarationContext, 0)

		def rule_PackageBody(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PackageBodyContext, 0)

		def rule_PackageInstantiationDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PackageInstantiationDeclarationContext, 0)

		def rule_TypeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_TypeDeclarationContext, 0)

		def rule_SubtypeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeDeclarationContext, 0)

		def rule_ConstantDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConstantDeclarationContext, 0)

		def rule_VariableDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_VariableDeclarationContext, 0)

		def rule_FileDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FileDeclarationContext, 0)

		def rule_AliasDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AliasDeclarationContext, 0)

		def rule_AttributeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AttributeDeclarationContext, 0)

		def rule_AttributeSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AttributeSpecificationContext, 0)

		def rule_UseClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_UseClauseContext, 0)

		def rule_GroupTemplateDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GroupTemplateDeclarationContext, 0)

		def rule_GroupDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GroupDeclarationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ProtectedTypeBodyDeclarativeItem

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ProtectedTypeBodyDeclarativeItem"):
				return visitor.visitRule_ProtectedTypeBodyDeclarativeItem(self)
			else:
				return visitor.visitChildren(self)

	def rule_ProtectedTypeBodyDeclarativeItem(self):

		localctx = VHDLParser.Rule_ProtectedTypeBodyDeclarativeItemContext(self, self._ctx, self.state)
		self.enterRule(localctx, 380, self.RULE_rule_ProtectedTypeBodyDeclarativeItem)
		try:
			self.state = 2442
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 268, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 2425
				self.rule_SubprogramDeclaration()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 2426
				self.rule_SubprogramBody()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 2427
				self.rule_SubprogramInstantiationDeclaration()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 2428
				self.rule_PackageDeclaration()
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 2429
				self.rule_PackageBody()
				pass

			elif la_ == 6:
				self.enterOuterAlt(localctx, 6)
				self.state = 2430
				self.rule_PackageInstantiationDeclaration()
				pass

			elif la_ == 7:
				self.enterOuterAlt(localctx, 7)
				self.state = 2431
				self.rule_TypeDeclaration()
				pass

			elif la_ == 8:
				self.enterOuterAlt(localctx, 8)
				self.state = 2432
				self.rule_SubtypeDeclaration()
				pass

			elif la_ == 9:
				self.enterOuterAlt(localctx, 9)
				self.state = 2433
				self.rule_ConstantDeclaration()
				pass

			elif la_ == 10:
				self.enterOuterAlt(localctx, 10)
				self.state = 2434
				self.rule_VariableDeclaration()
				pass

			elif la_ == 11:
				self.enterOuterAlt(localctx, 11)
				self.state = 2435
				self.rule_FileDeclaration()
				pass

			elif la_ == 12:
				self.enterOuterAlt(localctx, 12)
				self.state = 2436
				self.rule_AliasDeclaration()
				pass

			elif la_ == 13:
				self.enterOuterAlt(localctx, 13)
				self.state = 2437
				self.rule_AttributeDeclaration()
				pass

			elif la_ == 14:
				self.enterOuterAlt(localctx, 14)
				self.state = 2438
				self.rule_AttributeSpecification()
				pass

			elif la_ == 15:
				self.enterOuterAlt(localctx, 15)
				self.state = 2439
				self.rule_UseClause()
				pass

			elif la_ == 16:
				self.enterOuterAlt(localctx, 16)
				self.state = 2440
				self.rule_GroupTemplateDeclaration()
				pass

			elif la_ == 17:
				self.enterOuterAlt(localctx, 17)
				self.state = 2441
				self.rule_GroupDeclaration()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ProtectedTypeDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_ProtectedTypeDeclarativeItem = None  # Rule_ProtectedTypeDeclarativeItemContext
			self.declaredItems = list()  # of Rule_ProtectedTypeDeclarativeItemContexts
			self.name2 = None  # Token

		def KW_PROTECTED(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_PROTECTED)
			else:
				return self.getToken(VHDLParser.KW_PROTECTED, i)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def rule_ProtectedTypeDeclarativeItem(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ProtectedTypeDeclarativeItemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ProtectedTypeDeclarativeItemContext, i)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ProtectedTypeDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ProtectedTypeDeclaration"):
				return visitor.visitRule_ProtectedTypeDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_ProtectedTypeDeclaration(self):

		localctx = VHDLParser.Rule_ProtectedTypeDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 382, self.RULE_rule_ProtectedTypeDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2444
			self.match(VHDLParser.KW_PROTECTED)
			self.state = 2448
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & 70918500024832) != 0) or (
				(((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 17179869203) != 0):
				self.state = 2445
				localctx._rule_ProtectedTypeDeclarativeItem = self.rule_ProtectedTypeDeclarativeItem()
				localctx.declaredItems.append(localctx._rule_ProtectedTypeDeclarativeItem)
				self.state = 2450
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 2451
			self.match(VHDLParser.KW_END)
			self.state = 2452
			self.match(VHDLParser.KW_PROTECTED)
			self.state = 2454
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 2453
				localctx.name2 = self.match(VHDLParser.LIT_IDENTIFIER)


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ProtectedTypeDeclarativeItemContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_SubprogramDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramDeclarationContext, 0)

		def rule_SubprogramInstantiationDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramInstantiationDeclarationContext, 0)

		def rule_PrivateVariableDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PrivateVariableDeclarationContext, 0)

		def rule_AliasDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AliasDeclarationContext, 0)

		def rule_AttributeSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AttributeSpecificationContext, 0)

		def rule_UseClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_UseClauseContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ProtectedTypeDeclarativeItem

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ProtectedTypeDeclarativeItem"):
				return visitor.visitRule_ProtectedTypeDeclarativeItem(self)
			else:
				return visitor.visitChildren(self)

	def rule_ProtectedTypeDeclarativeItem(self):

		localctx = VHDLParser.Rule_ProtectedTypeDeclarativeItemContext(self, self._ctx, self.state)
		self.enterRule(localctx, 384, self.RULE_rule_ProtectedTypeDeclarativeItem)
		try:
			self.state = 2462
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 271, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 2456
				self.rule_SubprogramDeclaration()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 2457
				self.rule_SubprogramInstantiationDeclaration()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 2458
				self.rule_PrivateVariableDeclaration()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 2459
				self.rule_AliasDeclaration()
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 2460
				self.rule_AttributeSpecification()
				pass

			elif la_ == 6:
				self.enterOuterAlt(localctx, 6)
				self.state = 2461
				self.rule_UseClause()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ProtectedTypeDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_ProtectedTypeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ProtectedTypeDeclarationContext, 0)

		def rule_ProtectedTypeBody(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ProtectedTypeBodyContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ProtectedTypeDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ProtectedTypeDefinition"):
				return visitor.visitRule_ProtectedTypeDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_ProtectedTypeDefinition(self):

		localctx = VHDLParser.Rule_ProtectedTypeDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 386, self.RULE_rule_ProtectedTypeDefinition)
		try:
			self.state = 2466
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 272, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 2464
				self.rule_ProtectedTypeDeclaration()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 2465
				self.rule_ProtectedTypeBody()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ProtectedTypeInstantiationDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.genericMapAspect = None  # Rule_GenericMapAspectContext

		def KW_NEW(self):
			return self.getToken(VHDLParser.KW_NEW, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def rule_GenericMapAspect(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GenericMapAspectContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ProtectedTypeInstantiationDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ProtectedTypeInstantiationDefinition"):
				return visitor.visitRule_ProtectedTypeInstantiationDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_ProtectedTypeInstantiationDefinition(self):

		localctx = VHDLParser.Rule_ProtectedTypeInstantiationDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 388, self.RULE_rule_ProtectedTypeInstantiationDefinition)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2468
			self.match(VHDLParser.KW_NEW)
			self.state = 2469
			self.rule_Name(0)
			self.state = 2471
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 42:
				self.state = 2470
				localctx.genericMapAspect = self.rule_GenericMapAspect()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_QualifiedExpressionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.typeMark = None  # Rule_NameContext
			self.expression = None  # Rule_ExpressionContext
			self.aggregate = None  # Rule_AggregateContext

		def TOK_TICK(self):
			return self.getToken(VHDLParser.TOK_TICK, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def rule_Aggregate(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AggregateContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_QualifiedExpression

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_QualifiedExpression"):
				return visitor.visitRule_QualifiedExpression(self)
			else:
				return visitor.visitChildren(self)

	def rule_QualifiedExpression(self):

		localctx = VHDLParser.Rule_QualifiedExpressionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 390, self.RULE_rule_QualifiedExpression)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2473
			localctx.typeMark = self.rule_Name(0)
			self.state = 2474
			self.match(VHDLParser.TOK_TICK)
			self.state = 2481
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 274, self._ctx)
			if la_ == 1:
				pass

			elif la_ == 2:
				self.state = 2476
				self.match(VHDLParser.TOK_LP)
				self.state = 2477
				localctx.expression = self.rule_Expression(0)
				self.state = 2478
				self.match(VHDLParser.TOK_RP)
				pass

			elif la_ == 3:
				self.state = 2480
				localctx.aggregate = self.rule_Aggregate()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_RangeContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def rule_SimpleRange(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SimpleRangeContext, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Range

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Range"):
				return visitor.visitRule_Range(self)
			else:
				return visitor.visitChildren(self)

	def rule_Range(self):

		localctx = VHDLParser.Rule_RangeContext(self, self._ctx, self.state)
		self.enterRule(localctx, 392, self.RULE_rule_Range)
		try:
			self.state = 2486
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 275, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 2483
				self.rule_Name(0)
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 2484
				self.rule_SimpleRange()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 2485
				self.rule_Expression(0)
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_RangeConstraintContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_RANGE(self):
			return self.getToken(VHDLParser.KW_RANGE, 0)

		def rule_Range(self):
			return self.getTypedRuleContext(VHDLParser.Rule_RangeContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_RangeConstraint

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_RangeConstraint"):
				return visitor.visitRule_RangeConstraint(self)
			else:
				return visitor.visitChildren(self)

	def rule_RangeConstraint(self):

		localctx = VHDLParser.Rule_RangeConstraintContext(self, self._ctx, self.state)
		self.enterRule(localctx, 394, self.RULE_rule_RangeConstraint)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2488
			self.match(VHDLParser.KW_RANGE)
			self.state = 2489
			self.rule_Range()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_RecordConstraintContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def rule_RecordElementConstraint(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_RecordElementConstraintContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_RecordElementConstraintContext, i)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_RecordConstraint

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_RecordConstraint"):
				return visitor.visitRule_RecordConstraint(self)
			else:
				return visitor.visitChildren(self)

	def rule_RecordConstraint(self):

		localctx = VHDLParser.Rule_RecordConstraintContext(self, self._ctx, self.state)
		self.enterRule(localctx, 396, self.RULE_rule_RecordConstraint)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2491
			self.match(VHDLParser.TOK_LP)
			self.state = 2492
			self.rule_RecordElementConstraint()
			self.state = 2497
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == 151:
				self.state = 2493
				self.match(VHDLParser.TOK_COMMA)
				self.state = 2494
				self.rule_RecordElementConstraint()
				self.state = 2499
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 2500
			self.match(VHDLParser.TOK_RP)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_RecordElementConstraintContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def rule_ElementConstraint(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ElementConstraintContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_RecordElementConstraint

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_RecordElementConstraint"):
				return visitor.visitRule_RecordElementConstraint(self)
			else:
				return visitor.visitChildren(self)

	def rule_RecordElementConstraint(self):

		localctx = VHDLParser.Rule_RecordElementConstraintContext(self, self._ctx, self.state)
		self.enterRule(localctx, 398, self.RULE_rule_RecordElementConstraint)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2502
			self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 2503
			self.rule_ElementConstraint()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_RecordElementListContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._LIT_IDENTIFIER = None  # Token
			self.elements = list()  # of Tokens

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_RecordElementList

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_RecordElementList"):
				return visitor.visitRule_RecordElementList(self)
			else:
				return visitor.visitChildren(self)

	def rule_RecordElementList(self):

		localctx = VHDLParser.Rule_RecordElementListContext(self, self._ctx, self.state)
		self.enterRule(localctx, 400, self.RULE_rule_RecordElementList)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2505
			localctx._LIT_IDENTIFIER = self.match(VHDLParser.LIT_IDENTIFIER)
			localctx.elements.append(localctx._LIT_IDENTIFIER)
			self.state = 2510
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == 151:
				self.state = 2506
				self.match(VHDLParser.TOK_COMMA)
				self.state = 2507
				localctx._LIT_IDENTIFIER = self.match(VHDLParser.LIT_IDENTIFIER)
				localctx.elements.append(localctx._LIT_IDENTIFIER)
				self.state = 2512
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_RecordElementResolutionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def rule_ResolutionIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ResolutionIndicationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_RecordElementResolution

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_RecordElementResolution"):
				return visitor.visitRule_RecordElementResolution(self)
			else:
				return visitor.visitChildren(self)

	def rule_RecordElementResolution(self):

		localctx = VHDLParser.Rule_RecordElementResolutionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 402, self.RULE_rule_RecordElementResolution)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2513
			self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 2514
			self.rule_ResolutionIndication()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_RecordResolutionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_RecordElementResolution(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_RecordElementResolutionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_RecordElementResolutionContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_RecordResolution

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_RecordResolution"):
				return visitor.visitRule_RecordResolution(self)
			else:
				return visitor.visitChildren(self)

	def rule_RecordResolution(self):

		localctx = VHDLParser.Rule_RecordResolutionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 404, self.RULE_rule_RecordResolution)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2516
			self.rule_RecordElementResolution()
			self.state = 2521
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == 151:
				self.state = 2517
				self.match(VHDLParser.TOK_COMMA)
				self.state = 2518
				self.rule_RecordElementResolution()
				self.state = 2523
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_RecordTypeDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_ElementDeclaration = None  # Rule_ElementDeclarationContext
			self.elements = list()  # of Rule_ElementDeclarationContexts
			self.name2 = None  # Token

		def KW_RECORD(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_RECORD)
			else:
				return self.getToken(VHDLParser.KW_RECORD, i)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def rule_ElementDeclaration(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ElementDeclarationContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ElementDeclarationContext, i)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_RecordTypeDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_RecordTypeDefinition"):
				return visitor.visitRule_RecordTypeDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_RecordTypeDefinition(self):

		localctx = VHDLParser.Rule_RecordTypeDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 406, self.RULE_rule_RecordTypeDefinition)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2524
			self.match(VHDLParser.KW_RECORD)
			self.state = 2528
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == 163:
				self.state = 2525
				localctx._rule_ElementDeclaration = self.rule_ElementDeclaration()
				localctx.elements.append(localctx._rule_ElementDeclaration)
				self.state = 2530
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 2531
			self.match(VHDLParser.KW_END)
			self.state = 2532
			self.match(VHDLParser.KW_RECORD)
			self.state = 2534
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 2533
				localctx.name2 = self.match(VHDLParser.LIT_IDENTIFIER)


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_RecordModeViewIndicationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_VIEW(self):
			return self.getToken(VHDLParser.KW_VIEW, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def KW_OF(self):
			return self.getToken(VHDLParser.KW_OF, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_RecordModeViewIndication

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_RecordModeViewIndication"):
				return visitor.visitRule_RecordModeViewIndication(self)
			else:
				return visitor.visitChildren(self)

	def rule_RecordModeViewIndication(self):

		localctx = VHDLParser.Rule_RecordModeViewIndicationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 408, self.RULE_rule_RecordModeViewIndication)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2536
			self.match(VHDLParser.KW_VIEW)
			self.state = 2537
			self.rule_Name(0)
			self.state = 2540
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 64:
				self.state = 2538
				self.match(VHDLParser.KW_OF)
				self.state = 2539
				self.rule_SubtypeIndication()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_RelativePathnameContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_PartialPathname(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PartialPathnameContext, 0)

		def TOK_CIRCUMFLEX(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_CIRCUMFLEX)
			else:
				return self.getToken(VHDLParser.TOK_CIRCUMFLEX, i)

		def TOK_DOT(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_DOT)
			else:
				return self.getToken(VHDLParser.TOK_DOT, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_RelativePathname

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_RelativePathname"):
				return visitor.visitRule_RelativePathname(self)
			else:
				return visitor.visitChildren(self)

	def rule_RelativePathname(self):

		localctx = VHDLParser.Rule_RelativePathnameContext(self, self._ctx, self.state)
		self.enterRule(localctx, 410, self.RULE_rule_RelativePathname)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2546
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == 156:
				self.state = 2542
				self.match(VHDLParser.TOK_CIRCUMFLEX)
				self.state = 2543
				self.match(VHDLParser.TOK_DOT)
				self.state = 2548
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 2549
			self.rule_PartialPathname()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ReportStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token
			self.reportExpression = None  # Rule_ExpressionContext
			self.severityExpression = None  # Rule_ExpressionContext

		def KW_REPORT(self):
			return self.getToken(VHDLParser.KW_REPORT, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_Expression(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ExpressionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, i)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def KW_SEVERITY(self):
			return self.getToken(VHDLParser.KW_SEVERITY, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ReportStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ReportStatement"):
				return visitor.visitRule_ReportStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_ReportStatement(self):

		localctx = VHDLParser.Rule_ReportStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 412, self.RULE_rule_ReportStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2553
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 2551
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 2552
				self.match(VHDLParser.TOK_COLON)

			self.state = 2555
			self.match(VHDLParser.KW_REPORT)
			self.state = 2556
			localctx.reportExpression = self.rule_Expression(0)
			self.state = 2559
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 91:
				self.state = 2557
				self.match(VHDLParser.KW_SEVERITY)
				self.state = 2558
				localctx.severityExpression = self.rule_Expression(0)

			self.state = 2561
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ResolutionIndicationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def rule_ElementResolution(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ElementResolutionContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ResolutionIndication

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ResolutionIndication"):
				return visitor.visitRule_ResolutionIndication(self)
			else:
				return visitor.visitChildren(self)

	def rule_ResolutionIndication(self):

		localctx = VHDLParser.Rule_ResolutionIndicationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 414, self.RULE_rule_ResolutionIndication)
		try:
			self.state = 2568
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [147, 161, 162, 163]:
				self.enterOuterAlt(localctx, 1)
				self.state = 2563
				self.rule_Name(0)
				pass
			elif token in [143]:
				self.enterOuterAlt(localctx, 2)
				self.state = 2564
				self.match(VHDLParser.TOK_LP)
				self.state = 2565
				self.rule_ElementResolution()
				self.state = 2566
				self.match(VHDLParser.TOK_RP)
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ReturnStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_PlainReturnStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PlainReturnStatementContext, 0)

		def rule_ValueReturnStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ValueReturnStatementContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ReturnStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ReturnStatement"):
				return visitor.visitRule_ReturnStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_ReturnStatement(self):

		localctx = VHDLParser.Rule_ReturnStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 416, self.RULE_rule_ReturnStatement)
		try:
			self.state = 2572
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 286, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 2570
				self.rule_PlainReturnStatement()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 2571
				self.rule_ValueReturnStatement()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ScalarIncompleteTypeDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def TOK_BOX(self):
			return self.getToken(VHDLParser.TOK_BOX, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ScalarIncompleteTypeDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ScalarIncompleteTypeDefinition"):
				return visitor.visitRule_ScalarIncompleteTypeDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_ScalarIncompleteTypeDefinition(self):

		localctx = VHDLParser.Rule_ScalarIncompleteTypeDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 418, self.RULE_rule_ScalarIncompleteTypeDefinition)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2574
			self.match(VHDLParser.TOK_BOX)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ScalarTypeDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_EnumerationTypeDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_EnumerationTypeDefinitionContext, 0)

		def rule_IntegerTypeDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IntegerTypeDefinitionContext, 0)

		def rule_FloatingTypeDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FloatingTypeDefinitionContext, 0)

		def rule_PhysicalTypeDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PhysicalTypeDefinitionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ScalarTypeDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ScalarTypeDefinition"):
				return visitor.visitRule_ScalarTypeDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_ScalarTypeDefinition(self):

		localctx = VHDLParser.Rule_ScalarTypeDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 420, self.RULE_rule_ScalarTypeDefinition)
		try:
			self.state = 2580
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 287, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 2576
				self.rule_EnumerationTypeDefinition()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 2577
				self.rule_IntegerTypeDefinition()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 2578
				self.rule_FloatingTypeDefinition()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 2579
				self.rule_PhysicalTypeDefinition()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SecondaryUnitDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.name = None  # Token
			self.value = None  # Token
			self.unit = None  # Token

		def OP_EQ(self):
			return self.getToken(VHDLParser.OP_EQ, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def LIT_ABSTRACT(self):
			return self.getToken(VHDLParser.LIT_ABSTRACT, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SecondaryUnitDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SecondaryUnitDeclaration"):
				return visitor.visitRule_SecondaryUnitDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_SecondaryUnitDeclaration(self):

		localctx = VHDLParser.Rule_SecondaryUnitDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 422, self.RULE_rule_SecondaryUnitDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2582
			localctx.name = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 2583
			self.match(VHDLParser.OP_EQ)
			self.state = 2585
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 159:
				self.state = 2584
				localctx.value = self.match(VHDLParser.LIT_ABSTRACT)

			self.state = 2587
			localctx.unit = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 2588
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SelectedExpressionsContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_Expression(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ExpressionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, i)

		def KW_WHEN(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_WHEN)
			else:
				return self.getToken(VHDLParser.KW_WHEN, i)

		def rule_Choices(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ChoicesContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ChoicesContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SelectedExpressions

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SelectedExpressions"):
				return visitor.visitRule_SelectedExpressions(self)
			else:
				return visitor.visitChildren(self)

	def rule_SelectedExpressions(self):

		localctx = VHDLParser.Rule_SelectedExpressionsContext(self, self._ctx, self.state)
		self.enterRule(localctx, 424, self.RULE_rule_SelectedExpressions)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2597
			self._errHandler.sync(self)
			_alt = self._interp.adaptivePredict(self._input, 289, self._ctx)
			while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
				if _alt == 1:
					self.state = 2590
					self.rule_Expression(0)
					self.state = 2591
					self.match(VHDLParser.KW_WHEN)
					self.state = 2592
					self.rule_Choices()
					self.state = 2593
					self.match(VHDLParser.TOK_COMMA)
				self.state = 2599
				self._errHandler.sync(self)
				_alt = self._interp.adaptivePredict(self._input, 289, self._ctx)

			self.state = 2600
			self.rule_Expression(0)
			self.state = 2601
			self.match(VHDLParser.KW_WHEN)
			self.state = 2602
			self.rule_Choices()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SelectedForceAssignmentContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.forceMode = None  # Token

		def KW_WITH(self):
			return self.getToken(VHDLParser.KW_WITH, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def KW_SELECT(self):
			return self.getToken(VHDLParser.KW_SELECT, 0)

		def rule_Target(self):
			return self.getTypedRuleContext(VHDLParser.Rule_TargetContext, 0)

		def TOK_SIG_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_SIG_ASSIGN, 0)

		def KW_FORCE(self):
			return self.getToken(VHDLParser.KW_FORCE, 0)

		def rule_SelectedExpressions(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SelectedExpressionsContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def KW_IN(self):
			return self.getToken(VHDLParser.KW_IN, 0)

		def KW_OUT(self):
			return self.getToken(VHDLParser.KW_OUT, 0)

		def TOK_QUESTION(self):
			return self.getToken(VHDLParser.TOK_QUESTION, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SelectedForceAssignment

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SelectedForceAssignment"):
				return visitor.visitRule_SelectedForceAssignment(self)
			else:
				return visitor.visitChildren(self)

	def rule_SelectedForceAssignment(self):

		localctx = VHDLParser.Rule_SelectedForceAssignmentContext(self, self._ctx, self.state)
		self.enterRule(localctx, 426, self.RULE_rule_SelectedForceAssignment)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2604
			self.match(VHDLParser.KW_WITH)
			self.state = 2605
			self.rule_Expression(0)
			self.state = 2606
			self.match(VHDLParser.KW_SELECT)
			self.state = 2608
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 154:
				self.state = 2607
				self.match(VHDLParser.TOK_QUESTION)

			self.state = 2610
			self.rule_Target()
			self.state = 2611
			self.match(VHDLParser.TOK_SIG_ASSIGN)
			self.state = 2612
			self.match(VHDLParser.KW_FORCE)
			self.state = 2613
			localctx.forceMode = self._input.LT(1)
			_la = self._input.LA(1)
			if not (_la == 47 or _la == 69):
				localctx.forceMode = self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
			self.state = 2614
			self.rule_SelectedExpressions()
			self.state = 2615
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SelectedName2Context(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._LIT_IDENTIFIER = None  # Token
			self.names = list()  # of Tokens

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def TOK_DOT(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_DOT)
			else:
				return self.getToken(VHDLParser.TOK_DOT, i)

		def KW_ALL(self):
			return self.getToken(VHDLParser.KW_ALL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SelectedName2

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SelectedName2"):
				return visitor.visitRule_SelectedName2(self)
			else:
				return visitor.visitChildren(self)

	def rule_SelectedName2(self):

		localctx = VHDLParser.Rule_SelectedName2Context(self, self._ctx, self.state)
		self.enterRule(localctx, 428, self.RULE_rule_SelectedName2)
		self._la = 0  # Token type
		try:
			self.state = 2634
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 293, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 2617
				localctx._LIT_IDENTIFIER = self.match(VHDLParser.LIT_IDENTIFIER)
				localctx.names.append(localctx._LIT_IDENTIFIER)
				self.state = 2620
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				while True:
					self.state = 2618
					self.match(VHDLParser.TOK_DOT)
					self.state = 2619
					localctx._LIT_IDENTIFIER = self.match(VHDLParser.LIT_IDENTIFIER)
					localctx.names.append(localctx._LIT_IDENTIFIER)
					self.state = 2622
					self._errHandler.sync(self)
					_la = self._input.LA(1)
					if not (_la == 153):
						break

				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 2624
				localctx._LIT_IDENTIFIER = self.match(VHDLParser.LIT_IDENTIFIER)
				localctx.names.append(localctx._LIT_IDENTIFIER)
				self.state = 2629
				self._errHandler.sync(self)
				_alt = self._interp.adaptivePredict(self._input, 292, self._ctx)
				while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
					if _alt == 1:
						self.state = 2625
						self.match(VHDLParser.TOK_DOT)
						self.state = 2626
						localctx._LIT_IDENTIFIER = self.match(VHDLParser.LIT_IDENTIFIER)
						localctx.names.append(localctx._LIT_IDENTIFIER)
					self.state = 2631
					self._errHandler.sync(self)
					_alt = self._interp.adaptivePredict(self._input, 292, self._ctx)

				self.state = 2632
				self.match(VHDLParser.TOK_DOT)
				self.state = 2633
				self.match(VHDLParser.KW_ALL)
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SelectedSignalAssignmentContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_SelectedWaveformAssignment(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SelectedWaveformAssignmentContext, 0)

		def rule_SelectedForceAssignment(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SelectedForceAssignmentContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SelectedSignalAssignment

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SelectedSignalAssignment"):
				return visitor.visitRule_SelectedSignalAssignment(self)
			else:
				return visitor.visitChildren(self)

	def rule_SelectedSignalAssignment(self):

		localctx = VHDLParser.Rule_SelectedSignalAssignmentContext(self, self._ctx, self.state)
		self.enterRule(localctx, 430, self.RULE_rule_SelectedSignalAssignment)
		try:
			self.state = 2638
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 294, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 2636
				self.rule_SelectedWaveformAssignment()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 2637
				self.rule_SelectedForceAssignment()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SelectedVariableAssignmentContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.expression = None  # Rule_ExpressionContext
			self.target = None  # Rule_TargetContext

		def KW_WITH(self):
			return self.getToken(VHDLParser.KW_WITH, 0)

		def KW_SELECT(self):
			return self.getToken(VHDLParser.KW_SELECT, 0)

		def TOK_VAR_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_VAR_ASSIGN, 0)

		def rule_SelectedExpressions(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SelectedExpressionsContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def rule_Target(self):
			return self.getTypedRuleContext(VHDLParser.Rule_TargetContext, 0)

		def TOK_QUESTION(self):
			return self.getToken(VHDLParser.TOK_QUESTION, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SelectedVariableAssignment

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SelectedVariableAssignment"):
				return visitor.visitRule_SelectedVariableAssignment(self)
			else:
				return visitor.visitChildren(self)

	def rule_SelectedVariableAssignment(self):

		localctx = VHDLParser.Rule_SelectedVariableAssignmentContext(self, self._ctx, self.state)
		self.enterRule(localctx, 432, self.RULE_rule_SelectedVariableAssignment)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2640
			self.match(VHDLParser.KW_WITH)
			self.state = 2641
			localctx.expression = self.rule_Expression(0)
			self.state = 2642
			self.match(VHDLParser.KW_SELECT)
			self.state = 2644
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 154:
				self.state = 2643
				self.match(VHDLParser.TOK_QUESTION)

			self.state = 2646
			localctx.target = self.rule_Target()
			self.state = 2647
			self.match(VHDLParser.TOK_VAR_ASSIGN)
			self.state = 2648
			self.rule_SelectedExpressions()
			self.state = 2649
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SelectedWaveformAssignmentContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.expression = None  # Rule_ExpressionContext
			self.target = None  # Rule_TargetContext
			self.waveform = None  # Rule_SelectedWaveformsContext

		def KW_WITH(self):
			return self.getToken(VHDLParser.KW_WITH, 0)

		def KW_SELECT(self):
			return self.getToken(VHDLParser.KW_SELECT, 0)

		def TOK_SIG_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_SIG_ASSIGN, 0)

		def rule_DelayMechanism(self):
			return self.getTypedRuleContext(VHDLParser.Rule_DelayMechanismContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def rule_Target(self):
			return self.getTypedRuleContext(VHDLParser.Rule_TargetContext, 0)

		def rule_SelectedWaveforms(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SelectedWaveformsContext, 0)

		def TOK_QUESTION(self):
			return self.getToken(VHDLParser.TOK_QUESTION, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SelectedWaveformAssignment

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SelectedWaveformAssignment"):
				return visitor.visitRule_SelectedWaveformAssignment(self)
			else:
				return visitor.visitChildren(self)

	def rule_SelectedWaveformAssignment(self):

		localctx = VHDLParser.Rule_SelectedWaveformAssignmentContext(self, self._ctx, self.state)
		self.enterRule(localctx, 434, self.RULE_rule_SelectedWaveformAssignment)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2651
			self.match(VHDLParser.KW_WITH)
			self.state = 2652
			localctx.expression = self.rule_Expression(0)
			self.state = 2653
			self.match(VHDLParser.KW_SELECT)
			self.state = 2655
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 154:
				self.state = 2654
				self.match(VHDLParser.TOK_QUESTION)

			self.state = 2657
			localctx.target = self.rule_Target()
			self.state = 2658
			self.match(VHDLParser.TOK_SIG_ASSIGN)
			self.state = 2659
			self.rule_DelayMechanism()
			self.state = 2660
			localctx.waveform = self.rule_SelectedWaveforms()
			self.state = 2661
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SelectedWaveformsContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_Waveform(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_WaveformContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_WaveformContext, i)

		def KW_WHEN(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_WHEN)
			else:
				return self.getToken(VHDLParser.KW_WHEN, i)

		def rule_Choices(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ChoicesContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ChoicesContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SelectedWaveforms

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SelectedWaveforms"):
				return visitor.visitRule_SelectedWaveforms(self)
			else:
				return visitor.visitChildren(self)

	def rule_SelectedWaveforms(self):

		localctx = VHDLParser.Rule_SelectedWaveformsContext(self, self._ctx, self.state)
		self.enterRule(localctx, 436, self.RULE_rule_SelectedWaveforms)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2670
			self._errHandler.sync(self)
			_alt = self._interp.adaptivePredict(self._input, 297, self._ctx)
			while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
				if _alt == 1:
					self.state = 2663
					self.rule_Waveform()
					self.state = 2664
					self.match(VHDLParser.KW_WHEN)
					self.state = 2665
					self.rule_Choices()
					self.state = 2666
					self.match(VHDLParser.TOK_COMMA)
				self.state = 2672
				self._errHandler.sync(self)
				_alt = self._interp.adaptivePredict(self._input, 297, self._ctx)

			self.state = 2673
			self.rule_Waveform()
			self.state = 2674
			self.match(VHDLParser.KW_WHEN)
			self.state = 2675
			self.rule_Choices()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SensitivityClauseContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.sensitivityList = None  # Rule_SensitivityListContext

		def KW_ON(self):
			return self.getToken(VHDLParser.KW_ON, 0)

		def rule_SensitivityList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SensitivityListContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SensitivityClause

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SensitivityClause"):
				return visitor.visitRule_SensitivityClause(self)
			else:
				return visitor.visitChildren(self)

	def rule_SensitivityClause(self):

		localctx = VHDLParser.Rule_SensitivityClauseContext(self, self._ctx, self.state)
		self.enterRule(localctx, 438, self.RULE_rule_SensitivityClause)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2677
			self.match(VHDLParser.KW_ON)
			self.state = 2678
			localctx.sensitivityList = self.rule_SensitivityList()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SensitivityListContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_Name = None  # Rule_NameContext
			self.name = list()  # of Rule_NameContexts

		def rule_Name(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_NameContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_NameContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SensitivityList

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SensitivityList"):
				return visitor.visitRule_SensitivityList(self)
			else:
				return visitor.visitChildren(self)

	def rule_SensitivityList(self):

		localctx = VHDLParser.Rule_SensitivityListContext(self, self._ctx, self.state)
		self.enterRule(localctx, 440, self.RULE_rule_SensitivityList)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2680
			localctx._rule_Name = self.rule_Name(0)
			localctx.name.append(localctx._rule_Name)
			self.state = 2685
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == 151:
				self.state = 2681
				self.match(VHDLParser.TOK_COMMA)
				self.state = 2682
				localctx._rule_Name = self.rule_Name(0)
				localctx.name.append(localctx._rule_Name)
				self.state = 2687
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SequentialBlockStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token
			self._rule_ProcessDeclarativeItem = None  # Rule_ProcessDeclarativeItemContext
			self.declaredItems = list()  # of Rule_ProcessDeclarativeItemContexts
			self._rule_SequentialStatement = None  # Rule_SequentialStatementContext
			self.statements = list()  # of Rule_SequentialStatementContexts
			self.label2 = None  # Token

		def KW_BLOCK(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_BLOCK)
			else:
				return self.getToken(VHDLParser.KW_BLOCK, i)

		def KW_BEGIN(self):
			return self.getToken(VHDLParser.KW_BEGIN, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def rule_ProcessDeclarativeItem(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ProcessDeclarativeItemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ProcessDeclarativeItemContext, i)

		def rule_SequentialStatement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_SequentialStatementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_SequentialStatementContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SequentialBlockStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SequentialBlockStatement"):
				return visitor.visitRule_SequentialBlockStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_SequentialBlockStatement(self):

		localctx = VHDLParser.Rule_SequentialBlockStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 442, self.RULE_rule_SequentialBlockStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2690
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 2688
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 2689
				self.match(VHDLParser.TOK_COLON)

			self.state = 2692
			self.match(VHDLParser.KW_BLOCK)
			self.state = 2694
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 50:
				self.state = 2693
				self.match(VHDLParser.KW_IS)

			self.state = 2699
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & 88579439100416) != 0) or (
				(((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 842086220065) != 0):
				self.state = 2696
				localctx._rule_ProcessDeclarativeItem = self.rule_ProcessDeclarativeItem()
				localctx.declaredItems.append(localctx._rule_ProcessDeclarativeItem)
				self.state = 2701
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 2702
			self.match(VHDLParser.KW_BEGIN)
			self.state = 2706
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & -8052400777563193344) != 0) or (
				(((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & 4899916406390259715) != 0) or (
				(((_la - 161)) & ~0x3f) == 0 and ((1 << (_la - 161)) & 7) != 0):
				self.state = 2703
				localctx._rule_SequentialStatement = self.rule_SequentialStatement()
				localctx.statements.append(localctx._rule_SequentialStatement)
				self.state = 2708
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 2709
			self.match(VHDLParser.KW_END)
			self.state = 2711
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 18:
				self.state = 2710
				self.match(VHDLParser.KW_BLOCK)

			self.state = 2714
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 2713
				localctx.label2 = self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 2716
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SequentialStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_WaitStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_WaitStatementContext, 0)

		def rule_AssertionStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AssertionStatementContext, 0)

		def rule_ReportStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ReportStatementContext, 0)

		def rule_SignalAssignmentStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SignalAssignmentStatementContext, 0)

		def rule_VariableAssignmentStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_VariableAssignmentStatementContext, 0)

		def rule_ProcedureCallStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ProcedureCallStatementContext, 0)

		def rule_IfStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IfStatementContext, 0)

		def rule_CaseStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_CaseStatementContext, 0)

		def rule_LoopStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_LoopStatementContext, 0)

		def rule_NextStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NextStatementContext, 0)

		def rule_ExitStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExitStatementContext, 0)

		def rule_ReturnStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ReturnStatementContext, 0)

		def rule_NullStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NullStatementContext, 0)

		def rule_SequentialBlockStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SequentialBlockStatementContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SequentialStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SequentialStatement"):
				return visitor.visitRule_SequentialStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_SequentialStatement(self):

		localctx = VHDLParser.Rule_SequentialStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 444, self.RULE_rule_SequentialStatement)
		try:
			self.state = 2732
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 305, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 2718
				self.rule_WaitStatement()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 2719
				self.rule_AssertionStatement()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 2720
				self.rule_ReportStatement()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 2721
				self.rule_SignalAssignmentStatement()
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 2722
				self.rule_VariableAssignmentStatement()
				pass

			elif la_ == 6:
				self.enterOuterAlt(localctx, 6)
				self.state = 2723
				self.rule_ProcedureCallStatement()
				pass

			elif la_ == 7:
				self.enterOuterAlt(localctx, 7)
				self.state = 2724
				self.rule_IfStatement()
				pass

			elif la_ == 8:
				self.enterOuterAlt(localctx, 8)
				self.state = 2725
				self.rule_CaseStatement()
				pass

			elif la_ == 9:
				self.enterOuterAlt(localctx, 9)
				self.state = 2726
				self.rule_LoopStatement()
				pass

			elif la_ == 10:
				self.enterOuterAlt(localctx, 10)
				self.state = 2727
				self.rule_NextStatement()
				pass

			elif la_ == 11:
				self.enterOuterAlt(localctx, 11)
				self.state = 2728
				self.rule_ExitStatement()
				pass

			elif la_ == 12:
				self.enterOuterAlt(localctx, 12)
				self.state = 2729
				self.rule_ReturnStatement()
				pass

			elif la_ == 13:
				self.enterOuterAlt(localctx, 13)
				self.state = 2730
				self.rule_NullStatement()
				pass

			elif la_ == 14:
				self.enterOuterAlt(localctx, 14)
				self.state = 2731
				self.rule_SequentialBlockStatement()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SignalAssignmentStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token

		def rule_SimpleSignalAssignment(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SimpleSignalAssignmentContext, 0)

		def rule_ConditionalSignalAssignment(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConditionalSignalAssignmentContext, 0)

		def rule_SelectedSignalAssignment(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SelectedSignalAssignmentContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SignalAssignmentStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SignalAssignmentStatement"):
				return visitor.visitRule_SignalAssignmentStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_SignalAssignmentStatement(self):

		localctx = VHDLParser.Rule_SignalAssignmentStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 446, self.RULE_rule_SignalAssignmentStatement)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2736
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 306, self._ctx)
			if la_ == 1:
				self.state = 2734
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 2735
				self.match(VHDLParser.TOK_COLON)

			self.state = 2741
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 307, self._ctx)
			if la_ == 1:
				self.state = 2738
				self.rule_SimpleSignalAssignment()
				pass

			elif la_ == 2:
				self.state = 2739
				self.rule_ConditionalSignalAssignment()
				pass

			elif la_ == 3:
				self.state = 2740
				self.rule_SelectedSignalAssignment()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SignalDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.names = None  # Rule_IdentifierListContext
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext
			self.signalKind = None  # Token
			self.expression = None  # Rule_ExpressionContext

		def KW_SIGNAL(self):
			return self.getToken(VHDLParser.KW_SIGNAL, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_IdentifierList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IdentifierListContext, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def TOK_VAR_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_VAR_ASSIGN, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def KW_REGISTER(self):
			return self.getToken(VHDLParser.KW_REGISTER, 0)

		def KW_BUS(self):
			return self.getToken(VHDLParser.KW_BUS, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SignalDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SignalDeclaration"):
				return visitor.visitRule_SignalDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_SignalDeclaration(self):

		localctx = VHDLParser.Rule_SignalDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 448, self.RULE_rule_SignalDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2743
			self.match(VHDLParser.KW_SIGNAL)
			self.state = 2744
			localctx.names = self.rule_IdentifierList()
			self.state = 2745
			self.match(VHDLParser.TOK_COLON)
			self.state = 2746
			localctx.subtypeIndication = self.rule_SubtypeIndication()
			self.state = 2748
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 21 or _la == 81:
				self.state = 2747
				localctx.signalKind = self._input.LT(1)
				_la = self._input.LA(1)
				if not (_la == 21 or _la == 81):
					localctx.signalKind = self._errHandler.recoverInline(self)
				else:
					self._errHandler.reportMatch(self)
					self.consume()

			self.state = 2752
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 141:
				self.state = 2750
				self.match(VHDLParser.TOK_VAR_ASSIGN)
				self.state = 2751
				localctx.expression = self.rule_Expression(0)

			self.state = 2754
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SignalListContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_Name = None  # Rule_NameContext
			self.names = list()  # of Rule_NameContexts
			self.others = None  # Token
			self.all_ = None  # Token

		def rule_Name(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_NameContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_NameContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def KW_OTHERS(self):
			return self.getToken(VHDLParser.KW_OTHERS, 0)

		def KW_ALL(self):
			return self.getToken(VHDLParser.KW_ALL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SignalList

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SignalList"):
				return visitor.visitRule_SignalList(self)
			else:
				return visitor.visitChildren(self)

	def rule_SignalList(self):

		localctx = VHDLParser.Rule_SignalListContext(self, self._ctx, self.state)
		self.enterRule(localctx, 450, self.RULE_rule_SignalList)
		self._la = 0  # Token type
		try:
			self.state = 2766
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [147, 161, 162, 163]:
				self.enterOuterAlt(localctx, 1)
				self.state = 2756
				localctx._rule_Name = self.rule_Name(0)
				localctx.names.append(localctx._rule_Name)
				self.state = 2761
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				while _la == 151:
					self.state = 2757
					self.match(VHDLParser.TOK_COMMA)
					self.state = 2758
					localctx._rule_Name = self.rule_Name(0)
					localctx.names.append(localctx._rule_Name)
					self.state = 2763
					self._errHandler.sync(self)
					_la = self._input.LA(1)

				pass
			elif token in [68]:
				self.enterOuterAlt(localctx, 2)
				self.state = 2764
				localctx.others = self.match(VHDLParser.KW_OTHERS)
				pass
			elif token in [10]:
				self.enterOuterAlt(localctx, 3)
				self.state = 2765
				localctx.all_ = self.match(VHDLParser.KW_ALL)
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SignatureContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_Name = None  # Rule_NameContext
			self.names = list()  # of Rule_NameContexts
			self.returnName = None  # Rule_NameContext

		def TOK_LB(self):
			return self.getToken(VHDLParser.TOK_LB, 0)

		def TOK_RB(self):
			return self.getToken(VHDLParser.TOK_RB, 0)

		def KW_RETURN(self):
			return self.getToken(VHDLParser.KW_RETURN, 0)

		def rule_Name(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_NameContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_NameContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Signature

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Signature"):
				return visitor.visitRule_Signature(self)
			else:
				return visitor.visitChildren(self)

	def rule_Signature(self):

		localctx = VHDLParser.Rule_SignatureContext(self, self._ctx, self.state)
		self.enterRule(localctx, 452, self.RULE_rule_Signature)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2768
			self.match(VHDLParser.TOK_LB)
			self.state = 2777
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if ((((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & 114689) != 0):
				self.state = 2769
				localctx._rule_Name = self.rule_Name(0)
				localctx.names.append(localctx._rule_Name)
				self.state = 2774
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				while _la == 151:
					self.state = 2770
					self.match(VHDLParser.TOK_COMMA)
					self.state = 2771
					localctx._rule_Name = self.rule_Name(0)
					localctx.names.append(localctx._rule_Name)
					self.state = 2776
					self._errHandler.sync(self)
					_la = self._input.LA(1)

			self.state = 2781
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 86:
				self.state = 2779
				self.match(VHDLParser.KW_RETURN)
				self.state = 2780
				localctx.returnName = self.rule_Name(0)

			self.state = 2783
			self.match(VHDLParser.TOK_RB)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SimpleConfigurationSpecificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_FOR(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_FOR)
			else:
				return self.getToken(VHDLParser.KW_FOR, i)

		def rule_ComponentSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ComponentSpecificationContext, 0)

		def rule_BindingIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_BindingIndicationContext, 0)

		def TOK_SEMICOL(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_SEMICOL)
			else:
				return self.getToken(VHDLParser.TOK_SEMICOL, i)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SimpleConfigurationSpecification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SimpleConfigurationSpecification"):
				return visitor.visitRule_SimpleConfigurationSpecification(self)
			else:
				return visitor.visitChildren(self)

	def rule_SimpleConfigurationSpecification(self):

		localctx = VHDLParser.Rule_SimpleConfigurationSpecificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 454, self.RULE_rule_SimpleConfigurationSpecification)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2785
			self.match(VHDLParser.KW_FOR)
			self.state = 2786
			self.rule_ComponentSpecification()
			self.state = 2787
			self.rule_BindingIndication()
			self.state = 2788
			self.match(VHDLParser.TOK_SEMICOL)
			self.state = 2792
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 33:
				self.state = 2789
				self.match(VHDLParser.KW_END)
				self.state = 2790
				self.match(VHDLParser.KW_FOR)
				self.state = 2791
				self.match(VHDLParser.TOK_SEMICOL)


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SimpleForceAssignmentContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.forceMode = None  # Token

		def rule_Target(self):
			return self.getTypedRuleContext(VHDLParser.Rule_TargetContext, 0)

		def TOK_SIG_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_SIG_ASSIGN, 0)

		def KW_FORCE(self):
			return self.getToken(VHDLParser.KW_FORCE, 0)

		def rule_ConditionalOrUnaffectedExpression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConditionalOrUnaffectedExpressionContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def KW_IN(self):
			return self.getToken(VHDLParser.KW_IN, 0)

		def KW_OUT(self):
			return self.getToken(VHDLParser.KW_OUT, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SimpleForceAssignment

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SimpleForceAssignment"):
				return visitor.visitRule_SimpleForceAssignment(self)
			else:
				return visitor.visitChildren(self)

	def rule_SimpleForceAssignment(self):

		localctx = VHDLParser.Rule_SimpleForceAssignmentContext(self, self._ctx, self.state)
		self.enterRule(localctx, 456, self.RULE_rule_SimpleForceAssignment)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2794
			self.rule_Target()
			self.state = 2795
			self.match(VHDLParser.TOK_SIG_ASSIGN)
			self.state = 2796
			self.match(VHDLParser.KW_FORCE)
			self.state = 2797
			localctx.forceMode = self._input.LT(1)
			_la = self._input.LA(1)
			if not (_la == 47 or _la == 69):
				localctx.forceMode = self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
			self.state = 2798
			self.rule_ConditionalOrUnaffectedExpression()
			self.state = 2799
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SimpleModeIndicationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_InterfaceTypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_InterfaceTypeIndicationContext, 0)

		def rule_Mode(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ModeContext, 0)

		def KW_BUS(self):
			return self.getToken(VHDLParser.KW_BUS, 0)

		def TOK_VAR_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_VAR_ASSIGN, 0)

		def rule_ConditionalExpression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConditionalExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SimpleModeIndication

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SimpleModeIndication"):
				return visitor.visitRule_SimpleModeIndication(self)
			else:
				return visitor.visitChildren(self)

	def rule_SimpleModeIndication(self):

		localctx = VHDLParser.Rule_SimpleModeIndicationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 458, self.RULE_rule_SimpleModeIndication)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2802
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 562959214444545) != 0):
				self.state = 2801
				self.rule_Mode()

			self.state = 2804
			self.rule_InterfaceTypeIndication()
			self.state = 2806
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 21:
				self.state = 2805
				self.match(VHDLParser.KW_BUS)

			self.state = 2810
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 141:
				self.state = 2808
				self.match(VHDLParser.TOK_VAR_ASSIGN)
				self.state = 2809
				self.rule_ConditionalExpression()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SimpleRangeContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.leftBound = None  # Rule_ExpressionContext
			self.direction = None  # Rule_DirectionContext
			self.rightBound = None  # Rule_ExpressionContext

		def rule_Expression(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ExpressionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, i)

		def rule_Direction(self):
			return self.getTypedRuleContext(VHDLParser.Rule_DirectionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SimpleRange

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SimpleRange"):
				return visitor.visitRule_SimpleRange(self)
			else:
				return visitor.visitChildren(self)

	def rule_SimpleRange(self):

		localctx = VHDLParser.Rule_SimpleRangeContext(self, self._ctx, self.state)
		self.enterRule(localctx, 460, self.RULE_rule_SimpleRange)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2812
			localctx.leftBound = self.rule_Expression(0)
			self.state = 2813
			localctx.direction = self.rule_Direction()
			self.state = 2814
			localctx.rightBound = self.rule_Expression(0)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SimpleReleaseAssignmentContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.forceMode = None  # Token

		def rule_Target(self):
			return self.getTypedRuleContext(VHDLParser.Rule_TargetContext, 0)

		def TOK_SIG_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_SIG_ASSIGN, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def KW_IN(self):
			return self.getToken(VHDLParser.KW_IN, 0)

		def KW_OUT(self):
			return self.getToken(VHDLParser.KW_OUT, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SimpleReleaseAssignment

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SimpleReleaseAssignment"):
				return visitor.visitRule_SimpleReleaseAssignment(self)
			else:
				return visitor.visitChildren(self)

	def rule_SimpleReleaseAssignment(self):

		localctx = VHDLParser.Rule_SimpleReleaseAssignmentContext(self, self._ctx, self.state)
		self.enterRule(localctx, 462, self.RULE_rule_SimpleReleaseAssignment)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2816
			self.rule_Target()
			self.state = 2817
			self.match(VHDLParser.TOK_SIG_ASSIGN)
			self.state = 2818
			localctx.forceMode = self._input.LT(1)
			_la = self._input.LA(1)
			if not (_la == 47 or _la == 69):
				localctx.forceMode = self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
			self.state = 2819
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SimpleSignalAssignmentContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_SimpleWaveformAssignment(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SimpleWaveformAssignmentContext, 0)

		def rule_SimpleForceAssignment(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SimpleForceAssignmentContext, 0)

		def rule_SimpleReleaseAssignment(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SimpleReleaseAssignmentContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SimpleSignalAssignment

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SimpleSignalAssignment"):
				return visitor.visitRule_SimpleSignalAssignment(self)
			else:
				return visitor.visitChildren(self)

	def rule_SimpleSignalAssignment(self):

		localctx = VHDLParser.Rule_SimpleSignalAssignmentContext(self, self._ctx, self.state)
		self.enterRule(localctx, 464, self.RULE_rule_SimpleSignalAssignment)
		try:
			self.state = 2824
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 319, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 2821
				self.rule_SimpleWaveformAssignment()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 2822
				self.rule_SimpleForceAssignment()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 2823
				self.rule_SimpleReleaseAssignment()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SimpleWaveformAssignmentContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_Target(self):
			return self.getTypedRuleContext(VHDLParser.Rule_TargetContext, 0)

		def TOK_SIG_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_SIG_ASSIGN, 0)

		def rule_Waveform(self):
			return self.getTypedRuleContext(VHDLParser.Rule_WaveformContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_DelayMechanism(self):
			return self.getTypedRuleContext(VHDLParser.Rule_DelayMechanismContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SimpleWaveformAssignment

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SimpleWaveformAssignment"):
				return visitor.visitRule_SimpleWaveformAssignment(self)
			else:
				return visitor.visitChildren(self)

	def rule_SimpleWaveformAssignment(self):

		localctx = VHDLParser.Rule_SimpleWaveformAssignmentContext(self, self._ctx, self.state)
		self.enterRule(localctx, 466, self.RULE_rule_SimpleWaveformAssignment)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2826
			self.rule_Target()
			self.state = 2827
			self.match(VHDLParser.TOK_SIG_ASSIGN)
			self.state = 2829
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 36028814198833153) != 0):
				self.state = 2828
				self.rule_DelayMechanism()

			self.state = 2831
			self.rule_Waveform()
			self.state = 2832
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SimpleVariableAssignmentContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_Target(self):
			return self.getTypedRuleContext(VHDLParser.Rule_TargetContext, 0)

		def TOK_VAR_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_VAR_ASSIGN, 0)

		def rule_ConditionalOrUnaffectedExpression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConditionalOrUnaffectedExpressionContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SimpleVariableAssignment

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SimpleVariableAssignment"):
				return visitor.visitRule_SimpleVariableAssignment(self)
			else:
				return visitor.visitChildren(self)

	def rule_SimpleVariableAssignment(self):

		localctx = VHDLParser.Rule_SimpleVariableAssignmentContext(self, self._ctx, self.state)
		self.enterRule(localctx, 468, self.RULE_rule_SimpleVariableAssignment)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2834
			self.rule_Target()
			self.state = 2835
			self.match(VHDLParser.TOK_VAR_ASSIGN)
			self.state = 2836
			self.rule_ConditionalOrUnaffectedExpression()
			self.state = 2837
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SubprogramBodyContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_SubprogramDeclarativeItem = None  # Rule_SubprogramDeclarativeItemContext
			self.declaredItems = list()  # of Rule_SubprogramDeclarativeItemContexts
			self._rule_SequentialStatement = None  # Rule_SequentialStatementContext
			self.statements = list()  # of Rule_SequentialStatementContexts

		def rule_SubprogramSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramSpecificationContext, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def KW_BEGIN(self):
			return self.getToken(VHDLParser.KW_BEGIN, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_SubprogramKind(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramKindContext, 0)

		def rule_Designator(self):
			return self.getTypedRuleContext(VHDLParser.Rule_DesignatorContext, 0)

		def rule_SubprogramDeclarativeItem(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_SubprogramDeclarativeItemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_SubprogramDeclarativeItemContext, i)

		def rule_SequentialStatement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_SequentialStatementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_SequentialStatementContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SubprogramBody

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SubprogramBody"):
				return visitor.visitRule_SubprogramBody(self)
			else:
				return visitor.visitChildren(self)

	def rule_SubprogramBody(self):

		localctx = VHDLParser.Rule_SubprogramBodyContext(self, self._ctx, self.state)
		self.enterRule(localctx, 470, self.RULE_rule_SubprogramBody)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2839
			self.rule_SubprogramSpecification()
			self.state = 2840
			self.match(VHDLParser.KW_IS)
			self.state = 2844
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & 88579439100416) != 0) or (
				(((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 842086220065) != 0):
				self.state = 2841
				localctx._rule_SubprogramDeclarativeItem = self.rule_SubprogramDeclarativeItem()
				localctx.declaredItems.append(localctx._rule_SubprogramDeclarativeItem)
				self.state = 2846
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 2847
			self.match(VHDLParser.KW_BEGIN)
			self.state = 2851
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & -8052400777563193344) != 0) or (
				(((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & 4899916406390259715) != 0) or (
				(((_la - 161)) & ~0x3f) == 0 and ((1 << (_la - 161)) & 7) != 0):
				self.state = 2848
				localctx._rule_SequentialStatement = self.rule_SequentialStatement()
				localctx.statements.append(localctx._rule_SequentialStatement)
				self.state = 2853
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 2854
			self.match(VHDLParser.KW_END)
			self.state = 2856
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 39 or _la == 75:
				self.state = 2855
				self.rule_SubprogramKind()

			self.state = 2859
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 162 or _la == 163:
				self.state = 2858
				self.rule_Designator()

			self.state = 2861
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SubprogramDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_SubprogramSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramSpecificationContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SubprogramDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SubprogramDeclaration"):
				return visitor.visitRule_SubprogramDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_SubprogramDeclaration(self):

		localctx = VHDLParser.Rule_SubprogramDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 472, self.RULE_rule_SubprogramDeclaration)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2863
			self.rule_SubprogramSpecification()
			self.state = 2864
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SubprogramDeclarativeItemContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_SubprogramDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramDeclarationContext, 0)

		def rule_SubprogramBody(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramBodyContext, 0)

		def rule_SubprogramInstantiationDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramInstantiationDeclarationContext, 0)

		def rule_PackageDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PackageDeclarationContext, 0)

		def rule_PackageBody(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PackageBodyContext, 0)

		def rule_PackageInstantiationDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PackageInstantiationDeclarationContext, 0)

		def rule_TypeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_TypeDeclarationContext, 0)

		def rule_SubtypeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeDeclarationContext, 0)

		def rule_ConstantDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConstantDeclarationContext, 0)

		def rule_VariableDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_VariableDeclarationContext, 0)

		def rule_FileDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FileDeclarationContext, 0)

		def rule_AliasDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AliasDeclarationContext, 0)

		def rule_AttributeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AttributeDeclarationContext, 0)

		def rule_AttributeSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AttributeSpecificationContext, 0)

		def rule_UseClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_UseClauseContext, 0)

		def rule_GroupTemplateDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GroupTemplateDeclarationContext, 0)

		def rule_GroupDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GroupDeclarationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SubprogramDeclarativeItem

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SubprogramDeclarativeItem"):
				return visitor.visitRule_SubprogramDeclarativeItem(self)
			else:
				return visitor.visitChildren(self)

	def rule_SubprogramDeclarativeItem(self):

		localctx = VHDLParser.Rule_SubprogramDeclarativeItemContext(self, self._ctx, self.state)
		self.enterRule(localctx, 474, self.RULE_rule_SubprogramDeclarativeItem)
		try:
			self.state = 2883
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 325, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 2866
				self.rule_SubprogramDeclaration()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 2867
				self.rule_SubprogramBody()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 2868
				self.rule_SubprogramInstantiationDeclaration()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 2869
				self.rule_PackageDeclaration()
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 2870
				self.rule_PackageBody()
				pass

			elif la_ == 6:
				self.enterOuterAlt(localctx, 6)
				self.state = 2871
				self.rule_PackageInstantiationDeclaration()
				pass

			elif la_ == 7:
				self.enterOuterAlt(localctx, 7)
				self.state = 2872
				self.rule_TypeDeclaration()
				pass

			elif la_ == 8:
				self.enterOuterAlt(localctx, 8)
				self.state = 2873
				self.rule_SubtypeDeclaration()
				pass

			elif la_ == 9:
				self.enterOuterAlt(localctx, 9)
				self.state = 2874
				self.rule_ConstantDeclaration()
				pass

			elif la_ == 10:
				self.enterOuterAlt(localctx, 10)
				self.state = 2875
				self.rule_VariableDeclaration()
				pass

			elif la_ == 11:
				self.enterOuterAlt(localctx, 11)
				self.state = 2876
				self.rule_FileDeclaration()
				pass

			elif la_ == 12:
				self.enterOuterAlt(localctx, 12)
				self.state = 2877
				self.rule_AliasDeclaration()
				pass

			elif la_ == 13:
				self.enterOuterAlt(localctx, 13)
				self.state = 2878
				self.rule_AttributeDeclaration()
				pass

			elif la_ == 14:
				self.enterOuterAlt(localctx, 14)
				self.state = 2879
				self.rule_AttributeSpecification()
				pass

			elif la_ == 15:
				self.enterOuterAlt(localctx, 15)
				self.state = 2880
				self.rule_UseClause()
				pass

			elif la_ == 16:
				self.enterOuterAlt(localctx, 16)
				self.state = 2881
				self.rule_GroupTemplateDeclaration()
				pass

			elif la_ == 17:
				self.enterOuterAlt(localctx, 17)
				self.state = 2882
				self.rule_GroupDeclaration()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SubprogramInstantiationDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.name = None  # Token
			self.genericMapAspect = None  # Rule_GenericMapAspectContext

		def rule_SubprogramKind(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramKindContext, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def KW_NEW(self):
			return self.getToken(VHDLParser.KW_NEW, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def rule_Signature(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SignatureContext, 0)

		def rule_GenericMapAspect(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GenericMapAspectContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SubprogramInstantiationDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SubprogramInstantiationDeclaration"):
				return visitor.visitRule_SubprogramInstantiationDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_SubprogramInstantiationDeclaration(self):

		localctx = VHDLParser.Rule_SubprogramInstantiationDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 476, self.RULE_rule_SubprogramInstantiationDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2885
			self.rule_SubprogramKind()
			self.state = 2886
			localctx.name = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 2887
			self.match(VHDLParser.KW_IS)
			self.state = 2888
			self.match(VHDLParser.KW_NEW)
			self.state = 2889
			self.rule_Name(0)
			self.state = 2891
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 145:
				self.state = 2890
				self.rule_Signature()

			self.state = 2894
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 42:
				self.state = 2893
				localctx.genericMapAspect = self.rule_GenericMapAspect()

			self.state = 2896
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SubprogramKindContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_PROCEDURE(self):
			return self.getToken(VHDLParser.KW_PROCEDURE, 0)

		def KW_FUNCTION(self):
			return self.getToken(VHDLParser.KW_FUNCTION, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SubprogramKind

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SubprogramKind"):
				return visitor.visitRule_SubprogramKind(self)
			else:
				return visitor.visitChildren(self)

	def rule_SubprogramKind(self):

		localctx = VHDLParser.Rule_SubprogramKindContext(self, self._ctx, self.state)
		self.enterRule(localctx, 478, self.RULE_rule_SubprogramKind)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2898
			_la = self._input.LA(1)
			if not (_la == 39 or _la == 75):
				self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SubprogramSpecificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_ProcedureSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ProcedureSpecificationContext, 0)

		def rule_FunctionSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FunctionSpecificationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SubprogramSpecification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SubprogramSpecification"):
				return visitor.visitRule_SubprogramSpecification(self)
			else:
				return visitor.visitChildren(self)

	def rule_SubprogramSpecification(self):

		localctx = VHDLParser.Rule_SubprogramSpecificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 480, self.RULE_rule_SubprogramSpecification)
		try:
			self.state = 2902
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [75]:
				self.enterOuterAlt(localctx, 1)
				self.state = 2900
				self.rule_ProcedureSpecification()
				pass
			elif token in [39, 46, 78]:
				self.enterOuterAlt(localctx, 2)
				self.state = 2901
				self.rule_FunctionSpecification()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SubtypeDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.name = None  # Token
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext

		def KW_SUBTYPE(self):
			return self.getToken(VHDLParser.KW_SUBTYPE, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SubtypeDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SubtypeDeclaration"):
				return visitor.visitRule_SubtypeDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_SubtypeDeclaration(self):

		localctx = VHDLParser.Rule_SubtypeDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 482, self.RULE_rule_SubtypeDeclaration)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2904
			self.match(VHDLParser.KW_SUBTYPE)
			self.state = 2905
			localctx.name = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 2906
			self.match(VHDLParser.KW_IS)
			self.state = 2907
			localctx.subtypeIndication = self.rule_SubtypeIndication()
			self.state = 2908
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SubtypeIndicationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def rule_ResolutionIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ResolutionIndicationContext, 0)

		def rule_Constraint(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConstraintContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SubtypeIndication

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SubtypeIndication"):
				return visitor.visitRule_SubtypeIndication(self)
			else:
				return visitor.visitChildren(self)

	def rule_SubtypeIndication(self):

		localctx = VHDLParser.Rule_SubtypeIndicationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 484, self.RULE_rule_SubtypeIndication)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2911
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 329, self._ctx)
			if la_ == 1:
				self.state = 2910
				self.rule_ResolutionIndication()

			self.state = 2913
			self.rule_Name(0)
			self.state = 2915
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 330, self._ctx)
			if la_ == 1:
				self.state = 2914
				self.rule_Constraint()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SuffixContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def LIT_CHARACTER(self):
			return self.getToken(VHDLParser.LIT_CHARACTER, 0)

		def LIT_STRING(self):
			return self.getToken(VHDLParser.LIT_STRING, 0)

		def KW_ALL(self):
			return self.getToken(VHDLParser.KW_ALL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Suffix

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Suffix"):
				return visitor.visitRule_Suffix(self)
			else:
				return visitor.visitChildren(self)

	def rule_Suffix(self):

		localctx = VHDLParser.Rule_SuffixContext(self, self._ctx, self.state)
		self.enterRule(localctx, 486, self.RULE_rule_Suffix)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2917
			_la = self._input.LA(1)
			if not (_la == 10 or ((((_la - 161)) & ~0x3f) == 0 and ((1 << (_la - 161)) & 7) != 0)):
				self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_TargetContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def rule_Aggregate(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AggregateContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Target

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Target"):
				return visitor.visitRule_Target(self)
			else:
				return visitor.visitChildren(self)

	def rule_Target(self):

		localctx = VHDLParser.Rule_TargetContext(self, self._ctx, self.state)
		self.enterRule(localctx, 488, self.RULE_rule_Target)
		try:
			self.state = 2921
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [147, 161, 162, 163]:
				self.enterOuterAlt(localctx, 1)
				self.state = 2919
				self.rule_Name(0)
				pass
			elif token in [143]:
				self.enterOuterAlt(localctx, 2)
				self.state = 2920
				self.rule_Aggregate()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_TimeoutClauseContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.expression = None  # Rule_ExpressionContext

		def KW_FOR(self):
			return self.getToken(VHDLParser.KW_FOR, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_TimeoutClause

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_TimeoutClause"):
				return visitor.visitRule_TimeoutClause(self)
			else:
				return visitor.visitChildren(self)

	def rule_TimeoutClause(self):

		localctx = VHDLParser.Rule_TimeoutClauseContext(self, self._ctx, self.state)
		self.enterRule(localctx, 490, self.RULE_rule_TimeoutClause)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2923
			self.match(VHDLParser.KW_FOR)
			self.state = 2924
			localctx.expression = self.rule_Expression(0)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_TypeConversionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_TypeConversion

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_TypeConversion"):
				return visitor.visitRule_TypeConversion(self)
			else:
				return visitor.visitChildren(self)

	def rule_TypeConversion(self):

		localctx = VHDLParser.Rule_TypeConversionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 492, self.RULE_rule_TypeConversion)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2926
			self.rule_Name(0)
			self.state = 2927
			self.match(VHDLParser.TOK_LP)
			self.state = 2928
			self.rule_Expression(0)
			self.state = 2929
			self.match(VHDLParser.TOK_RP)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_TypeDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_FullTypeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FullTypeDeclarationContext, 0)

		def rule_IncompleteTypeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IncompleteTypeDeclarationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_TypeDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_TypeDeclaration"):
				return visitor.visitRule_TypeDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_TypeDeclaration(self):

		localctx = VHDLParser.Rule_TypeDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 494, self.RULE_rule_TypeDeclaration)
		try:
			self.state = 2933
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 332, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 2931
				self.rule_FullTypeDeclaration()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 2932
				self.rule_IncompleteTypeDeclaration()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_TypeDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_ScalarTypeDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ScalarTypeDefinitionContext, 0)

		def rule_CompositeTypeDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_CompositeTypeDefinitionContext, 0)

		def rule_AccessTypeDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AccessTypeDefinitionContext, 0)

		def rule_FileTypeDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FileTypeDefinitionContext, 0)

		def rule_ProtectedTypeDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ProtectedTypeDefinitionContext, 0)

		def rule_ProtectedTypeInstantiationDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ProtectedTypeInstantiationDefinitionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_TypeDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_TypeDefinition"):
				return visitor.visitRule_TypeDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_TypeDefinition(self):

		localctx = VHDLParser.Rule_TypeDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 496, self.RULE_rule_TypeDefinition)
		try:
			self.state = 2941
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [79, 143]:
				self.enterOuterAlt(localctx, 1)
				self.state = 2935
				self.rule_ScalarTypeDefinition()
				pass
			elif token in [13, 80]:
				self.enterOuterAlt(localctx, 2)
				self.state = 2936
				self.rule_CompositeTypeDefinition()
				pass
			elif token in [7]:
				self.enterOuterAlt(localctx, 3)
				self.state = 2937
				self.rule_AccessTypeDefinition()
				pass
			elif token in [36]:
				self.enterOuterAlt(localctx, 4)
				self.state = 2938
				self.rule_FileTypeDefinition()
				pass
			elif token in [77]:
				self.enterOuterAlt(localctx, 5)
				self.state = 2939
				self.rule_ProtectedTypeDefinition()
				pass
			elif token in [59]:
				self.enterOuterAlt(localctx, 6)
				self.state = 2940
				self.rule_ProtectedTypeInstantiationDefinition()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_UnboundArrayDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext

		def KW_ARRAY(self):
			return self.getToken(VHDLParser.KW_ARRAY, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def rule_IndexSubtypeDefinition(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_IndexSubtypeDefinitionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_IndexSubtypeDefinitionContext, i)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def KW_OF(self):
			return self.getToken(VHDLParser.KW_OF, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_UnboundArrayDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_UnboundArrayDefinition"):
				return visitor.visitRule_UnboundArrayDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_UnboundArrayDefinition(self):

		localctx = VHDLParser.Rule_UnboundArrayDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 498, self.RULE_rule_UnboundArrayDefinition)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2943
			self.match(VHDLParser.KW_ARRAY)
			self.state = 2944
			self.match(VHDLParser.TOK_LP)
			self.state = 2945
			self.rule_IndexSubtypeDefinition()
			self.state = 2950
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == 151:
				self.state = 2946
				self.match(VHDLParser.TOK_COMMA)
				self.state = 2947
				self.rule_IndexSubtypeDefinition()
				self.state = 2952
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 2953
			self.match(VHDLParser.TOK_RP)
			self.state = 2954
			self.match(VHDLParser.KW_OF)
			self.state = 2955
			localctx.subtypeIndication = self.rule_SubtypeIndication()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_UnspecifiedTypeIndicationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_TYPE(self):
			return self.getToken(VHDLParser.KW_TYPE, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def rule_IncompleteTypeDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IncompleteTypeDefinitionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_UnspecifiedTypeIndication

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_UnspecifiedTypeIndication"):
				return visitor.visitRule_UnspecifiedTypeIndication(self)
			else:
				return visitor.visitChildren(self)

	def rule_UnspecifiedTypeIndication(self):

		localctx = VHDLParser.Rule_UnspecifiedTypeIndicationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 500, self.RULE_rule_UnspecifiedTypeIndication)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2957
			self.match(VHDLParser.KW_TYPE)
			self.state = 2958
			self.match(VHDLParser.KW_IS)
			self.state = 2959
			self.rule_IncompleteTypeDefinition()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_UseClauseContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_SelectedName2 = None  # Rule_SelectedName2Context
			self.names = list()  # of Rule_SelectedName2Contexts

		def KW_USE(self):
			return self.getToken(VHDLParser.KW_USE, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_SelectedName2(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_SelectedName2Context)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_SelectedName2Context, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_UseClause

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_UseClause"):
				return visitor.visitRule_UseClause(self)
			else:
				return visitor.visitChildren(self)

	def rule_UseClause(self):

		localctx = VHDLParser.Rule_UseClauseContext(self, self._ctx, self.state)
		self.enterRule(localctx, 502, self.RULE_rule_UseClause)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2961
			self.match(VHDLParser.KW_USE)
			self.state = 2962
			localctx._rule_SelectedName2 = self.rule_SelectedName2()
			localctx.names.append(localctx._rule_SelectedName2)
			self.state = 2967
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == 151:
				self.state = 2963
				self.match(VHDLParser.TOK_COMMA)
				self.state = 2964
				localctx._rule_SelectedName2 = self.rule_SelectedName2()
				localctx.names.append(localctx._rule_SelectedName2)
				self.state = 2969
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 2970
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ValueReturnStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token

		def KW_RETURN(self):
			return self.getToken(VHDLParser.KW_RETURN, 0)

		def rule_ConditionalOrUnaffectedExpression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConditionalOrUnaffectedExpressionContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ValueReturnStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ValueReturnStatement"):
				return visitor.visitRule_ValueReturnStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_ValueReturnStatement(self):

		localctx = VHDLParser.Rule_ValueReturnStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 504, self.RULE_rule_ValueReturnStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2974
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 2972
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 2973
				self.match(VHDLParser.TOK_COLON)

			self.state = 2976
			self.match(VHDLParser.KW_RETURN)
			self.state = 2977
			self.rule_ConditionalOrUnaffectedExpression()
			self.state = 2978
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_VariableAssignmentStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token

		def rule_SimpleVariableAssignment(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SimpleVariableAssignmentContext, 0)

		def rule_SelectedVariableAssignment(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SelectedVariableAssignmentContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_VariableAssignmentStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_VariableAssignmentStatement"):
				return visitor.visitRule_VariableAssignmentStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_VariableAssignmentStatement(self):

		localctx = VHDLParser.Rule_VariableAssignmentStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 506, self.RULE_rule_VariableAssignmentStatement)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2982
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 337, self._ctx)
			if la_ == 1:
				self.state = 2980
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 2981
				self.match(VHDLParser.TOK_COLON)

			self.state = 2986
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [143, 147, 161, 162, 163]:
				self.state = 2984
				self.rule_SimpleVariableAssignment()
				pass
			elif token in [116]:
				self.state = 2985
				self.rule_SelectedVariableAssignment()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_VariableDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext
			self.genericMapAspect = None  # Rule_GenericMapAspectContext
			self.expression = None  # Rule_ExpressionContext

		def KW_VARIABLE(self):
			return self.getToken(VHDLParser.KW_VARIABLE, 0)

		def rule_IdentifierList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IdentifierListContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def KW_SHARED(self):
			return self.getToken(VHDLParser.KW_SHARED, 0)

		def TOK_VAR_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_VAR_ASSIGN, 0)

		def rule_GenericMapAspect(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GenericMapAspectContext, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_VariableDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_VariableDeclaration"):
				return visitor.visitRule_VariableDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_VariableDeclaration(self):

		localctx = VHDLParser.Rule_VariableDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 508, self.RULE_rule_VariableDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2989
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 92:
				self.state = 2988
				self.match(VHDLParser.KW_SHARED)

			self.state = 2991
			self.match(VHDLParser.KW_VARIABLE)
			self.state = 2992
			self.rule_IdentifierList()
			self.state = 2993
			self.match(VHDLParser.TOK_COLON)
			self.state = 2994
			localctx.subtypeIndication = self.rule_SubtypeIndication()
			self.state = 2996
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 42:
				self.state = 2995
				localctx.genericMapAspect = self.rule_GenericMapAspect()

			self.state = 3000
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 141:
				self.state = 2998
				self.match(VHDLParser.TOK_VAR_ASSIGN)
				self.state = 2999
				localctx.expression = self.rule_Expression(0)

			self.state = 3002
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_WaitStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token

		def KW_WAIT(self):
			return self.getToken(VHDLParser.KW_WAIT, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def rule_SensitivityClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SensitivityClauseContext, 0)

		def rule_ConditionClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConditionClauseContext, 0)

		def rule_TimeoutClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_TimeoutClauseContext, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_WaitStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_WaitStatement"):
				return visitor.visitRule_WaitStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_WaitStatement(self):

		localctx = VHDLParser.Rule_WaitStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 510, self.RULE_rule_WaitStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 3006
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 163:
				self.state = 3004
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 3005
				self.match(VHDLParser.TOK_COLON)

			self.state = 3008
			self.match(VHDLParser.KW_WAIT)
			self.state = 3010
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 65:
				self.state = 3009
				self.rule_SensitivityClause()

			self.state = 3013
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 107:
				self.state = 3012
				self.rule_ConditionClause()

			self.state = 3016
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == 37:
				self.state = 3015
				self.rule_TimeoutClause()

			self.state = 3018
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_WaveformContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_WaveformElement = None  # Rule_WaveformElementContext
			self.waveformElement = list()  # of Rule_WaveformElementContexts

		def rule_WaveformElement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_WaveformElementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_WaveformElementContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def KW_UNAFFECTED(self):
			return self.getToken(VHDLParser.KW_UNAFFECTED, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Waveform

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Waveform"):
				return visitor.visitRule_Waveform(self)
			else:
				return visitor.visitChildren(self)

	def rule_Waveform(self):

		localctx = VHDLParser.Rule_WaveformContext(self, self._ctx, self.state)
		self.enterRule(localctx, 512, self.RULE_rule_Waveform)
		self._la = 0  # Token type
		try:
			self.state = 3029
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [6, 11, 58, 59, 61, 62, 63, 67, 119, 120, 132, 133, 138, 143, 147, 159, 160, 161, 162, 163]:
				self.enterOuterAlt(localctx, 1)
				self.state = 3020
				localctx._rule_WaveformElement = self.rule_WaveformElement()
				localctx.waveformElement.append(localctx._rule_WaveformElement)
				self.state = 3025
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				while _la == 151:
					self.state = 3021
					self.match(VHDLParser.TOK_COMMA)
					self.state = 3022
					localctx._rule_WaveformElement = self.rule_WaveformElement()
					localctx.waveformElement.append(localctx._rule_WaveformElement)
					self.state = 3027
					self._errHandler.sync(self)
					_la = self._input.LA(1)

				pass
			elif token in [105]:
				self.enterOuterAlt(localctx, 2)
				self.state = 3028
				self.match(VHDLParser.KW_UNAFFECTED)
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_WaveformElementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.expression = None  # Rule_ExpressionContext
			self.afterExpression = None  # Rule_ExpressionContext

		def rule_Expression(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ExpressionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, i)

		def KW_AFTER(self):
			return self.getToken(VHDLParser.KW_AFTER, 0)

		def KW_NULL(self):
			return self.getToken(VHDLParser.KW_NULL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_WaveformElement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_WaveformElement"):
				return visitor.visitRule_WaveformElement(self)
			else:
				return visitor.visitChildren(self)

	def rule_WaveformElement(self):

		localctx = VHDLParser.Rule_WaveformElementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 514, self.RULE_rule_WaveformElement)
		self._la = 0  # Token type
		try:
			self.state = 3041
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 350, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 3031
				localctx.expression = self.rule_Expression(0)
				self.state = 3034
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == 8:
					self.state = 3032
					self.match(VHDLParser.KW_AFTER)
					self.state = 3033
					localctx.afterExpression = self.rule_Expression(0)

				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 3036
				self.match(VHDLParser.KW_NULL)
				self.state = 3039
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == 8:
					self.state = 3037
					self.match(VHDLParser.KW_AFTER)
					self.state = 3038
					localctx.afterExpression = self.rule_Expression(0)

				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
		if self._predicates == None:
			self._predicates = dict()
		self._predicates[92] = self.rule_Expression_sempred
		self._predicates[159] = self.rule_Name_sempred
		pred = self._predicates.get(ruleIndex, None)
		if pred is None:
			raise Exception("No predicate with index:" + str(ruleIndex))
		else:
			return pred(localctx, predIndex)

	def rule_Expression_sempred(self, localctx: Rule_ExpressionContext, predIndex: int):
		if predIndex == 0:
			return self.precpred(self._ctx, 6)

		if predIndex == 1:
			return self.precpred(self._ctx, 5)

		if predIndex == 2:
			return self.precpred(self._ctx, 4)

		if predIndex == 3:
			return self.precpred(self._ctx, 3)

		if predIndex == 4:
			return self.precpred(self._ctx, 2)

		if predIndex == 5:
			return self.precpred(self._ctx, 1)

	def rule_Name_sempred(self, localctx: Rule_NameContext, predIndex: int):
		if predIndex == 6:
			return self.precpred(self._ctx, 5)

		if predIndex == 7:
			return self.precpred(self._ctx, 4)

		if predIndex == 8:
			return self.precpred(self._ctx, 3)

		if predIndex == 9:
			return self.precpred(self._ctx, 2)
