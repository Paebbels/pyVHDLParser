from typing import TextIO

from antlr4 import ATNDeserializer, Parser, PredictionContextCache, DFA, TokenStream, ParserATNSimulator, \
	ParserRuleContext, ParseTreeVisitor, Token, RecognitionException, NoViableAltException, ATN


def serializedATN():
	return (
		4, 1, 130, 2160, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7,
		2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16,
		7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7,
		24, 2, 25, 7, 25, 2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7, 31, 2, 32, 7,
		32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7,
		40, 2, 41, 7, 41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47, 7, 47, 2, 48, 7,
		48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7,
		56, 2, 57, 7, 57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62, 2, 63, 7, 63, 2, 64, 7,
		64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2, 68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7,
		72, 2, 73, 7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2, 78, 7, 78, 2, 79, 7, 79, 2, 80, 7,
		80, 2, 81, 7, 81, 2, 82, 7, 82, 2, 83, 7, 83, 2, 84, 7, 84, 2, 85, 7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7,
		88, 2, 89, 7, 89, 2, 90, 7, 90, 2, 91, 7, 91, 2, 92, 7, 92, 2, 93, 7, 93, 2, 94, 7, 94, 2, 95, 7, 95, 2, 96, 7,
		96, 2, 97, 7, 97, 2, 98, 7, 98, 2, 99, 7, 99, 2, 100, 7, 100, 2, 101, 7, 101, 2, 102, 7, 102, 2, 103, 7, 103, 2,
		104, 7, 104, 2, 105, 7, 105, 2, 106, 7, 106, 2, 107, 7, 107, 2, 108, 7, 108, 2, 109, 7, 109, 2, 110, 7, 110, 2,
		111, 7, 111, 2, 112, 7, 112, 2, 113, 7, 113, 2, 114, 7, 114, 2, 115, 7, 115, 2, 116, 7, 116, 2, 117, 7, 117, 2,
		118, 7, 118, 2, 119, 7, 119, 2, 120, 7, 120, 2, 121, 7, 121, 2, 122, 7, 122, 2, 123, 7, 123, 2, 124, 7, 124, 2,
		125, 7, 125, 2, 126, 7, 126, 2, 127, 7, 127, 2, 128, 7, 128, 2, 129, 7, 129, 2, 130, 7, 130, 2, 131, 7, 131, 2,
		132, 7, 132, 2, 133, 7, 133, 2, 134, 7, 134, 2, 135, 7, 135, 2, 136, 7, 136, 2, 137, 7, 137, 2, 138, 7, 138, 2,
		139, 7, 139, 2, 140, 7, 140, 2, 141, 7, 141, 2, 142, 7, 142, 2, 143, 7, 143, 2, 144, 7, 144, 2, 145, 7, 145, 2,
		146, 7, 146, 2, 147, 7, 147, 2, 148, 7, 148, 2, 149, 7, 149, 2, 150, 7, 150, 2, 151, 7, 151, 2, 152, 7, 152, 2,
		153, 7, 153, 2, 154, 7, 154, 2, 155, 7, 155, 2, 156, 7, 156, 2, 157, 7, 157, 2, 158, 7, 158, 2, 159, 7, 159, 2,
		160, 7, 160, 2, 161, 7, 161, 2, 162, 7, 162, 2, 163, 7, 163, 2, 164, 7, 164, 2, 165, 7, 165, 2, 166, 7, 166, 2,
		167, 7, 167, 2, 168, 7, 168, 2, 169, 7, 169, 2, 170, 7, 170, 2, 171, 7, 171, 2, 172, 7, 172, 2, 173, 7, 173, 2,
		174, 7, 174, 2, 175, 7, 175, 2, 176, 7, 176, 2, 177, 7, 177, 2, 178, 7, 178, 2, 179, 7, 179, 2, 180, 7, 180, 2,
		181, 7, 181, 2, 182, 7, 182, 2, 183, 7, 183, 2, 184, 7, 184, 2, 185, 7, 185, 2, 186, 7, 186, 2, 187, 7, 187, 2,
		188, 7, 188, 2, 189, 7, 189, 2, 190, 7, 190, 2, 191, 7, 191, 2, 192, 7, 192, 2, 193, 7, 193, 2, 194, 7, 194, 2,
		195, 7, 195, 2, 196, 7, 196, 2, 197, 7, 197, 2, 198, 7, 198, 2, 199, 7, 199, 2, 200, 7, 200, 2, 201, 7, 201, 2,
		202, 7, 202, 2, 203, 7, 203, 2, 204, 7, 204, 2, 205, 7, 205, 2, 206, 7, 206, 2, 207, 7, 207, 2, 208, 7, 208, 2,
		209, 7, 209, 2, 210, 7, 210, 2, 211, 7, 211, 2, 212, 7, 212, 2, 213, 7, 213, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 3, 1,
		434, 8, 1, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 3, 3, 444, 8, 3, 1, 4, 1, 4, 1, 5, 1, 5, 1, 5, 1, 5, 5,
		5, 452, 8, 5, 10, 5, 12, 5, 455, 9, 5, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 6, 3, 6, 463, 8, 6, 1, 6, 1, 6, 1, 6, 3,
		6, 468, 8, 6, 1, 6, 1, 6, 1, 7, 1, 7, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 3, 9, 479, 8, 9, 1, 10, 1, 10, 1, 10, 1, 10,
		1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 3, 10, 491, 8, 10, 1, 10, 3, 10, 494, 8, 10, 1, 10, 1, 10, 1, 11, 5, 11,
		499, 8, 11, 10, 11, 12, 11, 502, 9, 11, 1, 12, 1, 12, 1, 12, 1, 12, 3, 12, 508, 8, 12, 1, 12, 1, 12, 3, 12, 512,
		8, 12, 1, 12, 1, 12, 3, 12, 516, 8, 12, 1, 12, 3, 12, 519, 8, 12, 1, 12, 1, 12, 1, 12, 1, 12, 3, 12, 525, 8, 12,
		1, 13, 5, 13, 528, 8, 13, 10, 13, 12, 13, 531, 9, 13, 1, 14, 1, 14, 3, 14, 535, 8, 14, 1, 15, 1, 15, 1, 15, 1, 15,
		3, 15, 541, 8, 15, 1, 15, 1, 15, 3, 15, 545, 8, 15, 1, 16, 3, 16, 548, 8, 16, 1, 16, 1, 16, 1, 16, 1, 17, 1, 17,
		1, 17, 3, 17, 556, 8, 17, 1, 17, 1, 17, 1, 18, 1, 18, 1, 18, 5, 18, 563, 8, 18, 10, 18, 12, 18, 566, 9, 18, 1, 19,
		1, 19, 1, 19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 22, 1, 22, 1,
		22, 1, 23, 1, 23, 3, 23, 588, 8, 23, 1, 23, 3, 23, 591, 8, 23, 1, 23, 3, 23, 594, 8, 23, 1, 24, 1, 24, 1, 24, 5,
		24, 599, 8, 24, 10, 24, 12, 24, 602, 9, 24, 1, 24, 5, 24, 605, 8, 24, 10, 24, 12, 24, 608, 9, 24, 1, 24, 1, 24, 1,
		24, 1, 24, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1,
		25, 3, 25, 629, 8, 25, 1, 26, 5, 26, 632, 8, 26, 10, 26, 12, 26, 635, 9, 26, 1, 27, 1, 27, 1, 27, 1, 27, 3, 27,
		641, 8, 27, 3, 27, 643, 8, 27, 1, 27, 1, 27, 1, 27, 1, 27, 3, 27, 649, 8, 27, 3, 27, 651, 8, 27, 1, 28, 1, 28, 1,
		28, 1, 28, 1, 28, 3, 28, 658, 8, 28, 1, 28, 3, 28, 661, 8, 28, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 3, 29,
		669, 8, 29, 1, 29, 3, 29, 672, 8, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 3, 29, 681, 8, 29, 1, 29,
		1, 29, 1, 30, 5, 30, 686, 8, 30, 10, 30, 12, 30, 689, 9, 30, 1, 31, 3, 31, 692, 8, 31, 1, 31, 1, 31, 1, 31, 1, 31,
		4, 31, 698, 8, 31, 11, 31, 12, 31, 699, 1, 31, 1, 31, 1, 31, 3, 31, 705, 8, 31, 1, 31, 1, 31, 1, 32, 1, 32, 1, 32,
		1, 32, 1, 32, 1, 33, 1, 33, 1, 33, 1, 33, 3, 33, 718, 8, 33, 1, 34, 1, 34, 1, 34, 5, 34, 723, 8, 34, 10, 34, 12,
		34, 726, 9, 34, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 3, 35, 733, 8, 35, 1, 35, 3, 35, 736, 8, 35, 1, 35, 1, 35, 1,
		35, 1, 35, 1, 36, 1, 36, 1, 36, 3, 36, 745, 8, 36, 1, 36, 3, 36, 748, 8, 36, 1, 36, 3, 36, 751, 8, 36, 1, 36, 1,
		36, 1, 36, 3, 36, 756, 8, 36, 1, 36, 1, 36, 1, 37, 1, 37, 1, 37, 3, 37, 763, 8, 37, 1, 37, 3, 37, 766, 8, 37, 1,
		37, 1, 37, 1, 38, 1, 38, 1, 38, 1, 38, 1, 39, 1, 39, 3, 39, 776, 8, 39, 1, 40, 3, 40, 779, 8, 40, 1, 40, 3, 40,
		782, 8, 40, 1, 40, 1, 40, 1, 40, 1, 41, 3, 41, 788, 8, 41, 1, 41, 3, 41, 791, 8, 41, 1, 41, 1, 41, 1, 41, 1, 42,
		3, 42, 797, 8, 42, 1, 42, 3, 42, 800, 8, 42, 1, 42, 1, 42, 3, 42, 804, 8, 42, 1, 43, 1, 43, 1, 44, 1, 44, 1, 44,
		1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 3, 46, 822, 8, 46, 3, 46, 824, 8, 46,
		1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 3, 47, 835, 8, 47, 1, 47, 3, 47, 838, 8, 47, 1, 47,
		1, 47, 1, 48, 1, 48, 3, 48, 844, 8, 48, 1, 49, 5, 49, 847, 8, 49, 10, 49, 12, 49, 850, 9, 49, 1, 50, 1, 50, 3, 50,
		854, 8, 50, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 3, 52, 867, 8, 52, 1, 52,
		1, 52, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 54, 1, 54, 3, 54, 878, 8, 54, 1, 55, 5, 55, 881, 8, 55, 10, 55, 12,
		55, 884, 9, 55, 1, 56, 1, 56, 3, 56, 888, 8, 56, 1, 57, 1, 57, 1, 57, 3, 57, 893, 8, 57, 1, 57, 3, 57, 896, 8, 57,
		1, 58, 5, 58, 899, 8, 58, 10, 58, 12, 58, 902, 9, 58, 1, 58, 1, 58, 1, 59, 1, 59, 1, 59, 1, 60, 1, 60, 1, 61, 1,
		61, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 63, 1, 63, 3, 63, 921, 8, 63, 1, 64, 1, 64, 1, 64, 3, 64, 926, 8,
		64, 1, 64, 1, 64, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 66, 1, 66, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 3, 67, 942,
		8, 67, 1, 67, 1, 67, 1, 67, 3, 67, 947, 8, 67, 1, 68, 1, 68, 1, 69, 1, 69, 3, 69, 953, 8, 69, 1, 70, 1, 70, 1, 70,
		5, 70, 958, 8, 70, 10, 70, 12, 70, 961, 9, 70, 1, 71, 1, 71, 1, 71, 1, 71, 1, 71, 1, 71, 1, 71, 3, 71, 970, 8, 71,
		1, 71, 1, 71, 3, 71, 974, 8, 71, 1, 71, 3, 71, 977, 8, 71, 1, 71, 1, 71, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72,
		1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 3, 72, 994, 8, 72, 1, 73, 5, 73, 997, 8, 73, 10, 73, 12, 73,
		1000, 9, 73, 1, 74, 1, 74, 3, 74, 1004, 8, 74, 1, 75, 3, 75, 1007, 8, 75, 1, 75, 3, 75, 1010, 8, 75, 1, 76, 1, 76,
		1, 76, 5, 76, 1015, 8, 76, 10, 76, 12, 76, 1018, 9, 76, 1, 76, 1, 76, 3, 76, 1022, 8, 76, 1, 77, 1, 77, 1, 77, 1,
		77, 1, 78, 1, 78, 1, 78, 1, 78, 3, 78, 1032, 8, 78, 1, 79, 5, 79, 1035, 8, 79, 10, 79, 12, 79, 1038, 9, 79, 1, 80,
		1, 80, 1, 81, 1, 81, 1, 82, 1, 82, 1, 82, 1, 82, 5, 82, 1048, 8, 82, 10, 82, 12, 82, 1051, 9, 82, 1, 82, 1, 82, 1,
		83, 3, 83, 1056, 8, 83, 1, 83, 1, 83, 3, 83, 1060, 8, 83, 1, 83, 1, 83, 3, 83, 1064, 8, 83, 1, 83, 1, 83, 1, 84,
		1, 84, 1, 84, 1, 84, 5, 84, 1072, 8, 84, 10, 84, 12, 84, 1075, 9, 84, 1, 85, 1, 85, 1, 85, 3, 85, 1080, 8, 85, 1,
		85, 1, 85, 1, 85, 1, 85, 3, 85, 1086, 8, 85, 1, 86, 1, 86, 1, 86, 1, 86, 1, 86, 3, 86, 1093, 8, 86, 1, 86, 1, 86,
		1, 87, 1, 87, 1, 88, 1, 88, 3, 88, 1101, 8, 88, 1, 88, 1, 88, 1, 88, 1, 89, 1, 89, 1, 89, 1, 89, 1, 90, 1, 90, 1,
		91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 3, 91, 1118, 8, 91, 1, 92, 1, 92, 1, 92, 1, 92, 5, 92, 1124, 8, 92, 10, 92,
		12, 92, 1127, 9, 92, 1, 92, 3, 92, 1130, 8, 92, 1, 92, 5, 92, 1133, 8, 92, 10, 92, 12, 92, 1136, 9, 92, 1, 92, 1,
		92, 1, 92, 3, 92, 1141, 8, 92, 1, 92, 1, 92, 1, 93, 1, 93, 1, 93, 1, 93, 3, 93, 1149, 8, 93, 1, 94, 1, 94, 1, 94,
		1, 94, 1, 94, 1, 94, 1, 95, 1, 95, 1, 95, 5, 95, 1160, 8, 95, 10, 95, 12, 95, 1163, 9, 95, 1, 96, 1, 96, 1, 96, 1,
		96, 1, 96, 1, 96, 1, 97, 1, 97, 1, 97, 1, 97, 1, 98, 1, 98, 1, 98, 5, 98, 1178, 8, 98, 10, 98, 12, 98, 1181, 9,
		98, 1, 99, 3, 99, 1184, 8, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 5, 99, 1195, 8, 99,
		10, 99, 12, 99, 1198, 9, 99, 1, 99, 1, 99, 3, 99, 1202, 8, 99, 1, 99, 1, 99, 1, 99, 3, 99, 1207, 8, 99, 1, 99, 1,
		99, 1, 100, 1, 100, 1, 100, 1, 100, 5, 100, 1215, 8, 100, 10, 100, 12, 100, 1218, 9, 100, 1, 100, 1, 100, 1, 101,
		1, 101, 3, 101, 1224, 8, 101, 1, 102, 1, 102, 1, 102, 1, 102, 1, 103, 3, 103, 1231, 8, 103, 1, 103, 1, 103, 1,
		103, 1, 103, 1, 103, 1, 103, 3, 103, 1239, 8, 103, 1, 103, 1, 103, 3, 103, 1243, 8, 103, 1, 104, 1, 104, 1, 104,
		5, 104, 1248, 8, 104, 10, 104, 12, 104, 1251, 9, 104, 1, 104, 1, 104, 3, 104, 1255, 8, 104, 1, 105, 3, 105, 1258,
		8, 105, 1, 105, 1, 105, 1, 105, 3, 105, 1263, 8, 105, 1, 105, 1, 105, 1, 105, 3, 105, 1268, 8, 105, 1, 106, 1,
		106, 1, 106, 1, 106, 3, 106, 1274, 8, 106, 1, 107, 1, 107, 1, 108, 1, 108, 1, 108, 1, 108, 1, 108, 1, 109, 1, 109,
		1, 109, 5, 109, 1286, 8, 109, 10, 109, 12, 109, 1289, 9, 109, 1, 110, 1, 110, 1, 110, 5, 110, 1294, 8, 110, 10,
		110, 12, 110, 1297, 9, 110, 1, 111, 1, 111, 1, 111, 5, 111, 1302, 8, 111, 10, 111, 12, 111, 1305, 9, 111, 1, 112,
		1, 112, 1, 112, 3, 112, 1310, 8, 112, 1, 112, 1, 112, 3, 112, 1314, 8, 112, 1, 112, 1, 112, 3, 112, 1318, 8, 112,
		1, 113, 1, 113, 1, 113, 1, 113, 3, 113, 1324, 8, 113, 1, 113, 1, 113, 3, 113, 1328, 8, 113, 1, 113, 1, 113, 3,
		113, 1332, 8, 113, 1, 114, 3, 114, 1335, 8, 114, 1, 114, 1, 114, 1, 114, 3, 114, 1340, 8, 114, 1, 114, 1, 114, 1,
		114, 3, 114, 1345, 8, 114, 1, 115, 1, 115, 1, 115, 1, 115, 3, 115, 1351, 8, 115, 1, 116, 1, 116, 1, 116, 1, 117,
		1, 117, 1, 117, 1, 117, 1, 118, 1, 118, 3, 118, 1362, 8, 118, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 3, 119,
		1369, 8, 119, 1, 120, 1, 120, 1, 121, 1, 121, 1, 121, 5, 121, 1376, 8, 121, 10, 121, 12, 121, 1379, 9, 121, 1,
		122, 1, 122, 1, 123, 3, 123, 1384, 8, 123, 1, 123, 3, 123, 1387, 8, 123, 1, 123, 1, 123, 1, 123, 1, 123, 1, 123,
		3, 123, 1394, 8, 123, 1, 123, 1, 123, 1, 124, 1, 124, 1, 125, 1, 125, 1, 126, 1, 126, 5, 126, 1404, 8, 126, 10,
		126, 12, 126, 1407, 9, 126, 1, 127, 1, 127, 1, 127, 1, 127, 3, 127, 1413, 8, 127, 1, 128, 1, 128, 1, 128, 5, 128,
		1418, 8, 128, 10, 128, 12, 128, 1421, 9, 128, 1, 129, 1, 129, 4, 129, 1425, 8, 129, 11, 129, 12, 129, 1426, 1,
		130, 1, 130, 1, 130, 1, 130, 1, 131, 1, 131, 1, 131, 1, 131, 1, 132, 3, 132, 1438, 8, 132, 1, 132, 1, 132, 1, 132,
		1, 132, 1, 132, 1, 132, 3, 132, 1446, 8, 132, 1, 133, 3, 133, 1449, 8, 133, 1, 133, 1, 133, 3, 133, 1453, 8, 133,
		1, 133, 1, 133, 3, 133, 1457, 8, 133, 1, 133, 1, 133, 1, 134, 1, 134, 3, 134, 1463, 8, 134, 1, 135, 1, 135, 1,
		135, 1, 135, 3, 135, 1469, 8, 135, 1, 136, 3, 136, 1472, 8, 136, 1, 136, 3, 136, 1475, 8, 136, 1, 137, 1, 137, 1,
		137, 1, 137, 1, 137, 1, 137, 1, 137, 1, 137, 3, 137, 1485, 8, 137, 1, 137, 3, 137, 1488, 8, 137, 1, 137, 1, 137,
		1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 3, 138, 1501, 8, 138, 1, 139, 5, 139,
		1504, 8, 139, 10, 139, 12, 139, 1507, 9, 139, 1, 140, 1, 140, 1, 140, 1, 140, 1, 140, 1, 140, 3, 140, 1515, 8,
		140, 1, 140, 3, 140, 1518, 8, 140, 1, 140, 1, 140, 1, 141, 1, 141, 1, 141, 1, 141, 1, 141, 1, 141, 1, 141, 1, 141,
		1, 141, 1, 141, 1, 141, 1, 141, 1, 141, 1, 141, 3, 141, 1536, 8, 141, 1, 142, 5, 142, 1539, 8, 142, 10, 142, 12,
		142, 1542, 9, 142, 1, 143, 1, 143, 1, 143, 1, 143, 1, 144, 1, 144, 1, 144, 1, 145, 1, 145, 1, 145, 1, 145, 5, 145,
		1555, 8, 145, 10, 145, 12, 145, 1558, 9, 145, 1, 145, 1, 145, 1, 145, 3, 145, 1563, 8, 145, 1, 146, 1, 146, 1,
		146, 1, 146, 1, 146, 1, 146, 1, 147, 1, 147, 1, 148, 1, 148, 1, 148, 1, 148, 1, 148, 1, 148, 1, 149, 1, 149, 1,
		149, 1, 149, 1, 149, 1, 149, 1, 149, 1, 149, 1, 149, 3, 149, 1588, 8, 149, 1, 150, 1, 150, 1, 150, 3, 150, 1593,
		8, 150, 1, 151, 1, 151, 1, 151, 1, 151, 1, 151, 3, 151, 1600, 8, 151, 1, 152, 3, 152, 1603, 8, 152, 1, 152, 1,
		152, 1, 152, 1, 153, 1, 153, 1, 153, 1, 153, 1, 153, 1, 153, 1, 153, 1, 153, 1, 153, 1, 153, 1, 153, 3, 153, 1619,
		8, 153, 1, 154, 5, 154, 1622, 8, 154, 10, 154, 12, 154, 1625, 9, 154, 1, 155, 3, 155, 1628, 8, 155, 1, 155, 1,
		155, 1, 155, 1, 155, 1, 155, 3, 155, 1635, 8, 155, 1, 155, 3, 155, 1638, 8, 155, 1, 155, 1, 155, 1, 155, 1, 155,
		1, 155, 1, 155, 3, 155, 1646, 8, 155, 1, 155, 1, 155, 1, 156, 3, 156, 1651, 8, 156, 1, 156, 3, 156, 1654, 8, 156,
		1, 156, 1, 156, 1, 156, 1, 156, 1, 156, 3, 156, 1661, 8, 156, 1, 156, 3, 156, 1664, 8, 156, 1, 156, 1, 156, 1,
		156, 1, 156, 1, 156, 3, 156, 1671, 8, 156, 1, 156, 1, 156, 3, 156, 1675, 8, 156, 1, 156, 1, 156, 1, 157, 5, 157,
		1680, 8, 157, 10, 157, 12, 157, 1683, 9, 157, 1, 158, 1, 158, 1, 158, 1, 158, 1, 158, 1, 158, 1, 158, 3, 158,
		1692, 8, 158, 1, 159, 1, 159, 3, 159, 1696, 8, 159, 1, 160, 1, 160, 1, 160, 1, 160, 3, 160, 1702, 8, 160, 1, 161,
		1, 161, 1, 161, 1, 162, 1, 162, 4, 162, 1709, 8, 162, 11, 162, 12, 162, 1710, 1, 162, 1, 162, 1, 162, 3, 162,
		1716, 8, 162, 1, 163, 1, 163, 1, 163, 1, 163, 3, 163, 1722, 8, 163, 1, 164, 1, 164, 1, 165, 3, 165, 1727, 8, 165,
		1, 165, 1, 165, 1, 165, 1, 165, 3, 165, 1733, 8, 165, 1, 165, 1, 165, 1, 166, 3, 166, 1738, 8, 166, 1, 166, 1,
		166, 3, 166, 1742, 8, 166, 1, 166, 1, 166, 1, 167, 1, 167, 1, 167, 3, 167, 1749, 8, 167, 1, 168, 1, 168, 3, 168,
		1753, 8, 168, 1, 169, 1, 169, 1, 169, 1, 169, 1, 169, 1, 170, 1, 170, 1, 170, 1, 170, 1, 170, 1, 170, 1, 170, 1,
		170, 1, 170, 1, 171, 1, 171, 1, 171, 1, 171, 1, 171, 1, 171, 1, 171, 1, 171, 5, 171, 1777, 8, 171, 10, 171, 12,
		171, 1780, 9, 171, 1, 172, 1, 172, 1, 172, 1, 173, 1, 173, 1, 173, 5, 173, 1788, 8, 173, 10, 173, 12, 173, 1791,
		9, 173, 1, 174, 5, 174, 1794, 8, 174, 10, 174, 12, 174, 1797, 9, 174, 1, 175, 1, 175, 1, 175, 1, 175, 1, 175, 1,
		175, 1, 175, 1, 175, 1, 175, 1, 175, 1, 175, 1, 175, 3, 175, 1811, 8, 175, 1, 175, 1, 175, 1, 175, 3, 175, 1816,
		8, 175, 1, 176, 1, 176, 1, 176, 1, 176, 3, 176, 1822, 8, 176, 1, 177, 1, 177, 1, 178, 3, 178, 1827, 8, 178, 1,
		178, 1, 178, 1, 178, 3, 178, 1832, 8, 178, 1, 178, 1, 178, 1, 178, 1, 179, 1, 179, 1, 179, 1, 179, 1, 179, 3, 179,
		1842, 8, 179, 1, 179, 1, 179, 3, 179, 1846, 8, 179, 1, 179, 1, 179, 1, 180, 1, 180, 1, 181, 1, 181, 1, 181, 5,
		181, 1855, 8, 181, 10, 181, 12, 181, 1858, 9, 181, 1, 181, 1, 181, 3, 181, 1862, 8, 181, 1, 182, 1, 182, 1, 182,
		1, 182, 5, 182, 1868, 8, 182, 10, 182, 12, 182, 1871, 9, 182, 3, 182, 1873, 8, 182, 1, 182, 1, 182, 3, 182, 1877,
		8, 182, 1, 182, 1, 182, 1, 183, 3, 183, 1882, 8, 183, 1, 183, 1, 183, 1, 183, 1, 183, 5, 183, 1888, 8, 183, 10,
		183, 12, 183, 1891, 9, 183, 1, 184, 3, 184, 1894, 8, 184, 1, 184, 1, 184, 1, 184, 1, 184, 1, 184, 1, 185, 1, 185,
		1, 185, 1, 185, 1, 185, 1, 186, 3, 186, 1907, 8, 186, 1, 186, 1, 186, 1, 186, 1, 186, 4, 186, 1913, 8, 186, 11,
		186, 12, 186, 1914, 1, 186, 1, 186, 1, 186, 3, 186, 1920, 8, 186, 1, 186, 1, 186, 1, 187, 3, 187, 1925, 8, 187, 1,
		187, 1, 187, 1, 187, 1, 187, 1, 187, 1, 187, 1, 187, 1, 187, 1, 187, 5, 187, 1936, 8, 187, 10, 187, 12, 187, 1939,
		9, 187, 1, 187, 1, 187, 3, 187, 1943, 8, 187, 1, 187, 1, 187, 1, 187, 3, 187, 1948, 8, 187, 1, 187, 1, 187, 1,
		188, 1, 188, 1, 188, 1, 188, 3, 188, 1956, 8, 188, 1, 188, 1, 188, 3, 188, 1960, 8, 188, 1, 189, 5, 189, 1963, 8,
		189, 10, 189, 12, 189, 1966, 9, 189, 1, 190, 1, 190, 1, 190, 1, 190, 1, 190, 1, 190, 1, 190, 3, 190, 1975, 8, 190,
		1, 190, 3, 190, 1978, 8, 190, 1, 190, 1, 190, 1, 191, 1, 191, 1, 191, 1, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1,
		192, 1, 192, 1, 192, 1, 192, 1, 192, 1, 192, 3, 192, 1996, 8, 192, 1, 193, 5, 193, 1999, 8, 193, 10, 193, 12, 193,
		2002, 9, 193, 1, 194, 1, 194, 1, 195, 1, 195, 3, 195, 2008, 8, 195, 1, 196, 1, 196, 1, 196, 1, 196, 1, 196, 1,
		196, 3, 196, 2016, 8, 196, 1, 197, 3, 197, 2019, 8, 197, 1, 197, 1, 197, 1, 197, 1, 197, 1, 197, 1, 197, 3, 197,
		2027, 8, 197, 1, 197, 1, 197, 1, 197, 1, 198, 5, 198, 2033, 8, 198, 10, 198, 12, 198, 2036, 9, 198, 1, 199, 1,
		199, 1, 199, 1, 199, 1, 199, 1, 199, 1, 200, 1, 200, 3, 200, 2046, 8, 200, 1, 200, 3, 200, 2049, 8, 200, 1, 201,
		1, 201, 1, 202, 1, 202, 3, 202, 2055, 8, 202, 1, 203, 1, 203, 1, 203, 1, 203, 5, 203, 2061, 8, 203, 10, 203, 12,
		203, 2064, 9, 203, 1, 204, 1, 204, 1, 204, 1, 205, 1, 205, 1, 205, 1, 205, 3, 205, 2073, 8, 205, 1, 205, 1, 205,
		1, 206, 1, 206, 1, 206, 1, 206, 3, 206, 2081, 8, 206, 1, 207, 1, 207, 1, 207, 1, 207, 1, 207, 5, 207, 2088, 8,
		207, 10, 207, 12, 207, 2091, 9, 207, 1, 207, 1, 207, 1, 207, 1, 207, 1, 208, 1, 208, 1, 208, 1, 208, 5, 208, 2101,
		8, 208, 10, 208, 12, 208, 2104, 9, 208, 1, 208, 1, 208, 1, 209, 3, 209, 2109, 8, 209, 1, 209, 1, 209, 1, 209, 1,
		209, 1, 209, 1, 210, 3, 210, 2117, 8, 210, 1, 210, 1, 210, 1, 210, 1, 210, 1, 210, 1, 210, 3, 210, 2125, 8, 210,
		1, 210, 1, 210, 1, 211, 3, 211, 2130, 8, 211, 1, 211, 1, 211, 3, 211, 2134, 8, 211, 1, 211, 3, 211, 2137, 8, 211,
		1, 211, 3, 211, 2140, 8, 211, 1, 211, 1, 211, 1, 212, 1, 212, 1, 212, 5, 212, 2147, 8, 212, 10, 212, 12, 212,
		2150, 9, 212, 1, 212, 3, 212, 2153, 8, 212, 1, 213, 1, 213, 1, 213, 3, 213, 2158, 8, 213, 1, 213, 0, 0, 214, 0, 2,
		4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60,
		62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112,
		114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158,
		160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204,
		206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250,
		252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296,
		298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342,
		344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388,
		390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 0, 16, 2, 0, 106,
		107, 111, 111, 1, 0, 128, 130, 1, 0, 129, 130, 2, 0, 24, 24, 86, 86, 13, 0, 10, 10, 20, 22, 26, 26, 30, 30, 32,
		32, 43, 43, 61, 61, 65, 65, 79, 79, 84, 84, 88, 88, 90, 90, 93, 93, 2, 0, 128, 128, 130, 130, 5, 0, 9, 9, 49, 49,
		52, 52, 58, 58, 98, 99, 5, 0, 17, 17, 39, 39, 41, 41, 45, 45, 60, 60, 3, 0, 48, 48, 69, 69, 108, 109, 1, 0, 100,
		105, 2, 0, 74, 75, 80, 83, 2, 0, 18, 18, 71, 71, 1, 0, 106, 107, 2, 0, 32, 32, 65, 65, 2, 0, 38, 38, 66, 66, 2, 0,
		8, 8, 128, 130, 2302, 0, 428, 1, 0, 0, 0, 2, 433, 1, 0, 0, 0, 4, 435, 1, 0, 0, 0, 6, 443, 1, 0, 0, 0, 8, 445, 1,
		0, 0, 0, 10, 447, 1, 0, 0, 0, 12, 458, 1, 0, 0, 0, 14, 471, 1, 0, 0, 0, 16, 473, 1, 0, 0, 0, 18, 475, 1, 0, 0, 0,
		20, 480, 1, 0, 0, 0, 22, 500, 1, 0, 0, 0, 24, 524, 1, 0, 0, 0, 26, 529, 1, 0, 0, 0, 28, 534, 1, 0, 0, 0, 30, 536,
		1, 0, 0, 0, 32, 547, 1, 0, 0, 0, 34, 555, 1, 0, 0, 0, 36, 559, 1, 0, 0, 0, 38, 567, 1, 0, 0, 0, 40, 572, 1, 0, 0,
		0, 42, 574, 1, 0, 0, 0, 44, 582, 1, 0, 0, 0, 46, 587, 1, 0, 0, 0, 48, 595, 1, 0, 0, 0, 50, 628, 1, 0, 0, 0, 52,
		633, 1, 0, 0, 0, 54, 642, 1, 0, 0, 0, 56, 660, 1, 0, 0, 0, 58, 662, 1, 0, 0, 0, 60, 687, 1, 0, 0, 0, 62, 691, 1,
		0, 0, 0, 64, 708, 1, 0, 0, 0, 66, 717, 1, 0, 0, 0, 68, 719, 1, 0, 0, 0, 70, 727, 1, 0, 0, 0, 72, 741, 1, 0, 0, 0,
		74, 759, 1, 0, 0, 0, 76, 769, 1, 0, 0, 0, 78, 775, 1, 0, 0, 0, 80, 778, 1, 0, 0, 0, 82, 787, 1, 0, 0, 0, 84, 796,
		1, 0, 0, 0, 86, 805, 1, 0, 0, 0, 88, 807, 1, 0, 0, 0, 90, 810, 1, 0, 0, 0, 92, 816, 1, 0, 0, 0, 94, 825, 1, 0, 0,
		0, 96, 843, 1, 0, 0, 0, 98, 848, 1, 0, 0, 0, 100, 853, 1, 0, 0, 0, 102, 855, 1, 0, 0, 0, 104, 860, 1, 0, 0, 0,
		106, 870, 1, 0, 0, 0, 108, 877, 1, 0, 0, 0, 110, 882, 1, 0, 0, 0, 112, 887, 1, 0, 0, 0, 114, 895, 1, 0, 0, 0, 116,
		900, 1, 0, 0, 0, 118, 905, 1, 0, 0, 0, 120, 908, 1, 0, 0, 0, 122, 910, 1, 0, 0, 0, 124, 912, 1, 0, 0, 0, 126, 920,
		1, 0, 0, 0, 128, 925, 1, 0, 0, 0, 130, 929, 1, 0, 0, 0, 132, 934, 1, 0, 0, 0, 134, 946, 1, 0, 0, 0, 136, 948, 1,
		0, 0, 0, 138, 950, 1, 0, 0, 0, 140, 954, 1, 0, 0, 0, 142, 962, 1, 0, 0, 0, 144, 993, 1, 0, 0, 0, 146, 998, 1, 0,
		0, 0, 148, 1001, 1, 0, 0, 0, 150, 1006, 1, 0, 0, 0, 152, 1021, 1, 0, 0, 0, 154, 1023, 1, 0, 0, 0, 156, 1031, 1, 0,
		0, 0, 158, 1036, 1, 0, 0, 0, 160, 1039, 1, 0, 0, 0, 162, 1041, 1, 0, 0, 0, 164, 1043, 1, 0, 0, 0, 166, 1055, 1, 0,
		0, 0, 168, 1067, 1, 0, 0, 0, 170, 1085, 1, 0, 0, 0, 172, 1087, 1, 0, 0, 0, 174, 1096, 1, 0, 0, 0, 176, 1100, 1, 0,
		0, 0, 178, 1105, 1, 0, 0, 0, 180, 1109, 1, 0, 0, 0, 182, 1117, 1, 0, 0, 0, 184, 1119, 1, 0, 0, 0, 186, 1148, 1, 0,
		0, 0, 188, 1150, 1, 0, 0, 0, 190, 1156, 1, 0, 0, 0, 192, 1164, 1, 0, 0, 0, 194, 1170, 1, 0, 0, 0, 196, 1174, 1, 0,
		0, 0, 198, 1183, 1, 0, 0, 0, 200, 1210, 1, 0, 0, 0, 202, 1223, 1, 0, 0, 0, 204, 1225, 1, 0, 0, 0, 206, 1242, 1, 0,
		0, 0, 208, 1254, 1, 0, 0, 0, 210, 1257, 1, 0, 0, 0, 212, 1273, 1, 0, 0, 0, 214, 1275, 1, 0, 0, 0, 216, 1277, 1, 0,
		0, 0, 218, 1282, 1, 0, 0, 0, 220, 1290, 1, 0, 0, 0, 222, 1298, 1, 0, 0, 0, 224, 1306, 1, 0, 0, 0, 226, 1319, 1, 0,
		0, 0, 228, 1334, 1, 0, 0, 0, 230, 1350, 1, 0, 0, 0, 232, 1352, 1, 0, 0, 0, 234, 1355, 1, 0, 0, 0, 236, 1361, 1, 0,
		0, 0, 238, 1368, 1, 0, 0, 0, 240, 1370, 1, 0, 0, 0, 242, 1372, 1, 0, 0, 0, 244, 1380, 1, 0, 0, 0, 246, 1383, 1, 0,
		0, 0, 248, 1397, 1, 0, 0, 0, 250, 1399, 1, 0, 0, 0, 252, 1401, 1, 0, 0, 0, 254, 1412, 1, 0, 0, 0, 256, 1414, 1, 0,
		0, 0, 258, 1424, 1, 0, 0, 0, 260, 1428, 1, 0, 0, 0, 262, 1432, 1, 0, 0, 0, 264, 1437, 1, 0, 0, 0, 266, 1448, 1, 0,
		0, 0, 268, 1462, 1, 0, 0, 0, 270, 1468, 1, 0, 0, 0, 272, 1471, 1, 0, 0, 0, 274, 1476, 1, 0, 0, 0, 276, 1500, 1, 0,
		0, 0, 278, 1505, 1, 0, 0, 0, 280, 1508, 1, 0, 0, 0, 282, 1535, 1, 0, 0, 0, 284, 1540, 1, 0, 0, 0, 286, 1543, 1, 0,
		0, 0, 288, 1547, 1, 0, 0, 0, 290, 1550, 1, 0, 0, 0, 292, 1564, 1, 0, 0, 0, 294, 1570, 1, 0, 0, 0, 296, 1572, 1, 0,
		0, 0, 298, 1587, 1, 0, 0, 0, 300, 1592, 1, 0, 0, 0, 302, 1594, 1, 0, 0, 0, 304, 1602, 1, 0, 0, 0, 306, 1618, 1, 0,
		0, 0, 308, 1623, 1, 0, 0, 0, 310, 1627, 1, 0, 0, 0, 312, 1650, 1, 0, 0, 0, 314, 1681, 1, 0, 0, 0, 316, 1684, 1, 0,
		0, 0, 318, 1695, 1, 0, 0, 0, 320, 1697, 1, 0, 0, 0, 322, 1703, 1, 0, 0, 0, 324, 1706, 1, 0, 0, 0, 326, 1717, 1, 0,
		0, 0, 328, 1723, 1, 0, 0, 0, 330, 1726, 1, 0, 0, 0, 332, 1737, 1, 0, 0, 0, 334, 1748, 1, 0, 0, 0, 336, 1752, 1, 0,
		0, 0, 338, 1754, 1, 0, 0, 0, 340, 1759, 1, 0, 0, 0, 342, 1768, 1, 0, 0, 0, 344, 1781, 1, 0, 0, 0, 346, 1784, 1, 0,
		0, 0, 348, 1795, 1, 0, 0, 0, 350, 1815, 1, 0, 0, 0, 352, 1817, 1, 0, 0, 0, 354, 1823, 1, 0, 0, 0, 356, 1826, 1, 0,
		0, 0, 358, 1836, 1, 0, 0, 0, 360, 1849, 1, 0, 0, 0, 362, 1861, 1, 0, 0, 0, 364, 1863, 1, 0, 0, 0, 366, 1881, 1, 0,
		0, 0, 368, 1893, 1, 0, 0, 0, 370, 1900, 1, 0, 0, 0, 372, 1906, 1, 0, 0, 0, 374, 1924, 1, 0, 0, 0, 376, 1959, 1, 0,
		0, 0, 378, 1964, 1, 0, 0, 0, 380, 1967, 1, 0, 0, 0, 382, 1981, 1, 0, 0, 0, 384, 1995, 1, 0, 0, 0, 386, 2000, 1, 0,
		0, 0, 388, 2003, 1, 0, 0, 0, 390, 2007, 1, 0, 0, 0, 392, 2009, 1, 0, 0, 0, 394, 2018, 1, 0, 0, 0, 396, 2034, 1, 0,
		0, 0, 398, 2037, 1, 0, 0, 0, 400, 2043, 1, 0, 0, 0, 402, 2050, 1, 0, 0, 0, 404, 2054, 1, 0, 0, 0, 406, 2056, 1, 0,
		0, 0, 408, 2065, 1, 0, 0, 0, 410, 2068, 1, 0, 0, 0, 412, 2080, 1, 0, 0, 0, 414, 2082, 1, 0, 0, 0, 416, 2096, 1, 0,
		0, 0, 418, 2108, 1, 0, 0, 0, 420, 2116, 1, 0, 0, 0, 422, 2129, 1, 0, 0, 0, 424, 2152, 1, 0, 0, 0, 426, 2154, 1, 0,
		0, 0, 428, 429, 5, 5, 0, 0, 429, 430, 3, 400, 200, 0, 430, 1, 1, 0, 0, 0, 431, 434, 3, 168, 84, 0, 432, 434, 5,
		57, 0, 0, 433, 431, 1, 0, 0, 0, 433, 432, 1, 0, 0, 0, 434, 3, 1, 0, 0, 0, 435, 436, 3, 36, 18, 0, 436, 5, 1, 0, 0,
		0, 437, 438, 3, 252, 126, 0, 438, 439, 5, 116, 0, 0, 439, 440, 3, 2, 1, 0, 440, 441, 5, 117, 0, 0, 441, 444, 1, 0,
		0, 0, 442, 444, 3, 2, 1, 0, 443, 437, 1, 0, 0, 0, 443, 442, 1, 0, 0, 0, 444, 7, 1, 0, 0, 0, 445, 446, 7, 0, 0, 0,
		446, 9, 1, 0, 0, 0, 447, 448, 5, 116, 0, 0, 448, 453, 3, 128, 64, 0, 449, 450, 5, 122, 0, 0, 450, 452, 3, 128, 64,
		0, 451, 449, 1, 0, 0, 0, 452, 455, 1, 0, 0, 0, 453, 451, 1, 0, 0, 0, 453, 454, 1, 0, 0, 0, 454, 456, 1, 0, 0, 0,
		455, 453, 1, 0, 0, 0, 456, 457, 5, 117, 0, 0, 457, 11, 1, 0, 0, 0, 458, 459, 5, 7, 0, 0, 459, 462, 3, 14, 7, 0,
		460, 461, 5, 120, 0, 0, 461, 463, 3, 16, 8, 0, 462, 460, 1, 0, 0, 0, 462, 463, 1, 0, 0, 0, 463, 464, 1, 0, 0, 0,
		464, 465, 5, 42, 0, 0, 465, 467, 3, 252, 126, 0, 466, 468, 3, 364, 182, 0, 467, 466, 1, 0, 0, 0, 467, 468, 1, 0,
		0, 0, 468, 469, 1, 0, 0, 0, 469, 470, 5, 121, 0, 0, 470, 13, 1, 0, 0, 0, 471, 472, 7, 1, 0, 0, 472, 15, 1, 0, 0,
		0, 473, 474, 3, 400, 200, 0, 474, 17, 1, 0, 0, 0, 475, 478, 5, 50, 0, 0, 476, 479, 3, 316, 158, 0, 477, 479, 3,
		400, 200, 0, 478, 476, 1, 0, 0, 0, 478, 477, 1, 0, 0, 0, 479, 19, 1, 0, 0, 0, 480, 481, 5, 10, 0, 0, 481, 482, 5,
		130, 0, 0, 482, 483, 5, 55, 0, 0, 483, 484, 5, 130, 0, 0, 484, 485, 5, 42, 0, 0, 485, 486, 3, 22, 11, 0, 486, 487,
		5, 14, 0, 0, 487, 488, 3, 26, 13, 0, 488, 490, 5, 25, 0, 0, 489, 491, 5, 10, 0, 0, 490, 489, 1, 0, 0, 0, 490, 491,
		1, 0, 0, 0, 491, 493, 1, 0, 0, 0, 492, 494, 5, 130, 0, 0, 493, 492, 1, 0, 0, 0, 493, 494, 1, 0, 0, 0, 494, 495, 1,
		0, 0, 0, 495, 496, 5, 121, 0, 0, 496, 21, 1, 0, 0, 0, 497, 499, 3, 50, 25, 0, 498, 497, 1, 0, 0, 0, 499, 502, 1,
		0, 0, 0, 500, 498, 1, 0, 0, 0, 500, 501, 1, 0, 0, 0, 501, 23, 1, 0, 0, 0, 502, 500, 1, 0, 0, 0, 503, 525, 3, 58,
		29, 0, 504, 525, 3, 310, 155, 0, 505, 525, 3, 312, 156, 0, 506, 508, 3, 232, 116, 0, 507, 506, 1, 0, 0, 0, 507,
		508, 1, 0, 0, 0, 508, 509, 1, 0, 0, 0, 509, 525, 3, 82, 41, 0, 510, 512, 3, 232, 116, 0, 511, 510, 1, 0, 0, 0,
		511, 512, 1, 0, 0, 0, 512, 513, 1, 0, 0, 0, 513, 525, 3, 80, 40, 0, 514, 516, 3, 232, 116, 0, 515, 514, 1, 0, 0,
		0, 515, 516, 1, 0, 0, 0, 516, 518, 1, 0, 0, 0, 517, 519, 5, 63, 0, 0, 518, 517, 1, 0, 0, 0, 518, 519, 1, 0, 0, 0,
		519, 520, 1, 0, 0, 0, 520, 525, 3, 84, 42, 0, 521, 525, 3, 74, 37, 0, 522, 525, 3, 184, 92, 0, 523, 525, 3, 376,
		188, 0, 524, 503, 1, 0, 0, 0, 524, 504, 1, 0, 0, 0, 524, 505, 1, 0, 0, 0, 524, 507, 1, 0, 0, 0, 524, 511, 1, 0, 0,
		0, 524, 515, 1, 0, 0, 0, 524, 521, 1, 0, 0, 0, 524, 522, 1, 0, 0, 0, 524, 523, 1, 0, 0, 0, 525, 25, 1, 0, 0, 0,
		526, 528, 3, 24, 12, 0, 527, 526, 1, 0, 0, 0, 528, 531, 1, 0, 0, 0, 529, 527, 1, 0, 0, 0, 529, 530, 1, 0, 0, 0,
		530, 27, 1, 0, 0, 0, 531, 529, 1, 0, 0, 0, 532, 535, 3, 414, 207, 0, 533, 535, 3, 106, 53, 0, 534, 532, 1, 0, 0,
		0, 534, 533, 1, 0, 0, 0, 535, 29, 1, 0, 0, 0, 536, 537, 5, 12, 0, 0, 537, 540, 3, 86, 43, 0, 538, 539, 5, 72, 0,
		0, 539, 541, 3, 168, 84, 0, 540, 538, 1, 0, 0, 0, 540, 541, 1, 0, 0, 0, 541, 544, 1, 0, 0, 0, 542, 543, 5, 77, 0,
		0, 543, 545, 3, 168, 84, 0, 544, 542, 1, 0, 0, 0, 544, 545, 1, 0, 0, 0, 545, 31, 1, 0, 0, 0, 546, 548, 3, 232,
		116, 0, 547, 546, 1, 0, 0, 0, 547, 548, 1, 0, 0, 0, 548, 549, 1, 0, 0, 0, 549, 550, 3, 30, 15, 0, 550, 551, 5,
		121, 0, 0, 551, 33, 1, 0, 0, 0, 552, 553, 3, 182, 91, 0, 553, 554, 5, 112, 0, 0, 554, 556, 1, 0, 0, 0, 555, 552,
		1, 0, 0, 0, 555, 556, 1, 0, 0, 0, 556, 557, 1, 0, 0, 0, 557, 558, 3, 6, 3, 0, 558, 35, 1, 0, 0, 0, 559, 564, 3,
		34, 17, 0, 560, 561, 5, 122, 0, 0, 561, 563, 3, 34, 17, 0, 562, 560, 1, 0, 0, 0, 563, 566, 1, 0, 0, 0, 564, 562,
		1, 0, 0, 0, 564, 565, 1, 0, 0, 0, 565, 37, 1, 0, 0, 0, 566, 564, 1, 0, 0, 0, 567, 568, 5, 13, 0, 0, 568, 569, 3,
		232, 116, 0, 569, 570, 3, 252, 126, 0, 570, 571, 5, 121, 0, 0, 571, 39, 1, 0, 0, 0, 572, 573, 5, 130, 0, 0, 573,
		41, 1, 0, 0, 0, 574, 575, 5, 13, 0, 0, 575, 576, 3, 40, 20, 0, 576, 577, 5, 55, 0, 0, 577, 578, 3, 154, 77, 0,
		578, 579, 5, 42, 0, 0, 579, 580, 3, 168, 84, 0, 580, 581, 5, 121, 0, 0, 581, 43, 1, 0, 0, 0, 582, 583, 5, 130, 0,
		0, 583, 584, 5, 121, 0, 0, 584, 45, 1, 0, 0, 0, 585, 586, 5, 92, 0, 0, 586, 588, 3, 134, 67, 0, 587, 585, 1, 0, 0,
		0, 587, 588, 1, 0, 0, 0, 588, 590, 1, 0, 0, 0, 589, 591, 3, 192, 96, 0, 590, 589, 1, 0, 0, 0, 590, 591, 1, 0, 0,
		0, 591, 593, 1, 0, 0, 0, 592, 594, 3, 296, 148, 0, 593, 592, 1, 0, 0, 0, 593, 594, 1, 0, 0, 0, 594, 47, 1, 0, 0,
		0, 595, 596, 5, 31, 0, 0, 596, 600, 3, 56, 28, 0, 597, 599, 3, 416, 208, 0, 598, 597, 1, 0, 0, 0, 599, 602, 1, 0,
		0, 0, 600, 598, 1, 0, 0, 0, 600, 601, 1, 0, 0, 0, 601, 606, 1, 0, 0, 0, 602, 600, 1, 0, 0, 0, 603, 605, 3, 100,
		50, 0, 604, 603, 1, 0, 0, 0, 605, 608, 1, 0, 0, 0, 606, 604, 1, 0, 0, 0, 606, 607, 1, 0, 0, 0, 607, 609, 1, 0, 0,
		0, 608, 606, 1, 0, 0, 0, 609, 610, 5, 25, 0, 0, 610, 611, 5, 31, 0, 0, 611, 612, 5, 121, 0, 0, 612, 49, 1, 0, 0,
		0, 613, 629, 3, 382, 191, 0, 614, 629, 3, 380, 190, 0, 615, 629, 3, 410, 205, 0, 616, 629, 3, 398, 199, 0, 617,
		629, 3, 104, 52, 0, 618, 629, 3, 358, 179, 0, 619, 629, 3, 420, 210, 0, 620, 629, 3, 172, 86, 0, 621, 629, 3, 12,
		6, 0, 622, 629, 3, 72, 36, 0, 623, 629, 3, 38, 19, 0, 624, 629, 3, 42, 21, 0, 625, 629, 3, 102, 51, 0, 626, 629,
		3, 124, 62, 0, 627, 629, 3, 416, 208, 0, 628, 613, 1, 0, 0, 0, 628, 614, 1, 0, 0, 0, 628, 615, 1, 0, 0, 0, 628,
		616, 1, 0, 0, 0, 628, 617, 1, 0, 0, 0, 628, 618, 1, 0, 0, 0, 628, 619, 1, 0, 0, 0, 628, 620, 1, 0, 0, 0, 628, 621,
		1, 0, 0, 0, 628, 622, 1, 0, 0, 0, 628, 623, 1, 0, 0, 0, 628, 624, 1, 0, 0, 0, 628, 625, 1, 0, 0, 0, 628, 626, 1,
		0, 0, 0, 628, 627, 1, 0, 0, 0, 629, 51, 1, 0, 0, 0, 630, 632, 3, 50, 25, 0, 631, 630, 1, 0, 0, 0, 632, 635, 1, 0,
		0, 0, 633, 631, 1, 0, 0, 0, 633, 634, 1, 0, 0, 0, 634, 53, 1, 0, 0, 0, 635, 633, 1, 0, 0, 0, 636, 640, 3, 188, 94,
		0, 637, 638, 3, 192, 96, 0, 638, 639, 5, 121, 0, 0, 639, 641, 1, 0, 0, 0, 640, 637, 1, 0, 0, 0, 640, 641, 1, 0, 0,
		0, 641, 643, 1, 0, 0, 0, 642, 636, 1, 0, 0, 0, 642, 643, 1, 0, 0, 0, 643, 650, 1, 0, 0, 0, 644, 648, 3, 292, 146,
		0, 645, 646, 3, 296, 148, 0, 646, 647, 5, 121, 0, 0, 647, 649, 1, 0, 0, 0, 648, 645, 1, 0, 0, 0, 648, 649, 1, 0,
		0, 0, 649, 651, 1, 0, 0, 0, 650, 644, 1, 0, 0, 0, 650, 651, 1, 0, 0, 0, 651, 55, 1, 0, 0, 0, 652, 657, 5, 130, 0,
		0, 653, 654, 5, 116, 0, 0, 654, 655, 3, 202, 101, 0, 655, 656, 5, 117, 0, 0, 656, 658, 1, 0, 0, 0, 657, 653, 1, 0,
		0, 0, 657, 658, 1, 0, 0, 0, 658, 661, 1, 0, 0, 0, 659, 661, 3, 252, 126, 0, 660, 652, 1, 0, 0, 0, 660, 659, 1, 0,
		0, 0, 661, 57, 1, 0, 0, 0, 662, 663, 3, 232, 116, 0, 663, 668, 5, 15, 0, 0, 664, 665, 5, 116, 0, 0, 665, 666, 3,
		168, 84, 0, 666, 667, 5, 117, 0, 0, 667, 669, 1, 0, 0, 0, 668, 664, 1, 0, 0, 0, 668, 669, 1, 0, 0, 0, 669, 671, 1,
		0, 0, 0, 670, 672, 5, 42, 0, 0, 671, 670, 1, 0, 0, 0, 671, 672, 1, 0, 0, 0, 672, 673, 1, 0, 0, 0, 673, 674, 3, 54,
		27, 0, 674, 675, 3, 52, 26, 0, 675, 676, 5, 14, 0, 0, 676, 677, 3, 60, 30, 0, 677, 678, 5, 25, 0, 0, 678, 680, 5,
		15, 0, 0, 679, 681, 5, 130, 0, 0, 680, 679, 1, 0, 0, 0, 680, 681, 1, 0, 0, 0, 681, 682, 1, 0, 0, 0, 682, 683, 5,
		121, 0, 0, 683, 59, 1, 0, 0, 0, 684, 686, 3, 24, 12, 0, 685, 684, 1, 0, 0, 0, 686, 689, 1, 0, 0, 0, 687, 685, 1,
		0, 0, 0, 687, 688, 1, 0, 0, 0, 688, 61, 1, 0, 0, 0, 689, 687, 1, 0, 0, 0, 690, 692, 3, 232, 116, 0, 691, 690, 1,
		0, 0, 0, 691, 692, 1, 0, 0, 0, 692, 693, 1, 0, 0, 0, 693, 694, 5, 19, 0, 0, 694, 695, 3, 168, 84, 0, 695, 697, 5,
		42, 0, 0, 696, 698, 3, 64, 32, 0, 697, 696, 1, 0, 0, 0, 698, 699, 1, 0, 0, 0, 699, 697, 1, 0, 0, 0, 699, 700, 1,
		0, 0, 0, 700, 701, 1, 0, 0, 0, 701, 702, 5, 25, 0, 0, 702, 704, 5, 19, 0, 0, 703, 705, 5, 130, 0, 0, 704, 703, 1,
		0, 0, 0, 704, 705, 1, 0, 0, 0, 705, 706, 1, 0, 0, 0, 706, 707, 5, 121, 0, 0, 707, 63, 1, 0, 0, 0, 708, 709, 5, 96,
		0, 0, 709, 710, 3, 68, 34, 0, 710, 711, 5, 112, 0, 0, 711, 712, 3, 348, 174, 0, 712, 65, 1, 0, 0, 0, 713, 718, 5,
		130, 0, 0, 714, 718, 3, 126, 63, 0, 715, 718, 3, 366, 183, 0, 716, 718, 5, 59, 0, 0, 717, 713, 1, 0, 0, 0, 717,
		714, 1, 0, 0, 0, 717, 715, 1, 0, 0, 0, 717, 716, 1, 0, 0, 0, 718, 67, 1, 0, 0, 0, 719, 724, 3, 66, 33, 0, 720,
		721, 5, 123, 0, 0, 721, 723, 3, 66, 33, 0, 722, 720, 1, 0, 0, 0, 723, 726, 1, 0, 0, 0, 724, 722, 1, 0, 0, 0, 724,
		725, 1, 0, 0, 0, 725, 69, 1, 0, 0, 0, 726, 724, 1, 0, 0, 0, 727, 728, 5, 31, 0, 0, 728, 732, 3, 76, 38, 0, 729,
		730, 3, 46, 23, 0, 730, 731, 5, 121, 0, 0, 731, 733, 1, 0, 0, 0, 732, 729, 1, 0, 0, 0, 732, 733, 1, 0, 0, 0, 733,
		735, 1, 0, 0, 0, 734, 736, 3, 48, 24, 0, 735, 734, 1, 0, 0, 0, 735, 736, 1, 0, 0, 0, 736, 737, 1, 0, 0, 0, 737,
		738, 5, 25, 0, 0, 738, 739, 5, 31, 0, 0, 739, 740, 5, 121, 0, 0, 740, 71, 1, 0, 0, 0, 741, 742, 5, 20, 0, 0, 742,
		744, 5, 130, 0, 0, 743, 745, 5, 42, 0, 0, 744, 743, 1, 0, 0, 0, 744, 745, 1, 0, 0, 0, 745, 747, 1, 0, 0, 0, 746,
		748, 3, 188, 94, 0, 747, 746, 1, 0, 0, 0, 747, 748, 1, 0, 0, 0, 748, 750, 1, 0, 0, 0, 749, 751, 3, 292, 146, 0,
		750, 749, 1, 0, 0, 0, 750, 751, 1, 0, 0, 0, 751, 752, 1, 0, 0, 0, 752, 753, 5, 25, 0, 0, 753, 755, 5, 20, 0, 0,
		754, 756, 5, 130, 0, 0, 755, 754, 1, 0, 0, 0, 755, 756, 1, 0, 0, 0, 756, 757, 1, 0, 0, 0, 757, 758, 5, 121, 0, 0,
		758, 73, 1, 0, 0, 0, 759, 760, 3, 232, 116, 0, 760, 762, 3, 206, 103, 0, 761, 763, 3, 192, 96, 0, 762, 761, 1, 0,
		0, 0, 762, 763, 1, 0, 0, 0, 763, 765, 1, 0, 0, 0, 764, 766, 3, 296, 148, 0, 765, 764, 1, 0, 0, 0, 765, 766, 1, 0,
		0, 0, 766, 767, 1, 0, 0, 0, 767, 768, 5, 121, 0, 0, 768, 75, 1, 0, 0, 0, 769, 770, 3, 208, 104, 0, 770, 771, 5,
		120, 0, 0, 771, 772, 3, 252, 126, 0, 772, 77, 1, 0, 0, 0, 773, 776, 3, 28, 14, 0, 774, 776, 3, 324, 162, 0, 775,
		773, 1, 0, 0, 0, 775, 774, 1, 0, 0, 0, 776, 79, 1, 0, 0, 0, 777, 779, 3, 232, 116, 0, 778, 777, 1, 0, 0, 0, 778,
		779, 1, 0, 0, 0, 779, 781, 1, 0, 0, 0, 780, 782, 5, 63, 0, 0, 781, 780, 1, 0, 0, 0, 781, 782, 1, 0, 0, 0, 782,
		783, 1, 0, 0, 0, 783, 784, 3, 30, 15, 0, 784, 785, 5, 121, 0, 0, 785, 81, 1, 0, 0, 0, 786, 788, 3, 232, 116, 0,
		787, 786, 1, 0, 0, 0, 787, 788, 1, 0, 0, 0, 788, 790, 1, 0, 0, 0, 789, 791, 5, 63, 0, 0, 790, 789, 1, 0, 0, 0,
		790, 791, 1, 0, 0, 0, 791, 792, 1, 0, 0, 0, 792, 793, 3, 302, 151, 0, 793, 794, 5, 121, 0, 0, 794, 83, 1, 0, 0, 0,
		795, 797, 3, 232, 116, 0, 796, 795, 1, 0, 0, 0, 796, 797, 1, 0, 0, 0, 797, 799, 1, 0, 0, 0, 798, 800, 5, 63, 0, 0,
		799, 798, 1, 0, 0, 0, 799, 800, 1, 0, 0, 0, 800, 803, 1, 0, 0, 0, 801, 804, 3, 90, 45, 0, 802, 804, 3, 340, 170,
		0, 803, 801, 1, 0, 0, 0, 803, 802, 1, 0, 0, 0, 804, 85, 1, 0, 0, 0, 805, 806, 3, 168, 84, 0, 806, 87, 1, 0, 0, 0,
		807, 808, 5, 91, 0, 0, 808, 809, 3, 86, 43, 0, 809, 89, 1, 0, 0, 0, 810, 811, 3, 404, 202, 0, 811, 812, 5, 113, 0,
		0, 812, 813, 3, 272, 136, 0, 813, 814, 3, 92, 46, 0, 814, 815, 5, 121, 0, 0, 815, 91, 1, 0, 0, 0, 816, 823, 3,
		424, 212, 0, 817, 818, 5, 96, 0, 0, 818, 821, 3, 86, 43, 0, 819, 820, 5, 27, 0, 0, 820, 822, 3, 92, 46, 0, 821,
		819, 1, 0, 0, 0, 821, 822, 1, 0, 0, 0, 822, 824, 1, 0, 0, 0, 823, 817, 1, 0, 0, 0, 823, 824, 1, 0, 0, 0, 824, 93,
		1, 0, 0, 0, 825, 826, 5, 21, 0, 0, 826, 827, 5, 130, 0, 0, 827, 828, 5, 55, 0, 0, 828, 829, 3, 252, 126, 0, 829,
		830, 5, 42, 0, 0, 830, 831, 3, 98, 49, 0, 831, 832, 3, 48, 24, 0, 832, 834, 5, 25, 0, 0, 833, 835, 5, 21, 0, 0,
		834, 833, 1, 0, 0, 0, 834, 835, 1, 0, 0, 0, 835, 837, 1, 0, 0, 0, 836, 838, 5, 130, 0, 0, 837, 836, 1, 0, 0, 0,
		837, 838, 1, 0, 0, 0, 838, 839, 1, 0, 0, 0, 839, 840, 5, 121, 0, 0, 840, 95, 1, 0, 0, 0, 841, 844, 3, 416, 208, 0,
		842, 844, 3, 42, 21, 0, 843, 841, 1, 0, 0, 0, 843, 842, 1, 0, 0, 0, 844, 97, 1, 0, 0, 0, 845, 847, 3, 96, 48, 0,
		846, 845, 1, 0, 0, 0, 847, 850, 1, 0, 0, 0, 848, 846, 1, 0, 0, 0, 848, 849, 1, 0, 0, 0, 849, 99, 1, 0, 0, 0, 850,
		848, 1, 0, 0, 0, 851, 854, 3, 48, 24, 0, 852, 854, 3, 70, 35, 0, 853, 851, 1, 0, 0, 0, 853, 852, 1, 0, 0, 0, 854,
		101, 1, 0, 0, 0, 855, 856, 5, 31, 0, 0, 856, 857, 3, 76, 38, 0, 857, 858, 3, 46, 23, 0, 858, 859, 5, 121, 0, 0,
		859, 103, 1, 0, 0, 0, 860, 861, 5, 22, 0, 0, 861, 862, 3, 196, 98, 0, 862, 863, 5, 120, 0, 0, 863, 866, 3, 400,
		200, 0, 864, 865, 5, 114, 0, 0, 865, 867, 3, 168, 84, 0, 866, 864, 1, 0, 0, 0, 866, 867, 1, 0, 0, 0, 867, 868, 1,
		0, 0, 0, 868, 869, 5, 121, 0, 0, 869, 105, 1, 0, 0, 0, 870, 871, 5, 11, 0, 0, 871, 872, 3, 200, 100, 0, 872, 873,
		5, 55, 0, 0, 873, 874, 3, 400, 200, 0, 874, 107, 1, 0, 0, 0, 875, 878, 3, 322, 161, 0, 876, 878, 3, 200, 100, 0,
		877, 875, 1, 0, 0, 0, 877, 876, 1, 0, 0, 0, 878, 109, 1, 0, 0, 0, 879, 881, 3, 112, 56, 0, 880, 879, 1, 0, 0, 0,
		881, 884, 1, 0, 0, 0, 882, 880, 1, 0, 0, 0, 882, 883, 1, 0, 0, 0, 883, 111, 1, 0, 0, 0, 884, 882, 1, 0, 0, 0, 885,
		888, 3, 234, 117, 0, 886, 888, 3, 416, 208, 0, 887, 885, 1, 0, 0, 0, 887, 886, 1, 0, 0, 0, 888, 113, 1, 0, 0, 0,
		889, 896, 5, 87, 0, 0, 890, 891, 5, 68, 0, 0, 891, 893, 3, 168, 84, 0, 892, 890, 1, 0, 0, 0, 892, 893, 1, 0, 0, 0,
		893, 894, 1, 0, 0, 0, 894, 896, 5, 40, 0, 0, 895, 889, 1, 0, 0, 0, 895, 892, 1, 0, 0, 0, 896, 115, 1, 0, 0, 0,
		897, 899, 3, 118, 59, 0, 898, 897, 1, 0, 0, 0, 899, 902, 1, 0, 0, 0, 900, 898, 1, 0, 0, 0, 900, 901, 1, 0, 0, 0,
		901, 903, 1, 0, 0, 0, 902, 900, 1, 0, 0, 0, 903, 904, 5, 0, 0, 1, 904, 117, 1, 0, 0, 0, 905, 906, 3, 110, 55, 0,
		906, 907, 3, 236, 118, 0, 907, 119, 1, 0, 0, 0, 908, 909, 7, 2, 0, 0, 909, 121, 1, 0, 0, 0, 910, 911, 7, 3, 0, 0,
		911, 123, 1, 0, 0, 0, 912, 913, 5, 23, 0, 0, 913, 914, 3, 194, 97, 0, 914, 915, 5, 6, 0, 0, 915, 916, 3, 168, 84,
		0, 916, 917, 5, 121, 0, 0, 917, 125, 1, 0, 0, 0, 918, 921, 3, 318, 159, 0, 919, 921, 3, 400, 200, 0, 920, 918, 1,
		0, 0, 0, 920, 919, 1, 0, 0, 0, 921, 127, 1, 0, 0, 0, 922, 923, 3, 68, 34, 0, 923, 924, 5, 112, 0, 0, 924, 926, 1,
		0, 0, 0, 925, 922, 1, 0, 0, 0, 925, 926, 1, 0, 0, 0, 926, 927, 1, 0, 0, 0, 927, 928, 3, 168, 84, 0, 928, 129, 1,
		0, 0, 0, 929, 930, 3, 196, 98, 0, 930, 931, 5, 120, 0, 0, 931, 932, 3, 132, 66, 0, 932, 933, 5, 121, 0, 0, 933,
		131, 1, 0, 0, 0, 934, 935, 3, 400, 200, 0, 935, 133, 1, 0, 0, 0, 936, 937, 5, 26, 0, 0, 937, 941, 3, 252, 126, 0,
		938, 939, 5, 116, 0, 0, 939, 940, 5, 130, 0, 0, 940, 942, 5, 117, 0, 0, 941, 938, 1, 0, 0, 0, 941, 942, 1, 0, 0,
		0, 942, 947, 1, 0, 0, 0, 943, 944, 5, 21, 0, 0, 944, 947, 3, 252, 126, 0, 945, 947, 5, 57, 0, 0, 946, 936, 1, 0,
		0, 0, 946, 943, 1, 0, 0, 0, 946, 945, 1, 0, 0, 0, 947, 135, 1, 0, 0, 0, 948, 949, 7, 4, 0, 0, 949, 137, 1, 0, 0,
		0, 950, 952, 3, 136, 68, 0, 951, 953, 5, 115, 0, 0, 952, 951, 1, 0, 0, 0, 952, 953, 1, 0, 0, 0, 953, 139, 1, 0, 0,
		0, 954, 959, 3, 138, 69, 0, 955, 956, 5, 122, 0, 0, 956, 958, 3, 138, 69, 0, 957, 955, 1, 0, 0, 0, 958, 961, 1, 0,
		0, 0, 959, 957, 1, 0, 0, 0, 959, 960, 1, 0, 0, 0, 960, 141, 1, 0, 0, 0, 961, 959, 1, 0, 0, 0, 962, 963, 5, 26, 0,
		0, 963, 964, 5, 130, 0, 0, 964, 965, 5, 42, 0, 0, 965, 966, 3, 150, 75, 0, 966, 969, 3, 146, 73, 0, 967, 968, 5,
		14, 0, 0, 968, 970, 3, 158, 79, 0, 969, 967, 1, 0, 0, 0, 969, 970, 1, 0, 0, 0, 970, 971, 1, 0, 0, 0, 971, 973, 5,
		25, 0, 0, 972, 974, 5, 26, 0, 0, 973, 972, 1, 0, 0, 0, 973, 974, 1, 0, 0, 0, 974, 976, 1, 0, 0, 0, 975, 977, 5,
		130, 0, 0, 976, 975, 1, 0, 0, 0, 976, 977, 1, 0, 0, 0, 977, 978, 1, 0, 0, 0, 978, 979, 5, 121, 0, 0, 979, 143, 1,
		0, 0, 0, 980, 994, 3, 382, 191, 0, 981, 994, 3, 380, 190, 0, 982, 994, 3, 410, 205, 0, 983, 994, 3, 398, 199, 0,
		984, 994, 3, 104, 52, 0, 985, 994, 3, 358, 179, 0, 986, 994, 3, 420, 210, 0, 987, 994, 3, 172, 86, 0, 988, 994, 3,
		12, 6, 0, 989, 994, 3, 38, 19, 0, 990, 994, 3, 42, 21, 0, 991, 994, 3, 124, 62, 0, 992, 994, 3, 416, 208, 0, 993,
		980, 1, 0, 0, 0, 993, 981, 1, 0, 0, 0, 993, 982, 1, 0, 0, 0, 993, 983, 1, 0, 0, 0, 993, 984, 1, 0, 0, 0, 993, 985,
		1, 0, 0, 0, 993, 986, 1, 0, 0, 0, 993, 987, 1, 0, 0, 0, 993, 988, 1, 0, 0, 0, 993, 989, 1, 0, 0, 0, 993, 990, 1,
		0, 0, 0, 993, 991, 1, 0, 0, 0, 993, 992, 1, 0, 0, 0, 994, 145, 1, 0, 0, 0, 995, 997, 3, 144, 72, 0, 996, 995, 1,
		0, 0, 0, 997, 1000, 1, 0, 0, 0, 998, 996, 1, 0, 0, 0, 998, 999, 1, 0, 0, 0, 999, 147, 1, 0, 0, 0, 1000, 998, 1, 0,
		0, 0, 1001, 1003, 3, 160, 80, 0, 1002, 1004, 3, 364, 182, 0, 1003, 1002, 1, 0, 0, 0, 1003, 1004, 1, 0, 0, 0, 1004,
		149, 1, 0, 0, 0, 1005, 1007, 3, 188, 94, 0, 1006, 1005, 1, 0, 0, 0, 1006, 1007, 1, 0, 0, 0, 1007, 1009, 1, 0, 0,
		0, 1008, 1010, 3, 292, 146, 0, 1009, 1008, 1, 0, 0, 0, 1009, 1010, 1, 0, 0, 0, 1010, 151, 1, 0, 0, 0, 1011, 1016,
		3, 148, 74, 0, 1012, 1013, 5, 122, 0, 0, 1013, 1015, 3, 148, 74, 0, 1014, 1012, 1, 0, 0, 0, 1015, 1018, 1, 0, 0,
		0, 1016, 1014, 1, 0, 0, 0, 1016, 1017, 1, 0, 0, 0, 1017, 1022, 1, 0, 0, 0, 1018, 1016, 1, 0, 0, 0, 1019, 1022, 5,
		59, 0, 0, 1020, 1022, 5, 8, 0, 0, 1021, 1011, 1, 0, 0, 0, 1021, 1019, 1, 0, 0, 0, 1021, 1020, 1, 0, 0, 0, 1022,
		153, 1, 0, 0, 0, 1023, 1024, 3, 152, 76, 0, 1024, 1025, 5, 120, 0, 0, 1025, 1026, 3, 136, 68, 0, 1026, 155, 1, 0,
		0, 0, 1027, 1032, 3, 80, 40, 0, 1028, 1032, 3, 310, 155, 0, 1029, 1032, 3, 312, 156, 0, 1030, 1032, 3, 82, 41, 0,
		1031, 1027, 1, 0, 0, 0, 1031, 1028, 1, 0, 0, 0, 1031, 1029, 1, 0, 0, 0, 1031, 1030, 1, 0, 0, 0, 1032, 157, 1, 0,
		0, 0, 1033, 1035, 3, 156, 78, 0, 1034, 1033, 1, 0, 0, 0, 1035, 1038, 1, 0, 0, 0, 1036, 1034, 1, 0, 0, 0, 1036,
		1037, 1, 0, 0, 0, 1037, 159, 1, 0, 0, 0, 1038, 1036, 1, 0, 0, 0, 1039, 1040, 7, 1, 0, 0, 1040, 161, 1, 0, 0, 0,
		1041, 1042, 7, 5, 0, 0, 1042, 163, 1, 0, 0, 0, 1043, 1044, 5, 116, 0, 0, 1044, 1049, 3, 162, 81, 0, 1045, 1046, 5,
		122, 0, 0, 1046, 1048, 3, 162, 81, 0, 1047, 1045, 1, 0, 0, 0, 1048, 1051, 1, 0, 0, 0, 1049, 1047, 1, 0, 0, 0,
		1049, 1050, 1, 0, 0, 0, 1050, 1052, 1, 0, 0, 0, 1051, 1049, 1, 0, 0, 0, 1052, 1053, 5, 117, 0, 0, 1053, 165, 1, 0,
		0, 0, 1054, 1056, 3, 232, 116, 0, 1055, 1054, 1, 0, 0, 0, 1055, 1056, 1, 0, 0, 0, 1056, 1057, 1, 0, 0, 0, 1057,
		1059, 5, 29, 0, 0, 1058, 1060, 5, 130, 0, 0, 1059, 1058, 1, 0, 0, 0, 1059, 1060, 1, 0, 0, 0, 1060, 1063, 1, 0, 0,
		0, 1061, 1062, 5, 96, 0, 0, 1062, 1064, 3, 86, 43, 0, 1063, 1061, 1, 0, 0, 0, 1063, 1064, 1, 0, 0, 0, 1064, 1065,
		1, 0, 0, 0, 1065, 1066, 5, 121, 0, 0, 1066, 167, 1, 0, 0, 0, 1067, 1073, 3, 326, 163, 0, 1068, 1069, 3, 244, 122,
		0, 1069, 1070, 3, 326, 163, 0, 1070, 1072, 1, 0, 0, 0, 1071, 1068, 1, 0, 0, 0, 1072, 1075, 1, 0, 0, 0, 1073, 1071,
		1, 0, 0, 0, 1073, 1074, 1, 0, 0, 0, 1074, 169, 1, 0, 0, 0, 1075, 1073, 1, 0, 0, 0, 1076, 1079, 3, 298, 149, 0,
		1077, 1078, 5, 110, 0, 0, 1078, 1080, 3, 298, 149, 0, 1079, 1077, 1, 0, 0, 0, 1079, 1080, 1, 0, 0, 0, 1080, 1086,
		1, 0, 0, 0, 1081, 1082, 5, 4, 0, 0, 1082, 1086, 3, 298, 149, 0, 1083, 1084, 5, 53, 0, 0, 1084, 1086, 3, 298, 149,
		0, 1085, 1076, 1, 0, 0, 0, 1085, 1081, 1, 0, 0, 0, 1085, 1083, 1, 0, 0, 0, 1086, 171, 1, 0, 0, 0, 1087, 1088, 5,
		30, 0, 0, 1088, 1089, 3, 196, 98, 0, 1089, 1090, 5, 120, 0, 0, 1090, 1092, 3, 400, 200, 0, 1091, 1093, 3, 176, 88,
		0, 1092, 1091, 1, 0, 0, 0, 1092, 1093, 1, 0, 0, 0, 1093, 1094, 1, 0, 0, 0, 1094, 1095, 5, 121, 0, 0, 1095, 173, 1,
		0, 0, 0, 1096, 1097, 3, 168, 84, 0, 1097, 175, 1, 0, 0, 0, 1098, 1099, 5, 57, 0, 0, 1099, 1101, 3, 168, 84, 0,
		1100, 1098, 1, 0, 0, 0, 1100, 1101, 1, 0, 0, 0, 1101, 1102, 1, 0, 0, 0, 1102, 1103, 5, 42, 0, 0, 1103, 1104, 3,
		174, 87, 0, 1104, 177, 1, 0, 0, 0, 1105, 1106, 5, 30, 0, 0, 1106, 1107, 5, 55, 0, 0, 1107, 1108, 3, 400, 200, 0,
		1108, 179, 1, 0, 0, 0, 1109, 1110, 3, 222, 111, 0, 1110, 181, 1, 0, 0, 0, 1111, 1118, 5, 130, 0, 0, 1112, 1113, 5,
		130, 0, 0, 1113, 1114, 5, 116, 0, 0, 1114, 1115, 3, 320, 160, 0, 1115, 1116, 5, 117, 0, 0, 1116, 1118, 1, 0, 0, 0,
		1117, 1111, 1, 0, 0, 0, 1117, 1112, 1, 0, 0, 0, 1118, 183, 1, 0, 0, 0, 1119, 1120, 3, 232, 116, 0, 1120, 1121, 3,
		186, 93, 0, 1121, 1129, 5, 33, 0, 0, 1122, 1124, 3, 50, 25, 0, 1123, 1122, 1, 0, 0, 0, 1124, 1127, 1, 0, 0, 0,
		1125, 1123, 1, 0, 0, 0, 1125, 1126, 1, 0, 0, 0, 1126, 1128, 1, 0, 0, 0, 1127, 1125, 1, 0, 0, 0, 1128, 1130, 5, 14,
		0, 0, 1129, 1125, 1, 0, 0, 0, 1129, 1130, 1, 0, 0, 0, 1130, 1134, 1, 0, 0, 0, 1131, 1133, 3, 24, 12, 0, 1132,
		1131, 1, 0, 0, 0, 1133, 1136, 1, 0, 0, 0, 1134, 1132, 1, 0, 0, 0, 1134, 1135, 1, 0, 0, 0, 1135, 1137, 1, 0, 0, 0,
		1136, 1134, 1, 0, 0, 0, 1137, 1138, 5, 25, 0, 0, 1138, 1140, 5, 33, 0, 0, 1139, 1141, 5, 130, 0, 0, 1140, 1139, 1,
		0, 0, 0, 1140, 1141, 1, 0, 0, 0, 1141, 1142, 1, 0, 0, 0, 1142, 1143, 5, 121, 0, 0, 1143, 185, 1, 0, 0, 0, 1144,
		1145, 5, 31, 0, 0, 1145, 1149, 3, 286, 143, 0, 1146, 1147, 5, 37, 0, 0, 1147, 1149, 3, 86, 43, 0, 1148, 1144, 1,
		0, 0, 0, 1148, 1146, 1, 0, 0, 0, 1149, 187, 1, 0, 0, 0, 1150, 1151, 5, 34, 0, 0, 1151, 1152, 5, 116, 0, 0, 1152,
		1153, 3, 190, 95, 0, 1153, 1154, 5, 117, 0, 0, 1154, 1155, 5, 121, 0, 0, 1155, 189, 1, 0, 0, 0, 1156, 1161, 3,
		210, 105, 0, 1157, 1158, 5, 121, 0, 0, 1158, 1160, 3, 210, 105, 0, 1159, 1157, 1, 0, 0, 0, 1160, 1163, 1, 0, 0, 0,
		1161, 1159, 1, 0, 0, 0, 1161, 1162, 1, 0, 0, 0, 1162, 191, 1, 0, 0, 0, 1163, 1161, 1, 0, 0, 0, 1164, 1165, 5, 34,
		0, 0, 1165, 1166, 5, 47, 0, 0, 1166, 1167, 5, 116, 0, 0, 1167, 1168, 3, 36, 18, 0, 1168, 1169, 5, 117, 0, 0, 1169,
		193, 1, 0, 0, 0, 1170, 1171, 3, 362, 181, 0, 1171, 1172, 5, 120, 0, 0, 1172, 1173, 3, 252, 126, 0, 1173, 195, 1,
		0, 0, 0, 1174, 1179, 5, 130, 0, 0, 1175, 1176, 5, 122, 0, 0, 1176, 1178, 5, 130, 0, 0, 1177, 1175, 1, 0, 0, 0,
		1178, 1181, 1, 0, 0, 0, 1179, 1177, 1, 0, 0, 0, 1179, 1180, 1, 0, 0, 0, 1180, 197, 1, 0, 0, 0, 1181, 1179, 1, 0,
		0, 0, 1182, 1184, 3, 232, 116, 0, 1183, 1182, 1, 0, 0, 0, 1183, 1184, 1, 0, 0, 0, 1184, 1185, 1, 0, 0, 0, 1185,
		1186, 5, 37, 0, 0, 1186, 1187, 3, 86, 43, 0, 1187, 1188, 5, 85, 0, 0, 1188, 1196, 3, 348, 174, 0, 1189, 1190, 5,
		28, 0, 0, 1190, 1191, 3, 86, 43, 0, 1191, 1192, 5, 85, 0, 0, 1192, 1193, 3, 348, 174, 0, 1193, 1195, 1, 0, 0, 0,
		1194, 1189, 1, 0, 0, 0, 1195, 1198, 1, 0, 0, 0, 1196, 1194, 1, 0, 0, 0, 1196, 1197, 1, 0, 0, 0, 1197, 1201, 1, 0,
		0, 0, 1198, 1196, 1, 0, 0, 0, 1199, 1200, 5, 27, 0, 0, 1200, 1202, 3, 348, 174, 0, 1201, 1199, 1, 0, 0, 0, 1201,
		1202, 1, 0, 0, 0, 1202, 1203, 1, 0, 0, 0, 1203, 1204, 5, 25, 0, 0, 1204, 1206, 5, 37, 0, 0, 1205, 1207, 5, 130, 0,
		0, 1206, 1205, 1, 0, 0, 0, 1206, 1207, 1, 0, 0, 0, 1207, 1208, 1, 0, 0, 0, 1208, 1209, 5, 121, 0, 0, 1209, 199, 1,
		0, 0, 0, 1210, 1211, 5, 116, 0, 0, 1211, 1216, 3, 126, 63, 0, 1212, 1213, 5, 122, 0, 0, 1213, 1215, 3, 126, 63, 0,
		1214, 1212, 1, 0, 0, 0, 1215, 1218, 1, 0, 0, 0, 1216, 1214, 1, 0, 0, 0, 1216, 1217, 1, 0, 0, 0, 1217, 1219, 1, 0,
		0, 0, 1218, 1216, 1, 0, 0, 0, 1219, 1220, 5, 117, 0, 0, 1220, 201, 1, 0, 0, 0, 1221, 1224, 3, 126, 63, 0, 1222,
		1224, 3, 168, 84, 0, 1223, 1221, 1, 0, 0, 0, 1223, 1222, 1, 0, 0, 0, 1224, 203, 1, 0, 0, 0, 1225, 1226, 3, 252,
		126, 0, 1226, 1227, 5, 67, 0, 0, 1227, 1228, 5, 115, 0, 0, 1228, 205, 1, 0, 0, 0, 1229, 1231, 5, 20, 0, 0, 1230,
		1229, 1, 0, 0, 0, 1230, 1231, 1, 0, 0, 0, 1231, 1232, 1, 0, 0, 0, 1232, 1243, 3, 252, 126, 0, 1233, 1234, 5, 26,
		0, 0, 1234, 1238, 3, 252, 126, 0, 1235, 1236, 5, 116, 0, 0, 1236, 1237, 5, 130, 0, 0, 1237, 1239, 5, 117, 0, 0,
		1238, 1235, 1, 0, 0, 0, 1238, 1239, 1, 0, 0, 0, 1239, 1243, 1, 0, 0, 0, 1240, 1241, 5, 21, 0, 0, 1241, 1243, 3,
		252, 126, 0, 1242, 1230, 1, 0, 0, 0, 1242, 1233, 1, 0, 0, 0, 1242, 1240, 1, 0, 0, 0, 1243, 207, 1, 0, 0, 0, 1244,
		1249, 5, 130, 0, 0, 1245, 1246, 5, 122, 0, 0, 1246, 1248, 5, 130, 0, 0, 1247, 1245, 1, 0, 0, 0, 1248, 1251, 1, 0,
		0, 0, 1249, 1247, 1, 0, 0, 0, 1249, 1250, 1, 0, 0, 0, 1250, 1255, 1, 0, 0, 0, 1251, 1249, 1, 0, 0, 0, 1252, 1255,
		5, 59, 0, 0, 1253, 1255, 5, 8, 0, 0, 1254, 1244, 1, 0, 0, 0, 1254, 1252, 1, 0, 0, 0, 1254, 1253, 1, 0, 0, 0, 1255,
		209, 1, 0, 0, 0, 1256, 1258, 5, 22, 0, 0, 1257, 1256, 1, 0, 0, 0, 1257, 1258, 1, 0, 0, 0, 1258, 1259, 1, 0, 0, 0,
		1259, 1260, 3, 196, 98, 0, 1260, 1262, 5, 120, 0, 0, 1261, 1263, 5, 39, 0, 0, 1262, 1261, 1, 0, 0, 0, 1262, 1263,
		1, 0, 0, 0, 1263, 1264, 1, 0, 0, 0, 1264, 1267, 3, 400, 200, 0, 1265, 1266, 5, 114, 0, 0, 1266, 1268, 3, 168, 84,
		0, 1267, 1265, 1, 0, 0, 0, 1267, 1268, 1, 0, 0, 0, 1268, 211, 1, 0, 0, 0, 1269, 1274, 3, 210, 105, 0, 1270, 1274,
		3, 226, 113, 0, 1271, 1274, 3, 228, 114, 0, 1272, 1274, 3, 216, 108, 0, 1273, 1269, 1, 0, 0, 0, 1273, 1270, 1, 0,
		0, 0, 1273, 1271, 1, 0, 0, 0, 1273, 1272, 1, 0, 0, 0, 1274, 213, 1, 0, 0, 0, 1275, 1276, 3, 212, 106, 0, 1276,
		215, 1, 0, 0, 0, 1277, 1278, 5, 30, 0, 0, 1278, 1279, 3, 196, 98, 0, 1279, 1280, 5, 120, 0, 0, 1280, 1281, 3, 400,
		200, 0, 1281, 217, 1, 0, 0, 0, 1282, 1287, 3, 226, 113, 0, 1283, 1284, 5, 121, 0, 0, 1284, 1286, 3, 226, 113, 0,
		1285, 1283, 1, 0, 0, 0, 1286, 1289, 1, 0, 0, 0, 1287, 1285, 1, 0, 0, 0, 1287, 1288, 1, 0, 0, 0, 1288, 219, 1, 0,
		0, 0, 1289, 1287, 1, 0, 0, 0, 1290, 1295, 3, 224, 112, 0, 1291, 1292, 5, 121, 0, 0, 1292, 1294, 3, 224, 112, 0,
		1293, 1291, 1, 0, 0, 0, 1294, 1297, 1, 0, 0, 0, 1295, 1293, 1, 0, 0, 0, 1295, 1296, 1, 0, 0, 0, 1296, 221, 1, 0,
		0, 0, 1297, 1295, 1, 0, 0, 0, 1298, 1303, 3, 214, 107, 0, 1299, 1300, 5, 121, 0, 0, 1300, 1302, 3, 214, 107, 0,
		1301, 1299, 1, 0, 0, 0, 1302, 1305, 1, 0, 0, 0, 1303, 1301, 1, 0, 0, 0, 1303, 1304, 1, 0, 0, 0, 1304, 223, 1, 0,
		0, 0, 1305, 1303, 1, 0, 0, 0, 1306, 1307, 3, 196, 98, 0, 1307, 1309, 5, 120, 0, 0, 1308, 1310, 3, 248, 124, 0,
		1309, 1308, 1, 0, 0, 0, 1309, 1310, 1, 0, 0, 0, 1310, 1311, 1, 0, 0, 0, 1311, 1313, 3, 400, 200, 0, 1312, 1314, 5,
		18, 0, 0, 1313, 1312, 1, 0, 0, 0, 1313, 1314, 1, 0, 0, 0, 1314, 1317, 1, 0, 0, 0, 1315, 1316, 5, 114, 0, 0, 1316,
		1318, 3, 168, 84, 0, 1317, 1315, 1, 0, 0, 0, 1317, 1318, 1, 0, 0, 0, 1318, 225, 1, 0, 0, 0, 1319, 1320, 5, 79, 0,
		0, 1320, 1321, 3, 196, 98, 0, 1321, 1323, 5, 120, 0, 0, 1322, 1324, 3, 248, 124, 0, 1323, 1322, 1, 0, 0, 0, 1323,
		1324, 1, 0, 0, 0, 1324, 1325, 1, 0, 0, 0, 1325, 1327, 3, 400, 200, 0, 1326, 1328, 5, 18, 0, 0, 1327, 1326, 1, 0,
		0, 0, 1327, 1328, 1, 0, 0, 0, 1328, 1331, 1, 0, 0, 0, 1329, 1330, 5, 114, 0, 0, 1330, 1332, 3, 168, 84, 0, 1331,
		1329, 1, 0, 0, 0, 1331, 1332, 1, 0, 0, 0, 1332, 227, 1, 0, 0, 0, 1333, 1335, 5, 93, 0, 0, 1334, 1333, 1, 0, 0, 0,
		1334, 1335, 1, 0, 0, 0, 1335, 1336, 1, 0, 0, 0, 1336, 1337, 3, 196, 98, 0, 1337, 1339, 5, 120, 0, 0, 1338, 1340,
		3, 248, 124, 0, 1339, 1338, 1, 0, 0, 0, 1339, 1340, 1, 0, 0, 0, 1340, 1341, 1, 0, 0, 0, 1341, 1344, 3, 400, 200,
		0, 1342, 1343, 5, 114, 0, 0, 1343, 1345, 3, 168, 84, 0, 1344, 1342, 1, 0, 0, 0, 1344, 1345, 1, 0, 0, 0, 1345, 229,
		1, 0, 0, 0, 1346, 1347, 5, 97, 0, 0, 1347, 1351, 3, 86, 43, 0, 1348, 1349, 5, 31, 0, 0, 1349, 1351, 3, 286, 143,
		0, 1350, 1346, 1, 0, 0, 0, 1350, 1348, 1, 0, 0, 0, 1351, 231, 1, 0, 0, 0, 1352, 1353, 5, 130, 0, 0, 1353, 1354, 5,
		120, 0, 0, 1354, 233, 1, 0, 0, 0, 1355, 1356, 5, 44, 0, 0, 1356, 1357, 3, 242, 121, 0, 1357, 1358, 5, 121, 0, 0,
		1358, 235, 1, 0, 0, 0, 1359, 1362, 3, 300, 150, 0, 1360, 1362, 3, 336, 168, 0, 1361, 1359, 1, 0, 0, 0, 1361, 1360,
		1, 0, 0, 0, 1362, 237, 1, 0, 0, 0, 1363, 1369, 5, 54, 0, 0, 1364, 1369, 5, 127, 0, 0, 1365, 1369, 5, 129, 0, 0,
		1366, 1369, 3, 162, 81, 0, 1367, 1369, 3, 268, 134, 0, 1368, 1363, 1, 0, 0, 0, 1368, 1364, 1, 0, 0, 0, 1368, 1365,
		1, 0, 0, 0, 1368, 1366, 1, 0, 0, 0, 1368, 1367, 1, 0, 0, 0, 1369, 239, 1, 0, 0, 0, 1370, 1371, 5, 130, 0, 0, 1371,
		241, 1, 0, 0, 0, 1372, 1377, 3, 240, 120, 0, 1373, 1374, 5, 122, 0, 0, 1374, 1376, 3, 240, 120, 0, 1375, 1373, 1,
		0, 0, 0, 1376, 1379, 1, 0, 0, 0, 1377, 1375, 1, 0, 0, 0, 1377, 1378, 1, 0, 0, 0, 1378, 243, 1, 0, 0, 0, 1379,
		1377, 1, 0, 0, 0, 1380, 1381, 7, 6, 0, 0, 1381, 245, 1, 0, 0, 0, 1382, 1384, 3, 232, 116, 0, 1383, 1382, 1, 0, 0,
		0, 1383, 1384, 1, 0, 0, 0, 1384, 1386, 1, 0, 0, 0, 1385, 1387, 3, 230, 115, 0, 1386, 1385, 1, 0, 0, 0, 1386, 1387,
		1, 0, 0, 0, 1387, 1388, 1, 0, 0, 0, 1388, 1389, 5, 46, 0, 0, 1389, 1390, 3, 348, 174, 0, 1390, 1391, 5, 25, 0, 0,
		1391, 1393, 5, 46, 0, 0, 1392, 1394, 5, 130, 0, 0, 1393, 1392, 1, 0, 0, 0, 1393, 1394, 1, 0, 0, 0, 1394, 1395, 1,
		0, 0, 0, 1395, 1396, 5, 121, 0, 0, 1396, 247, 1, 0, 0, 0, 1397, 1398, 7, 7, 0, 0, 1398, 249, 1, 0, 0, 0, 1399,
		1400, 7, 8, 0, 0, 1400, 251, 1, 0, 0, 0, 1401, 1405, 7, 2, 0, 0, 1402, 1404, 3, 254, 127, 0, 1403, 1402, 1, 0, 0,
		0, 1404, 1407, 1, 0, 0, 0, 1405, 1403, 1, 0, 0, 0, 1405, 1406, 1, 0, 0, 0, 1406, 253, 1, 0, 0, 0, 1407, 1405, 1,
		0, 0, 0, 1408, 1413, 3, 258, 129, 0, 1409, 1413, 3, 260, 130, 0, 1410, 1413, 3, 262, 131, 0, 1411, 1413, 3, 264,
		132, 0, 1412, 1408, 1, 0, 0, 0, 1412, 1409, 1, 0, 0, 0, 1412, 1410, 1, 0, 0, 0, 1412, 1411, 1, 0, 0, 0, 1413, 255,
		1, 0, 0, 0, 1414, 1419, 5, 130, 0, 0, 1415, 1416, 5, 124, 0, 0, 1416, 1418, 3, 402, 201, 0, 1417, 1415, 1, 0, 0,
		0, 1418, 1421, 1, 0, 0, 0, 1419, 1417, 1, 0, 0, 0, 1419, 1420, 1, 0, 0, 0, 1420, 257, 1, 0, 0, 0, 1421, 1419, 1,
		0, 0, 0, 1422, 1423, 5, 124, 0, 0, 1423, 1425, 3, 402, 201, 0, 1424, 1422, 1, 0, 0, 0, 1425, 1426, 1, 0, 0, 0,
		1426, 1424, 1, 0, 0, 0, 1426, 1427, 1, 0, 0, 0, 1427, 259, 1, 0, 0, 0, 1428, 1429, 5, 116, 0, 0, 1429, 1430, 3, 4,
		2, 0, 1430, 1431, 5, 117, 0, 0, 1431, 261, 1, 0, 0, 0, 1432, 1433, 5, 116, 0, 0, 1433, 1434, 3, 126, 63, 0, 1434,
		1435, 5, 117, 0, 0, 1435, 263, 1, 0, 0, 0, 1436, 1438, 3, 364, 182, 0, 1437, 1436, 1, 0, 0, 0, 1437, 1438, 1, 0,
		0, 0, 1438, 1439, 1, 0, 0, 0, 1439, 1440, 5, 125, 0, 0, 1440, 1445, 3, 40, 20, 0, 1441, 1442, 5, 116, 0, 0, 1442,
		1443, 3, 168, 84, 0, 1443, 1444, 5, 117, 0, 0, 1444, 1446, 1, 0, 0, 0, 1445, 1441, 1, 0, 0, 0, 1445, 1446, 1, 0,
		0, 0, 1446, 265, 1, 0, 0, 0, 1447, 1449, 3, 232, 116, 0, 1448, 1447, 1, 0, 0, 0, 1448, 1449, 1, 0, 0, 0, 1449,
		1450, 1, 0, 0, 0, 1450, 1452, 5, 51, 0, 0, 1451, 1453, 5, 130, 0, 0, 1452, 1451, 1, 0, 0, 0, 1452, 1453, 1, 0, 0,
		0, 1453, 1456, 1, 0, 0, 0, 1454, 1455, 5, 96, 0, 0, 1455, 1457, 3, 86, 43, 0, 1456, 1454, 1, 0, 0, 0, 1456, 1457,
		1, 0, 0, 0, 1457, 1458, 1, 0, 0, 0, 1458, 1459, 5, 121, 0, 0, 1459, 267, 1, 0, 0, 0, 1460, 1463, 5, 126, 0, 0,
		1461, 1463, 3, 288, 144, 0, 1462, 1460, 1, 0, 0, 0, 1462, 1461, 1, 0, 0, 0, 1463, 269, 1, 0, 0, 0, 1464, 1469, 3,
		104, 52, 0, 1465, 1469, 3, 358, 179, 0, 1466, 1469, 3, 420, 210, 0, 1467, 1469, 3, 172, 86, 0, 1468, 1464, 1, 0,
		0, 0, 1468, 1465, 1, 0, 0, 0, 1468, 1466, 1, 0, 0, 0, 1468, 1467, 1, 0, 0, 0, 1469, 271, 1, 0, 0, 0, 1470, 1472,
		5, 36, 0, 0, 1471, 1470, 1, 0, 0, 0, 1471, 1472, 1, 0, 0, 0, 1472, 1474, 1, 0, 0, 0, 1473, 1475, 3, 114, 57, 0,
		1474, 1473, 1, 0, 0, 0, 1474, 1475, 1, 0, 0, 0, 1475, 273, 1, 0, 0, 0, 1476, 1477, 5, 61, 0, 0, 1477, 1478, 5, 16,
		0, 0, 1478, 1479, 5, 130, 0, 0, 1479, 1480, 5, 42, 0, 0, 1480, 1481, 3, 278, 139, 0, 1481, 1484, 5, 25, 0, 0,
		1482, 1483, 5, 61, 0, 0, 1483, 1485, 5, 16, 0, 0, 1484, 1482, 1, 0, 0, 0, 1484, 1485, 1, 0, 0, 0, 1485, 1487, 1,
		0, 0, 0, 1486, 1488, 5, 130, 0, 0, 1487, 1486, 1, 0, 0, 0, 1487, 1488, 1, 0, 0, 0, 1488, 1489, 1, 0, 0, 0, 1489,
		1490, 5, 121, 0, 0, 1490, 275, 1, 0, 0, 0, 1491, 1501, 3, 382, 191, 0, 1492, 1501, 3, 380, 190, 0, 1493, 1501, 3,
		410, 205, 0, 1494, 1501, 3, 398, 199, 0, 1495, 1501, 3, 104, 52, 0, 1496, 1501, 3, 420, 210, 0, 1497, 1501, 3,
		172, 86, 0, 1498, 1501, 3, 12, 6, 0, 1499, 1501, 3, 416, 208, 0, 1500, 1491, 1, 0, 0, 0, 1500, 1492, 1, 0, 0, 0,
		1500, 1493, 1, 0, 0, 0, 1500, 1494, 1, 0, 0, 0, 1500, 1495, 1, 0, 0, 0, 1500, 1496, 1, 0, 0, 0, 1500, 1497, 1, 0,
		0, 0, 1500, 1498, 1, 0, 0, 0, 1500, 1499, 1, 0, 0, 0, 1501, 277, 1, 0, 0, 0, 1502, 1504, 3, 276, 138, 0, 1503,
		1502, 1, 0, 0, 0, 1504, 1507, 1, 0, 0, 0, 1505, 1503, 1, 0, 0, 0, 1505, 1506, 1, 0, 0, 0, 1506, 279, 1, 0, 0, 0,
		1507, 1505, 1, 0, 0, 0, 1508, 1509, 5, 61, 0, 0, 1509, 1510, 5, 130, 0, 0, 1510, 1511, 5, 42, 0, 0, 1511, 1512, 3,
		284, 142, 0, 1512, 1514, 5, 25, 0, 0, 1513, 1515, 5, 61, 0, 0, 1514, 1513, 1, 0, 0, 0, 1514, 1515, 1, 0, 0, 0,
		1515, 1517, 1, 0, 0, 0, 1516, 1518, 5, 130, 0, 0, 1517, 1516, 1, 0, 0, 0, 1517, 1518, 1, 0, 0, 0, 1518, 1519, 1,
		0, 0, 0, 1519, 1520, 5, 121, 0, 0, 1520, 281, 1, 0, 0, 0, 1521, 1536, 3, 382, 191, 0, 1522, 1536, 3, 380, 190, 0,
		1523, 1536, 3, 410, 205, 0, 1524, 1536, 3, 398, 199, 0, 1525, 1536, 3, 104, 52, 0, 1526, 1536, 3, 358, 179, 0,
		1527, 1536, 3, 420, 210, 0, 1528, 1536, 3, 172, 86, 0, 1529, 1536, 3, 12, 6, 0, 1530, 1536, 3, 72, 36, 0, 1531,
		1536, 3, 38, 19, 0, 1532, 1536, 3, 42, 21, 0, 1533, 1536, 3, 124, 62, 0, 1534, 1536, 3, 416, 208, 0, 1535, 1521,
		1, 0, 0, 0, 1535, 1522, 1, 0, 0, 0, 1535, 1523, 1, 0, 0, 0, 1535, 1524, 1, 0, 0, 0, 1535, 1525, 1, 0, 0, 0, 1535,
		1526, 1, 0, 0, 0, 1535, 1527, 1, 0, 0, 0, 1535, 1528, 1, 0, 0, 0, 1535, 1529, 1, 0, 0, 0, 1535, 1530, 1, 0, 0, 0,
		1535, 1531, 1, 0, 0, 0, 1535, 1532, 1, 0, 0, 0, 1535, 1533, 1, 0, 0, 0, 1535, 1534, 1, 0, 0, 0, 1536, 283, 1, 0,
		0, 0, 1537, 1539, 3, 282, 141, 0, 1538, 1537, 1, 0, 0, 0, 1539, 1542, 1, 0, 0, 0, 1540, 1538, 1, 0, 0, 0, 1540,
		1541, 1, 0, 0, 0, 1541, 285, 1, 0, 0, 0, 1542, 1540, 1, 0, 0, 0, 1543, 1544, 5, 130, 0, 0, 1544, 1545, 5, 39, 0,
		0, 1545, 1546, 3, 126, 63, 0, 1546, 287, 1, 0, 0, 0, 1547, 1548, 5, 126, 0, 0, 1548, 1549, 5, 130, 0, 0, 1549,
		289, 1, 0, 0, 0, 1550, 1551, 3, 322, 161, 0, 1551, 1552, 5, 90, 0, 0, 1552, 1556, 3, 44, 22, 0, 1553, 1555, 3,
		338, 169, 0, 1554, 1553, 1, 0, 0, 0, 1555, 1558, 1, 0, 0, 0, 1556, 1554, 1, 0, 0, 0, 1556, 1557, 1, 0, 0, 0, 1557,
		1559, 1, 0, 0, 0, 1558, 1556, 1, 0, 0, 0, 1559, 1560, 5, 25, 0, 0, 1560, 1562, 5, 90, 0, 0, 1561, 1563, 5, 130, 0,
		0, 1562, 1561, 1, 0, 0, 0, 1562, 1563, 1, 0, 0, 0, 1563, 291, 1, 0, 0, 0, 1564, 1565, 5, 62, 0, 0, 1565, 1566, 5,
		116, 0, 0, 1566, 1567, 3, 294, 147, 0, 1567, 1568, 5, 117, 0, 0, 1568, 1569, 5, 121, 0, 0, 1569, 293, 1, 0, 0, 0,
		1570, 1571, 3, 220, 110, 0, 1571, 295, 1, 0, 0, 0, 1572, 1573, 5, 62, 0, 0, 1573, 1574, 5, 47, 0, 0, 1574, 1575,
		5, 116, 0, 0, 1575, 1576, 3, 36, 18, 0, 1576, 1577, 5, 117, 0, 0, 1577, 297, 1, 0, 0, 0, 1578, 1588, 3, 238, 119,
		0, 1579, 1588, 3, 316, 158, 0, 1580, 1581, 5, 116, 0, 0, 1581, 1582, 3, 168, 84, 0, 1582, 1583, 5, 117, 0, 0,
		1583, 1588, 1, 0, 0, 0, 1584, 1588, 3, 18, 9, 0, 1585, 1588, 3, 10, 5, 0, 1586, 1588, 3, 252, 126, 0, 1587, 1578,
		1, 0, 0, 0, 1587, 1579, 1, 0, 0, 0, 1587, 1580, 1, 0, 0, 0, 1587, 1584, 1, 0, 0, 0, 1587, 1585, 1, 0, 0, 0, 1587,
		1586, 1, 0, 0, 0, 1588, 299, 1, 0, 0, 0, 1589, 1593, 3, 142, 71, 0, 1590, 1593, 3, 94, 47, 0, 1591, 1593, 3, 280,
		140, 0, 1592, 1589, 1, 0, 0, 0, 1592, 1590, 1, 0, 0, 0, 1592, 1591, 1, 0, 0, 0, 1593, 301, 1, 0, 0, 0, 1594, 1599,
		3, 256, 128, 0, 1595, 1596, 5, 116, 0, 0, 1596, 1597, 3, 4, 2, 0, 1597, 1598, 5, 117, 0, 0, 1598, 1600, 1, 0, 0,
		0, 1599, 1595, 1, 0, 0, 0, 1599, 1600, 1, 0, 0, 0, 1600, 303, 1, 0, 0, 0, 1601, 1603, 3, 232, 116, 0, 1602, 1601,
		1, 0, 0, 0, 1602, 1603, 1, 0, 0, 0, 1603, 1604, 1, 0, 0, 0, 1604, 1605, 3, 302, 151, 0, 1605, 1606, 5, 121, 0, 0,
		1606, 305, 1, 0, 0, 0, 1607, 1619, 3, 382, 191, 0, 1608, 1619, 3, 380, 190, 0, 1609, 1619, 3, 410, 205, 0, 1610,
		1619, 3, 398, 199, 0, 1611, 1619, 3, 104, 52, 0, 1612, 1619, 3, 420, 210, 0, 1613, 1619, 3, 172, 86, 0, 1614,
		1619, 3, 12, 6, 0, 1615, 1619, 3, 38, 19, 0, 1616, 1619, 3, 42, 21, 0, 1617, 1619, 3, 416, 208, 0, 1618, 1607, 1,
		0, 0, 0, 1618, 1608, 1, 0, 0, 0, 1618, 1609, 1, 0, 0, 0, 1618, 1610, 1, 0, 0, 0, 1618, 1611, 1, 0, 0, 0, 1618,
		1612, 1, 0, 0, 0, 1618, 1613, 1, 0, 0, 0, 1618, 1614, 1, 0, 0, 0, 1618, 1615, 1, 0, 0, 0, 1618, 1616, 1, 0, 0, 0,
		1618, 1617, 1, 0, 0, 0, 1619, 307, 1, 0, 0, 0, 1620, 1622, 3, 306, 153, 0, 1621, 1620, 1, 0, 0, 0, 1622, 1625, 1,
		0, 0, 0, 1623, 1621, 1, 0, 0, 0, 1623, 1624, 1, 0, 0, 0, 1624, 309, 1, 0, 0, 0, 1625, 1623, 1, 0, 0, 0, 1626,
		1628, 3, 232, 116, 0, 1627, 1626, 1, 0, 0, 0, 1627, 1628, 1, 0, 0, 0, 1628, 1629, 1, 0, 0, 0, 1629, 1634, 5, 64,
		0, 0, 1630, 1631, 5, 116, 0, 0, 1631, 1632, 3, 346, 173, 0, 1632, 1633, 5, 117, 0, 0, 1633, 1635, 1, 0, 0, 0,
		1634, 1630, 1, 0, 0, 0, 1634, 1635, 1, 0, 0, 0, 1635, 1637, 1, 0, 0, 0, 1636, 1638, 5, 42, 0, 0, 1637, 1636, 1, 0,
		0, 0, 1637, 1638, 1, 0, 0, 0, 1638, 1639, 1, 0, 0, 0, 1639, 1640, 3, 308, 154, 0, 1640, 1641, 5, 14, 0, 0, 1641,
		1642, 3, 314, 157, 0, 1642, 1643, 5, 25, 0, 0, 1643, 1645, 5, 64, 0, 0, 1644, 1646, 5, 130, 0, 0, 1645, 1644, 1,
		0, 0, 0, 1645, 1646, 1, 0, 0, 0, 1646, 1647, 1, 0, 0, 0, 1647, 1648, 5, 121, 0, 0, 1648, 311, 1, 0, 0, 0, 1649,
		1651, 3, 232, 116, 0, 1650, 1649, 1, 0, 0, 0, 1650, 1651, 1, 0, 0, 0, 1651, 1653, 1, 0, 0, 0, 1652, 1654, 5, 63,
		0, 0, 1653, 1652, 1, 0, 0, 0, 1653, 1654, 1, 0, 0, 0, 1654, 1655, 1, 0, 0, 0, 1655, 1660, 5, 64, 0, 0, 1656, 1657,
		5, 116, 0, 0, 1657, 1658, 3, 346, 173, 0, 1658, 1659, 5, 117, 0, 0, 1659, 1661, 1, 0, 0, 0, 1660, 1656, 1, 0, 0,
		0, 1660, 1661, 1, 0, 0, 0, 1661, 1663, 1, 0, 0, 0, 1662, 1664, 5, 42, 0, 0, 1663, 1662, 1, 0, 0, 0, 1663, 1664, 1,
		0, 0, 0, 1664, 1665, 1, 0, 0, 0, 1665, 1666, 3, 308, 154, 0, 1666, 1667, 5, 14, 0, 0, 1667, 1668, 3, 314, 157, 0,
		1668, 1670, 5, 25, 0, 0, 1669, 1671, 5, 63, 0, 0, 1670, 1669, 1, 0, 0, 0, 1670, 1671, 1, 0, 0, 0, 1671, 1672, 1,
		0, 0, 0, 1672, 1674, 5, 64, 0, 0, 1673, 1675, 5, 130, 0, 0, 1674, 1673, 1, 0, 0, 0, 1674, 1675, 1, 0, 0, 0, 1675,
		1676, 1, 0, 0, 0, 1676, 1677, 5, 121, 0, 0, 1677, 313, 1, 0, 0, 0, 1678, 1680, 3, 350, 175, 0, 1679, 1678, 1, 0,
		0, 0, 1680, 1683, 1, 0, 0, 0, 1681, 1679, 1, 0, 0, 0, 1681, 1682, 1, 0, 0, 0, 1682, 315, 1, 0, 0, 0, 1683, 1681,
		1, 0, 0, 0, 1684, 1685, 3, 400, 200, 0, 1685, 1691, 5, 125, 0, 0, 1686, 1692, 3, 10, 5, 0, 1687, 1688, 5, 116, 0,
		0, 1688, 1689, 3, 168, 84, 0, 1689, 1690, 5, 117, 0, 0, 1690, 1692, 1, 0, 0, 0, 1691, 1686, 1, 0, 0, 0, 1691,
		1687, 1, 0, 0, 0, 1692, 317, 1, 0, 0, 0, 1693, 1696, 3, 320, 160, 0, 1694, 1696, 3, 252, 126, 0, 1695, 1693, 1, 0,
		0, 0, 1695, 1694, 1, 0, 0, 0, 1696, 319, 1, 0, 0, 0, 1697, 1701, 3, 366, 183, 0, 1698, 1699, 3, 122, 61, 0, 1699,
		1700, 3, 366, 183, 0, 1700, 1702, 1, 0, 0, 0, 1701, 1698, 1, 0, 0, 0, 1701, 1702, 1, 0, 0, 0, 1702, 321, 1, 0, 0,
		0, 1703, 1704, 5, 67, 0, 0, 1704, 1705, 3, 318, 159, 0, 1705, 323, 1, 0, 0, 0, 1706, 1708, 5, 70, 0, 0, 1707,
		1709, 3, 130, 65, 0, 1708, 1707, 1, 0, 0, 0, 1709, 1710, 1, 0, 0, 0, 1710, 1708, 1, 0, 0, 0, 1710, 1711, 1, 0, 0,
		0, 1711, 1712, 1, 0, 0, 0, 1712, 1713, 5, 25, 0, 0, 1713, 1715, 5, 70, 0, 0, 1714, 1716, 5, 130, 0, 0, 1715, 1714,
		1, 0, 0, 0, 1715, 1716, 1, 0, 0, 0, 1716, 325, 1, 0, 0, 0, 1717, 1721, 3, 352, 176, 0, 1718, 1719, 3, 328, 164, 0,
		1719, 1720, 3, 352, 176, 0, 1720, 1722, 1, 0, 0, 0, 1721, 1718, 1, 0, 0, 0, 1721, 1722, 1, 0, 0, 0, 1722, 327, 1,
		0, 0, 0, 1723, 1724, 7, 9, 0, 0, 1724, 329, 1, 0, 0, 0, 1725, 1727, 3, 232, 116, 0, 1726, 1725, 1, 0, 0, 0, 1726,
		1727, 1, 0, 0, 0, 1727, 1728, 1, 0, 0, 0, 1728, 1729, 5, 72, 0, 0, 1729, 1732, 3, 168, 84, 0, 1730, 1731, 5, 77,
		0, 0, 1731, 1733, 3, 168, 84, 0, 1732, 1730, 1, 0, 0, 0, 1732, 1733, 1, 0, 0, 0, 1733, 1734, 1, 0, 0, 0, 1734,
		1735, 5, 121, 0, 0, 1735, 331, 1, 0, 0, 0, 1736, 1738, 3, 232, 116, 0, 1737, 1736, 1, 0, 0, 0, 1737, 1738, 1, 0,
		0, 0, 1738, 1739, 1, 0, 0, 0, 1739, 1741, 5, 73, 0, 0, 1740, 1742, 3, 168, 84, 0, 1741, 1740, 1, 0, 0, 0, 1741,
		1742, 1, 0, 0, 0, 1742, 1743, 1, 0, 0, 0, 1743, 1744, 5, 121, 0, 0, 1744, 333, 1, 0, 0, 0, 1745, 1749, 3, 290,
		145, 0, 1746, 1749, 3, 164, 82, 0, 1747, 1749, 3, 322, 161, 0, 1748, 1745, 1, 0, 0, 0, 1748, 1746, 1, 0, 0, 0,
		1748, 1747, 1, 0, 0, 0, 1749, 335, 1, 0, 0, 0, 1750, 1753, 3, 20, 10, 0, 1751, 1753, 3, 274, 137, 0, 1752, 1750,
		1, 0, 0, 0, 1752, 1751, 1, 0, 0, 0, 1753, 337, 1, 0, 0, 0, 1754, 1755, 5, 130, 0, 0, 1755, 1756, 5, 100, 0, 0,
		1756, 1757, 3, 288, 144, 0, 1757, 1758, 5, 121, 0, 0, 1758, 339, 1, 0, 0, 0, 1759, 1760, 5, 95, 0, 0, 1760, 1761,
		3, 168, 84, 0, 1761, 1762, 5, 76, 0, 0, 1762, 1763, 3, 404, 202, 0, 1763, 1764, 5, 113, 0, 0, 1764, 1765, 3, 272,
		136, 0, 1765, 1766, 3, 342, 171, 0, 1766, 1767, 5, 121, 0, 0, 1767, 341, 1, 0, 0, 0, 1768, 1769, 3, 424, 212, 0,
		1769, 1770, 5, 96, 0, 0, 1770, 1778, 3, 68, 34, 0, 1771, 1772, 5, 122, 0, 0, 1772, 1773, 3, 424, 212, 0, 1773,
		1774, 5, 96, 0, 0, 1774, 1775, 3, 68, 34, 0, 1775, 1777, 1, 0, 0, 0, 1776, 1771, 1, 0, 0, 0, 1777, 1780, 1, 0, 0,
		0, 1778, 1776, 1, 0, 0, 0, 1778, 1779, 1, 0, 0, 0, 1779, 343, 1, 0, 0, 0, 1780, 1778, 1, 0, 0, 0, 1781, 1782, 5,
		56, 0, 0, 1782, 1783, 3, 346, 173, 0, 1783, 345, 1, 0, 0, 0, 1784, 1789, 3, 252, 126, 0, 1785, 1786, 5, 122, 0, 0,
		1786, 1788, 3, 252, 126, 0, 1787, 1785, 1, 0, 0, 0, 1788, 1791, 1, 0, 0, 0, 1789, 1787, 1, 0, 0, 0, 1789, 1790, 1,
		0, 0, 0, 1790, 347, 1, 0, 0, 0, 1791, 1789, 1, 0, 0, 0, 1792, 1794, 3, 350, 175, 0, 1793, 1792, 1, 0, 0, 0, 1794,
		1797, 1, 0, 0, 0, 1795, 1793, 1, 0, 0, 0, 1795, 1796, 1, 0, 0, 0, 1796, 349, 1, 0, 0, 0, 1797, 1795, 1, 0, 0, 0,
		1798, 1816, 3, 422, 211, 0, 1799, 1816, 3, 32, 16, 0, 1800, 1816, 3, 330, 165, 0, 1801, 1816, 3, 356, 178, 0,
		1802, 1816, 3, 418, 209, 0, 1803, 1816, 3, 198, 99, 0, 1804, 1816, 3, 62, 31, 0, 1805, 1816, 3, 246, 123, 0, 1806,
		1816, 3, 266, 133, 0, 1807, 1816, 3, 166, 83, 0, 1808, 1816, 3, 332, 166, 0, 1809, 1811, 3, 232, 116, 0, 1810,
		1809, 1, 0, 0, 0, 1810, 1811, 1, 0, 0, 0, 1811, 1812, 1, 0, 0, 0, 1812, 1813, 5, 54, 0, 0, 1813, 1816, 5, 121, 0,
		0, 1814, 1816, 3, 304, 152, 0, 1815, 1798, 1, 0, 0, 0, 1815, 1799, 1, 0, 0, 0, 1815, 1800, 1, 0, 0, 0, 1815, 1801,
		1, 0, 0, 0, 1815, 1802, 1, 0, 0, 0, 1815, 1803, 1, 0, 0, 0, 1815, 1804, 1, 0, 0, 0, 1815, 1805, 1, 0, 0, 0, 1815,
		1806, 1, 0, 0, 0, 1815, 1807, 1, 0, 0, 0, 1815, 1808, 1, 0, 0, 0, 1815, 1810, 1, 0, 0, 0, 1815, 1814, 1, 0, 0, 0,
		1816, 351, 1, 0, 0, 0, 1817, 1821, 3, 366, 183, 0, 1818, 1819, 3, 354, 177, 0, 1819, 1820, 3, 366, 183, 0, 1820,
		1822, 1, 0, 0, 0, 1821, 1818, 1, 0, 0, 0, 1821, 1822, 1, 0, 0, 0, 1822, 353, 1, 0, 0, 0, 1823, 1824, 7, 10, 0, 0,
		1824, 355, 1, 0, 0, 0, 1825, 1827, 3, 232, 116, 0, 1826, 1825, 1, 0, 0, 0, 1826, 1827, 1, 0, 0, 0, 1827, 1828, 1,
		0, 0, 0, 1828, 1829, 3, 404, 202, 0, 1829, 1831, 5, 113, 0, 0, 1830, 1832, 3, 114, 57, 0, 1831, 1830, 1, 0, 0, 0,
		1831, 1832, 1, 0, 0, 0, 1832, 1833, 1, 0, 0, 0, 1833, 1834, 3, 424, 212, 0, 1834, 1835, 5, 121, 0, 0, 1835, 357,
		1, 0, 0, 0, 1836, 1837, 5, 79, 0, 0, 1837, 1838, 3, 196, 98, 0, 1838, 1839, 5, 120, 0, 0, 1839, 1841, 3, 400, 200,
		0, 1840, 1842, 3, 360, 180, 0, 1841, 1840, 1, 0, 0, 0, 1841, 1842, 1, 0, 0, 0, 1842, 1845, 1, 0, 0, 0, 1843, 1844,
		5, 114, 0, 0, 1844, 1846, 3, 168, 84, 0, 1845, 1843, 1, 0, 0, 0, 1845, 1846, 1, 0, 0, 0, 1846, 1847, 1, 0, 0, 0,
		1847, 1848, 5, 121, 0, 0, 1848, 359, 1, 0, 0, 0, 1849, 1850, 7, 11, 0, 0, 1850, 361, 1, 0, 0, 0, 1851, 1856, 3,
		252, 126, 0, 1852, 1853, 5, 122, 0, 0, 1853, 1855, 3, 252, 126, 0, 1854, 1852, 1, 0, 0, 0, 1855, 1858, 1, 0, 0, 0,
		1856, 1854, 1, 0, 0, 0, 1856, 1857, 1, 0, 0, 0, 1857, 1862, 1, 0, 0, 0, 1858, 1856, 1, 0, 0, 0, 1859, 1862, 5, 59,
		0, 0, 1860, 1862, 5, 8, 0, 0, 1861, 1851, 1, 0, 0, 0, 1861, 1859, 1, 0, 0, 0, 1861, 1860, 1, 0, 0, 0, 1862, 363,
		1, 0, 0, 0, 1863, 1872, 5, 118, 0, 0, 1864, 1869, 3, 252, 126, 0, 1865, 1866, 5, 122, 0, 0, 1866, 1868, 3, 252,
		126, 0, 1867, 1865, 1, 0, 0, 0, 1868, 1871, 1, 0, 0, 0, 1869, 1867, 1, 0, 0, 0, 1869, 1870, 1, 0, 0, 0, 1870,
		1873, 1, 0, 0, 0, 1871, 1869, 1, 0, 0, 0, 1872, 1864, 1, 0, 0, 0, 1872, 1873, 1, 0, 0, 0, 1873, 1876, 1, 0, 0, 0,
		1874, 1875, 5, 73, 0, 0, 1875, 1877, 3, 252, 126, 0, 1876, 1874, 1, 0, 0, 0, 1876, 1877, 1, 0, 0, 0, 1877, 1878,
		1, 0, 0, 0, 1878, 1879, 5, 119, 0, 0, 1879, 365, 1, 0, 0, 0, 1880, 1882, 7, 12, 0, 0, 1881, 1880, 1, 0, 0, 0,
		1881, 1882, 1, 0, 0, 0, 1882, 1883, 1, 0, 0, 0, 1883, 1889, 3, 406, 203, 0, 1884, 1885, 3, 8, 4, 0, 1885, 1886, 3,
		406, 203, 0, 1886, 1888, 1, 0, 0, 0, 1887, 1884, 1, 0, 0, 0, 1888, 1891, 1, 0, 0, 0, 1889, 1887, 1, 0, 0, 0, 1889,
		1890, 1, 0, 0, 0, 1890, 367, 1, 0, 0, 0, 1891, 1889, 1, 0, 0, 0, 1892, 1894, 3, 232, 116, 0, 1893, 1892, 1, 0, 0,
		0, 1893, 1894, 1, 0, 0, 0, 1894, 1895, 1, 0, 0, 0, 1895, 1896, 3, 366, 183, 0, 1896, 1897, 5, 113, 0, 0, 1897,
		1898, 3, 366, 183, 0, 1898, 1899, 5, 121, 0, 0, 1899, 369, 1, 0, 0, 0, 1900, 1901, 5, 96, 0, 0, 1901, 1902, 3, 68,
		34, 0, 1902, 1903, 5, 112, 0, 0, 1903, 1904, 3, 378, 189, 0, 1904, 371, 1, 0, 0, 0, 1905, 1907, 3, 232, 116, 0,
		1906, 1905, 1, 0, 0, 0, 1906, 1907, 1, 0, 0, 0, 1907, 1908, 1, 0, 0, 0, 1908, 1909, 5, 19, 0, 0, 1909, 1910, 3,
		168, 84, 0, 1910, 1912, 5, 92, 0, 0, 1911, 1913, 3, 370, 185, 0, 1912, 1911, 1, 0, 0, 0, 1913, 1914, 1, 0, 0, 0,
		1914, 1912, 1, 0, 0, 0, 1914, 1915, 1, 0, 0, 0, 1915, 1916, 1, 0, 0, 0, 1916, 1917, 5, 25, 0, 0, 1917, 1919, 5,
		19, 0, 0, 1918, 1920, 5, 130, 0, 0, 1919, 1918, 1, 0, 0, 0, 1919, 1920, 1, 0, 0, 0, 1920, 1921, 1, 0, 0, 0, 1921,
		1922, 5, 121, 0, 0, 1922, 373, 1, 0, 0, 0, 1923, 1925, 3, 232, 116, 0, 1924, 1923, 1, 0, 0, 0, 1924, 1925, 1, 0,
		0, 0, 1925, 1926, 1, 0, 0, 0, 1926, 1927, 5, 37, 0, 0, 1927, 1928, 3, 86, 43, 0, 1928, 1929, 5, 92, 0, 0, 1929,
		1937, 3, 378, 189, 0, 1930, 1931, 5, 28, 0, 0, 1931, 1932, 3, 86, 43, 0, 1932, 1933, 5, 92, 0, 0, 1933, 1934, 3,
		378, 189, 0, 1934, 1936, 1, 0, 0, 0, 1935, 1930, 1, 0, 0, 0, 1936, 1939, 1, 0, 0, 0, 1937, 1935, 1, 0, 0, 0, 1937,
		1938, 1, 0, 0, 0, 1938, 1942, 1, 0, 0, 0, 1939, 1937, 1, 0, 0, 0, 1940, 1941, 5, 27, 0, 0, 1941, 1943, 3, 378,
		189, 0, 1942, 1940, 1, 0, 0, 0, 1942, 1943, 1, 0, 0, 0, 1943, 1944, 1, 0, 0, 0, 1944, 1945, 5, 25, 0, 0, 1945,
		1947, 5, 92, 0, 0, 1946, 1948, 5, 130, 0, 0, 1947, 1946, 1, 0, 0, 0, 1947, 1948, 1, 0, 0, 0, 1948, 1949, 1, 0, 0,
		0, 1949, 1950, 5, 121, 0, 0, 1950, 375, 1, 0, 0, 0, 1951, 1960, 3, 368, 184, 0, 1952, 1960, 3, 374, 187, 0, 1953,
		1960, 3, 372, 186, 0, 1954, 1956, 3, 232, 116, 0, 1955, 1954, 1, 0, 0, 0, 1955, 1956, 1, 0, 0, 0, 1956, 1957, 1,
		0, 0, 0, 1957, 1958, 5, 54, 0, 0, 1958, 1960, 5, 121, 0, 0, 1959, 1951, 1, 0, 0, 0, 1959, 1952, 1, 0, 0, 0, 1959,
		1953, 1, 0, 0, 0, 1959, 1955, 1, 0, 0, 0, 1960, 377, 1, 0, 0, 0, 1961, 1963, 3, 376, 188, 0, 1962, 1961, 1, 0, 0,
		0, 1963, 1966, 1, 0, 0, 0, 1964, 1962, 1, 0, 0, 0, 1964, 1965, 1, 0, 0, 0, 1965, 379, 1, 0, 0, 0, 1966, 1964, 1,
		0, 0, 0, 1967, 1968, 3, 390, 195, 0, 1968, 1969, 5, 42, 0, 0, 1969, 1970, 3, 386, 193, 0, 1970, 1971, 5, 14, 0, 0,
		1971, 1972, 3, 396, 198, 0, 1972, 1974, 5, 25, 0, 0, 1973, 1975, 3, 388, 194, 0, 1974, 1973, 1, 0, 0, 0, 1974,
		1975, 1, 0, 0, 0, 1975, 1977, 1, 0, 0, 0, 1976, 1978, 3, 120, 60, 0, 1977, 1976, 1, 0, 0, 0, 1977, 1978, 1, 0, 0,
		0, 1978, 1979, 1, 0, 0, 0, 1979, 1980, 5, 121, 0, 0, 1980, 381, 1, 0, 0, 0, 1981, 1982, 3, 390, 195, 0, 1982,
		1983, 5, 121, 0, 0, 1983, 383, 1, 0, 0, 0, 1984, 1996, 3, 382, 191, 0, 1985, 1996, 3, 380, 190, 0, 1986, 1996, 3,
		410, 205, 0, 1987, 1996, 3, 398, 199, 0, 1988, 1996, 3, 104, 52, 0, 1989, 1996, 3, 420, 210, 0, 1990, 1996, 3,
		172, 86, 0, 1991, 1996, 3, 12, 6, 0, 1992, 1996, 3, 38, 19, 0, 1993, 1996, 3, 42, 21, 0, 1994, 1996, 3, 416, 208,
		0, 1995, 1984, 1, 0, 0, 0, 1995, 1985, 1, 0, 0, 0, 1995, 1986, 1, 0, 0, 0, 1995, 1987, 1, 0, 0, 0, 1995, 1988, 1,
		0, 0, 0, 1995, 1989, 1, 0, 0, 0, 1995, 1990, 1, 0, 0, 0, 1995, 1991, 1, 0, 0, 0, 1995, 1992, 1, 0, 0, 0, 1995,
		1993, 1, 0, 0, 0, 1995, 1994, 1, 0, 0, 0, 1996, 385, 1, 0, 0, 0, 1997, 1999, 3, 384, 192, 0, 1998, 1997, 1, 0, 0,
		0, 1999, 2002, 1, 0, 0, 0, 2000, 1998, 1, 0, 0, 0, 2000, 2001, 1, 0, 0, 0, 2001, 387, 1, 0, 0, 0, 2002, 2000, 1,
		0, 0, 0, 2003, 2004, 7, 13, 0, 0, 2004, 389, 1, 0, 0, 0, 2005, 2008, 3, 392, 196, 0, 2006, 2008, 3, 394, 197, 0,
		2007, 2005, 1, 0, 0, 0, 2007, 2006, 1, 0, 0, 0, 2008, 391, 1, 0, 0, 0, 2009, 2010, 5, 65, 0, 0, 2010, 2015, 3,
		120, 60, 0, 2011, 2012, 5, 116, 0, 0, 2012, 2013, 3, 180, 90, 0, 2013, 2014, 5, 117, 0, 0, 2014, 2016, 1, 0, 0, 0,
		2015, 2011, 1, 0, 0, 0, 2015, 2016, 1, 0, 0, 0, 2016, 393, 1, 0, 0, 0, 2017, 2019, 7, 14, 0, 0, 2018, 2017, 1, 0,
		0, 0, 2018, 2019, 1, 0, 0, 0, 2019, 2020, 1, 0, 0, 0, 2020, 2021, 5, 32, 0, 0, 2021, 2026, 3, 120, 60, 0, 2022,
		2023, 5, 116, 0, 0, 2023, 2024, 3, 180, 90, 0, 2024, 2025, 5, 117, 0, 0, 2025, 2027, 1, 0, 0, 0, 2026, 2022, 1, 0,
		0, 0, 2026, 2027, 1, 0, 0, 0, 2027, 2028, 1, 0, 0, 0, 2028, 2029, 5, 73, 0, 0, 2029, 2030, 3, 400, 200, 0, 2030,
		395, 1, 0, 0, 0, 2031, 2033, 3, 350, 175, 0, 2032, 2031, 1, 0, 0, 0, 2033, 2036, 1, 0, 0, 0, 2034, 2032, 1, 0, 0,
		0, 2034, 2035, 1, 0, 0, 0, 2035, 397, 1, 0, 0, 0, 2036, 2034, 1, 0, 0, 0, 2037, 2038, 5, 84, 0, 0, 2038, 2039, 5,
		130, 0, 0, 2039, 2040, 5, 42, 0, 0, 2040, 2041, 3, 400, 200, 0, 2041, 2042, 5, 121, 0, 0, 2042, 399, 1, 0, 0, 0,
		2043, 2045, 3, 256, 128, 0, 2044, 2046, 3, 256, 128, 0, 2045, 2044, 1, 0, 0, 0, 2045, 2046, 1, 0, 0, 0, 2046,
		2048, 1, 0, 0, 0, 2047, 2049, 3, 108, 54, 0, 2048, 2047, 1, 0, 0, 0, 2048, 2049, 1, 0, 0, 0, 2049, 401, 1, 0, 0,
		0, 2050, 2051, 7, 15, 0, 0, 2051, 403, 1, 0, 0, 0, 2052, 2055, 3, 252, 126, 0, 2053, 2055, 3, 10, 5, 0, 2054,
		2052, 1, 0, 0, 0, 2054, 2053, 1, 0, 0, 0, 2055, 405, 1, 0, 0, 0, 2056, 2062, 3, 170, 85, 0, 2057, 2058, 3, 250,
		125, 0, 2058, 2059, 3, 170, 85, 0, 2059, 2061, 1, 0, 0, 0, 2060, 2057, 1, 0, 0, 0, 2061, 2064, 1, 0, 0, 0, 2062,
		2060, 1, 0, 0, 0, 2062, 2063, 1, 0, 0, 0, 2063, 407, 1, 0, 0, 0, 2064, 2062, 1, 0, 0, 0, 2065, 2066, 5, 31, 0, 0,
		2066, 2067, 3, 168, 84, 0, 2067, 409, 1, 0, 0, 0, 2068, 2069, 5, 88, 0, 0, 2069, 2072, 5, 130, 0, 0, 2070, 2071,
		5, 42, 0, 0, 2071, 2073, 3, 412, 206, 0, 2072, 2070, 1, 0, 0, 0, 2072, 2073, 1, 0, 0, 0, 2073, 2074, 1, 0, 0, 0,
		2074, 2075, 5, 121, 0, 0, 2075, 411, 1, 0, 0, 0, 2076, 2081, 3, 334, 167, 0, 2077, 2081, 3, 78, 39, 0, 2078, 2081,
		3, 0, 0, 0, 2079, 2081, 3, 178, 89, 0, 2080, 2076, 1, 0, 0, 0, 2080, 2077, 1, 0, 0, 0, 2080, 2078, 1, 0, 0, 0,
		2080, 2079, 1, 0, 0, 0, 2081, 413, 1, 0, 0, 0, 2082, 2083, 5, 11, 0, 0, 2083, 2084, 5, 116, 0, 0, 2084, 2089, 3,
		204, 102, 0, 2085, 2086, 5, 122, 0, 0, 2086, 2088, 3, 204, 102, 0, 2087, 2085, 1, 0, 0, 0, 2088, 2091, 1, 0, 0, 0,
		2089, 2087, 1, 0, 0, 0, 2089, 2090, 1, 0, 0, 0, 2090, 2092, 1, 0, 0, 0, 2091, 2089, 1, 0, 0, 0, 2092, 2093, 5,
		117, 0, 0, 2093, 2094, 5, 55, 0, 0, 2094, 2095, 3, 400, 200, 0, 2095, 415, 1, 0, 0, 0, 2096, 2097, 5, 92, 0, 0,
		2097, 2102, 3, 256, 128, 0, 2098, 2099, 5, 122, 0, 0, 2099, 2101, 3, 256, 128, 0, 2100, 2098, 1, 0, 0, 0, 2101,
		2104, 1, 0, 0, 0, 2102, 2100, 1, 0, 0, 0, 2102, 2103, 1, 0, 0, 0, 2103, 2105, 1, 0, 0, 0, 2104, 2102, 1, 0, 0, 0,
		2105, 2106, 5, 121, 0, 0, 2106, 417, 1, 0, 0, 0, 2107, 2109, 3, 232, 116, 0, 2108, 2107, 1, 0, 0, 0, 2108, 2109,
		1, 0, 0, 0, 2109, 2110, 1, 0, 0, 0, 2110, 2111, 3, 404, 202, 0, 2111, 2112, 5, 114, 0, 0, 2112, 2113, 3, 168, 84,
		0, 2113, 2114, 5, 121, 0, 0, 2114, 419, 1, 0, 0, 0, 2115, 2117, 5, 78, 0, 0, 2116, 2115, 1, 0, 0, 0, 2116, 2117,
		1, 0, 0, 0, 2117, 2118, 1, 0, 0, 0, 2118, 2119, 5, 93, 0, 0, 2119, 2120, 3, 196, 98, 0, 2120, 2121, 5, 120, 0, 0,
		2121, 2124, 3, 400, 200, 0, 2122, 2123, 5, 114, 0, 0, 2123, 2125, 3, 168, 84, 0, 2124, 2122, 1, 0, 0, 0, 2124,
		2125, 1, 0, 0, 0, 2125, 2126, 1, 0, 0, 0, 2126, 2127, 5, 121, 0, 0, 2127, 421, 1, 0, 0, 0, 2128, 2130, 3, 232,
		116, 0, 2129, 2128, 1, 0, 0, 0, 2129, 2130, 1, 0, 0, 0, 2130, 2131, 1, 0, 0, 0, 2131, 2133, 5, 94, 0, 0, 2132,
		2134, 3, 344, 172, 0, 2133, 2132, 1, 0, 0, 0, 2133, 2134, 1, 0, 0, 0, 2134, 2136, 1, 0, 0, 0, 2135, 2137, 3, 88,
		44, 0, 2136, 2135, 1, 0, 0, 0, 2136, 2137, 1, 0, 0, 0, 2137, 2139, 1, 0, 0, 0, 2138, 2140, 3, 408, 204, 0, 2139,
		2138, 1, 0, 0, 0, 2139, 2140, 1, 0, 0, 0, 2140, 2141, 1, 0, 0, 0, 2141, 2142, 5, 121, 0, 0, 2142, 423, 1, 0, 0, 0,
		2143, 2148, 3, 426, 213, 0, 2144, 2145, 5, 122, 0, 0, 2145, 2147, 3, 426, 213, 0, 2146, 2144, 1, 0, 0, 0, 2147,
		2150, 1, 0, 0, 0, 2148, 2146, 1, 0, 0, 0, 2148, 2149, 1, 0, 0, 0, 2149, 2153, 1, 0, 0, 0, 2150, 2148, 1, 0, 0, 0,
		2151, 2153, 5, 89, 0, 0, 2152, 2143, 1, 0, 0, 0, 2152, 2151, 1, 0, 0, 0, 2153, 425, 1, 0, 0, 0, 2154, 2157, 3,
		168, 84, 0, 2155, 2156, 5, 6, 0, 0, 2156, 2158, 3, 168, 84, 0, 2157, 2155, 1, 0, 0, 0, 2157, 2158, 1, 0, 0, 0,
		2158, 427, 1, 0, 0, 0, 249, 433, 443, 453, 462, 467, 478, 490, 493, 500, 507, 511, 515, 518, 524, 529, 534, 540,
		544, 547, 555, 564, 587, 590, 593, 600, 606, 628, 633, 640, 642, 648, 650, 657, 660, 668, 671, 680, 687, 691, 699,
		704, 717, 724, 732, 735, 744, 747, 750, 755, 762, 765, 775, 778, 781, 787, 790, 796, 799, 803, 821, 823, 834, 837,
		843, 848, 853, 866, 877, 882, 887, 892, 895, 900, 920, 925, 941, 946, 952, 959, 969, 973, 976, 993, 998, 1003,
		1006, 1009, 1016, 1021, 1031, 1036, 1049, 1055, 1059, 1063, 1073, 1079, 1085, 1092, 1100, 1117, 1125, 1129, 1134,
		1140, 1148, 1161, 1179, 1183, 1196, 1201, 1206, 1216, 1223, 1230, 1238, 1242, 1249, 1254, 1257, 1262, 1267, 1273,
		1287, 1295, 1303, 1309, 1313, 1317, 1323, 1327, 1331, 1334, 1339, 1344, 1350, 1361, 1368, 1377, 1383, 1386, 1393,
		1405, 1412, 1419, 1426, 1437, 1445, 1448, 1452, 1456, 1462, 1468, 1471, 1474, 1484, 1487, 1500, 1505, 1514, 1517,
		1535, 1540, 1556, 1562, 1587, 1592, 1599, 1602, 1618, 1623, 1627, 1634, 1637, 1645, 1650, 1653, 1660, 1663, 1670,
		1674, 1681, 1691, 1695, 1701, 1710, 1715, 1721, 1726, 1732, 1737, 1741, 1748, 1752, 1778, 1789, 1795, 1810, 1815,
		1821, 1826, 1831, 1841, 1845, 1856, 1861, 1869, 1872, 1876, 1881, 1889, 1893, 1906, 1914, 1919, 1924, 1937, 1942,
		1947, 1955, 1959, 1964, 1974, 1977, 1995, 2000, 2007, 2015, 2018, 2026, 2034, 2045, 2048, 2054, 2062, 2072, 2080,
		2089, 2102, 2108, 2116, 2124, 2129, 2133, 2136, 2139, 2148, 2152, 2157
	)


class VHDLParser(Parser):
	grammarFileName = "VHDLParser.g4"

	atn = ATNDeserializer().deserialize(serializedATN())

	decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

	sharedContextCache = PredictionContextCache()

	literalNames = (
		"<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", "'abs'", "'access'", "'after'", "'alias'", "'all'", "'and'",
		"'architecture'", "'array'", "'assert'", "'attribute'", "'begin'", "'block'", "'body'", "'buffer'", "'bus'",
		"'case'", "'component'", "'configuration'", "'constant'", "'disconnect'", "'downto'", "'end'", "'entity'", "'else'",
		"'elsif'", "'exit'", "'file'", "'for'", "'function'", "'generate'", "'generic'", "'group'", "'guarded'", "'if'",
		"'impure'", "'in'", "'inertial'", "'inout'", "'is'", "'label'", "'library'", "'linkage'", "'loop'", "'map'",
		"'mod'", "'nand'", "'new'", "'next'", "'nor'", "'not'", "'null'", "'of'", "'on'", "'open'", "'or'", "'others'",
		"'out'", "'package'", "'port'", "'postponed'", "'process'", "'procedure'", "'pure'", "'range'", "'reject'", "'rem'",
		"'record'", "'register'", "'report'", "'return'", "'rol'", "'ror'", "'select'", "'severity'", "'shared'",
		"'signal'", "'sla'", "'sll'", "'sra'", "'srl'", "'subtype'", "'then'", "'to'", "'transport'", "'type'",
		"'unaffected'", "'units'", "'until'", "'use'", "'variable'", "'wait'", "'with'", "'when'", "'while'", "'xnor'",
		"'xor'", "'='", "'/='", "'<'", "'<=)'", "'>'", "'>='", "'+'", "'-'", "'*'", "'/'", "'**'", "'&'", "'=>'", "'<='",
		"':='", "'<>'", "'('", "')'", "'['", "']'", "':'", "';'", "','", "'|'", "'.'", "'''"
	)

	symbolicNames = (
		"<INVALID>", "WHITESPACE", "COMMENT_LINE", "COMMENT_BLOCK", "OP_ABS", "KW_ACCESS", "KW_AFTER", "KW_ALIAS", "KW_ALL",
		"OP_AND", "KW_ARCHITECTURE", "KW_ARRAY", "KW_ASSERT", "KW_ATTRIBUTE", "KW_BEGIN", "KW_BLOCK", "KW_BODY",
		"KW_BUFFER", "KW_BUS", "KW_CASE", "KW_COMPONENT", "KW_CONFIGURATION", "KW_CONSTANT", "KW_DISCONNECT", "KW_DOWNTO",
		"KW_END", "KW_ENTITY", "KW_ELSE", "KW_ELSIF", "KW_EXIT", "KW_FILE", "KW_FOR", "KW_FUNCTION", "KW_GENERATE",
		"KW_GENERIC", "KW_GROUP", "KW_GUARDED", "KW_IF", "KW_IMPURE", "KW_IN", "KW_INERTIAL", "KW_INOUT", "KW_IS",
		"KW_LABEL", "KW_LIBRARY", "KW_LINKAGE", "KW_LOOP", "KW_MAP", "OP_MOD", "OP_NAND", "KW_NEW", "KW_NEXT", "OP_NOR",
		"OP_NOT", "KW_NULL", "KW_OF", "KW_ON", "KW_OPEN", "OP_OR", "KW_OTHERS", "KW_OUT", "KW_PACKAGE", "KW_PORT",
		"KW_POSTPONED", "KW_PROCESS", "KW_PROCEDURE", "KW_PURE", "KW_RANGE", "KW_REJECT", "OP_REM", "KW_RECORD",
		"KW_REGISTER", "KW_REPORT", "KW_RETURN", "OP_ROL", "OP_ROR", "KW_SELECT", "KW_SEVERITY", "KW_SHARED", "KW_SIGNAL",
		"OP_SLA", "OP_SLL", "OP_SRA", "OP_SRL", "KW_SUBTYPE", "KW_THEN", "KW_TO", "KW_TRANSPORT", "KW_TYPE",
		"KW_UNAFFECTED", "KW_UNITS", "KW_UNTIL", "KW_USE", "KW_VARIABLE", "KW_WAIT", "KW_WITH", "KW_WHEN", "KW_WHILE",
		"OP_XNOR", "OP_XOR", "OP_EQ", "OP_NE", "OP_LT", "OP_LE", "OP_GT", "OP_GE", "OP_PLUS", "OP_MINUS", "OP_MUL",
		"OP_DIV", "OP_POW", "OP_CONCAT", "TOK_RARROW", "TOK_SIG_ASSIGN", "TOK_VAR_ASSIGN", "TOK_BOX", "TOK_LP", "TOK_RP",
		"TOK_LB", "TOK_RB", "TOK_COLON", "TOK_SEMICOL", "TOK_COMMA", "TOK_BAR", "TOK_DOT", "TOK_APOSTROPHE", "LIT_ABSTRACT",
		"LIT_BIT_STRING", "LIT_CHARACTER", "LIT_STRING", "LIT_IDENTIFIER"
	)

	RULE_access_type_definition = 0
	RULE_actual_designator = 1
	RULE_actual_parameter_part = 2
	RULE_actual_part = 3
	RULE_adding_operator = 4
	RULE_aggregate = 5
	RULE_alias_declaration = 6
	RULE_alias_designator = 7
	RULE_alias_indication = 8
	RULE_allocator = 9
	RULE_architecture_body = 10
	RULE_architecture_declarative_part = 11
	RULE_architecture_statement = 12
	RULE_architecture_statement_part = 13
	RULE_array_type_definition = 14
	RULE_assertion = 15
	RULE_assertion_statement = 16
	RULE_association_element = 17
	RULE_association_list = 18
	RULE_attribute_declaration = 19
	RULE_attribute_designator = 20
	RULE_attribute_specification = 21
	RULE_base_unit_declaration = 22
	RULE_binding_indication = 23
	RULE_block_configuration = 24
	RULE_block_declarative_item = 25
	RULE_block_declarative_part = 26
	RULE_block_header = 27
	RULE_block_specification = 28
	RULE_block_statement = 29
	RULE_block_statement_part = 30
	RULE_case_statement = 31
	RULE_case_statement_alternative = 32
	RULE_choice = 33
	RULE_choices = 34
	RULE_component_configuration = 35
	RULE_component_declaration = 36
	RULE_component_instantiation_statement = 37
	RULE_component_specification = 38
	RULE_composite_type_definition = 39
	RULE_concurrent_assertion_statement = 40
	RULE_concurrent_procedure_call_statement = 41
	RULE_concurrent_signal_assignment_statement = 42
	RULE_condition = 43
	RULE_condition_clause = 44
	RULE_conditional_signal_assignment = 45
	RULE_conditional_waveforms = 46
	RULE_configuration_declaration = 47
	RULE_configuration_declarative_item = 48
	RULE_configuration_declarative_part = 49
	RULE_configuration_item = 50
	RULE_configuration_specification = 51
	RULE_constant_declaration = 52
	RULE_constrained_array_definition = 53
	RULE_constraint = 54
	RULE_context_clause = 55
	RULE_context_item = 56
	RULE_delay_mechanism = 57
	RULE_design_file = 58
	RULE_design_unit = 59
	RULE_designator = 60
	RULE_direction = 61
	RULE_disconnection_specification = 62
	RULE_discrete_range = 63
	RULE_element_association = 64
	RULE_element_declaration = 65
	RULE_element_subtype_definition = 66
	RULE_entity_aspect = 67
	RULE_entity_class = 68
	RULE_entity_class_entry = 69
	RULE_entity_class_entry_list = 70
	RULE_entity_declaration = 71
	RULE_entity_declarative_item = 72
	RULE_entity_declarative_part = 73
	RULE_entity_designator = 74
	RULE_entity_header = 75
	RULE_entity_name_list = 76
	RULE_entity_specification = 77
	RULE_entity_statement = 78
	RULE_entity_statement_part = 79
	RULE_entity_tag = 80
	RULE_enumeration_literal = 81
	RULE_enumeration_type_definition = 82
	RULE_exit_statement = 83
	RULE_expression = 84
	RULE_factor = 85
	RULE_file_declaration = 86
	RULE_file_logical_name = 87
	RULE_file_open_information = 88
	RULE_file_type_definition = 89
	RULE_formal_parameter_list = 90
	RULE_formal_part = 91
	RULE_generate_statement = 92
	RULE_generation_scheme = 93
	RULE_generic_clause = 94
	RULE_generic_list = 95
	RULE_generic_map_aspect = 96
	RULE_guarded_signal_specification = 97
	RULE_identifier_list = 98
	RULE_if_statement = 99
	RULE_index_constraint = 100
	RULE_index_specification = 101
	RULE_index_subtype_definition = 102
	RULE_instantiated_unit = 103
	RULE_instantiation_list = 104
	RULE_interface_constant_declaration = 105
	RULE_interface_declaration = 106
	RULE_interface_element = 107
	RULE_interface_file_declaration = 108
	RULE_interface_signal_list = 109
	RULE_interface_port_list = 110
	RULE_interface_list = 111
	RULE_interface_port_declaration = 112
	RULE_interface_signal_declaration = 113
	RULE_interface_variable_declaration = 114
	RULE_iteration_scheme = 115
	RULE_label_colon = 116
	RULE_library_clause = 117
	RULE_library_unit = 118
	RULE_literal = 119
	RULE_logical_name = 120
	RULE_logical_name_list = 121
	RULE_logical_operator = 122
	RULE_loop_statement = 123
	RULE_signal_mode = 124
	RULE_multiplying_operator = 125
	RULE_name = 126
	RULE_name_part = 127
	RULE_selected_name = 128
	RULE_selected_name_part = 129
	RULE_function_call_or_indexed_name_part = 130
	RULE_slice_name_part = 131
	RULE_attribute_name_part = 132
	RULE_next_statement = 133
	RULE_numeric_literal = 134
	RULE_object_declaration = 135
	RULE_opts = 136
	RULE_package_body = 137
	RULE_package_body_declarative_item = 138
	RULE_package_body_declarative_part = 139
	RULE_package_declaration = 140
	RULE_package_declarative_item = 141
	RULE_package_declarative_part = 142
	RULE_parameter_specification = 143
	RULE_physical_literal = 144
	RULE_physical_type_definition = 145
	RULE_port_clause = 146
	RULE_port_list = 147
	RULE_port_map_aspect = 148
	RULE_primary = 149
	RULE_primary_unit = 150
	RULE_procedure_call = 151
	RULE_procedure_call_statement = 152
	RULE_process_declarative_item = 153
	RULE_process_declarative_part = 154
	RULE_process_statement = 155
	RULE_postponed_process_statement = 156
	RULE_process_statement_part = 157
	RULE_qualified_expression = 158
	RULE_range_decl = 159
	RULE_explicit_range = 160
	RULE_range_constraint = 161
	RULE_record_type_definition = 162
	RULE_relation = 163
	RULE_relational_operator = 164
	RULE_report_statement = 165
	RULE_return_statement = 166
	RULE_scalar_type_definition = 167
	RULE_secondary_unit = 168
	RULE_secondary_unit_declaration = 169
	RULE_selected_signal_assignment = 170
	RULE_selected_waveforms = 171
	RULE_sensitivity_clause = 172
	RULE_sensitivity_list = 173
	RULE_sequence_of_statements = 174
	RULE_sequential_statement = 175
	RULE_shift_expression = 176
	RULE_shift_operator = 177
	RULE_signal_assignment_statement = 178
	RULE_signal_declaration = 179
	RULE_signal_kind = 180
	RULE_signal_list = 181
	RULE_signature = 182
	RULE_simple_expression = 183
	RULE_simple_simultaneous_statement = 184
	RULE_simultaneous_alternative = 185
	RULE_simultaneous_case_statement = 186
	RULE_simultaneous_if_statement = 187
	RULE_simultaneous_statement = 188
	RULE_simultaneous_statement_part = 189
	RULE_subprogram_body = 190
	RULE_subprogram_declaration = 191
	RULE_subprogram_declarative_item = 192
	RULE_subprogram_declarative_part = 193
	RULE_subprogram_kind = 194
	RULE_subprogram_specification = 195
	RULE_procedure_specification = 196
	RULE_function_specification = 197
	RULE_subprogram_statement_part = 198
	RULE_subtype_declaration = 199
	RULE_subtype_indication = 200
	RULE_suffix = 201
	RULE_target = 202
	RULE_term = 203
	RULE_timeout_clause = 204
	RULE_type_declaration = 205
	RULE_type_definition = 206
	RULE_unconstrained_array_definition = 207
	RULE_use_clause = 208
	RULE_variable_assignment_statement = 209
	RULE_variable_declaration = 210
	RULE_wait_statement = 211
	RULE_waveform = 212
	RULE_waveform_element = 213

	ruleNames = (
		"access_type_definition", "actual_designator", "actual_parameter_part", "actual_part", "adding_operator",
		"aggregate", "alias_declaration", "alias_designator", "alias_indication", "allocator", "architecture_body",
		"architecture_declarative_part", "architecture_statement", "architecture_statement_part", "array_type_definition",
		"assertion", "assertion_statement", "association_element", "association_list", "attribute_declaration",
		"attribute_designator", "attribute_specification", "base_unit_declaration", "binding_indication",
		"block_configuration", "block_declarative_item", "block_declarative_part", "block_header", "block_specification",
		"block_statement", "block_statement_part", "case_statement", "case_statement_alternative", "choice", "choices",
		"component_configuration", "component_declaration", "component_instantiation_statement", "component_specification",
		"composite_type_definition", "concurrent_assertion_statement", "concurrent_procedure_call_statement",
		"concurrent_signal_assignment_statement", "condition", "condition_clause", "conditional_signal_assignment",
		"conditional_waveforms", "configuration_declaration", "configuration_declarative_item",
		"configuration_declarative_part", "configuration_item", "configuration_specification", "constant_declaration",
		"constrained_array_definition", "constraint", "context_clause", "context_item", "delay_mechanism", "design_file",
		"design_unit", "designator", "direction", "disconnection_specification", "discrete_range", "element_association",
		"element_declaration", "element_subtype_definition", "entity_aspect", "entity_class", "entity_class_entry",
		"entity_class_entry_list", "entity_declaration", "entity_declarative_item", "entity_declarative_part",
		"entity_designator", "entity_header", "entity_name_list", "entity_specification", "entity_statement",
		"entity_statement_part", "entity_tag", "enumeration_literal", "enumeration_type_definition", "exit_statement",
		"expression", "factor", "file_declaration", "file_logical_name", "file_open_information", "file_type_definition",
		"formal_parameter_list", "formal_part", "generate_statement", "generation_scheme", "generic_clause", "generic_list",
		"generic_map_aspect", "guarded_signal_specification", "identifier_list", "if_statement", "index_constraint",
		"index_specification", "index_subtype_definition", "instantiated_unit", "instantiation_list",
		"interface_constant_declaration", "interface_declaration", "interface_element", "interface_file_declaration",
		"interface_signal_list", "interface_port_list", "interface_list", "interface_port_declaration",
		"interface_signal_declaration", "interface_variable_declaration", "iteration_scheme", "label_colon",
		"library_clause", "library_unit", "literal", "logical_name", "logical_name_list", "logical_operator",
		"loop_statement", "signal_mode", "multiplying_operator", "name", "name_part", "selected_name", "selected_name_part",
		"function_call_or_indexed_name_part", "slice_name_part", "attribute_name_part", "next_statement", "numeric_literal",
		"object_declaration", "opts", "package_body", "package_body_declarative_item", "package_body_declarative_part",
		"package_declaration", "package_declarative_item", "package_declarative_part", "parameter_specification",
		"physical_literal", "physical_type_definition", "port_clause", "port_list", "port_map_aspect", "primary",
		"primary_unit", "procedure_call", "procedure_call_statement", "process_declarative_item",
		"process_declarative_part", "process_statement", "postponed_process_statement", "process_statement_part",
		"qualified_expression", "range_decl", "explicit_range", "range_constraint", "record_type_definition", "relation",
		"relational_operator", "report_statement", "return_statement", "scalar_type_definition", "secondary_unit",
		"secondary_unit_declaration", "selected_signal_assignment", "selected_waveforms", "sensitivity_clause",
		"sensitivity_list", "sequence_of_statements", "sequential_statement", "shift_expression", "shift_operator",
		"signal_assignment_statement", "signal_declaration", "signal_kind", "signal_list", "signature", "simple_expression",
		"simple_simultaneous_statement", "simultaneous_alternative", "simultaneous_case_statement",
		"simultaneous_if_statement", "simultaneous_statement", "simultaneous_statement_part", "subprogram_body",
		"subprogram_declaration", "subprogram_declarative_item", "subprogram_declarative_part", "subprogram_kind",
		"subprogram_specification", "procedure_specification", "function_specification", "subprogram_statement_part",
		"subtype_declaration", "subtype_indication", "suffix", "target", "term", "timeout_clause", "type_declaration",
		"type_definition", "unconstrained_array_definition", "use_clause", "variable_assignment_statement",
		"variable_declaration", "wait_statement", "waveform", "waveform_element"
	)

	EOF = Token.EOF
	WHITESPACE = 1
	COMMENT_LINE = 2
	COMMENT_BLOCK = 3
	OP_ABS = 4
	KW_ACCESS = 5
	KW_AFTER = 6
	KW_ALIAS = 7
	KW_ALL = 8
	OP_AND = 9
	KW_ARCHITECTURE = 10
	KW_ARRAY = 11
	KW_ASSERT = 12
	KW_ATTRIBUTE = 13
	KW_BEGIN = 14
	KW_BLOCK = 15
	KW_BODY = 16
	KW_BUFFER = 17
	KW_BUS = 18
	KW_CASE = 19
	KW_COMPONENT = 20
	KW_CONFIGURATION = 21
	KW_CONSTANT = 22
	KW_DISCONNECT = 23
	KW_DOWNTO = 24
	KW_END = 25
	KW_ENTITY = 26
	KW_ELSE = 27
	KW_ELSIF = 28
	KW_EXIT = 29
	KW_FILE = 30
	KW_FOR = 31
	KW_FUNCTION = 32
	KW_GENERATE = 33
	KW_GENERIC = 34
	KW_GROUP = 35
	KW_GUARDED = 36
	KW_IF = 37
	KW_IMPURE = 38
	KW_IN = 39
	KW_INERTIAL = 40
	KW_INOUT = 41
	KW_IS = 42
	KW_LABEL = 43
	KW_LIBRARY = 44
	KW_LINKAGE = 45
	KW_LOOP = 46
	KW_MAP = 47
	OP_MOD = 48
	OP_NAND = 49
	KW_NEW = 50
	KW_NEXT = 51
	OP_NOR = 52
	OP_NOT = 53
	KW_NULL = 54
	KW_OF = 55
	KW_ON = 56
	KW_OPEN = 57
	OP_OR = 58
	KW_OTHERS = 59
	KW_OUT = 60
	KW_PACKAGE = 61
	KW_PORT = 62
	KW_POSTPONED = 63
	KW_PROCESS = 64
	KW_PROCEDURE = 65
	KW_PURE = 66
	KW_RANGE = 67
	KW_REJECT = 68
	OP_REM = 69
	KW_RECORD = 70
	KW_REGISTER = 71
	KW_REPORT = 72
	KW_RETURN = 73
	OP_ROL = 74
	OP_ROR = 75
	KW_SELECT = 76
	KW_SEVERITY = 77
	KW_SHARED = 78
	KW_SIGNAL = 79
	OP_SLA = 80
	OP_SLL = 81
	OP_SRA = 82
	OP_SRL = 83
	KW_SUBTYPE = 84
	KW_THEN = 85
	KW_TO = 86
	KW_TRANSPORT = 87
	KW_TYPE = 88
	KW_UNAFFECTED = 89
	KW_UNITS = 90
	KW_UNTIL = 91
	KW_USE = 92
	KW_VARIABLE = 93
	KW_WAIT = 94
	KW_WITH = 95
	KW_WHEN = 96
	KW_WHILE = 97
	OP_XNOR = 98
	OP_XOR = 99
	OP_EQ = 100
	OP_NE = 101
	OP_LT = 102
	OP_LE = 103
	OP_GT = 104
	OP_GE = 105
	OP_PLUS = 106
	OP_MINUS = 107
	OP_MUL = 108
	OP_DIV = 109
	OP_POW = 110
	OP_CONCAT = 111
	TOK_RARROW = 112
	TOK_SIG_ASSIGN = 113
	TOK_VAR_ASSIGN = 114
	TOK_BOX = 115
	TOK_LP = 116
	TOK_RP = 117
	TOK_LB = 118
	TOK_RB = 119
	TOK_COLON = 120
	TOK_SEMICOL = 121
	TOK_COMMA = 122
	TOK_BAR = 123
	TOK_DOT = 124
	TOK_APOSTROPHE = 125
	LIT_ABSTRACT = 126
	LIT_BIT_STRING = 127
	LIT_CHARACTER = 128
	LIT_STRING = 129
	LIT_IDENTIFIER = 130

	def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
		super().__init__(input, output)
		self.checkVersion("4.10.1")
		self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
		self._predicates = None

	class Access_type_definitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_ACCESS(self):
			return self.getToken(VHDLParser.KW_ACCESS, 0)

		def subtype_indication(self):
			return self.getTypedRuleContext(VHDLParser.Subtype_indicationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_access_type_definition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitAccess_type_definition"):
				return visitor.visitAccess_type_definition(self)
			else:
				return visitor.visitChildren(self)

	def access_type_definition(self):

		localctx = VHDLParser.Access_type_definitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 0, self.RULE_access_type_definition)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 428
			self.match(VHDLParser.KW_ACCESS)
			self.state = 429
			self.subtype_indication()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Actual_designatorContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def expression(self):
			return self.getTypedRuleContext(VHDLParser.ExpressionContext, 0)

		def KW_OPEN(self):
			return self.getToken(VHDLParser.KW_OPEN, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_actual_designator

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitActual_designator"):
				return visitor.visitActual_designator(self)
			else:
				return visitor.visitChildren(self)

	def actual_designator(self):

		localctx = VHDLParser.Actual_designatorContext(self, self._ctx, self.state)
		self.enterRule(localctx, 2, self.RULE_actual_designator)
		try:
			self.state = 433
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.OP_ABS, VHDLParser.KW_NEW, VHDLParser.OP_NOT, VHDLParser.KW_NULL, VHDLParser.OP_PLUS,
									 VHDLParser.OP_MINUS, VHDLParser.TOK_LP, VHDLParser.LIT_ABSTRACT, VHDLParser.LIT_BIT_STRING,
									 VHDLParser.LIT_CHARACTER, VHDLParser.LIT_STRING, VHDLParser.LIT_IDENTIFIER]:
				self.enterOuterAlt(localctx, 1)
				self.state = 431
				self.expression()
				pass
			elif token in [VHDLParser.KW_OPEN]:
				self.enterOuterAlt(localctx, 2)
				self.state = 432
				self.match(VHDLParser.KW_OPEN)
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Actual_parameter_partContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def association_list(self):
			return self.getTypedRuleContext(VHDLParser.Association_listContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_actual_parameter_part

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitActual_parameter_part"):
				return visitor.visitActual_parameter_part(self)
			else:
				return visitor.visitChildren(self)

	def actual_parameter_part(self):

		localctx = VHDLParser.Actual_parameter_partContext(self, self._ctx, self.state)
		self.enterRule(localctx, 4, self.RULE_actual_parameter_part)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 435
			self.association_list()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Actual_partContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def name(self):
			return self.getTypedRuleContext(VHDLParser.NameContext, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def actual_designator(self):
			return self.getTypedRuleContext(VHDLParser.Actual_designatorContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_actual_part

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitActual_part"):
				return visitor.visitActual_part(self)
			else:
				return visitor.visitChildren(self)

	def actual_part(self):

		localctx = VHDLParser.Actual_partContext(self, self._ctx, self.state)
		self.enterRule(localctx, 6, self.RULE_actual_part)
		try:
			self.state = 443
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 1, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 437
				self.name()
				self.state = 438
				self.match(VHDLParser.TOK_LP)
				self.state = 439
				self.actual_designator()
				self.state = 440
				self.match(VHDLParser.TOK_RP)
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 442
				self.actual_designator()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Adding_operatorContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def OP_PLUS(self):
			return self.getToken(VHDLParser.OP_PLUS, 0)

		def OP_MINUS(self):
			return self.getToken(VHDLParser.OP_MINUS, 0)

		def OP_CONCAT(self):
			return self.getToken(VHDLParser.OP_CONCAT, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_adding_operator

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitAdding_operator"):
				return visitor.visitAdding_operator(self)
			else:
				return visitor.visitChildren(self)

	def adding_operator(self):

		localctx = VHDLParser.Adding_operatorContext(self, self._ctx, self.state)
		self.enterRule(localctx, 8, self.RULE_adding_operator)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 445
			_la = self._input.LA(1)
			if not (((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & (
				(1 << (VHDLParser.OP_PLUS - 106)) | (1 << (VHDLParser.OP_MINUS - 106)) | (
				1 << (VHDLParser.OP_CONCAT - 106)))) != 0)):
				self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class AggregateContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def element_association(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Element_associationContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Element_associationContext, i)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_aggregate

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitAggregate"):
				return visitor.visitAggregate(self)
			else:
				return visitor.visitChildren(self)

	def aggregate(self):

		localctx = VHDLParser.AggregateContext(self, self._ctx, self.state)
		self.enterRule(localctx, 10, self.RULE_aggregate)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 447
			self.match(VHDLParser.TOK_LP)
			self.state = 448
			self.element_association()
			self.state = 453
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.TOK_COMMA:
				self.state = 449
				self.match(VHDLParser.TOK_COMMA)
				self.state = 450
				self.element_association()
				self.state = 455
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 456
			self.match(VHDLParser.TOK_RP)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Alias_declarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_ALIAS(self):
			return self.getToken(VHDLParser.KW_ALIAS, 0)

		def alias_designator(self):
			return self.getTypedRuleContext(VHDLParser.Alias_designatorContext, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def name(self):
			return self.getTypedRuleContext(VHDLParser.NameContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def alias_indication(self):
			return self.getTypedRuleContext(VHDLParser.Alias_indicationContext, 0)

		def signature(self):
			return self.getTypedRuleContext(VHDLParser.SignatureContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_alias_declaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitAlias_declaration"):
				return visitor.visitAlias_declaration(self)
			else:
				return visitor.visitChildren(self)

	def alias_declaration(self):

		localctx = VHDLParser.Alias_declarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 12, self.RULE_alias_declaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 458
			self.match(VHDLParser.KW_ALIAS)
			self.state = 459
			self.alias_designator()
			self.state = 462
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_COLON:
				self.state = 460
				self.match(VHDLParser.TOK_COLON)
				self.state = 461
				self.alias_indication()

			self.state = 464
			self.match(VHDLParser.KW_IS)
			self.state = 465
			self.name()
			self.state = 467
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_LB:
				self.state = 466
				self.signature()

			self.state = 469
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Alias_designatorContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def LIT_CHARACTER(self):
			return self.getToken(VHDLParser.LIT_CHARACTER, 0)

		def LIT_STRING(self):
			return self.getToken(VHDLParser.LIT_STRING, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_alias_designator

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitAlias_designator"):
				return visitor.visitAlias_designator(self)
			else:
				return visitor.visitChildren(self)

	def alias_designator(self):

		localctx = VHDLParser.Alias_designatorContext(self, self._ctx, self.state)
		self.enterRule(localctx, 14, self.RULE_alias_designator)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 471
			_la = self._input.LA(1)
			if not (((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & (
				(1 << (VHDLParser.LIT_CHARACTER - 128)) | (1 << (VHDLParser.LIT_STRING - 128)) | (
				1 << (VHDLParser.LIT_IDENTIFIER - 128)))) != 0)):
				self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Alias_indicationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def subtype_indication(self):
			return self.getTypedRuleContext(VHDLParser.Subtype_indicationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_alias_indication

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitAlias_indication"):
				return visitor.visitAlias_indication(self)
			else:
				return visitor.visitChildren(self)

	def alias_indication(self):

		localctx = VHDLParser.Alias_indicationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 16, self.RULE_alias_indication)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 473
			self.subtype_indication()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class AllocatorContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_NEW(self):
			return self.getToken(VHDLParser.KW_NEW, 0)

		def qualified_expression(self):
			return self.getTypedRuleContext(VHDLParser.Qualified_expressionContext, 0)

		def subtype_indication(self):
			return self.getTypedRuleContext(VHDLParser.Subtype_indicationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_allocator

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitAllocator"):
				return visitor.visitAllocator(self)
			else:
				return visitor.visitChildren(self)

	def allocator(self):

		localctx = VHDLParser.AllocatorContext(self, self._ctx, self.state)
		self.enterRule(localctx, 18, self.RULE_allocator)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 475
			self.match(VHDLParser.KW_NEW)
			self.state = 478
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 5, self._ctx)
			if la_ == 1:
				self.state = 476
				self.qualified_expression()
				pass

			elif la_ == 2:
				self.state = 477
				self.subtype_indication()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Architecture_bodyContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_ARCHITECTURE(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_ARCHITECTURE)
			else:
				return self.getToken(VHDLParser.KW_ARCHITECTURE, i)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def KW_OF(self):
			return self.getToken(VHDLParser.KW_OF, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def architecture_declarative_part(self):
			return self.getTypedRuleContext(VHDLParser.Architecture_declarative_partContext, 0)

		def KW_BEGIN(self):
			return self.getToken(VHDLParser.KW_BEGIN, 0)

		def architecture_statement_part(self):
			return self.getTypedRuleContext(VHDLParser.Architecture_statement_partContext, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_architecture_body

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitArchitecture_body"):
				return visitor.visitArchitecture_body(self)
			else:
				return visitor.visitChildren(self)

	def architecture_body(self):

		localctx = VHDLParser.Architecture_bodyContext(self, self._ctx, self.state)
		self.enterRule(localctx, 20, self.RULE_architecture_body)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 480
			self.match(VHDLParser.KW_ARCHITECTURE)
			self.state = 481
			self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 482
			self.match(VHDLParser.KW_OF)
			self.state = 483
			self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 484
			self.match(VHDLParser.KW_IS)
			self.state = 485
			self.architecture_declarative_part()
			self.state = 486
			self.match(VHDLParser.KW_BEGIN)
			self.state = 487
			self.architecture_statement_part()
			self.state = 488
			self.match(VHDLParser.KW_END)
			self.state = 490
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_ARCHITECTURE:
				self.state = 489
				self.match(VHDLParser.KW_ARCHITECTURE)

			self.state = 493
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 492
				self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 495
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Architecture_declarative_partContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def block_declarative_item(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Block_declarative_itemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Block_declarative_itemContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_architecture_declarative_part

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitArchitecture_declarative_part"):
				return visitor.visitArchitecture_declarative_part(self)
			else:
				return visitor.visitChildren(self)

	def architecture_declarative_part(self):

		localctx = VHDLParser.Architecture_declarative_partContext(self, self._ctx, self.state)
		self.enterRule(localctx, 22, self.RULE_architecture_declarative_part)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 500
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_ALIAS) | (1 << VHDLParser.KW_ATTRIBUTE) | (1 << VHDLParser.KW_COMPONENT) | (
				1 << VHDLParser.KW_CONSTANT) | (1 << VHDLParser.KW_DISCONNECT) | (1 << VHDLParser.KW_FILE) | (
					1 << VHDLParser.KW_FOR) | (1 << VHDLParser.KW_FUNCTION) | (1 << VHDLParser.KW_IMPURE))) != 0) or (
				(((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & (
				(1 << (VHDLParser.KW_PROCEDURE - 65)) | (1 << (VHDLParser.KW_PURE - 65)) | (
				1 << (VHDLParser.KW_SHARED - 65)) | (1 << (VHDLParser.KW_SIGNAL - 65)) | (1 << (VHDLParser.KW_SUBTYPE - 65)) | (
					1 << (VHDLParser.KW_TYPE - 65)) | (1 << (VHDLParser.KW_USE - 65)) | (
					1 << (VHDLParser.KW_VARIABLE - 65)))) != 0):
				self.state = 497
				self.block_declarative_item()
				self.state = 502
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Architecture_statementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def block_statement(self):
			return self.getTypedRuleContext(VHDLParser.Block_statementContext, 0)

		def process_statement(self):
			return self.getTypedRuleContext(VHDLParser.Process_statementContext, 0)

		def postponed_process_statement(self):
			return self.getTypedRuleContext(VHDLParser.Postponed_process_statementContext, 0)

		def concurrent_procedure_call_statement(self):
			return self.getTypedRuleContext(VHDLParser.Concurrent_procedure_call_statementContext, 0)

		def label_colon(self):
			return self.getTypedRuleContext(VHDLParser.Label_colonContext, 0)

		def concurrent_assertion_statement(self):
			return self.getTypedRuleContext(VHDLParser.Concurrent_assertion_statementContext, 0)

		def concurrent_signal_assignment_statement(self):
			return self.getTypedRuleContext(VHDLParser.Concurrent_signal_assignment_statementContext, 0)

		def KW_POSTPONED(self):
			return self.getToken(VHDLParser.KW_POSTPONED, 0)

		def component_instantiation_statement(self):
			return self.getTypedRuleContext(VHDLParser.Component_instantiation_statementContext, 0)

		def generate_statement(self):
			return self.getTypedRuleContext(VHDLParser.Generate_statementContext, 0)

		def simultaneous_statement(self):
			return self.getTypedRuleContext(VHDLParser.Simultaneous_statementContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_architecture_statement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitArchitecture_statement"):
				return visitor.visitArchitecture_statement(self)
			else:
				return visitor.visitChildren(self)

	def architecture_statement(self):

		localctx = VHDLParser.Architecture_statementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 24, self.RULE_architecture_statement)
		try:
			self.state = 524
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 13, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 503
				self.block_statement()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 504
				self.process_statement()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 505
				self.postponed_process_statement()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 507
				self._errHandler.sync(self)
				la_ = self._interp.adaptivePredict(self._input, 9, self._ctx)
				if la_ == 1:
					self.state = 506
					self.label_colon()

				self.state = 509
				self.concurrent_procedure_call_statement()
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 511
				self._errHandler.sync(self)
				la_ = self._interp.adaptivePredict(self._input, 10, self._ctx)
				if la_ == 1:
					self.state = 510
					self.label_colon()

				self.state = 513
				self.concurrent_assertion_statement()
				pass

			elif la_ == 6:
				self.enterOuterAlt(localctx, 6)
				self.state = 515
				self._errHandler.sync(self)
				la_ = self._interp.adaptivePredict(self._input, 11, self._ctx)
				if la_ == 1:
					self.state = 514
					self.label_colon()

				self.state = 518
				self._errHandler.sync(self)
				la_ = self._interp.adaptivePredict(self._input, 12, self._ctx)
				if la_ == 1:
					self.state = 517
					self.match(VHDLParser.KW_POSTPONED)

				self.state = 520
				self.concurrent_signal_assignment_statement()
				pass

			elif la_ == 7:
				self.enterOuterAlt(localctx, 7)
				self.state = 521
				self.component_instantiation_statement()
				pass

			elif la_ == 8:
				self.enterOuterAlt(localctx, 8)
				self.state = 522
				self.generate_statement()
				pass

			elif la_ == 9:
				self.enterOuterAlt(localctx, 9)
				self.state = 523
				self.simultaneous_statement()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Architecture_statement_partContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def architecture_statement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Architecture_statementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Architecture_statementContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_architecture_statement_part

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitArchitecture_statement_part"):
				return visitor.visitArchitecture_statement_part(self)
			else:
				return visitor.visitChildren(self)

	def architecture_statement_part(self):

		localctx = VHDLParser.Architecture_statement_partContext(self, self._ctx, self.state)
		self.enterRule(localctx, 26, self.RULE_architecture_statement_part)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 529
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & (
				(1 << (VHDLParser.OP_ABS - 4)) | (1 << (VHDLParser.KW_ASSERT - 4)) | (1 << (VHDLParser.KW_CASE - 4)) | (
				1 << (VHDLParser.KW_IF - 4)) | (1 << (VHDLParser.KW_NEW - 4)) | (1 << (VHDLParser.OP_NOT - 4)) | (
					1 << (VHDLParser.KW_NULL - 4)) | (1 << (VHDLParser.KW_POSTPONED - 4)) | (
					1 << (VHDLParser.KW_PROCESS - 4)))) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & (
				(1 << (VHDLParser.KW_WITH - 95)) | (1 << (VHDLParser.OP_PLUS - 95)) | (1 << (VHDLParser.OP_MINUS - 95)) | (
				1 << (VHDLParser.TOK_LP - 95)) | (1 << (VHDLParser.LIT_ABSTRACT - 95)) | (
					1 << (VHDLParser.LIT_BIT_STRING - 95)) | (1 << (VHDLParser.LIT_CHARACTER - 95)) | (
					1 << (VHDLParser.LIT_STRING - 95)) | (1 << (VHDLParser.LIT_IDENTIFIER - 95)))) != 0):
				self.state = 526
				self.architecture_statement()
				self.state = 531
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Array_type_definitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def unconstrained_array_definition(self):
			return self.getTypedRuleContext(VHDLParser.Unconstrained_array_definitionContext, 0)

		def constrained_array_definition(self):
			return self.getTypedRuleContext(VHDLParser.Constrained_array_definitionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_array_type_definition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitArray_type_definition"):
				return visitor.visitArray_type_definition(self)
			else:
				return visitor.visitChildren(self)

	def array_type_definition(self):

		localctx = VHDLParser.Array_type_definitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 28, self.RULE_array_type_definition)
		try:
			self.state = 534
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 15, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 532
				self.unconstrained_array_definition()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 533
				self.constrained_array_definition()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class AssertionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_ASSERT(self):
			return self.getToken(VHDLParser.KW_ASSERT, 0)

		def condition(self):
			return self.getTypedRuleContext(VHDLParser.ConditionContext, 0)

		def KW_REPORT(self):
			return self.getToken(VHDLParser.KW_REPORT, 0)

		def expression(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.ExpressionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.ExpressionContext, i)

		def KW_SEVERITY(self):
			return self.getToken(VHDLParser.KW_SEVERITY, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_assertion

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitAssertion"):
				return visitor.visitAssertion(self)
			else:
				return visitor.visitChildren(self)

	def assertion(self):

		localctx = VHDLParser.AssertionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 30, self.RULE_assertion)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 536
			self.match(VHDLParser.KW_ASSERT)
			self.state = 537
			self.condition()
			self.state = 540
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_REPORT:
				self.state = 538
				self.match(VHDLParser.KW_REPORT)
				self.state = 539
				self.expression()

			self.state = 544
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_SEVERITY:
				self.state = 542
				self.match(VHDLParser.KW_SEVERITY)
				self.state = 543
				self.expression()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Assertion_statementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def assertion(self):
			return self.getTypedRuleContext(VHDLParser.AssertionContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def label_colon(self):
			return self.getTypedRuleContext(VHDLParser.Label_colonContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_assertion_statement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitAssertion_statement"):
				return visitor.visitAssertion_statement(self)
			else:
				return visitor.visitChildren(self)

	def assertion_statement(self):

		localctx = VHDLParser.Assertion_statementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 32, self.RULE_assertion_statement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 547
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 546
				self.label_colon()

			self.state = 549
			self.assertion()
			self.state = 550
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Association_elementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def actual_part(self):
			return self.getTypedRuleContext(VHDLParser.Actual_partContext, 0)

		def formal_part(self):
			return self.getTypedRuleContext(VHDLParser.Formal_partContext, 0)

		def TOK_RARROW(self):
			return self.getToken(VHDLParser.TOK_RARROW, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_association_element

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitAssociation_element"):
				return visitor.visitAssociation_element(self)
			else:
				return visitor.visitChildren(self)

	def association_element(self):

		localctx = VHDLParser.Association_elementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 34, self.RULE_association_element)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 555
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 19, self._ctx)
			if la_ == 1:
				self.state = 552
				self.formal_part()
				self.state = 553
				self.match(VHDLParser.TOK_RARROW)

			self.state = 557
			self.actual_part()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Association_listContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def association_element(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Association_elementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Association_elementContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_association_list

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitAssociation_list"):
				return visitor.visitAssociation_list(self)
			else:
				return visitor.visitChildren(self)

	def association_list(self):

		localctx = VHDLParser.Association_listContext(self, self._ctx, self.state)
		self.enterRule(localctx, 36, self.RULE_association_list)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 559
			self.association_element()
			self.state = 564
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.TOK_COMMA:
				self.state = 560
				self.match(VHDLParser.TOK_COMMA)
				self.state = 561
				self.association_element()
				self.state = 566
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Attribute_declarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_ATTRIBUTE(self):
			return self.getToken(VHDLParser.KW_ATTRIBUTE, 0)

		def label_colon(self):
			return self.getTypedRuleContext(VHDLParser.Label_colonContext, 0)

		def name(self):
			return self.getTypedRuleContext(VHDLParser.NameContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_attribute_declaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitAttribute_declaration"):
				return visitor.visitAttribute_declaration(self)
			else:
				return visitor.visitChildren(self)

	def attribute_declaration(self):

		localctx = VHDLParser.Attribute_declarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 38, self.RULE_attribute_declaration)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 567
			self.match(VHDLParser.KW_ATTRIBUTE)
			self.state = 568
			self.label_colon()
			self.state = 569
			self.name()
			self.state = 570
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Attribute_designatorContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_attribute_designator

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitAttribute_designator"):
				return visitor.visitAttribute_designator(self)
			else:
				return visitor.visitChildren(self)

	def attribute_designator(self):

		localctx = VHDLParser.Attribute_designatorContext(self, self._ctx, self.state)
		self.enterRule(localctx, 40, self.RULE_attribute_designator)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 572
			self.match(VHDLParser.LIT_IDENTIFIER)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Attribute_specificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_ATTRIBUTE(self):
			return self.getToken(VHDLParser.KW_ATTRIBUTE, 0)

		def attribute_designator(self):
			return self.getTypedRuleContext(VHDLParser.Attribute_designatorContext, 0)

		def KW_OF(self):
			return self.getToken(VHDLParser.KW_OF, 0)

		def entity_specification(self):
			return self.getTypedRuleContext(VHDLParser.Entity_specificationContext, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def expression(self):
			return self.getTypedRuleContext(VHDLParser.ExpressionContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_attribute_specification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitAttribute_specification"):
				return visitor.visitAttribute_specification(self)
			else:
				return visitor.visitChildren(self)

	def attribute_specification(self):

		localctx = VHDLParser.Attribute_specificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 42, self.RULE_attribute_specification)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 574
			self.match(VHDLParser.KW_ATTRIBUTE)
			self.state = 575
			self.attribute_designator()
			self.state = 576
			self.match(VHDLParser.KW_OF)
			self.state = 577
			self.entity_specification()
			self.state = 578
			self.match(VHDLParser.KW_IS)
			self.state = 579
			self.expression()
			self.state = 580
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Base_unit_declarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_base_unit_declaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitBase_unit_declaration"):
				return visitor.visitBase_unit_declaration(self)
			else:
				return visitor.visitChildren(self)

	def base_unit_declaration(self):

		localctx = VHDLParser.Base_unit_declarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 44, self.RULE_base_unit_declaration)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 582
			self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 583
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Binding_indicationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_USE(self):
			return self.getToken(VHDLParser.KW_USE, 0)

		def entity_aspect(self):
			return self.getTypedRuleContext(VHDLParser.Entity_aspectContext, 0)

		def generic_map_aspect(self):
			return self.getTypedRuleContext(VHDLParser.Generic_map_aspectContext, 0)

		def port_map_aspect(self):
			return self.getTypedRuleContext(VHDLParser.Port_map_aspectContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_binding_indication

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitBinding_indication"):
				return visitor.visitBinding_indication(self)
			else:
				return visitor.visitChildren(self)

	def binding_indication(self):

		localctx = VHDLParser.Binding_indicationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 46, self.RULE_binding_indication)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 587
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_USE:
				self.state = 585
				self.match(VHDLParser.KW_USE)
				self.state = 586
				self.entity_aspect()

			self.state = 590
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_GENERIC:
				self.state = 589
				self.generic_map_aspect()

			self.state = 593
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_PORT:
				self.state = 592
				self.port_map_aspect()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Block_configurationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_FOR(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_FOR)
			else:
				return self.getToken(VHDLParser.KW_FOR, i)

		def block_specification(self):
			return self.getTypedRuleContext(VHDLParser.Block_specificationContext, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def use_clause(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Use_clauseContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Use_clauseContext, i)

		def configuration_item(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Configuration_itemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Configuration_itemContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_block_configuration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitBlock_configuration"):
				return visitor.visitBlock_configuration(self)
			else:
				return visitor.visitChildren(self)

	def block_configuration(self):

		localctx = VHDLParser.Block_configurationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 48, self.RULE_block_configuration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 595
			self.match(VHDLParser.KW_FOR)
			self.state = 596
			self.block_specification()
			self.state = 600
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.KW_USE:
				self.state = 597
				self.use_clause()
				self.state = 602
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 606
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.KW_FOR:
				self.state = 603
				self.configuration_item()
				self.state = 608
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 609
			self.match(VHDLParser.KW_END)
			self.state = 610
			self.match(VHDLParser.KW_FOR)
			self.state = 611
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Block_declarative_itemContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def subprogram_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Subprogram_declarationContext, 0)

		def subprogram_body(self):
			return self.getTypedRuleContext(VHDLParser.Subprogram_bodyContext, 0)

		def type_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Type_declarationContext, 0)

		def subtype_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Subtype_declarationContext, 0)

		def constant_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Constant_declarationContext, 0)

		def signal_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Signal_declarationContext, 0)

		def variable_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Variable_declarationContext, 0)

		def file_declaration(self):
			return self.getTypedRuleContext(VHDLParser.File_declarationContext, 0)

		def alias_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Alias_declarationContext, 0)

		def component_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Component_declarationContext, 0)

		def attribute_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Attribute_declarationContext, 0)

		def attribute_specification(self):
			return self.getTypedRuleContext(VHDLParser.Attribute_specificationContext, 0)

		def configuration_specification(self):
			return self.getTypedRuleContext(VHDLParser.Configuration_specificationContext, 0)

		def disconnection_specification(self):
			return self.getTypedRuleContext(VHDLParser.Disconnection_specificationContext, 0)

		def use_clause(self):
			return self.getTypedRuleContext(VHDLParser.Use_clauseContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_block_declarative_item

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitBlock_declarative_item"):
				return visitor.visitBlock_declarative_item(self)
			else:
				return visitor.visitChildren(self)

	def block_declarative_item(self):

		localctx = VHDLParser.Block_declarative_itemContext(self, self._ctx, self.state)
		self.enterRule(localctx, 50, self.RULE_block_declarative_item)
		try:
			self.state = 628
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 26, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 613
				self.subprogram_declaration()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 614
				self.subprogram_body()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 615
				self.type_declaration()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 616
				self.subtype_declaration()
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 617
				self.constant_declaration()
				pass

			elif la_ == 6:
				self.enterOuterAlt(localctx, 6)
				self.state = 618
				self.signal_declaration()
				pass

			elif la_ == 7:
				self.enterOuterAlt(localctx, 7)
				self.state = 619
				self.variable_declaration()
				pass

			elif la_ == 8:
				self.enterOuterAlt(localctx, 8)
				self.state = 620
				self.file_declaration()
				pass

			elif la_ == 9:
				self.enterOuterAlt(localctx, 9)
				self.state = 621
				self.alias_declaration()
				pass

			elif la_ == 10:
				self.enterOuterAlt(localctx, 10)
				self.state = 622
				self.component_declaration()
				pass

			elif la_ == 11:
				self.enterOuterAlt(localctx, 11)
				self.state = 623
				self.attribute_declaration()
				pass

			elif la_ == 12:
				self.enterOuterAlt(localctx, 12)
				self.state = 624
				self.attribute_specification()
				pass

			elif la_ == 13:
				self.enterOuterAlt(localctx, 13)
				self.state = 625
				self.configuration_specification()
				pass

			elif la_ == 14:
				self.enterOuterAlt(localctx, 14)
				self.state = 626
				self.disconnection_specification()
				pass

			elif la_ == 15:
				self.enterOuterAlt(localctx, 15)
				self.state = 627
				self.use_clause()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Block_declarative_partContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def block_declarative_item(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Block_declarative_itemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Block_declarative_itemContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_block_declarative_part

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitBlock_declarative_part"):
				return visitor.visitBlock_declarative_part(self)
			else:
				return visitor.visitChildren(self)

	def block_declarative_part(self):

		localctx = VHDLParser.Block_declarative_partContext(self, self._ctx, self.state)
		self.enterRule(localctx, 52, self.RULE_block_declarative_part)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 633
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_ALIAS) | (1 << VHDLParser.KW_ATTRIBUTE) | (1 << VHDLParser.KW_COMPONENT) | (
				1 << VHDLParser.KW_CONSTANT) | (1 << VHDLParser.KW_DISCONNECT) | (1 << VHDLParser.KW_FILE) | (
					1 << VHDLParser.KW_FOR) | (1 << VHDLParser.KW_FUNCTION) | (1 << VHDLParser.KW_IMPURE))) != 0) or (
				(((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & (
				(1 << (VHDLParser.KW_PROCEDURE - 65)) | (1 << (VHDLParser.KW_PURE - 65)) | (
				1 << (VHDLParser.KW_SHARED - 65)) | (1 << (VHDLParser.KW_SIGNAL - 65)) | (1 << (VHDLParser.KW_SUBTYPE - 65)) | (
					1 << (VHDLParser.KW_TYPE - 65)) | (1 << (VHDLParser.KW_USE - 65)) | (
					1 << (VHDLParser.KW_VARIABLE - 65)))) != 0):
				self.state = 630
				self.block_declarative_item()
				self.state = 635
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Block_headerContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def generic_clause(self):
			return self.getTypedRuleContext(VHDLParser.Generic_clauseContext, 0)

		def port_clause(self):
			return self.getTypedRuleContext(VHDLParser.Port_clauseContext, 0)

		def generic_map_aspect(self):
			return self.getTypedRuleContext(VHDLParser.Generic_map_aspectContext, 0)

		def TOK_SEMICOL(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_SEMICOL)
			else:
				return self.getToken(VHDLParser.TOK_SEMICOL, i)

		def port_map_aspect(self):
			return self.getTypedRuleContext(VHDLParser.Port_map_aspectContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_block_header

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitBlock_header"):
				return visitor.visitBlock_header(self)
			else:
				return visitor.visitChildren(self)

	def block_header(self):

		localctx = VHDLParser.Block_headerContext(self, self._ctx, self.state)
		self.enterRule(localctx, 54, self.RULE_block_header)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 642
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_GENERIC:
				self.state = 636
				self.generic_clause()
				self.state = 640
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == VHDLParser.KW_GENERIC:
					self.state = 637
					self.generic_map_aspect()
					self.state = 638
					self.match(VHDLParser.TOK_SEMICOL)

			self.state = 650
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_PORT:
				self.state = 644
				self.port_clause()
				self.state = 648
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == VHDLParser.KW_PORT:
					self.state = 645
					self.port_map_aspect()
					self.state = 646
					self.match(VHDLParser.TOK_SEMICOL)




		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Block_specificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def index_specification(self):
			return self.getTypedRuleContext(VHDLParser.Index_specificationContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def name(self):
			return self.getTypedRuleContext(VHDLParser.NameContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_block_specification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitBlock_specification"):
				return visitor.visitBlock_specification(self)
			else:
				return visitor.visitChildren(self)

	def block_specification(self):

		localctx = VHDLParser.Block_specificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 56, self.RULE_block_specification)
		self._la = 0  # Token type
		try:
			self.state = 660
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 33, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 652
				self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 657
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == VHDLParser.TOK_LP:
					self.state = 653
					self.match(VHDLParser.TOK_LP)
					self.state = 654
					self.index_specification()
					self.state = 655
					self.match(VHDLParser.TOK_RP)

				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 659
				self.name()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Block_statementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def label_colon(self):
			return self.getTypedRuleContext(VHDLParser.Label_colonContext, 0)

		def KW_BLOCK(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_BLOCK)
			else:
				return self.getToken(VHDLParser.KW_BLOCK, i)

		def block_header(self):
			return self.getTypedRuleContext(VHDLParser.Block_headerContext, 0)

		def block_declarative_part(self):
			return self.getTypedRuleContext(VHDLParser.Block_declarative_partContext, 0)

		def KW_BEGIN(self):
			return self.getToken(VHDLParser.KW_BEGIN, 0)

		def block_statement_part(self):
			return self.getTypedRuleContext(VHDLParser.Block_statement_partContext, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def expression(self):
			return self.getTypedRuleContext(VHDLParser.ExpressionContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_block_statement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitBlock_statement"):
				return visitor.visitBlock_statement(self)
			else:
				return visitor.visitChildren(self)

	def block_statement(self):

		localctx = VHDLParser.Block_statementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 58, self.RULE_block_statement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 662
			self.label_colon()
			self.state = 663
			self.match(VHDLParser.KW_BLOCK)
			self.state = 668
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_LP:
				self.state = 664
				self.match(VHDLParser.TOK_LP)
				self.state = 665
				self.expression()
				self.state = 666
				self.match(VHDLParser.TOK_RP)

			self.state = 671
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_IS:
				self.state = 670
				self.match(VHDLParser.KW_IS)

			self.state = 673
			self.block_header()
			self.state = 674
			self.block_declarative_part()
			self.state = 675
			self.match(VHDLParser.KW_BEGIN)
			self.state = 676
			self.block_statement_part()
			self.state = 677
			self.match(VHDLParser.KW_END)
			self.state = 678
			self.match(VHDLParser.KW_BLOCK)
			self.state = 680
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 679
				self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 682
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Block_statement_partContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def architecture_statement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Architecture_statementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Architecture_statementContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_block_statement_part

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitBlock_statement_part"):
				return visitor.visitBlock_statement_part(self)
			else:
				return visitor.visitChildren(self)

	def block_statement_part(self):

		localctx = VHDLParser.Block_statement_partContext(self, self._ctx, self.state)
		self.enterRule(localctx, 60, self.RULE_block_statement_part)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 687
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & (
				(1 << (VHDLParser.OP_ABS - 4)) | (1 << (VHDLParser.KW_ASSERT - 4)) | (1 << (VHDLParser.KW_CASE - 4)) | (
				1 << (VHDLParser.KW_IF - 4)) | (1 << (VHDLParser.KW_NEW - 4)) | (1 << (VHDLParser.OP_NOT - 4)) | (
					1 << (VHDLParser.KW_NULL - 4)) | (1 << (VHDLParser.KW_POSTPONED - 4)) | (
					1 << (VHDLParser.KW_PROCESS - 4)))) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & (
				(1 << (VHDLParser.KW_WITH - 95)) | (1 << (VHDLParser.OP_PLUS - 95)) | (1 << (VHDLParser.OP_MINUS - 95)) | (
				1 << (VHDLParser.TOK_LP - 95)) | (1 << (VHDLParser.LIT_ABSTRACT - 95)) | (
					1 << (VHDLParser.LIT_BIT_STRING - 95)) | (1 << (VHDLParser.LIT_CHARACTER - 95)) | (
					1 << (VHDLParser.LIT_STRING - 95)) | (1 << (VHDLParser.LIT_IDENTIFIER - 95)))) != 0):
				self.state = 684
				self.architecture_statement()
				self.state = 689
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Case_statementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_CASE(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_CASE)
			else:
				return self.getToken(VHDLParser.KW_CASE, i)

		def expression(self):
			return self.getTypedRuleContext(VHDLParser.ExpressionContext, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def label_colon(self):
			return self.getTypedRuleContext(VHDLParser.Label_colonContext, 0)

		def case_statement_alternative(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Case_statement_alternativeContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Case_statement_alternativeContext, i)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_case_statement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitCase_statement"):
				return visitor.visitCase_statement(self)
			else:
				return visitor.visitChildren(self)

	def case_statement(self):

		localctx = VHDLParser.Case_statementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 62, self.RULE_case_statement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 691
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 690
				self.label_colon()

			self.state = 693
			self.match(VHDLParser.KW_CASE)
			self.state = 694
			self.expression()
			self.state = 695
			self.match(VHDLParser.KW_IS)
			self.state = 697
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while True:
				self.state = 696
				self.case_statement_alternative()
				self.state = 699
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if not (_la == VHDLParser.KW_WHEN):
					break

			self.state = 701
			self.match(VHDLParser.KW_END)
			self.state = 702
			self.match(VHDLParser.KW_CASE)
			self.state = 704
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 703
				self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 706
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Case_statement_alternativeContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_WHEN(self):
			return self.getToken(VHDLParser.KW_WHEN, 0)

		def choices(self):
			return self.getTypedRuleContext(VHDLParser.ChoicesContext, 0)

		def TOK_RARROW(self):
			return self.getToken(VHDLParser.TOK_RARROW, 0)

		def sequence_of_statements(self):
			return self.getTypedRuleContext(VHDLParser.Sequence_of_statementsContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_case_statement_alternative

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitCase_statement_alternative"):
				return visitor.visitCase_statement_alternative(self)
			else:
				return visitor.visitChildren(self)

	def case_statement_alternative(self):

		localctx = VHDLParser.Case_statement_alternativeContext(self, self._ctx, self.state)
		self.enterRule(localctx, 64, self.RULE_case_statement_alternative)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 708
			self.match(VHDLParser.KW_WHEN)
			self.state = 709
			self.choices()
			self.state = 710
			self.match(VHDLParser.TOK_RARROW)
			self.state = 711
			self.sequence_of_statements()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class ChoiceContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def discrete_range(self):
			return self.getTypedRuleContext(VHDLParser.Discrete_rangeContext, 0)

		def simple_expression(self):
			return self.getTypedRuleContext(VHDLParser.Simple_expressionContext, 0)

		def KW_OTHERS(self):
			return self.getToken(VHDLParser.KW_OTHERS, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_choice

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitChoice"):
				return visitor.visitChoice(self)
			else:
				return visitor.visitChildren(self)

	def choice(self):

		localctx = VHDLParser.ChoiceContext(self, self._ctx, self.state)
		self.enterRule(localctx, 66, self.RULE_choice)
		try:
			self.state = 717
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 41, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 713
				self.match(VHDLParser.LIT_IDENTIFIER)
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 714
				self.discrete_range()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 715
				self.simple_expression()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 716
				self.match(VHDLParser.KW_OTHERS)
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class ChoicesContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def choice(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.ChoiceContext)
			else:
				return self.getTypedRuleContext(VHDLParser.ChoiceContext, i)

		def TOK_BAR(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_BAR)
			else:
				return self.getToken(VHDLParser.TOK_BAR, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_choices

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitChoices"):
				return visitor.visitChoices(self)
			else:
				return visitor.visitChildren(self)

	def choices(self):

		localctx = VHDLParser.ChoicesContext(self, self._ctx, self.state)
		self.enterRule(localctx, 68, self.RULE_choices)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 719
			self.choice()
			self.state = 724
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.TOK_BAR:
				self.state = 720
				self.match(VHDLParser.TOK_BAR)
				self.state = 721
				self.choice()
				self.state = 726
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Component_configurationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_FOR(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_FOR)
			else:
				return self.getToken(VHDLParser.KW_FOR, i)

		def component_specification(self):
			return self.getTypedRuleContext(VHDLParser.Component_specificationContext, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_SEMICOL)
			else:
				return self.getToken(VHDLParser.TOK_SEMICOL, i)

		def binding_indication(self):
			return self.getTypedRuleContext(VHDLParser.Binding_indicationContext, 0)

		def block_configuration(self):
			return self.getTypedRuleContext(VHDLParser.Block_configurationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_component_configuration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitComponent_configuration"):
				return visitor.visitComponent_configuration(self)
			else:
				return visitor.visitChildren(self)

	def component_configuration(self):

		localctx = VHDLParser.Component_configurationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 70, self.RULE_component_configuration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 727
			self.match(VHDLParser.KW_FOR)
			self.state = 728
			self.component_specification()
			self.state = 732
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_GENERIC or _la == VHDLParser.KW_PORT or _la == VHDLParser.KW_USE or _la == VHDLParser.TOK_SEMICOL:
				self.state = 729
				self.binding_indication()
				self.state = 730
				self.match(VHDLParser.TOK_SEMICOL)

			self.state = 735
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_FOR:
				self.state = 734
				self.block_configuration()

			self.state = 737
			self.match(VHDLParser.KW_END)
			self.state = 738
			self.match(VHDLParser.KW_FOR)
			self.state = 739
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Component_declarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_COMPONENT(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_COMPONENT)
			else:
				return self.getToken(VHDLParser.KW_COMPONENT, i)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def generic_clause(self):
			return self.getTypedRuleContext(VHDLParser.Generic_clauseContext, 0)

		def port_clause(self):
			return self.getTypedRuleContext(VHDLParser.Port_clauseContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_component_declaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitComponent_declaration"):
				return visitor.visitComponent_declaration(self)
			else:
				return visitor.visitChildren(self)

	def component_declaration(self):

		localctx = VHDLParser.Component_declarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 72, self.RULE_component_declaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 741
			self.match(VHDLParser.KW_COMPONENT)
			self.state = 742
			self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 744
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_IS:
				self.state = 743
				self.match(VHDLParser.KW_IS)

			self.state = 747
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_GENERIC:
				self.state = 746
				self.generic_clause()

			self.state = 750
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_PORT:
				self.state = 749
				self.port_clause()

			self.state = 752
			self.match(VHDLParser.KW_END)
			self.state = 753
			self.match(VHDLParser.KW_COMPONENT)
			self.state = 755
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 754
				self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 757
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Component_instantiation_statementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def label_colon(self):
			return self.getTypedRuleContext(VHDLParser.Label_colonContext, 0)

		def instantiated_unit(self):
			return self.getTypedRuleContext(VHDLParser.Instantiated_unitContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def generic_map_aspect(self):
			return self.getTypedRuleContext(VHDLParser.Generic_map_aspectContext, 0)

		def port_map_aspect(self):
			return self.getTypedRuleContext(VHDLParser.Port_map_aspectContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_component_instantiation_statement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitComponent_instantiation_statement"):
				return visitor.visitComponent_instantiation_statement(self)
			else:
				return visitor.visitChildren(self)

	def component_instantiation_statement(self):

		localctx = VHDLParser.Component_instantiation_statementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 74, self.RULE_component_instantiation_statement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 759
			self.label_colon()
			self.state = 760
			self.instantiated_unit()
			self.state = 762
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_GENERIC:
				self.state = 761
				self.generic_map_aspect()

			self.state = 765
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_PORT:
				self.state = 764
				self.port_map_aspect()

			self.state = 767
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Component_specificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def instantiation_list(self):
			return self.getTypedRuleContext(VHDLParser.Instantiation_listContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def name(self):
			return self.getTypedRuleContext(VHDLParser.NameContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_component_specification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitComponent_specification"):
				return visitor.visitComponent_specification(self)
			else:
				return visitor.visitChildren(self)

	def component_specification(self):

		localctx = VHDLParser.Component_specificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 76, self.RULE_component_specification)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 769
			self.instantiation_list()
			self.state = 770
			self.match(VHDLParser.TOK_COLON)
			self.state = 771
			self.name()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Composite_type_definitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def array_type_definition(self):
			return self.getTypedRuleContext(VHDLParser.Array_type_definitionContext, 0)

		def record_type_definition(self):
			return self.getTypedRuleContext(VHDLParser.Record_type_definitionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_composite_type_definition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitComposite_type_definition"):
				return visitor.visitComposite_type_definition(self)
			else:
				return visitor.visitChildren(self)

	def composite_type_definition(self):

		localctx = VHDLParser.Composite_type_definitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 78, self.RULE_composite_type_definition)
		try:
			self.state = 775
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.KW_ARRAY]:
				self.enterOuterAlt(localctx, 1)
				self.state = 773
				self.array_type_definition()
				pass
			elif token in [VHDLParser.KW_RECORD]:
				self.enterOuterAlt(localctx, 2)
				self.state = 774
				self.record_type_definition()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Concurrent_assertion_statementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def assertion(self):
			return self.getTypedRuleContext(VHDLParser.AssertionContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def label_colon(self):
			return self.getTypedRuleContext(VHDLParser.Label_colonContext, 0)

		def KW_POSTPONED(self):
			return self.getToken(VHDLParser.KW_POSTPONED, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_concurrent_assertion_statement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitConcurrent_assertion_statement"):
				return visitor.visitConcurrent_assertion_statement(self)
			else:
				return visitor.visitChildren(self)

	def concurrent_assertion_statement(self):

		localctx = VHDLParser.Concurrent_assertion_statementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 80, self.RULE_concurrent_assertion_statement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 778
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 777
				self.label_colon()

			self.state = 781
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_POSTPONED:
				self.state = 780
				self.match(VHDLParser.KW_POSTPONED)

			self.state = 783
			self.assertion()
			self.state = 784
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Concurrent_procedure_call_statementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def procedure_call(self):
			return self.getTypedRuleContext(VHDLParser.Procedure_callContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def label_colon(self):
			return self.getTypedRuleContext(VHDLParser.Label_colonContext, 0)

		def KW_POSTPONED(self):
			return self.getToken(VHDLParser.KW_POSTPONED, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_concurrent_procedure_call_statement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitConcurrent_procedure_call_statement"):
				return visitor.visitConcurrent_procedure_call_statement(self)
			else:
				return visitor.visitChildren(self)

	def concurrent_procedure_call_statement(self):

		localctx = VHDLParser.Concurrent_procedure_call_statementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 82, self.RULE_concurrent_procedure_call_statement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 787
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 54, self._ctx)
			if la_ == 1:
				self.state = 786
				self.label_colon()

			self.state = 790
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_POSTPONED:
				self.state = 789
				self.match(VHDLParser.KW_POSTPONED)

			self.state = 792
			self.procedure_call()
			self.state = 793
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Concurrent_signal_assignment_statementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def conditional_signal_assignment(self):
			return self.getTypedRuleContext(VHDLParser.Conditional_signal_assignmentContext, 0)

		def selected_signal_assignment(self):
			return self.getTypedRuleContext(VHDLParser.Selected_signal_assignmentContext, 0)

		def label_colon(self):
			return self.getTypedRuleContext(VHDLParser.Label_colonContext, 0)

		def KW_POSTPONED(self):
			return self.getToken(VHDLParser.KW_POSTPONED, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_concurrent_signal_assignment_statement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitConcurrent_signal_assignment_statement"):
				return visitor.visitConcurrent_signal_assignment_statement(self)
			else:
				return visitor.visitChildren(self)

	def concurrent_signal_assignment_statement(self):

		localctx = VHDLParser.Concurrent_signal_assignment_statementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 84, self.RULE_concurrent_signal_assignment_statement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 796
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 56, self._ctx)
			if la_ == 1:
				self.state = 795
				self.label_colon()

			self.state = 799
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_POSTPONED:
				self.state = 798
				self.match(VHDLParser.KW_POSTPONED)

			self.state = 803
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.TOK_LP, VHDLParser.LIT_STRING, VHDLParser.LIT_IDENTIFIER]:
				self.state = 801
				self.conditional_signal_assignment()
				pass
			elif token in [VHDLParser.KW_WITH]:
				self.state = 802
				self.selected_signal_assignment()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class ConditionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def expression(self):
			return self.getTypedRuleContext(VHDLParser.ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_condition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitCondition"):
				return visitor.visitCondition(self)
			else:
				return visitor.visitChildren(self)

	def condition(self):

		localctx = VHDLParser.ConditionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 86, self.RULE_condition)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 805
			self.expression()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Condition_clauseContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_UNTIL(self):
			return self.getToken(VHDLParser.KW_UNTIL, 0)

		def condition(self):
			return self.getTypedRuleContext(VHDLParser.ConditionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_condition_clause

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitCondition_clause"):
				return visitor.visitCondition_clause(self)
			else:
				return visitor.visitChildren(self)

	def condition_clause(self):

		localctx = VHDLParser.Condition_clauseContext(self, self._ctx, self.state)
		self.enterRule(localctx, 88, self.RULE_condition_clause)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 807
			self.match(VHDLParser.KW_UNTIL)
			self.state = 808
			self.condition()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Conditional_signal_assignmentContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def target(self):
			return self.getTypedRuleContext(VHDLParser.TargetContext, 0)

		def TOK_SIG_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_SIG_ASSIGN, 0)

		def opts(self):
			return self.getTypedRuleContext(VHDLParser.OptsContext, 0)

		def conditional_waveforms(self):
			return self.getTypedRuleContext(VHDLParser.Conditional_waveformsContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_conditional_signal_assignment

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitConditional_signal_assignment"):
				return visitor.visitConditional_signal_assignment(self)
			else:
				return visitor.visitChildren(self)

	def conditional_signal_assignment(self):

		localctx = VHDLParser.Conditional_signal_assignmentContext(self, self._ctx, self.state)
		self.enterRule(localctx, 90, self.RULE_conditional_signal_assignment)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 810
			self.target()
			self.state = 811
			self.match(VHDLParser.TOK_SIG_ASSIGN)
			self.state = 812
			self.opts()
			self.state = 813
			self.conditional_waveforms()
			self.state = 814
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Conditional_waveformsContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def waveform(self):
			return self.getTypedRuleContext(VHDLParser.WaveformContext, 0)

		def KW_WHEN(self):
			return self.getToken(VHDLParser.KW_WHEN, 0)

		def condition(self):
			return self.getTypedRuleContext(VHDLParser.ConditionContext, 0)

		def KW_ELSE(self):
			return self.getToken(VHDLParser.KW_ELSE, 0)

		def conditional_waveforms(self):
			return self.getTypedRuleContext(VHDLParser.Conditional_waveformsContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_conditional_waveforms

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitConditional_waveforms"):
				return visitor.visitConditional_waveforms(self)
			else:
				return visitor.visitChildren(self)

	def conditional_waveforms(self):

		localctx = VHDLParser.Conditional_waveformsContext(self, self._ctx, self.state)
		self.enterRule(localctx, 92, self.RULE_conditional_waveforms)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 816
			self.waveform()
			self.state = 823
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_WHEN:
				self.state = 817
				self.match(VHDLParser.KW_WHEN)
				self.state = 818
				self.condition()
				self.state = 821
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == VHDLParser.KW_ELSE:
					self.state = 819
					self.match(VHDLParser.KW_ELSE)
					self.state = 820
					self.conditional_waveforms()




		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Configuration_declarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_CONFIGURATION(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_CONFIGURATION)
			else:
				return self.getToken(VHDLParser.KW_CONFIGURATION, i)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def KW_OF(self):
			return self.getToken(VHDLParser.KW_OF, 0)

		def name(self):
			return self.getTypedRuleContext(VHDLParser.NameContext, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def configuration_declarative_part(self):
			return self.getTypedRuleContext(VHDLParser.Configuration_declarative_partContext, 0)

		def block_configuration(self):
			return self.getTypedRuleContext(VHDLParser.Block_configurationContext, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_configuration_declaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitConfiguration_declaration"):
				return visitor.visitConfiguration_declaration(self)
			else:
				return visitor.visitChildren(self)

	def configuration_declaration(self):

		localctx = VHDLParser.Configuration_declarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 94, self.RULE_configuration_declaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 825
			self.match(VHDLParser.KW_CONFIGURATION)
			self.state = 826
			self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 827
			self.match(VHDLParser.KW_OF)
			self.state = 828
			self.name()
			self.state = 829
			self.match(VHDLParser.KW_IS)
			self.state = 830
			self.configuration_declarative_part()
			self.state = 831
			self.block_configuration()
			self.state = 832
			self.match(VHDLParser.KW_END)
			self.state = 834
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_CONFIGURATION:
				self.state = 833
				self.match(VHDLParser.KW_CONFIGURATION)

			self.state = 837
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 836
				self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 839
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Configuration_declarative_itemContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def use_clause(self):
			return self.getTypedRuleContext(VHDLParser.Use_clauseContext, 0)

		def attribute_specification(self):
			return self.getTypedRuleContext(VHDLParser.Attribute_specificationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_configuration_declarative_item

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitConfiguration_declarative_item"):
				return visitor.visitConfiguration_declarative_item(self)
			else:
				return visitor.visitChildren(self)

	def configuration_declarative_item(self):

		localctx = VHDLParser.Configuration_declarative_itemContext(self, self._ctx, self.state)
		self.enterRule(localctx, 96, self.RULE_configuration_declarative_item)
		try:
			self.state = 843
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.KW_USE]:
				self.enterOuterAlt(localctx, 1)
				self.state = 841
				self.use_clause()
				pass
			elif token in [VHDLParser.KW_ATTRIBUTE]:
				self.enterOuterAlt(localctx, 2)
				self.state = 842
				self.attribute_specification()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Configuration_declarative_partContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def configuration_declarative_item(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Configuration_declarative_itemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Configuration_declarative_itemContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_configuration_declarative_part

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitConfiguration_declarative_part"):
				return visitor.visitConfiguration_declarative_part(self)
			else:
				return visitor.visitChildren(self)

	def configuration_declarative_part(self):

		localctx = VHDLParser.Configuration_declarative_partContext(self, self._ctx, self.state)
		self.enterRule(localctx, 98, self.RULE_configuration_declarative_part)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 848
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.KW_ATTRIBUTE or _la == VHDLParser.KW_USE:
				self.state = 845
				self.configuration_declarative_item()
				self.state = 850
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Configuration_itemContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def block_configuration(self):
			return self.getTypedRuleContext(VHDLParser.Block_configurationContext, 0)

		def component_configuration(self):
			return self.getTypedRuleContext(VHDLParser.Component_configurationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_configuration_item

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitConfiguration_item"):
				return visitor.visitConfiguration_item(self)
			else:
				return visitor.visitChildren(self)

	def configuration_item(self):

		localctx = VHDLParser.Configuration_itemContext(self, self._ctx, self.state)
		self.enterRule(localctx, 100, self.RULE_configuration_item)
		try:
			self.state = 853
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 65, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 851
				self.block_configuration()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 852
				self.component_configuration()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Configuration_specificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_FOR(self):
			return self.getToken(VHDLParser.KW_FOR, 0)

		def component_specification(self):
			return self.getTypedRuleContext(VHDLParser.Component_specificationContext, 0)

		def binding_indication(self):
			return self.getTypedRuleContext(VHDLParser.Binding_indicationContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_configuration_specification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitConfiguration_specification"):
				return visitor.visitConfiguration_specification(self)
			else:
				return visitor.visitChildren(self)

	def configuration_specification(self):

		localctx = VHDLParser.Configuration_specificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 102, self.RULE_configuration_specification)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 855
			self.match(VHDLParser.KW_FOR)
			self.state = 856
			self.component_specification()
			self.state = 857
			self.binding_indication()
			self.state = 858
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Constant_declarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_CONSTANT(self):
			return self.getToken(VHDLParser.KW_CONSTANT, 0)

		def identifier_list(self):
			return self.getTypedRuleContext(VHDLParser.Identifier_listContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def subtype_indication(self):
			return self.getTypedRuleContext(VHDLParser.Subtype_indicationContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def TOK_VAR_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_VAR_ASSIGN, 0)

		def expression(self):
			return self.getTypedRuleContext(VHDLParser.ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_constant_declaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitConstant_declaration"):
				return visitor.visitConstant_declaration(self)
			else:
				return visitor.visitChildren(self)

	def constant_declaration(self):

		localctx = VHDLParser.Constant_declarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 104, self.RULE_constant_declaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 860
			self.match(VHDLParser.KW_CONSTANT)
			self.state = 861
			self.identifier_list()
			self.state = 862
			self.match(VHDLParser.TOK_COLON)
			self.state = 863
			self.subtype_indication()
			self.state = 866
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_VAR_ASSIGN:
				self.state = 864
				self.match(VHDLParser.TOK_VAR_ASSIGN)
				self.state = 865
				self.expression()

			self.state = 868
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Constrained_array_definitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_ARRAY(self):
			return self.getToken(VHDLParser.KW_ARRAY, 0)

		def index_constraint(self):
			return self.getTypedRuleContext(VHDLParser.Index_constraintContext, 0)

		def KW_OF(self):
			return self.getToken(VHDLParser.KW_OF, 0)

		def subtype_indication(self):
			return self.getTypedRuleContext(VHDLParser.Subtype_indicationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_constrained_array_definition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitConstrained_array_definition"):
				return visitor.visitConstrained_array_definition(self)
			else:
				return visitor.visitChildren(self)

	def constrained_array_definition(self):

		localctx = VHDLParser.Constrained_array_definitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 106, self.RULE_constrained_array_definition)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 870
			self.match(VHDLParser.KW_ARRAY)
			self.state = 871
			self.index_constraint()
			self.state = 872
			self.match(VHDLParser.KW_OF)
			self.state = 873
			self.subtype_indication()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class ConstraintContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def range_constraint(self):
			return self.getTypedRuleContext(VHDLParser.Range_constraintContext, 0)

		def index_constraint(self):
			return self.getTypedRuleContext(VHDLParser.Index_constraintContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_constraint

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitConstraint"):
				return visitor.visitConstraint(self)
			else:
				return visitor.visitChildren(self)

	def constraint(self):

		localctx = VHDLParser.ConstraintContext(self, self._ctx, self.state)
		self.enterRule(localctx, 108, self.RULE_constraint)
		try:
			self.state = 877
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.KW_RANGE]:
				self.enterOuterAlt(localctx, 1)
				self.state = 875
				self.range_constraint()
				pass
			elif token in [VHDLParser.TOK_LP]:
				self.enterOuterAlt(localctx, 2)
				self.state = 876
				self.index_constraint()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Context_clauseContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def context_item(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Context_itemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Context_itemContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_context_clause

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitContext_clause"):
				return visitor.visitContext_clause(self)
			else:
				return visitor.visitChildren(self)

	def context_clause(self):

		localctx = VHDLParser.Context_clauseContext(self, self._ctx, self.state)
		self.enterRule(localctx, 110, self.RULE_context_clause)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 882
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.KW_LIBRARY or _la == VHDLParser.KW_USE:
				self.state = 879
				self.context_item()
				self.state = 884
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Context_itemContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def library_clause(self):
			return self.getTypedRuleContext(VHDLParser.Library_clauseContext, 0)

		def use_clause(self):
			return self.getTypedRuleContext(VHDLParser.Use_clauseContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_context_item

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitContext_item"):
				return visitor.visitContext_item(self)
			else:
				return visitor.visitChildren(self)

	def context_item(self):

		localctx = VHDLParser.Context_itemContext(self, self._ctx, self.state)
		self.enterRule(localctx, 112, self.RULE_context_item)
		try:
			self.state = 887
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.KW_LIBRARY]:
				self.enterOuterAlt(localctx, 1)
				self.state = 885
				self.library_clause()
				pass
			elif token in [VHDLParser.KW_USE]:
				self.enterOuterAlt(localctx, 2)
				self.state = 886
				self.use_clause()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Delay_mechanismContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_TRANSPORT(self):
			return self.getToken(VHDLParser.KW_TRANSPORT, 0)

		def KW_INERTIAL(self):
			return self.getToken(VHDLParser.KW_INERTIAL, 0)

		def KW_REJECT(self):
			return self.getToken(VHDLParser.KW_REJECT, 0)

		def expression(self):
			return self.getTypedRuleContext(VHDLParser.ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_delay_mechanism

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitDelay_mechanism"):
				return visitor.visitDelay_mechanism(self)
			else:
				return visitor.visitChildren(self)

	def delay_mechanism(self):

		localctx = VHDLParser.Delay_mechanismContext(self, self._ctx, self.state)
		self.enterRule(localctx, 114, self.RULE_delay_mechanism)
		self._la = 0  # Token type
		try:
			self.state = 895
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.KW_TRANSPORT]:
				self.enterOuterAlt(localctx, 1)
				self.state = 889
				self.match(VHDLParser.KW_TRANSPORT)
				pass
			elif token in [VHDLParser.KW_INERTIAL, VHDLParser.KW_REJECT]:
				self.enterOuterAlt(localctx, 2)
				self.state = 892
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == VHDLParser.KW_REJECT:
					self.state = 890
					self.match(VHDLParser.KW_REJECT)
					self.state = 891
					self.expression()

				self.state = 894
				self.match(VHDLParser.KW_INERTIAL)
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Design_fileContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._design_unit = None  # Design_unitContext
			self.designUnits = list()  # of Design_unitContexts

		def EOF(self):
			return self.getToken(VHDLParser.EOF, 0)

		def design_unit(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Design_unitContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Design_unitContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_design_file

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitDesign_file"):
				return visitor.visitDesign_file(self)
			else:
				return visitor.visitChildren(self)

	def design_file(self):

		localctx = VHDLParser.Design_fileContext(self, self._ctx, self.state)
		self.enterRule(localctx, 116, self.RULE_design_file)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 900
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_ARCHITECTURE) | (1 << VHDLParser.KW_CONFIGURATION) | (1 << VHDLParser.KW_ENTITY) | (
				1 << VHDLParser.KW_LIBRARY) | (1 << VHDLParser.KW_PACKAGE))) != 0) or _la == VHDLParser.KW_USE:
				self.state = 897
				localctx._design_unit = self.design_unit()
				localctx.designUnits.append(localctx._design_unit)
				self.state = 902
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 903
			self.match(VHDLParser.EOF)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Design_unitContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.contextClause = None  # Context_clauseContext
			self.libraryUnit = None  # Library_unitContext

		def context_clause(self):
			return self.getTypedRuleContext(VHDLParser.Context_clauseContext, 0)

		def library_unit(self):
			return self.getTypedRuleContext(VHDLParser.Library_unitContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_design_unit

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitDesign_unit"):
				return visitor.visitDesign_unit(self)
			else:
				return visitor.visitChildren(self)

	def design_unit(self):

		localctx = VHDLParser.Design_unitContext(self, self._ctx, self.state)
		self.enterRule(localctx, 118, self.RULE_design_unit)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 905
			localctx.contextClause = self.context_clause()
			self.state = 906
			localctx.libraryUnit = self.library_unit()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class DesignatorContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def LIT_STRING(self):
			return self.getToken(VHDLParser.LIT_STRING, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_designator

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitDesignator"):
				return visitor.visitDesignator(self)
			else:
				return visitor.visitChildren(self)

	def designator(self):

		localctx = VHDLParser.DesignatorContext(self, self._ctx, self.state)
		self.enterRule(localctx, 120, self.RULE_designator)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 908
			_la = self._input.LA(1)
			if not (_la == VHDLParser.LIT_STRING or _la == VHDLParser.LIT_IDENTIFIER):
				self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class DirectionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_TO(self):
			return self.getToken(VHDLParser.KW_TO, 0)

		def KW_DOWNTO(self):
			return self.getToken(VHDLParser.KW_DOWNTO, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_direction

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitDirection"):
				return visitor.visitDirection(self)
			else:
				return visitor.visitChildren(self)

	def direction(self):

		localctx = VHDLParser.DirectionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 122, self.RULE_direction)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 910
			_la = self._input.LA(1)
			if not (_la == VHDLParser.KW_DOWNTO or _la == VHDLParser.KW_TO):
				self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Disconnection_specificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_DISCONNECT(self):
			return self.getToken(VHDLParser.KW_DISCONNECT, 0)

		def guarded_signal_specification(self):
			return self.getTypedRuleContext(VHDLParser.Guarded_signal_specificationContext, 0)

		def KW_AFTER(self):
			return self.getToken(VHDLParser.KW_AFTER, 0)

		def expression(self):
			return self.getTypedRuleContext(VHDLParser.ExpressionContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_disconnection_specification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitDisconnection_specification"):
				return visitor.visitDisconnection_specification(self)
			else:
				return visitor.visitChildren(self)

	def disconnection_specification(self):

		localctx = VHDLParser.Disconnection_specificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 124, self.RULE_disconnection_specification)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 912
			self.match(VHDLParser.KW_DISCONNECT)
			self.state = 913
			self.guarded_signal_specification()
			self.state = 914
			self.match(VHDLParser.KW_AFTER)
			self.state = 915
			self.expression()
			self.state = 916
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Discrete_rangeContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def range_decl(self):
			return self.getTypedRuleContext(VHDLParser.Range_declContext, 0)

		def subtype_indication(self):
			return self.getTypedRuleContext(VHDLParser.Subtype_indicationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_discrete_range

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitDiscrete_range"):
				return visitor.visitDiscrete_range(self)
			else:
				return visitor.visitChildren(self)

	def discrete_range(self):

		localctx = VHDLParser.Discrete_rangeContext(self, self._ctx, self.state)
		self.enterRule(localctx, 126, self.RULE_discrete_range)
		try:
			self.state = 920
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 73, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 918
				self.range_decl()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 919
				self.subtype_indication()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Element_associationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def expression(self):
			return self.getTypedRuleContext(VHDLParser.ExpressionContext, 0)

		def choices(self):
			return self.getTypedRuleContext(VHDLParser.ChoicesContext, 0)

		def TOK_RARROW(self):
			return self.getToken(VHDLParser.TOK_RARROW, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_element_association

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitElement_association"):
				return visitor.visitElement_association(self)
			else:
				return visitor.visitChildren(self)

	def element_association(self):

		localctx = VHDLParser.Element_associationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 128, self.RULE_element_association)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 925
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 74, self._ctx)
			if la_ == 1:
				self.state = 922
				self.choices()
				self.state = 923
				self.match(VHDLParser.TOK_RARROW)

			self.state = 927
			self.expression()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Element_declarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def identifier_list(self):
			return self.getTypedRuleContext(VHDLParser.Identifier_listContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def element_subtype_definition(self):
			return self.getTypedRuleContext(VHDLParser.Element_subtype_definitionContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_element_declaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitElement_declaration"):
				return visitor.visitElement_declaration(self)
			else:
				return visitor.visitChildren(self)

	def element_declaration(self):

		localctx = VHDLParser.Element_declarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 130, self.RULE_element_declaration)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 929
			self.identifier_list()
			self.state = 930
			self.match(VHDLParser.TOK_COLON)
			self.state = 931
			self.element_subtype_definition()
			self.state = 932
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Element_subtype_definitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def subtype_indication(self):
			return self.getTypedRuleContext(VHDLParser.Subtype_indicationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_element_subtype_definition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitElement_subtype_definition"):
				return visitor.visitElement_subtype_definition(self)
			else:
				return visitor.visitChildren(self)

	def element_subtype_definition(self):

		localctx = VHDLParser.Element_subtype_definitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 132, self.RULE_element_subtype_definition)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 934
			self.subtype_indication()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Entity_aspectContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_ENTITY(self):
			return self.getToken(VHDLParser.KW_ENTITY, 0)

		def name(self):
			return self.getTypedRuleContext(VHDLParser.NameContext, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def KW_CONFIGURATION(self):
			return self.getToken(VHDLParser.KW_CONFIGURATION, 0)

		def KW_OPEN(self):
			return self.getToken(VHDLParser.KW_OPEN, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_entity_aspect

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitEntity_aspect"):
				return visitor.visitEntity_aspect(self)
			else:
				return visitor.visitChildren(self)

	def entity_aspect(self):

		localctx = VHDLParser.Entity_aspectContext(self, self._ctx, self.state)
		self.enterRule(localctx, 134, self.RULE_entity_aspect)
		self._la = 0  # Token type
		try:
			self.state = 946
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.KW_ENTITY]:
				self.enterOuterAlt(localctx, 1)
				self.state = 936
				self.match(VHDLParser.KW_ENTITY)
				self.state = 937
				self.name()
				self.state = 941
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == VHDLParser.TOK_LP:
					self.state = 938
					self.match(VHDLParser.TOK_LP)
					self.state = 939
					self.match(VHDLParser.LIT_IDENTIFIER)
					self.state = 940
					self.match(VHDLParser.TOK_RP)

				pass
			elif token in [VHDLParser.KW_CONFIGURATION]:
				self.enterOuterAlt(localctx, 2)
				self.state = 943
				self.match(VHDLParser.KW_CONFIGURATION)
				self.state = 944
				self.name()
				pass
			elif token in [VHDLParser.KW_OPEN]:
				self.enterOuterAlt(localctx, 3)
				self.state = 945
				self.match(VHDLParser.KW_OPEN)
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Entity_classContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_ENTITY(self):
			return self.getToken(VHDLParser.KW_ENTITY, 0)

		def KW_ARCHITECTURE(self):
			return self.getToken(VHDLParser.KW_ARCHITECTURE, 0)

		def KW_CONFIGURATION(self):
			return self.getToken(VHDLParser.KW_CONFIGURATION, 0)

		def KW_PROCEDURE(self):
			return self.getToken(VHDLParser.KW_PROCEDURE, 0)

		def KW_FUNCTION(self):
			return self.getToken(VHDLParser.KW_FUNCTION, 0)

		def KW_PACKAGE(self):
			return self.getToken(VHDLParser.KW_PACKAGE, 0)

		def KW_TYPE(self):
			return self.getToken(VHDLParser.KW_TYPE, 0)

		def KW_SUBTYPE(self):
			return self.getToken(VHDLParser.KW_SUBTYPE, 0)

		def KW_CONSTANT(self):
			return self.getToken(VHDLParser.KW_CONSTANT, 0)

		def KW_SIGNAL(self):
			return self.getToken(VHDLParser.KW_SIGNAL, 0)

		def KW_VARIABLE(self):
			return self.getToken(VHDLParser.KW_VARIABLE, 0)

		def KW_COMPONENT(self):
			return self.getToken(VHDLParser.KW_COMPONENT, 0)

		def KW_LABEL(self):
			return self.getToken(VHDLParser.KW_LABEL, 0)

		def KW_UNITS(self):
			return self.getToken(VHDLParser.KW_UNITS, 0)

		def KW_FILE(self):
			return self.getToken(VHDLParser.KW_FILE, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_entity_class

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitEntity_class"):
				return visitor.visitEntity_class(self)
			else:
				return visitor.visitChildren(self)

	def entity_class(self):

		localctx = VHDLParser.Entity_classContext(self, self._ctx, self.state)
		self.enterRule(localctx, 136, self.RULE_entity_class)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 948
			_la = self._input.LA(1)
			if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_ARCHITECTURE) | (1 << VHDLParser.KW_COMPONENT) | (1 << VHDLParser.KW_CONFIGURATION) | (
				1 << VHDLParser.KW_CONSTANT) | (1 << VHDLParser.KW_ENTITY) | (1 << VHDLParser.KW_FILE) | (
					1 << VHDLParser.KW_FUNCTION) | (1 << VHDLParser.KW_LABEL) | (1 << VHDLParser.KW_PACKAGE))) != 0) or (
								(((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & (
								(1 << (VHDLParser.KW_PROCEDURE - 65)) | (1 << (VHDLParser.KW_SIGNAL - 65)) | (
								1 << (VHDLParser.KW_SUBTYPE - 65)) | (1 << (VHDLParser.KW_TYPE - 65)) | (
									1 << (VHDLParser.KW_UNITS - 65)) | (1 << (VHDLParser.KW_VARIABLE - 65)))) != 0)):
				self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Entity_class_entryContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def entity_class(self):
			return self.getTypedRuleContext(VHDLParser.Entity_classContext, 0)

		def TOK_BOX(self):
			return self.getToken(VHDLParser.TOK_BOX, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_entity_class_entry

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitEntity_class_entry"):
				return visitor.visitEntity_class_entry(self)
			else:
				return visitor.visitChildren(self)

	def entity_class_entry(self):

		localctx = VHDLParser.Entity_class_entryContext(self, self._ctx, self.state)
		self.enterRule(localctx, 138, self.RULE_entity_class_entry)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 950
			self.entity_class()
			self.state = 952
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_BOX:
				self.state = 951
				self.match(VHDLParser.TOK_BOX)


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Entity_class_entry_listContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def entity_class_entry(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Entity_class_entryContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Entity_class_entryContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_entity_class_entry_list

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitEntity_class_entry_list"):
				return visitor.visitEntity_class_entry_list(self)
			else:
				return visitor.visitChildren(self)

	def entity_class_entry_list(self):

		localctx = VHDLParser.Entity_class_entry_listContext(self, self._ctx, self.state)
		self.enterRule(localctx, 140, self.RULE_entity_class_entry_list)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 954
			self.entity_class_entry()
			self.state = 959
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.TOK_COMMA:
				self.state = 955
				self.match(VHDLParser.TOK_COMMA)
				self.state = 956
				self.entity_class_entry()
				self.state = 961
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Entity_declarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.entityName = None  # Token
			self.header = None  # Entity_headerContext
			self.declarativePart = None  # Entity_declarative_partContext
			self.statementPart = None  # Entity_statement_partContext
			self.entityName2 = None  # Token

		def KW_ENTITY(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_ENTITY)
			else:
				return self.getToken(VHDLParser.KW_ENTITY, i)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def entity_header(self):
			return self.getTypedRuleContext(VHDLParser.Entity_headerContext, 0)

		def entity_declarative_part(self):
			return self.getTypedRuleContext(VHDLParser.Entity_declarative_partContext, 0)

		def KW_BEGIN(self):
			return self.getToken(VHDLParser.KW_BEGIN, 0)

		def entity_statement_part(self):
			return self.getTypedRuleContext(VHDLParser.Entity_statement_partContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_entity_declaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitEntity_declaration"):
				return visitor.visitEntity_declaration(self)
			else:
				return visitor.visitChildren(self)

	def entity_declaration(self):

		localctx = VHDLParser.Entity_declarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 142, self.RULE_entity_declaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 962
			self.match(VHDLParser.KW_ENTITY)
			self.state = 963
			localctx.entityName = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 964
			self.match(VHDLParser.KW_IS)
			self.state = 965
			localctx.header = self.entity_header()
			self.state = 966
			localctx.declarativePart = self.entity_declarative_part()
			self.state = 969
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_BEGIN:
				self.state = 967
				self.match(VHDLParser.KW_BEGIN)
				self.state = 968
				localctx.statementPart = self.entity_statement_part()

			self.state = 971
			self.match(VHDLParser.KW_END)
			self.state = 973
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_ENTITY:
				self.state = 972
				self.match(VHDLParser.KW_ENTITY)

			self.state = 976
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 975
				localctx.entityName2 = self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 978
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Entity_declarative_itemContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def subprogram_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Subprogram_declarationContext, 0)

		def subprogram_body(self):
			return self.getTypedRuleContext(VHDLParser.Subprogram_bodyContext, 0)

		def type_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Type_declarationContext, 0)

		def subtype_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Subtype_declarationContext, 0)

		def constant_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Constant_declarationContext, 0)

		def signal_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Signal_declarationContext, 0)

		def variable_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Variable_declarationContext, 0)

		def file_declaration(self):
			return self.getTypedRuleContext(VHDLParser.File_declarationContext, 0)

		def alias_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Alias_declarationContext, 0)

		def attribute_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Attribute_declarationContext, 0)

		def attribute_specification(self):
			return self.getTypedRuleContext(VHDLParser.Attribute_specificationContext, 0)

		def disconnection_specification(self):
			return self.getTypedRuleContext(VHDLParser.Disconnection_specificationContext, 0)

		def use_clause(self):
			return self.getTypedRuleContext(VHDLParser.Use_clauseContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_entity_declarative_item

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitEntity_declarative_item"):
				return visitor.visitEntity_declarative_item(self)
			else:
				return visitor.visitChildren(self)

	def entity_declarative_item(self):

		localctx = VHDLParser.Entity_declarative_itemContext(self, self._ctx, self.state)
		self.enterRule(localctx, 144, self.RULE_entity_declarative_item)
		try:
			self.state = 993
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 82, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 980
				self.subprogram_declaration()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 981
				self.subprogram_body()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 982
				self.type_declaration()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 983
				self.subtype_declaration()
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 984
				self.constant_declaration()
				pass

			elif la_ == 6:
				self.enterOuterAlt(localctx, 6)
				self.state = 985
				self.signal_declaration()
				pass

			elif la_ == 7:
				self.enterOuterAlt(localctx, 7)
				self.state = 986
				self.variable_declaration()
				pass

			elif la_ == 8:
				self.enterOuterAlt(localctx, 8)
				self.state = 987
				self.file_declaration()
				pass

			elif la_ == 9:
				self.enterOuterAlt(localctx, 9)
				self.state = 988
				self.alias_declaration()
				pass

			elif la_ == 10:
				self.enterOuterAlt(localctx, 10)
				self.state = 989
				self.attribute_declaration()
				pass

			elif la_ == 11:
				self.enterOuterAlt(localctx, 11)
				self.state = 990
				self.attribute_specification()
				pass

			elif la_ == 12:
				self.enterOuterAlt(localctx, 12)
				self.state = 991
				self.disconnection_specification()
				pass

			elif la_ == 13:
				self.enterOuterAlt(localctx, 13)
				self.state = 992
				self.use_clause()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Entity_declarative_partContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def entity_declarative_item(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Entity_declarative_itemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Entity_declarative_itemContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_entity_declarative_part

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitEntity_declarative_part"):
				return visitor.visitEntity_declarative_part(self)
			else:
				return visitor.visitChildren(self)

	def entity_declarative_part(self):

		localctx = VHDLParser.Entity_declarative_partContext(self, self._ctx, self.state)
		self.enterRule(localctx, 146, self.RULE_entity_declarative_part)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 998
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_ALIAS) | (1 << VHDLParser.KW_ATTRIBUTE) | (1 << VHDLParser.KW_CONSTANT) | (
				1 << VHDLParser.KW_DISCONNECT) | (1 << VHDLParser.KW_FILE) | (1 << VHDLParser.KW_FUNCTION) | (
					1 << VHDLParser.KW_IMPURE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & (
				(1 << (VHDLParser.KW_PROCEDURE - 65)) | (1 << (VHDLParser.KW_PURE - 65)) | (
				1 << (VHDLParser.KW_SHARED - 65)) | (1 << (VHDLParser.KW_SIGNAL - 65)) | (1 << (VHDLParser.KW_SUBTYPE - 65)) | (
					1 << (VHDLParser.KW_TYPE - 65)) | (1 << (VHDLParser.KW_USE - 65)) | (
					1 << (VHDLParser.KW_VARIABLE - 65)))) != 0):
				self.state = 995
				self.entity_declarative_item()
				self.state = 1000
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Entity_designatorContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def entity_tag(self):
			return self.getTypedRuleContext(VHDLParser.Entity_tagContext, 0)

		def signature(self):
			return self.getTypedRuleContext(VHDLParser.SignatureContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_entity_designator

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitEntity_designator"):
				return visitor.visitEntity_designator(self)
			else:
				return visitor.visitChildren(self)

	def entity_designator(self):

		localctx = VHDLParser.Entity_designatorContext(self, self._ctx, self.state)
		self.enterRule(localctx, 148, self.RULE_entity_designator)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1001
			self.entity_tag()
			self.state = 1003
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_LB:
				self.state = 1002
				self.signature()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Entity_headerContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.genericClause = None  # Generic_clauseContext
			self.portClause = None  # Port_clauseContext

		def generic_clause(self):
			return self.getTypedRuleContext(VHDLParser.Generic_clauseContext, 0)

		def port_clause(self):
			return self.getTypedRuleContext(VHDLParser.Port_clauseContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_entity_header

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitEntity_header"):
				return visitor.visitEntity_header(self)
			else:
				return visitor.visitChildren(self)

	def entity_header(self):

		localctx = VHDLParser.Entity_headerContext(self, self._ctx, self.state)
		self.enterRule(localctx, 150, self.RULE_entity_header)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1006
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_GENERIC:
				self.state = 1005
				localctx.genericClause = self.generic_clause()

			self.state = 1009
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_PORT:
				self.state = 1008
				localctx.portClause = self.port_clause()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Entity_name_listContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def entity_designator(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Entity_designatorContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Entity_designatorContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def KW_OTHERS(self):
			return self.getToken(VHDLParser.KW_OTHERS, 0)

		def KW_ALL(self):
			return self.getToken(VHDLParser.KW_ALL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_entity_name_list

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitEntity_name_list"):
				return visitor.visitEntity_name_list(self)
			else:
				return visitor.visitChildren(self)

	def entity_name_list(self):

		localctx = VHDLParser.Entity_name_listContext(self, self._ctx, self.state)
		self.enterRule(localctx, 152, self.RULE_entity_name_list)
		self._la = 0  # Token type
		try:
			self.state = 1021
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.LIT_CHARACTER, VHDLParser.LIT_STRING, VHDLParser.LIT_IDENTIFIER]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1011
				self.entity_designator()
				self.state = 1016
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				while _la == VHDLParser.TOK_COMMA:
					self.state = 1012
					self.match(VHDLParser.TOK_COMMA)
					self.state = 1013
					self.entity_designator()
					self.state = 1018
					self._errHandler.sync(self)
					_la = self._input.LA(1)

				pass
			elif token in [VHDLParser.KW_OTHERS]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1019
				self.match(VHDLParser.KW_OTHERS)
				pass
			elif token in [VHDLParser.KW_ALL]:
				self.enterOuterAlt(localctx, 3)
				self.state = 1020
				self.match(VHDLParser.KW_ALL)
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Entity_specificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def entity_name_list(self):
			return self.getTypedRuleContext(VHDLParser.Entity_name_listContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def entity_class(self):
			return self.getTypedRuleContext(VHDLParser.Entity_classContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_entity_specification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitEntity_specification"):
				return visitor.visitEntity_specification(self)
			else:
				return visitor.visitChildren(self)

	def entity_specification(self):

		localctx = VHDLParser.Entity_specificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 154, self.RULE_entity_specification)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1023
			self.entity_name_list()
			self.state = 1024
			self.match(VHDLParser.TOK_COLON)
			self.state = 1025
			self.entity_class()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Entity_statementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def concurrent_assertion_statement(self):
			return self.getTypedRuleContext(VHDLParser.Concurrent_assertion_statementContext, 0)

		def process_statement(self):
			return self.getTypedRuleContext(VHDLParser.Process_statementContext, 0)

		def postponed_process_statement(self):
			return self.getTypedRuleContext(VHDLParser.Postponed_process_statementContext, 0)

		def concurrent_procedure_call_statement(self):
			return self.getTypedRuleContext(VHDLParser.Concurrent_procedure_call_statementContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_entity_statement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitEntity_statement"):
				return visitor.visitEntity_statement(self)
			else:
				return visitor.visitChildren(self)

	def entity_statement(self):

		localctx = VHDLParser.Entity_statementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 156, self.RULE_entity_statement)
		try:
			self.state = 1031
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 89, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1027
				self.concurrent_assertion_statement()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1028
				self.process_statement()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 1029
				self.postponed_process_statement()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 1030
				self.concurrent_procedure_call_statement()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Entity_statement_partContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def entity_statement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Entity_statementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Entity_statementContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_entity_statement_part

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitEntity_statement_part"):
				return visitor.visitEntity_statement_part(self)
			else:
				return visitor.visitChildren(self)

	def entity_statement_part(self):

		localctx = VHDLParser.Entity_statement_partContext(self, self._ctx, self.state)
		self.enterRule(localctx, 158, self.RULE_entity_statement_part)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1036
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while ((((_la - 12)) & ~0x3f) == 0 and ((1 << (_la - 12)) & (
				(1 << (VHDLParser.KW_ASSERT - 12)) | (1 << (VHDLParser.KW_POSTPONED - 12)) | (
				1 << (VHDLParser.KW_PROCESS - 12)))) != 0) or _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1033
				self.entity_statement()
				self.state = 1038
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Entity_tagContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def LIT_CHARACTER(self):
			return self.getToken(VHDLParser.LIT_CHARACTER, 0)

		def LIT_STRING(self):
			return self.getToken(VHDLParser.LIT_STRING, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_entity_tag

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitEntity_tag"):
				return visitor.visitEntity_tag(self)
			else:
				return visitor.visitChildren(self)

	def entity_tag(self):

		localctx = VHDLParser.Entity_tagContext(self, self._ctx, self.state)
		self.enterRule(localctx, 160, self.RULE_entity_tag)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1039
			_la = self._input.LA(1)
			if not (((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & (
				(1 << (VHDLParser.LIT_CHARACTER - 128)) | (1 << (VHDLParser.LIT_STRING - 128)) | (
				1 << (VHDLParser.LIT_IDENTIFIER - 128)))) != 0)):
				self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Enumeration_literalContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def LIT_CHARACTER(self):
			return self.getToken(VHDLParser.LIT_CHARACTER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_enumeration_literal

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitEnumeration_literal"):
				return visitor.visitEnumeration_literal(self)
			else:
				return visitor.visitChildren(self)

	def enumeration_literal(self):

		localctx = VHDLParser.Enumeration_literalContext(self, self._ctx, self.state)
		self.enterRule(localctx, 162, self.RULE_enumeration_literal)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1041
			_la = self._input.LA(1)
			if not (_la == VHDLParser.LIT_CHARACTER or _la == VHDLParser.LIT_IDENTIFIER):
				self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Enumeration_type_definitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def enumeration_literal(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Enumeration_literalContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Enumeration_literalContext, i)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_enumeration_type_definition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitEnumeration_type_definition"):
				return visitor.visitEnumeration_type_definition(self)
			else:
				return visitor.visitChildren(self)

	def enumeration_type_definition(self):

		localctx = VHDLParser.Enumeration_type_definitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 164, self.RULE_enumeration_type_definition)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1043
			self.match(VHDLParser.TOK_LP)
			self.state = 1044
			self.enumeration_literal()
			self.state = 1049
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.TOK_COMMA:
				self.state = 1045
				self.match(VHDLParser.TOK_COMMA)
				self.state = 1046
				self.enumeration_literal()
				self.state = 1051
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1052
			self.match(VHDLParser.TOK_RP)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Exit_statementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_EXIT(self):
			return self.getToken(VHDLParser.KW_EXIT, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def label_colon(self):
			return self.getTypedRuleContext(VHDLParser.Label_colonContext, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def KW_WHEN(self):
			return self.getToken(VHDLParser.KW_WHEN, 0)

		def condition(self):
			return self.getTypedRuleContext(VHDLParser.ConditionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_exit_statement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitExit_statement"):
				return visitor.visitExit_statement(self)
			else:
				return visitor.visitChildren(self)

	def exit_statement(self):

		localctx = VHDLParser.Exit_statementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 166, self.RULE_exit_statement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1055
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1054
				self.label_colon()

			self.state = 1057
			self.match(VHDLParser.KW_EXIT)
			self.state = 1059
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1058
				self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 1063
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_WHEN:
				self.state = 1061
				self.match(VHDLParser.KW_WHEN)
				self.state = 1062
				self.condition()

			self.state = 1065
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class ExpressionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def relation(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.RelationContext)
			else:
				return self.getTypedRuleContext(VHDLParser.RelationContext, i)

		def logical_operator(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Logical_operatorContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Logical_operatorContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_expression

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitExpression"):
				return visitor.visitExpression(self)
			else:
				return visitor.visitChildren(self)

	def expression(self):

		localctx = VHDLParser.ExpressionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 168, self.RULE_expression)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1067
			self.relation()
			self.state = 1073
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.OP_AND) | (1 << VHDLParser.OP_NAND) | (1 << VHDLParser.OP_NOR) | (
				1 << VHDLParser.OP_OR))) != 0) or _la == VHDLParser.OP_XNOR or _la == VHDLParser.OP_XOR:
				self.state = 1068
				self.logical_operator()
				self.state = 1069
				self.relation()
				self.state = 1075
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class FactorContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def primary(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.PrimaryContext)
			else:
				return self.getTypedRuleContext(VHDLParser.PrimaryContext, i)

		def OP_POW(self):
			return self.getToken(VHDLParser.OP_POW, 0)

		def OP_ABS(self):
			return self.getToken(VHDLParser.OP_ABS, 0)

		def OP_NOT(self):
			return self.getToken(VHDLParser.OP_NOT, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_factor

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitFactor"):
				return visitor.visitFactor(self)
			else:
				return visitor.visitChildren(self)

	def factor(self):

		localctx = VHDLParser.FactorContext(self, self._ctx, self.state)
		self.enterRule(localctx, 170, self.RULE_factor)
		try:
			self.state = 1085
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.KW_NEW, VHDLParser.KW_NULL, VHDLParser.TOK_LP, VHDLParser.LIT_ABSTRACT,
									 VHDLParser.LIT_BIT_STRING, VHDLParser.LIT_CHARACTER, VHDLParser.LIT_STRING,
									 VHDLParser.LIT_IDENTIFIER]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1076
				self.primary()
				self.state = 1079
				self._errHandler.sync(self)
				la_ = self._interp.adaptivePredict(self._input, 96, self._ctx)
				if la_ == 1:
					self.state = 1077
					self.match(VHDLParser.OP_POW)
					self.state = 1078
					self.primary()

				pass
			elif token in [VHDLParser.OP_ABS]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1081
				self.match(VHDLParser.OP_ABS)
				self.state = 1082
				self.primary()
				pass
			elif token in [VHDLParser.OP_NOT]:
				self.enterOuterAlt(localctx, 3)
				self.state = 1083
				self.match(VHDLParser.OP_NOT)
				self.state = 1084
				self.primary()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class File_declarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_FILE(self):
			return self.getToken(VHDLParser.KW_FILE, 0)

		def identifier_list(self):
			return self.getTypedRuleContext(VHDLParser.Identifier_listContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def subtype_indication(self):
			return self.getTypedRuleContext(VHDLParser.Subtype_indicationContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def file_open_information(self):
			return self.getTypedRuleContext(VHDLParser.File_open_informationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_file_declaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitFile_declaration"):
				return visitor.visitFile_declaration(self)
			else:
				return visitor.visitChildren(self)

	def file_declaration(self):

		localctx = VHDLParser.File_declarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 172, self.RULE_file_declaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1087
			self.match(VHDLParser.KW_FILE)
			self.state = 1088
			self.identifier_list()
			self.state = 1089
			self.match(VHDLParser.TOK_COLON)
			self.state = 1090
			self.subtype_indication()
			self.state = 1092
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_IS or _la == VHDLParser.KW_OPEN:
				self.state = 1091
				self.file_open_information()

			self.state = 1094
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class File_logical_nameContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def expression(self):
			return self.getTypedRuleContext(VHDLParser.ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_file_logical_name

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitFile_logical_name"):
				return visitor.visitFile_logical_name(self)
			else:
				return visitor.visitChildren(self)

	def file_logical_name(self):

		localctx = VHDLParser.File_logical_nameContext(self, self._ctx, self.state)
		self.enterRule(localctx, 174, self.RULE_file_logical_name)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1096
			self.expression()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class File_open_informationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def file_logical_name(self):
			return self.getTypedRuleContext(VHDLParser.File_logical_nameContext, 0)

		def KW_OPEN(self):
			return self.getToken(VHDLParser.KW_OPEN, 0)

		def expression(self):
			return self.getTypedRuleContext(VHDLParser.ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_file_open_information

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitFile_open_information"):
				return visitor.visitFile_open_information(self)
			else:
				return visitor.visitChildren(self)

	def file_open_information(self):

		localctx = VHDLParser.File_open_informationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 176, self.RULE_file_open_information)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1100
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_OPEN:
				self.state = 1098
				self.match(VHDLParser.KW_OPEN)
				self.state = 1099
				self.expression()

			self.state = 1102
			self.match(VHDLParser.KW_IS)
			self.state = 1103
			self.file_logical_name()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class File_type_definitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_FILE(self):
			return self.getToken(VHDLParser.KW_FILE, 0)

		def KW_OF(self):
			return self.getToken(VHDLParser.KW_OF, 0)

		def subtype_indication(self):
			return self.getTypedRuleContext(VHDLParser.Subtype_indicationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_file_type_definition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitFile_type_definition"):
				return visitor.visitFile_type_definition(self)
			else:
				return visitor.visitChildren(self)

	def file_type_definition(self):

		localctx = VHDLParser.File_type_definitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 178, self.RULE_file_type_definition)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1105
			self.match(VHDLParser.KW_FILE)
			self.state = 1106
			self.match(VHDLParser.KW_OF)
			self.state = 1107
			self.subtype_indication()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Formal_parameter_listContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def interface_list(self):
			return self.getTypedRuleContext(VHDLParser.Interface_listContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_formal_parameter_list

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitFormal_parameter_list"):
				return visitor.visitFormal_parameter_list(self)
			else:
				return visitor.visitChildren(self)

	def formal_parameter_list(self):

		localctx = VHDLParser.Formal_parameter_listContext(self, self._ctx, self.state)
		self.enterRule(localctx, 180, self.RULE_formal_parameter_list)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1109
			self.interface_list()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Formal_partContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def explicit_range(self):
			return self.getTypedRuleContext(VHDLParser.Explicit_rangeContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_formal_part

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitFormal_part"):
				return visitor.visitFormal_part(self)
			else:
				return visitor.visitChildren(self)

	def formal_part(self):

		localctx = VHDLParser.Formal_partContext(self, self._ctx, self.state)
		self.enterRule(localctx, 182, self.RULE_formal_part)
		try:
			self.state = 1117
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 100, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1111
				self.match(VHDLParser.LIT_IDENTIFIER)
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1112
				self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 1113
				self.match(VHDLParser.TOK_LP)
				self.state = 1114
				self.explicit_range()
				self.state = 1115
				self.match(VHDLParser.TOK_RP)
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Generate_statementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def label_colon(self):
			return self.getTypedRuleContext(VHDLParser.Label_colonContext, 0)

		def generation_scheme(self):
			return self.getTypedRuleContext(VHDLParser.Generation_schemeContext, 0)

		def KW_GENERATE(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_GENERATE)
			else:
				return self.getToken(VHDLParser.KW_GENERATE, i)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def KW_BEGIN(self):
			return self.getToken(VHDLParser.KW_BEGIN, 0)

		def architecture_statement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Architecture_statementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Architecture_statementContext, i)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def block_declarative_item(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Block_declarative_itemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Block_declarative_itemContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_generate_statement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitGenerate_statement"):
				return visitor.visitGenerate_statement(self)
			else:
				return visitor.visitChildren(self)

	def generate_statement(self):

		localctx = VHDLParser.Generate_statementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 184, self.RULE_generate_statement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1119
			self.label_colon()
			self.state = 1120
			self.generation_scheme()
			self.state = 1121
			self.match(VHDLParser.KW_GENERATE)
			self.state = 1129
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_ALIAS) | (1 << VHDLParser.KW_ATTRIBUTE) | (1 << VHDLParser.KW_BEGIN) | (
				1 << VHDLParser.KW_COMPONENT) | (1 << VHDLParser.KW_CONSTANT) | (1 << VHDLParser.KW_DISCONNECT) | (
					1 << VHDLParser.KW_FILE) | (1 << VHDLParser.KW_FOR) | (1 << VHDLParser.KW_FUNCTION) | (
					1 << VHDLParser.KW_IMPURE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & (
				(1 << (VHDLParser.KW_PROCEDURE - 65)) | (1 << (VHDLParser.KW_PURE - 65)) | (
				1 << (VHDLParser.KW_SHARED - 65)) | (1 << (VHDLParser.KW_SIGNAL - 65)) | (1 << (VHDLParser.KW_SUBTYPE - 65)) | (
					1 << (VHDLParser.KW_TYPE - 65)) | (1 << (VHDLParser.KW_USE - 65)) | (
					1 << (VHDLParser.KW_VARIABLE - 65)))) != 0):
				self.state = 1125
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
					(1 << VHDLParser.KW_ALIAS) | (1 << VHDLParser.KW_ATTRIBUTE) | (1 << VHDLParser.KW_COMPONENT) | (
					1 << VHDLParser.KW_CONSTANT) | (1 << VHDLParser.KW_DISCONNECT) | (1 << VHDLParser.KW_FILE) | (
						1 << VHDLParser.KW_FOR) | (1 << VHDLParser.KW_FUNCTION) | (1 << VHDLParser.KW_IMPURE))) != 0) or (
					(((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & (
					(1 << (VHDLParser.KW_PROCEDURE - 65)) | (1 << (VHDLParser.KW_PURE - 65)) | (
					1 << (VHDLParser.KW_SHARED - 65)) | (1 << (VHDLParser.KW_SIGNAL - 65)) | (
						1 << (VHDLParser.KW_SUBTYPE - 65)) | (1 << (VHDLParser.KW_TYPE - 65)) | (1 << (VHDLParser.KW_USE - 65)) | (
						1 << (VHDLParser.KW_VARIABLE - 65)))) != 0):
					self.state = 1122
					self.block_declarative_item()
					self.state = 1127
					self._errHandler.sync(self)
					_la = self._input.LA(1)

				self.state = 1128
				self.match(VHDLParser.KW_BEGIN)

			self.state = 1134
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & (
				(1 << (VHDLParser.OP_ABS - 4)) | (1 << (VHDLParser.KW_ASSERT - 4)) | (1 << (VHDLParser.KW_CASE - 4)) | (
				1 << (VHDLParser.KW_IF - 4)) | (1 << (VHDLParser.KW_NEW - 4)) | (1 << (VHDLParser.OP_NOT - 4)) | (
					1 << (VHDLParser.KW_NULL - 4)) | (1 << (VHDLParser.KW_POSTPONED - 4)) | (
					1 << (VHDLParser.KW_PROCESS - 4)))) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & (
				(1 << (VHDLParser.KW_WITH - 95)) | (1 << (VHDLParser.OP_PLUS - 95)) | (1 << (VHDLParser.OP_MINUS - 95)) | (
				1 << (VHDLParser.TOK_LP - 95)) | (1 << (VHDLParser.LIT_ABSTRACT - 95)) | (
					1 << (VHDLParser.LIT_BIT_STRING - 95)) | (1 << (VHDLParser.LIT_CHARACTER - 95)) | (
					1 << (VHDLParser.LIT_STRING - 95)) | (1 << (VHDLParser.LIT_IDENTIFIER - 95)))) != 0):
				self.state = 1131
				self.architecture_statement()
				self.state = 1136
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1137
			self.match(VHDLParser.KW_END)
			self.state = 1138
			self.match(VHDLParser.KW_GENERATE)
			self.state = 1140
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1139
				self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 1142
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Generation_schemeContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_FOR(self):
			return self.getToken(VHDLParser.KW_FOR, 0)

		def parameter_specification(self):
			return self.getTypedRuleContext(VHDLParser.Parameter_specificationContext, 0)

		def KW_IF(self):
			return self.getToken(VHDLParser.KW_IF, 0)

		def condition(self):
			return self.getTypedRuleContext(VHDLParser.ConditionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_generation_scheme

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitGeneration_scheme"):
				return visitor.visitGeneration_scheme(self)
			else:
				return visitor.visitChildren(self)

	def generation_scheme(self):

		localctx = VHDLParser.Generation_schemeContext(self, self._ctx, self.state)
		self.enterRule(localctx, 186, self.RULE_generation_scheme)
		try:
			self.state = 1148
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.KW_FOR]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1144
				self.match(VHDLParser.KW_FOR)
				self.state = 1145
				self.parameter_specification()
				pass
			elif token in [VHDLParser.KW_IF]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1146
				self.match(VHDLParser.KW_IF)
				self.state = 1147
				self.condition()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Generic_clauseContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.generics = None  # Generic_listContext

		def KW_GENERIC(self):
			return self.getToken(VHDLParser.KW_GENERIC, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def generic_list(self):
			return self.getTypedRuleContext(VHDLParser.Generic_listContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_generic_clause

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitGeneric_clause"):
				return visitor.visitGeneric_clause(self)
			else:
				return visitor.visitChildren(self)

	def generic_clause(self):

		localctx = VHDLParser.Generic_clauseContext(self, self._ctx, self.state)
		self.enterRule(localctx, 188, self.RULE_generic_clause)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1150
			self.match(VHDLParser.KW_GENERIC)
			self.state = 1151
			self.match(VHDLParser.TOK_LP)
			self.state = 1152
			localctx.generics = self.generic_list()
			self.state = 1153
			self.match(VHDLParser.TOK_RP)
			self.state = 1154
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Generic_listContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._interface_constant_declaration = None  # Interface_constant_declarationContext
			self.constants = list()  # of Interface_constant_declarationContexts

		def interface_constant_declaration(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Interface_constant_declarationContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Interface_constant_declarationContext, i)

		def TOK_SEMICOL(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_SEMICOL)
			else:
				return self.getToken(VHDLParser.TOK_SEMICOL, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_generic_list

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitGeneric_list"):
				return visitor.visitGeneric_list(self)
			else:
				return visitor.visitChildren(self)

	def generic_list(self):

		localctx = VHDLParser.Generic_listContext(self, self._ctx, self.state)
		self.enterRule(localctx, 190, self.RULE_generic_list)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1156
			localctx._interface_constant_declaration = self.interface_constant_declaration()
			localctx.constants.append(localctx._interface_constant_declaration)
			self.state = 1161
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.TOK_SEMICOL:
				self.state = 1157
				self.match(VHDLParser.TOK_SEMICOL)
				self.state = 1158
				localctx._interface_constant_declaration = self.interface_constant_declaration()
				localctx.constants.append(localctx._interface_constant_declaration)
				self.state = 1163
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Generic_map_aspectContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_GENERIC(self):
			return self.getToken(VHDLParser.KW_GENERIC, 0)

		def KW_MAP(self):
			return self.getToken(VHDLParser.KW_MAP, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def association_list(self):
			return self.getTypedRuleContext(VHDLParser.Association_listContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_generic_map_aspect

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitGeneric_map_aspect"):
				return visitor.visitGeneric_map_aspect(self)
			else:
				return visitor.visitChildren(self)

	def generic_map_aspect(self):

		localctx = VHDLParser.Generic_map_aspectContext(self, self._ctx, self.state)
		self.enterRule(localctx, 192, self.RULE_generic_map_aspect)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1164
			self.match(VHDLParser.KW_GENERIC)
			self.state = 1165
			self.match(VHDLParser.KW_MAP)
			self.state = 1166
			self.match(VHDLParser.TOK_LP)
			self.state = 1167
			self.association_list()
			self.state = 1168
			self.match(VHDLParser.TOK_RP)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Guarded_signal_specificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def signal_list(self):
			return self.getTypedRuleContext(VHDLParser.Signal_listContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def name(self):
			return self.getTypedRuleContext(VHDLParser.NameContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_guarded_signal_specification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitGuarded_signal_specification"):
				return visitor.visitGuarded_signal_specification(self)
			else:
				return visitor.visitChildren(self)

	def guarded_signal_specification(self):

		localctx = VHDLParser.Guarded_signal_specificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 194, self.RULE_guarded_signal_specification)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1170
			self.signal_list()
			self.state = 1171
			self.match(VHDLParser.TOK_COLON)
			self.state = 1172
			self.name()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Identifier_listContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._LIT_IDENTIFIER = None  # Token
			self.identifier = list()  # of Tokens

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_identifier_list

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitIdentifier_list"):
				return visitor.visitIdentifier_list(self)
			else:
				return visitor.visitChildren(self)

	def identifier_list(self):

		localctx = VHDLParser.Identifier_listContext(self, self._ctx, self.state)
		self.enterRule(localctx, 196, self.RULE_identifier_list)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1174
			localctx._LIT_IDENTIFIER = self.match(VHDLParser.LIT_IDENTIFIER)
			localctx.identifier.append(localctx._LIT_IDENTIFIER)
			self.state = 1179
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.TOK_COMMA:
				self.state = 1175
				self.match(VHDLParser.TOK_COMMA)
				self.state = 1176
				localctx._LIT_IDENTIFIER = self.match(VHDLParser.LIT_IDENTIFIER)
				localctx.identifier.append(localctx._LIT_IDENTIFIER)
				self.state = 1181
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class If_statementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_IF(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_IF)
			else:
				return self.getToken(VHDLParser.KW_IF, i)

		def condition(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.ConditionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.ConditionContext, i)

		def KW_THEN(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_THEN)
			else:
				return self.getToken(VHDLParser.KW_THEN, i)

		def sequence_of_statements(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Sequence_of_statementsContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Sequence_of_statementsContext, i)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def label_colon(self):
			return self.getTypedRuleContext(VHDLParser.Label_colonContext, 0)

		def KW_ELSIF(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_ELSIF)
			else:
				return self.getToken(VHDLParser.KW_ELSIF, i)

		def KW_ELSE(self):
			return self.getToken(VHDLParser.KW_ELSE, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_if_statement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitIf_statement"):
				return visitor.visitIf_statement(self)
			else:
				return visitor.visitChildren(self)

	def if_statement(self):

		localctx = VHDLParser.If_statementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 198, self.RULE_if_statement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1183
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1182
				self.label_colon()

			self.state = 1185
			self.match(VHDLParser.KW_IF)
			self.state = 1186
			self.condition()
			self.state = 1187
			self.match(VHDLParser.KW_THEN)
			self.state = 1188
			self.sequence_of_statements()
			self.state = 1196
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.KW_ELSIF:
				self.state = 1189
				self.match(VHDLParser.KW_ELSIF)
				self.state = 1190
				self.condition()
				self.state = 1191
				self.match(VHDLParser.KW_THEN)
				self.state = 1192
				self.sequence_of_statements()
				self.state = 1198
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1201
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_ELSE:
				self.state = 1199
				self.match(VHDLParser.KW_ELSE)
				self.state = 1200
				self.sequence_of_statements()

			self.state = 1203
			self.match(VHDLParser.KW_END)
			self.state = 1204
			self.match(VHDLParser.KW_IF)
			self.state = 1206
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1205
				self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 1208
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Index_constraintContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def discrete_range(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Discrete_rangeContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Discrete_rangeContext, i)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_index_constraint

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitIndex_constraint"):
				return visitor.visitIndex_constraint(self)
			else:
				return visitor.visitChildren(self)

	def index_constraint(self):

		localctx = VHDLParser.Index_constraintContext(self, self._ctx, self.state)
		self.enterRule(localctx, 200, self.RULE_index_constraint)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1210
			self.match(VHDLParser.TOK_LP)
			self.state = 1211
			self.discrete_range()
			self.state = 1216
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.TOK_COMMA:
				self.state = 1212
				self.match(VHDLParser.TOK_COMMA)
				self.state = 1213
				self.discrete_range()
				self.state = 1218
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1219
			self.match(VHDLParser.TOK_RP)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Index_specificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def discrete_range(self):
			return self.getTypedRuleContext(VHDLParser.Discrete_rangeContext, 0)

		def expression(self):
			return self.getTypedRuleContext(VHDLParser.ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_index_specification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitIndex_specification"):
				return visitor.visitIndex_specification(self)
			else:
				return visitor.visitChildren(self)

	def index_specification(self):

		localctx = VHDLParser.Index_specificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 202, self.RULE_index_specification)
		try:
			self.state = 1223
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 113, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1221
				self.discrete_range()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1222
				self.expression()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Index_subtype_definitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def name(self):
			return self.getTypedRuleContext(VHDLParser.NameContext, 0)

		def KW_RANGE(self):
			return self.getToken(VHDLParser.KW_RANGE, 0)

		def TOK_BOX(self):
			return self.getToken(VHDLParser.TOK_BOX, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_index_subtype_definition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitIndex_subtype_definition"):
				return visitor.visitIndex_subtype_definition(self)
			else:
				return visitor.visitChildren(self)

	def index_subtype_definition(self):

		localctx = VHDLParser.Index_subtype_definitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 204, self.RULE_index_subtype_definition)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1225
			self.name()
			self.state = 1226
			self.match(VHDLParser.KW_RANGE)
			self.state = 1227
			self.match(VHDLParser.TOK_BOX)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Instantiated_unitContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def name(self):
			return self.getTypedRuleContext(VHDLParser.NameContext, 0)

		def KW_COMPONENT(self):
			return self.getToken(VHDLParser.KW_COMPONENT, 0)

		def KW_ENTITY(self):
			return self.getToken(VHDLParser.KW_ENTITY, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def KW_CONFIGURATION(self):
			return self.getToken(VHDLParser.KW_CONFIGURATION, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_instantiated_unit

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitInstantiated_unit"):
				return visitor.visitInstantiated_unit(self)
			else:
				return visitor.visitChildren(self)

	def instantiated_unit(self):

		localctx = VHDLParser.Instantiated_unitContext(self, self._ctx, self.state)
		self.enterRule(localctx, 206, self.RULE_instantiated_unit)
		self._la = 0  # Token type
		try:
			self.state = 1242
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.KW_COMPONENT, VHDLParser.LIT_STRING, VHDLParser.LIT_IDENTIFIER]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1230
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == VHDLParser.KW_COMPONENT:
					self.state = 1229
					self.match(VHDLParser.KW_COMPONENT)

				self.state = 1232
				self.name()
				pass
			elif token in [VHDLParser.KW_ENTITY]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1233
				self.match(VHDLParser.KW_ENTITY)
				self.state = 1234
				self.name()
				self.state = 1238
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == VHDLParser.TOK_LP:
					self.state = 1235
					self.match(VHDLParser.TOK_LP)
					self.state = 1236
					self.match(VHDLParser.LIT_IDENTIFIER)
					self.state = 1237
					self.match(VHDLParser.TOK_RP)

				pass
			elif token in [VHDLParser.KW_CONFIGURATION]:
				self.enterOuterAlt(localctx, 3)
				self.state = 1240
				self.match(VHDLParser.KW_CONFIGURATION)
				self.state = 1241
				self.name()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Instantiation_listContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def KW_OTHERS(self):
			return self.getToken(VHDLParser.KW_OTHERS, 0)

		def KW_ALL(self):
			return self.getToken(VHDLParser.KW_ALL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_instantiation_list

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitInstantiation_list"):
				return visitor.visitInstantiation_list(self)
			else:
				return visitor.visitChildren(self)

	def instantiation_list(self):

		localctx = VHDLParser.Instantiation_listContext(self, self._ctx, self.state)
		self.enterRule(localctx, 208, self.RULE_instantiation_list)
		self._la = 0  # Token type
		try:
			self.state = 1254
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.LIT_IDENTIFIER]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1244
				self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 1249
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				while _la == VHDLParser.TOK_COMMA:
					self.state = 1245
					self.match(VHDLParser.TOK_COMMA)
					self.state = 1246
					self.match(VHDLParser.LIT_IDENTIFIER)
					self.state = 1251
					self._errHandler.sync(self)
					_la = self._input.LA(1)

				pass
			elif token in [VHDLParser.KW_OTHERS]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1252
				self.match(VHDLParser.KW_OTHERS)
				pass
			elif token in [VHDLParser.KW_ALL]:
				self.enterOuterAlt(localctx, 3)
				self.state = 1253
				self.match(VHDLParser.KW_ALL)
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Interface_constant_declarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.constantNames = None  # Identifier_listContext
			self.modeName = None  # Token
			self.subtypeIndication = None  # Subtype_indicationContext
			self.defaultValue = None  # ExpressionContext

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def identifier_list(self):
			return self.getTypedRuleContext(VHDLParser.Identifier_listContext, 0)

		def subtype_indication(self):
			return self.getTypedRuleContext(VHDLParser.Subtype_indicationContext, 0)

		def KW_CONSTANT(self):
			return self.getToken(VHDLParser.KW_CONSTANT, 0)

		def TOK_VAR_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_VAR_ASSIGN, 0)

		def KW_IN(self):
			return self.getToken(VHDLParser.KW_IN, 0)

		def expression(self):
			return self.getTypedRuleContext(VHDLParser.ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_interface_constant_declaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitInterface_constant_declaration"):
				return visitor.visitInterface_constant_declaration(self)
			else:
				return visitor.visitChildren(self)

	def interface_constant_declaration(self):

		localctx = VHDLParser.Interface_constant_declarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 210, self.RULE_interface_constant_declaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1257
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_CONSTANT:
				self.state = 1256
				self.match(VHDLParser.KW_CONSTANT)

			self.state = 1259
			localctx.constantNames = self.identifier_list()
			self.state = 1260
			self.match(VHDLParser.TOK_COLON)
			self.state = 1262
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_IN:
				self.state = 1261
				localctx.modeName = self.match(VHDLParser.KW_IN)

			self.state = 1264
			localctx.subtypeIndication = self.subtype_indication()
			self.state = 1267
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_VAR_ASSIGN:
				self.state = 1265
				self.match(VHDLParser.TOK_VAR_ASSIGN)
				self.state = 1266
				localctx.defaultValue = self.expression()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Interface_declarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def interface_constant_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Interface_constant_declarationContext, 0)

		def interface_signal_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Interface_signal_declarationContext, 0)

		def interface_variable_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Interface_variable_declarationContext, 0)

		def interface_file_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Interface_file_declarationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_interface_declaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitInterface_declaration"):
				return visitor.visitInterface_declaration(self)
			else:
				return visitor.visitChildren(self)

	def interface_declaration(self):

		localctx = VHDLParser.Interface_declarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 212, self.RULE_interface_declaration)
		try:
			self.state = 1273
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 122, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1269
				self.interface_constant_declaration()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1270
				self.interface_signal_declaration()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 1271
				self.interface_variable_declaration()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 1272
				self.interface_file_declaration()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Interface_elementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def interface_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Interface_declarationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_interface_element

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitInterface_element"):
				return visitor.visitInterface_element(self)
			else:
				return visitor.visitChildren(self)

	def interface_element(self):

		localctx = VHDLParser.Interface_elementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 214, self.RULE_interface_element)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1275
			self.interface_declaration()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Interface_file_declarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_FILE(self):
			return self.getToken(VHDLParser.KW_FILE, 0)

		def identifier_list(self):
			return self.getTypedRuleContext(VHDLParser.Identifier_listContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def subtype_indication(self):
			return self.getTypedRuleContext(VHDLParser.Subtype_indicationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_interface_file_declaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitInterface_file_declaration"):
				return visitor.visitInterface_file_declaration(self)
			else:
				return visitor.visitChildren(self)

	def interface_file_declaration(self):

		localctx = VHDLParser.Interface_file_declarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 216, self.RULE_interface_file_declaration)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1277
			self.match(VHDLParser.KW_FILE)
			self.state = 1278
			self.identifier_list()
			self.state = 1279
			self.match(VHDLParser.TOK_COLON)
			self.state = 1280
			self.subtype_indication()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Interface_signal_listContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def interface_signal_declaration(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Interface_signal_declarationContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Interface_signal_declarationContext, i)

		def TOK_SEMICOL(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_SEMICOL)
			else:
				return self.getToken(VHDLParser.TOK_SEMICOL, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_interface_signal_list

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitInterface_signal_list"):
				return visitor.visitInterface_signal_list(self)
			else:
				return visitor.visitChildren(self)

	def interface_signal_list(self):

		localctx = VHDLParser.Interface_signal_listContext(self, self._ctx, self.state)
		self.enterRule(localctx, 218, self.RULE_interface_signal_list)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1282
			self.interface_signal_declaration()
			self.state = 1287
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.TOK_SEMICOL:
				self.state = 1283
				self.match(VHDLParser.TOK_SEMICOL)
				self.state = 1284
				self.interface_signal_declaration()
				self.state = 1289
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Interface_port_listContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def interface_port_declaration(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Interface_port_declarationContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Interface_port_declarationContext, i)

		def TOK_SEMICOL(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_SEMICOL)
			else:
				return self.getToken(VHDLParser.TOK_SEMICOL, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_interface_port_list

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitInterface_port_list"):
				return visitor.visitInterface_port_list(self)
			else:
				return visitor.visitChildren(self)

	def interface_port_list(self):

		localctx = VHDLParser.Interface_port_listContext(self, self._ctx, self.state)
		self.enterRule(localctx, 220, self.RULE_interface_port_list)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1290
			self.interface_port_declaration()
			self.state = 1295
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.TOK_SEMICOL:
				self.state = 1291
				self.match(VHDLParser.TOK_SEMICOL)
				self.state = 1292
				self.interface_port_declaration()
				self.state = 1297
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Interface_listContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def interface_element(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Interface_elementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Interface_elementContext, i)

		def TOK_SEMICOL(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_SEMICOL)
			else:
				return self.getToken(VHDLParser.TOK_SEMICOL, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_interface_list

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitInterface_list"):
				return visitor.visitInterface_list(self)
			else:
				return visitor.visitChildren(self)

	def interface_list(self):

		localctx = VHDLParser.Interface_listContext(self, self._ctx, self.state)
		self.enterRule(localctx, 222, self.RULE_interface_list)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1298
			self.interface_element()
			self.state = 1303
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.TOK_SEMICOL:
				self.state = 1299
				self.match(VHDLParser.TOK_SEMICOL)
				self.state = 1300
				self.interface_element()
				self.state = 1305
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Interface_port_declarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def identifier_list(self):
			return self.getTypedRuleContext(VHDLParser.Identifier_listContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def subtype_indication(self):
			return self.getTypedRuleContext(VHDLParser.Subtype_indicationContext, 0)

		def signal_mode(self):
			return self.getTypedRuleContext(VHDLParser.Signal_modeContext, 0)

		def KW_BUS(self):
			return self.getToken(VHDLParser.KW_BUS, 0)

		def TOK_VAR_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_VAR_ASSIGN, 0)

		def expression(self):
			return self.getTypedRuleContext(VHDLParser.ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_interface_port_declaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitInterface_port_declaration"):
				return visitor.visitInterface_port_declaration(self)
			else:
				return visitor.visitChildren(self)

	def interface_port_declaration(self):

		localctx = VHDLParser.Interface_port_declarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 224, self.RULE_interface_port_declaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1306
			self.identifier_list()
			self.state = 1307
			self.match(VHDLParser.TOK_COLON)
			self.state = 1309
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_BUFFER) | (1 << VHDLParser.KW_IN) | (1 << VHDLParser.KW_INOUT) | (
				1 << VHDLParser.KW_LINKAGE) | (1 << VHDLParser.KW_OUT))) != 0):
				self.state = 1308
				self.signal_mode()

			self.state = 1311
			self.subtype_indication()
			self.state = 1313
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_BUS:
				self.state = 1312
				self.match(VHDLParser.KW_BUS)

			self.state = 1317
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_VAR_ASSIGN:
				self.state = 1315
				self.match(VHDLParser.TOK_VAR_ASSIGN)
				self.state = 1316
				self.expression()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Interface_signal_declarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_SIGNAL(self):
			return self.getToken(VHDLParser.KW_SIGNAL, 0)

		def identifier_list(self):
			return self.getTypedRuleContext(VHDLParser.Identifier_listContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def subtype_indication(self):
			return self.getTypedRuleContext(VHDLParser.Subtype_indicationContext, 0)

		def signal_mode(self):
			return self.getTypedRuleContext(VHDLParser.Signal_modeContext, 0)

		def KW_BUS(self):
			return self.getToken(VHDLParser.KW_BUS, 0)

		def TOK_VAR_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_VAR_ASSIGN, 0)

		def expression(self):
			return self.getTypedRuleContext(VHDLParser.ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_interface_signal_declaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitInterface_signal_declaration"):
				return visitor.visitInterface_signal_declaration(self)
			else:
				return visitor.visitChildren(self)

	def interface_signal_declaration(self):

		localctx = VHDLParser.Interface_signal_declarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 226, self.RULE_interface_signal_declaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1319
			self.match(VHDLParser.KW_SIGNAL)
			self.state = 1320
			self.identifier_list()
			self.state = 1321
			self.match(VHDLParser.TOK_COLON)
			self.state = 1323
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_BUFFER) | (1 << VHDLParser.KW_IN) | (1 << VHDLParser.KW_INOUT) | (
				1 << VHDLParser.KW_LINKAGE) | (1 << VHDLParser.KW_OUT))) != 0):
				self.state = 1322
				self.signal_mode()

			self.state = 1325
			self.subtype_indication()
			self.state = 1327
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_BUS:
				self.state = 1326
				self.match(VHDLParser.KW_BUS)

			self.state = 1331
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_VAR_ASSIGN:
				self.state = 1329
				self.match(VHDLParser.TOK_VAR_ASSIGN)
				self.state = 1330
				self.expression()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Interface_variable_declarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def identifier_list(self):
			return self.getTypedRuleContext(VHDLParser.Identifier_listContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def subtype_indication(self):
			return self.getTypedRuleContext(VHDLParser.Subtype_indicationContext, 0)

		def KW_VARIABLE(self):
			return self.getToken(VHDLParser.KW_VARIABLE, 0)

		def signal_mode(self):
			return self.getTypedRuleContext(VHDLParser.Signal_modeContext, 0)

		def TOK_VAR_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_VAR_ASSIGN, 0)

		def expression(self):
			return self.getTypedRuleContext(VHDLParser.ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_interface_variable_declaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitInterface_variable_declaration"):
				return visitor.visitInterface_variable_declaration(self)
			else:
				return visitor.visitChildren(self)

	def interface_variable_declaration(self):

		localctx = VHDLParser.Interface_variable_declarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 228, self.RULE_interface_variable_declaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1334
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_VARIABLE:
				self.state = 1333
				self.match(VHDLParser.KW_VARIABLE)

			self.state = 1336
			self.identifier_list()
			self.state = 1337
			self.match(VHDLParser.TOK_COLON)
			self.state = 1339
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_BUFFER) | (1 << VHDLParser.KW_IN) | (1 << VHDLParser.KW_INOUT) | (
				1 << VHDLParser.KW_LINKAGE) | (1 << VHDLParser.KW_OUT))) != 0):
				self.state = 1338
				self.signal_mode()

			self.state = 1341
			self.subtype_indication()
			self.state = 1344
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_VAR_ASSIGN:
				self.state = 1342
				self.match(VHDLParser.TOK_VAR_ASSIGN)
				self.state = 1343
				self.expression()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Iteration_schemeContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_WHILE(self):
			return self.getToken(VHDLParser.KW_WHILE, 0)

		def condition(self):
			return self.getTypedRuleContext(VHDLParser.ConditionContext, 0)

		def KW_FOR(self):
			return self.getToken(VHDLParser.KW_FOR, 0)

		def parameter_specification(self):
			return self.getTypedRuleContext(VHDLParser.Parameter_specificationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_iteration_scheme

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitIteration_scheme"):
				return visitor.visitIteration_scheme(self)
			else:
				return visitor.visitChildren(self)

	def iteration_scheme(self):

		localctx = VHDLParser.Iteration_schemeContext(self, self._ctx, self.state)
		self.enterRule(localctx, 230, self.RULE_iteration_scheme)
		try:
			self.state = 1350
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.KW_WHILE]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1346
				self.match(VHDLParser.KW_WHILE)
				self.state = 1347
				self.condition()
				pass
			elif token in [VHDLParser.KW_FOR]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1348
				self.match(VHDLParser.KW_FOR)
				self.state = 1349
				self.parameter_specification()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Label_colonContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_label_colon

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitLabel_colon"):
				return visitor.visitLabel_colon(self)
			else:
				return visitor.visitChildren(self)

	def label_colon(self):

		localctx = VHDLParser.Label_colonContext(self, self._ctx, self.state)
		self.enterRule(localctx, 232, self.RULE_label_colon)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1352
			self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 1353
			self.match(VHDLParser.TOK_COLON)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Library_clauseContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_LIBRARY(self):
			return self.getToken(VHDLParser.KW_LIBRARY, 0)

		def logical_name_list(self):
			return self.getTypedRuleContext(VHDLParser.Logical_name_listContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_library_clause

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitLibrary_clause"):
				return visitor.visitLibrary_clause(self)
			else:
				return visitor.visitChildren(self)

	def library_clause(self):

		localctx = VHDLParser.Library_clauseContext(self, self._ctx, self.state)
		self.enterRule(localctx, 234, self.RULE_library_clause)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1355
			self.match(VHDLParser.KW_LIBRARY)
			self.state = 1356
			self.logical_name_list()
			self.state = 1357
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Library_unitContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.primaryUnit = None  # Primary_unitContext
			self.secondaryUnit = None  # Secondary_unitContext

		def primary_unit(self):
			return self.getTypedRuleContext(VHDLParser.Primary_unitContext, 0)

		def secondary_unit(self):
			return self.getTypedRuleContext(VHDLParser.Secondary_unitContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_library_unit

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitLibrary_unit"):
				return visitor.visitLibrary_unit(self)
			else:
				return visitor.visitChildren(self)

	def library_unit(self):

		localctx = VHDLParser.Library_unitContext(self, self._ctx, self.state)
		self.enterRule(localctx, 236, self.RULE_library_unit)
		try:
			self.state = 1361
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 136, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1359
				localctx.primaryUnit = self.primary_unit()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1360
				localctx.secondaryUnit = self.secondary_unit()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class LiteralContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_NULL(self):
			return self.getToken(VHDLParser.KW_NULL, 0)

		def LIT_BIT_STRING(self):
			return self.getToken(VHDLParser.LIT_BIT_STRING, 0)

		def LIT_STRING(self):
			return self.getToken(VHDLParser.LIT_STRING, 0)

		def enumeration_literal(self):
			return self.getTypedRuleContext(VHDLParser.Enumeration_literalContext, 0)

		def numeric_literal(self):
			return self.getTypedRuleContext(VHDLParser.Numeric_literalContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_literal

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitLiteral"):
				return visitor.visitLiteral(self)
			else:
				return visitor.visitChildren(self)

	def literal(self):

		localctx = VHDLParser.LiteralContext(self, self._ctx, self.state)
		self.enterRule(localctx, 238, self.RULE_literal)
		try:
			self.state = 1368
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.KW_NULL]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1363
				self.match(VHDLParser.KW_NULL)
				pass
			elif token in [VHDLParser.LIT_BIT_STRING]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1364
				self.match(VHDLParser.LIT_BIT_STRING)
				pass
			elif token in [VHDLParser.LIT_STRING]:
				self.enterOuterAlt(localctx, 3)
				self.state = 1365
				self.match(VHDLParser.LIT_STRING)
				pass
			elif token in [VHDLParser.LIT_CHARACTER, VHDLParser.LIT_IDENTIFIER]:
				self.enterOuterAlt(localctx, 4)
				self.state = 1366
				self.enumeration_literal()
				pass
			elif token in [VHDLParser.LIT_ABSTRACT]:
				self.enterOuterAlt(localctx, 5)
				self.state = 1367
				self.numeric_literal()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Logical_nameContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_logical_name

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitLogical_name"):
				return visitor.visitLogical_name(self)
			else:
				return visitor.visitChildren(self)

	def logical_name(self):

		localctx = VHDLParser.Logical_nameContext(self, self._ctx, self.state)
		self.enterRule(localctx, 240, self.RULE_logical_name)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1370
			self.match(VHDLParser.LIT_IDENTIFIER)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Logical_name_listContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def logical_name(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Logical_nameContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Logical_nameContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_logical_name_list

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitLogical_name_list"):
				return visitor.visitLogical_name_list(self)
			else:
				return visitor.visitChildren(self)

	def logical_name_list(self):

		localctx = VHDLParser.Logical_name_listContext(self, self._ctx, self.state)
		self.enterRule(localctx, 242, self.RULE_logical_name_list)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1372
			self.logical_name()
			self.state = 1377
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.TOK_COMMA:
				self.state = 1373
				self.match(VHDLParser.TOK_COMMA)
				self.state = 1374
				self.logical_name()
				self.state = 1379
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Logical_operatorContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def OP_AND(self):
			return self.getToken(VHDLParser.OP_AND, 0)

		def OP_OR(self):
			return self.getToken(VHDLParser.OP_OR, 0)

		def OP_NAND(self):
			return self.getToken(VHDLParser.OP_NAND, 0)

		def OP_NOR(self):
			return self.getToken(VHDLParser.OP_NOR, 0)

		def OP_XOR(self):
			return self.getToken(VHDLParser.OP_XOR, 0)

		def OP_XNOR(self):
			return self.getToken(VHDLParser.OP_XNOR, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_logical_operator

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitLogical_operator"):
				return visitor.visitLogical_operator(self)
			else:
				return visitor.visitChildren(self)

	def logical_operator(self):

		localctx = VHDLParser.Logical_operatorContext(self, self._ctx, self.state)
		self.enterRule(localctx, 244, self.RULE_logical_operator)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1380
			_la = self._input.LA(1)
			if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.OP_AND) | (1 << VHDLParser.OP_NAND) | (1 << VHDLParser.OP_NOR) | (
				1 << VHDLParser.OP_OR))) != 0) or _la == VHDLParser.OP_XNOR or _la == VHDLParser.OP_XOR):
				self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Loop_statementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_LOOP(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_LOOP)
			else:
				return self.getToken(VHDLParser.KW_LOOP, i)

		def sequence_of_statements(self):
			return self.getTypedRuleContext(VHDLParser.Sequence_of_statementsContext, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def label_colon(self):
			return self.getTypedRuleContext(VHDLParser.Label_colonContext, 0)

		def iteration_scheme(self):
			return self.getTypedRuleContext(VHDLParser.Iteration_schemeContext, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_loop_statement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitLoop_statement"):
				return visitor.visitLoop_statement(self)
			else:
				return visitor.visitChildren(self)

	def loop_statement(self):

		localctx = VHDLParser.Loop_statementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 246, self.RULE_loop_statement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1383
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1382
				self.label_colon()

			self.state = 1386
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_FOR or _la == VHDLParser.KW_WHILE:
				self.state = 1385
				self.iteration_scheme()

			self.state = 1388
			self.match(VHDLParser.KW_LOOP)
			self.state = 1389
			self.sequence_of_statements()
			self.state = 1390
			self.match(VHDLParser.KW_END)
			self.state = 1391
			self.match(VHDLParser.KW_LOOP)
			self.state = 1393
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1392
				self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 1395
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Signal_modeContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_IN(self):
			return self.getToken(VHDLParser.KW_IN, 0)

		def KW_OUT(self):
			return self.getToken(VHDLParser.KW_OUT, 0)

		def KW_INOUT(self):
			return self.getToken(VHDLParser.KW_INOUT, 0)

		def KW_BUFFER(self):
			return self.getToken(VHDLParser.KW_BUFFER, 0)

		def KW_LINKAGE(self):
			return self.getToken(VHDLParser.KW_LINKAGE, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_signal_mode

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitSignal_mode"):
				return visitor.visitSignal_mode(self)
			else:
				return visitor.visitChildren(self)

	def signal_mode(self):

		localctx = VHDLParser.Signal_modeContext(self, self._ctx, self.state)
		self.enterRule(localctx, 248, self.RULE_signal_mode)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1397
			_la = self._input.LA(1)
			if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_BUFFER) | (1 << VHDLParser.KW_IN) | (1 << VHDLParser.KW_INOUT) | (
				1 << VHDLParser.KW_LINKAGE) | (1 << VHDLParser.KW_OUT))) != 0)):
				self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Multiplying_operatorContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def OP_MUL(self):
			return self.getToken(VHDLParser.OP_MUL, 0)

		def OP_DIV(self):
			return self.getToken(VHDLParser.OP_DIV, 0)

		def OP_MOD(self):
			return self.getToken(VHDLParser.OP_MOD, 0)

		def OP_REM(self):
			return self.getToken(VHDLParser.OP_REM, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_multiplying_operator

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitMultiplying_operator"):
				return visitor.visitMultiplying_operator(self)
			else:
				return visitor.visitChildren(self)

	def multiplying_operator(self):

		localctx = VHDLParser.Multiplying_operatorContext(self, self._ctx, self.state)
		self.enterRule(localctx, 250, self.RULE_multiplying_operator)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1399
			_la = self._input.LA(1)
			if not (((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & (
				(1 << (VHDLParser.OP_MOD - 48)) | (1 << (VHDLParser.OP_REM - 48)) | (1 << (VHDLParser.OP_MUL - 48)) | (
				1 << (VHDLParser.OP_DIV - 48)))) != 0)):
				self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class NameContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def LIT_STRING(self):
			return self.getToken(VHDLParser.LIT_STRING, 0)

		def name_part(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Name_partContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Name_partContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_name

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitName"):
				return visitor.visitName(self)
			else:
				return visitor.visitChildren(self)

	def name(self):

		localctx = VHDLParser.NameContext(self, self._ctx, self.state)
		self.enterRule(localctx, 252, self.RULE_name)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1401
			_la = self._input.LA(1)
			if not (_la == VHDLParser.LIT_STRING or _la == VHDLParser.LIT_IDENTIFIER):
				self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
			self.state = 1405
			self._errHandler.sync(self)
			_alt = self._interp.adaptivePredict(self._input, 142, self._ctx)
			while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
				if _alt == 1:
					self.state = 1402
					self.name_part()
				self.state = 1407
				self._errHandler.sync(self)
				_alt = self._interp.adaptivePredict(self._input, 142, self._ctx)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Name_partContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def selected_name_part(self):
			return self.getTypedRuleContext(VHDLParser.Selected_name_partContext, 0)

		def function_call_or_indexed_name_part(self):
			return self.getTypedRuleContext(VHDLParser.Function_call_or_indexed_name_partContext, 0)

		def slice_name_part(self):
			return self.getTypedRuleContext(VHDLParser.Slice_name_partContext, 0)

		def attribute_name_part(self):
			return self.getTypedRuleContext(VHDLParser.Attribute_name_partContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_name_part

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitName_part"):
				return visitor.visitName_part(self)
			else:
				return visitor.visitChildren(self)

	def name_part(self):

		localctx = VHDLParser.Name_partContext(self, self._ctx, self.state)
		self.enterRule(localctx, 254, self.RULE_name_part)
		try:
			self.state = 1412
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 143, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1408
				self.selected_name_part()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1409
				self.function_call_or_indexed_name_part()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 1410
				self.slice_name_part()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 1411
				self.attribute_name_part()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Selected_nameContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def TOK_DOT(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_DOT)
			else:
				return self.getToken(VHDLParser.TOK_DOT, i)

		def suffix(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.SuffixContext)
			else:
				return self.getTypedRuleContext(VHDLParser.SuffixContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_selected_name

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitSelected_name"):
				return visitor.visitSelected_name(self)
			else:
				return visitor.visitChildren(self)

	def selected_name(self):

		localctx = VHDLParser.Selected_nameContext(self, self._ctx, self.state)
		self.enterRule(localctx, 256, self.RULE_selected_name)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1414
			self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 1419
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.TOK_DOT:
				self.state = 1415
				self.match(VHDLParser.TOK_DOT)
				self.state = 1416
				self.suffix()
				self.state = 1421
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Selected_name_partContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def TOK_DOT(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_DOT)
			else:
				return self.getToken(VHDLParser.TOK_DOT, i)

		def suffix(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.SuffixContext)
			else:
				return self.getTypedRuleContext(VHDLParser.SuffixContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_selected_name_part

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitSelected_name_part"):
				return visitor.visitSelected_name_part(self)
			else:
				return visitor.visitChildren(self)

	def selected_name_part(self):

		localctx = VHDLParser.Selected_name_partContext(self, self._ctx, self.state)
		self.enterRule(localctx, 258, self.RULE_selected_name_part)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1424
			self._errHandler.sync(self)
			_alt = 1
			while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
				if _alt == 1:
					self.state = 1422
					self.match(VHDLParser.TOK_DOT)
					self.state = 1423
					self.suffix()

				else:
					raise NoViableAltException(self)
				self.state = 1426
				self._errHandler.sync(self)
				_alt = self._interp.adaptivePredict(self._input, 145, self._ctx)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Function_call_or_indexed_name_partContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def actual_parameter_part(self):
			return self.getTypedRuleContext(VHDLParser.Actual_parameter_partContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_function_call_or_indexed_name_part

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitFunction_call_or_indexed_name_part"):
				return visitor.visitFunction_call_or_indexed_name_part(self)
			else:
				return visitor.visitChildren(self)

	def function_call_or_indexed_name_part(self):

		localctx = VHDLParser.Function_call_or_indexed_name_partContext(self, self._ctx, self.state)
		self.enterRule(localctx, 260, self.RULE_function_call_or_indexed_name_part)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1428
			self.match(VHDLParser.TOK_LP)
			self.state = 1429
			self.actual_parameter_part()
			self.state = 1430
			self.match(VHDLParser.TOK_RP)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Slice_name_partContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def discrete_range(self):
			return self.getTypedRuleContext(VHDLParser.Discrete_rangeContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_slice_name_part

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitSlice_name_part"):
				return visitor.visitSlice_name_part(self)
			else:
				return visitor.visitChildren(self)

	def slice_name_part(self):

		localctx = VHDLParser.Slice_name_partContext(self, self._ctx, self.state)
		self.enterRule(localctx, 262, self.RULE_slice_name_part)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1432
			self.match(VHDLParser.TOK_LP)
			self.state = 1433
			self.discrete_range()
			self.state = 1434
			self.match(VHDLParser.TOK_RP)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Attribute_name_partContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def TOK_APOSTROPHE(self):
			return self.getToken(VHDLParser.TOK_APOSTROPHE, 0)

		def attribute_designator(self):
			return self.getTypedRuleContext(VHDLParser.Attribute_designatorContext, 0)

		def signature(self):
			return self.getTypedRuleContext(VHDLParser.SignatureContext, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def expression(self):
			return self.getTypedRuleContext(VHDLParser.ExpressionContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_attribute_name_part

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitAttribute_name_part"):
				return visitor.visitAttribute_name_part(self)
			else:
				return visitor.visitChildren(self)

	def attribute_name_part(self):

		localctx = VHDLParser.Attribute_name_partContext(self, self._ctx, self.state)
		self.enterRule(localctx, 264, self.RULE_attribute_name_part)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1437
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_LB:
				self.state = 1436
				self.signature()

			self.state = 1439
			self.match(VHDLParser.TOK_APOSTROPHE)
			self.state = 1440
			self.attribute_designator()
			self.state = 1445
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 147, self._ctx)
			if la_ == 1:
				self.state = 1441
				self.match(VHDLParser.TOK_LP)
				self.state = 1442
				self.expression()
				self.state = 1443
				self.match(VHDLParser.TOK_RP)


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Next_statementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_NEXT(self):
			return self.getToken(VHDLParser.KW_NEXT, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def label_colon(self):
			return self.getTypedRuleContext(VHDLParser.Label_colonContext, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def KW_WHEN(self):
			return self.getToken(VHDLParser.KW_WHEN, 0)

		def condition(self):
			return self.getTypedRuleContext(VHDLParser.ConditionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_next_statement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitNext_statement"):
				return visitor.visitNext_statement(self)
			else:
				return visitor.visitChildren(self)

	def next_statement(self):

		localctx = VHDLParser.Next_statementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 266, self.RULE_next_statement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1448
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1447
				self.label_colon()

			self.state = 1450
			self.match(VHDLParser.KW_NEXT)
			self.state = 1452
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1451
				self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 1456
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_WHEN:
				self.state = 1454
				self.match(VHDLParser.KW_WHEN)
				self.state = 1455
				self.condition()

			self.state = 1458
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Numeric_literalContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_ABSTRACT(self):
			return self.getToken(VHDLParser.LIT_ABSTRACT, 0)

		def physical_literal(self):
			return self.getTypedRuleContext(VHDLParser.Physical_literalContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_numeric_literal

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitNumeric_literal"):
				return visitor.visitNumeric_literal(self)
			else:
				return visitor.visitChildren(self)

	def numeric_literal(self):

		localctx = VHDLParser.Numeric_literalContext(self, self._ctx, self.state)
		self.enterRule(localctx, 268, self.RULE_numeric_literal)
		try:
			self.state = 1462
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 151, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1460
				self.match(VHDLParser.LIT_ABSTRACT)
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1461
				self.physical_literal()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Object_declarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def constant_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Constant_declarationContext, 0)

		def signal_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Signal_declarationContext, 0)

		def variable_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Variable_declarationContext, 0)

		def file_declaration(self):
			return self.getTypedRuleContext(VHDLParser.File_declarationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_object_declaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitObject_declaration"):
				return visitor.visitObject_declaration(self)
			else:
				return visitor.visitChildren(self)

	def object_declaration(self):

		localctx = VHDLParser.Object_declarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 270, self.RULE_object_declaration)
		try:
			self.state = 1468
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.KW_CONSTANT]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1464
				self.constant_declaration()
				pass
			elif token in [VHDLParser.KW_SIGNAL]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1465
				self.signal_declaration()
				pass
			elif token in [VHDLParser.KW_SHARED, VHDLParser.KW_VARIABLE]:
				self.enterOuterAlt(localctx, 3)
				self.state = 1466
				self.variable_declaration()
				pass
			elif token in [VHDLParser.KW_FILE]:
				self.enterOuterAlt(localctx, 4)
				self.state = 1467
				self.file_declaration()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class OptsContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_GUARDED(self):
			return self.getToken(VHDLParser.KW_GUARDED, 0)

		def delay_mechanism(self):
			return self.getTypedRuleContext(VHDLParser.Delay_mechanismContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_opts

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitOpts"):
				return visitor.visitOpts(self)
			else:
				return visitor.visitChildren(self)

	def opts(self):

		localctx = VHDLParser.OptsContext(self, self._ctx, self.state)
		self.enterRule(localctx, 272, self.RULE_opts)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1471
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_GUARDED:
				self.state = 1470
				self.match(VHDLParser.KW_GUARDED)

			self.state = 1474
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & (
				(1 << (VHDLParser.KW_INERTIAL - 40)) | (1 << (VHDLParser.KW_REJECT - 40)) | (
				1 << (VHDLParser.KW_TRANSPORT - 40)))) != 0):
				self.state = 1473
				self.delay_mechanism()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Package_bodyContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_PACKAGE(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_PACKAGE)
			else:
				return self.getToken(VHDLParser.KW_PACKAGE, i)

		def KW_BODY(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_BODY)
			else:
				return self.getToken(VHDLParser.KW_BODY, i)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def package_body_declarative_part(self):
			return self.getTypedRuleContext(VHDLParser.Package_body_declarative_partContext, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_package_body

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitPackage_body"):
				return visitor.visitPackage_body(self)
			else:
				return visitor.visitChildren(self)

	def package_body(self):

		localctx = VHDLParser.Package_bodyContext(self, self._ctx, self.state)
		self.enterRule(localctx, 274, self.RULE_package_body)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1476
			self.match(VHDLParser.KW_PACKAGE)
			self.state = 1477
			self.match(VHDLParser.KW_BODY)
			self.state = 1478
			self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 1479
			self.match(VHDLParser.KW_IS)
			self.state = 1480
			self.package_body_declarative_part()
			self.state = 1481
			self.match(VHDLParser.KW_END)
			self.state = 1484
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_PACKAGE:
				self.state = 1482
				self.match(VHDLParser.KW_PACKAGE)
				self.state = 1483
				self.match(VHDLParser.KW_BODY)

			self.state = 1487
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1486
				self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 1489
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Package_body_declarative_itemContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def subprogram_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Subprogram_declarationContext, 0)

		def subprogram_body(self):
			return self.getTypedRuleContext(VHDLParser.Subprogram_bodyContext, 0)

		def type_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Type_declarationContext, 0)

		def subtype_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Subtype_declarationContext, 0)

		def constant_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Constant_declarationContext, 0)

		def variable_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Variable_declarationContext, 0)

		def file_declaration(self):
			return self.getTypedRuleContext(VHDLParser.File_declarationContext, 0)

		def alias_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Alias_declarationContext, 0)

		def use_clause(self):
			return self.getTypedRuleContext(VHDLParser.Use_clauseContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_package_body_declarative_item

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitPackage_body_declarative_item"):
				return visitor.visitPackage_body_declarative_item(self)
			else:
				return visitor.visitChildren(self)

	def package_body_declarative_item(self):

		localctx = VHDLParser.Package_body_declarative_itemContext(self, self._ctx, self.state)
		self.enterRule(localctx, 276, self.RULE_package_body_declarative_item)
		try:
			self.state = 1500
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 157, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1491
				self.subprogram_declaration()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1492
				self.subprogram_body()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 1493
				self.type_declaration()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 1494
				self.subtype_declaration()
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 1495
				self.constant_declaration()
				pass

			elif la_ == 6:
				self.enterOuterAlt(localctx, 6)
				self.state = 1496
				self.variable_declaration()
				pass

			elif la_ == 7:
				self.enterOuterAlt(localctx, 7)
				self.state = 1497
				self.file_declaration()
				pass

			elif la_ == 8:
				self.enterOuterAlt(localctx, 8)
				self.state = 1498
				self.alias_declaration()
				pass

			elif la_ == 9:
				self.enterOuterAlt(localctx, 9)
				self.state = 1499
				self.use_clause()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Package_body_declarative_partContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def package_body_declarative_item(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Package_body_declarative_itemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Package_body_declarative_itemContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_package_body_declarative_part

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitPackage_body_declarative_part"):
				return visitor.visitPackage_body_declarative_part(self)
			else:
				return visitor.visitChildren(self)

	def package_body_declarative_part(self):

		localctx = VHDLParser.Package_body_declarative_partContext(self, self._ctx, self.state)
		self.enterRule(localctx, 278, self.RULE_package_body_declarative_part)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1505
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_ALIAS) | (1 << VHDLParser.KW_CONSTANT) | (1 << VHDLParser.KW_FILE) | (
				1 << VHDLParser.KW_FUNCTION) | (1 << VHDLParser.KW_IMPURE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and (
				(1 << (_la - 65)) & ((1 << (VHDLParser.KW_PROCEDURE - 65)) | (1 << (VHDLParser.KW_PURE - 65)) | (
				1 << (VHDLParser.KW_SHARED - 65)) | (1 << (VHDLParser.KW_SUBTYPE - 65)) | (1 << (VHDLParser.KW_TYPE - 65)) | (
															 1 << (VHDLParser.KW_USE - 65)) | (1 << (VHDLParser.KW_VARIABLE - 65)))) != 0):
				self.state = 1502
				self.package_body_declarative_item()
				self.state = 1507
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Package_declarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_PACKAGE(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_PACKAGE)
			else:
				return self.getToken(VHDLParser.KW_PACKAGE, i)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def package_declarative_part(self):
			return self.getTypedRuleContext(VHDLParser.Package_declarative_partContext, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_package_declaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitPackage_declaration"):
				return visitor.visitPackage_declaration(self)
			else:
				return visitor.visitChildren(self)

	def package_declaration(self):

		localctx = VHDLParser.Package_declarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 280, self.RULE_package_declaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1508
			self.match(VHDLParser.KW_PACKAGE)
			self.state = 1509
			self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 1510
			self.match(VHDLParser.KW_IS)
			self.state = 1511
			self.package_declarative_part()
			self.state = 1512
			self.match(VHDLParser.KW_END)
			self.state = 1514
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_PACKAGE:
				self.state = 1513
				self.match(VHDLParser.KW_PACKAGE)

			self.state = 1517
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1516
				self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 1519
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Package_declarative_itemContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def subprogram_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Subprogram_declarationContext, 0)

		def subprogram_body(self):
			return self.getTypedRuleContext(VHDLParser.Subprogram_bodyContext, 0)

		def type_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Type_declarationContext, 0)

		def subtype_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Subtype_declarationContext, 0)

		def constant_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Constant_declarationContext, 0)

		def signal_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Signal_declarationContext, 0)

		def variable_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Variable_declarationContext, 0)

		def file_declaration(self):
			return self.getTypedRuleContext(VHDLParser.File_declarationContext, 0)

		def alias_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Alias_declarationContext, 0)

		def component_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Component_declarationContext, 0)

		def attribute_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Attribute_declarationContext, 0)

		def attribute_specification(self):
			return self.getTypedRuleContext(VHDLParser.Attribute_specificationContext, 0)

		def disconnection_specification(self):
			return self.getTypedRuleContext(VHDLParser.Disconnection_specificationContext, 0)

		def use_clause(self):
			return self.getTypedRuleContext(VHDLParser.Use_clauseContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_package_declarative_item

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitPackage_declarative_item"):
				return visitor.visitPackage_declarative_item(self)
			else:
				return visitor.visitChildren(self)

	def package_declarative_item(self):

		localctx = VHDLParser.Package_declarative_itemContext(self, self._ctx, self.state)
		self.enterRule(localctx, 282, self.RULE_package_declarative_item)
		try:
			self.state = 1535
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 161, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1521
				self.subprogram_declaration()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1522
				self.subprogram_body()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 1523
				self.type_declaration()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 1524
				self.subtype_declaration()
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 1525
				self.constant_declaration()
				pass

			elif la_ == 6:
				self.enterOuterAlt(localctx, 6)
				self.state = 1526
				self.signal_declaration()
				pass

			elif la_ == 7:
				self.enterOuterAlt(localctx, 7)
				self.state = 1527
				self.variable_declaration()
				pass

			elif la_ == 8:
				self.enterOuterAlt(localctx, 8)
				self.state = 1528
				self.file_declaration()
				pass

			elif la_ == 9:
				self.enterOuterAlt(localctx, 9)
				self.state = 1529
				self.alias_declaration()
				pass

			elif la_ == 10:
				self.enterOuterAlt(localctx, 10)
				self.state = 1530
				self.component_declaration()
				pass

			elif la_ == 11:
				self.enterOuterAlt(localctx, 11)
				self.state = 1531
				self.attribute_declaration()
				pass

			elif la_ == 12:
				self.enterOuterAlt(localctx, 12)
				self.state = 1532
				self.attribute_specification()
				pass

			elif la_ == 13:
				self.enterOuterAlt(localctx, 13)
				self.state = 1533
				self.disconnection_specification()
				pass

			elif la_ == 14:
				self.enterOuterAlt(localctx, 14)
				self.state = 1534
				self.use_clause()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Package_declarative_partContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def package_declarative_item(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Package_declarative_itemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Package_declarative_itemContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_package_declarative_part

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitPackage_declarative_part"):
				return visitor.visitPackage_declarative_part(self)
			else:
				return visitor.visitChildren(self)

	def package_declarative_part(self):

		localctx = VHDLParser.Package_declarative_partContext(self, self._ctx, self.state)
		self.enterRule(localctx, 284, self.RULE_package_declarative_part)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1540
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_ALIAS) | (1 << VHDLParser.KW_ATTRIBUTE) | (1 << VHDLParser.KW_COMPONENT) | (
				1 << VHDLParser.KW_CONSTANT) | (1 << VHDLParser.KW_DISCONNECT) | (1 << VHDLParser.KW_FILE) | (
					1 << VHDLParser.KW_FUNCTION) | (1 << VHDLParser.KW_IMPURE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and (
				(1 << (_la - 65)) & ((1 << (VHDLParser.KW_PROCEDURE - 65)) | (1 << (VHDLParser.KW_PURE - 65)) | (
				1 << (VHDLParser.KW_SHARED - 65)) | (1 << (VHDLParser.KW_SIGNAL - 65)) | (1 << (VHDLParser.KW_SUBTYPE - 65)) | (
															 1 << (VHDLParser.KW_TYPE - 65)) | (1 << (VHDLParser.KW_USE - 65)) | (
															 1 << (VHDLParser.KW_VARIABLE - 65)))) != 0):
				self.state = 1537
				self.package_declarative_item()
				self.state = 1542
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Parameter_specificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def KW_IN(self):
			return self.getToken(VHDLParser.KW_IN, 0)

		def discrete_range(self):
			return self.getTypedRuleContext(VHDLParser.Discrete_rangeContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_parameter_specification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitParameter_specification"):
				return visitor.visitParameter_specification(self)
			else:
				return visitor.visitChildren(self)

	def parameter_specification(self):

		localctx = VHDLParser.Parameter_specificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 286, self.RULE_parameter_specification)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1543
			self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 1544
			self.match(VHDLParser.KW_IN)
			self.state = 1545
			self.discrete_range()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Physical_literalContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_ABSTRACT(self):
			return self.getToken(VHDLParser.LIT_ABSTRACT, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_physical_literal

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitPhysical_literal"):
				return visitor.visitPhysical_literal(self)
			else:
				return visitor.visitChildren(self)

	def physical_literal(self):

		localctx = VHDLParser.Physical_literalContext(self, self._ctx, self.state)
		self.enterRule(localctx, 288, self.RULE_physical_literal)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1547
			self.match(VHDLParser.LIT_ABSTRACT)

			self.state = 1548
			self.match(VHDLParser.LIT_IDENTIFIER)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Physical_type_definitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def range_constraint(self):
			return self.getTypedRuleContext(VHDLParser.Range_constraintContext, 0)

		def KW_UNITS(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_UNITS)
			else:
				return self.getToken(VHDLParser.KW_UNITS, i)

		def base_unit_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Base_unit_declarationContext, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def secondary_unit_declaration(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Secondary_unit_declarationContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Secondary_unit_declarationContext, i)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_physical_type_definition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitPhysical_type_definition"):
				return visitor.visitPhysical_type_definition(self)
			else:
				return visitor.visitChildren(self)

	def physical_type_definition(self):

		localctx = VHDLParser.Physical_type_definitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 290, self.RULE_physical_type_definition)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1550
			self.range_constraint()
			self.state = 1551
			self.match(VHDLParser.KW_UNITS)
			self.state = 1552
			self.base_unit_declaration()
			self.state = 1556
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1553
				self.secondary_unit_declaration()
				self.state = 1558
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1559
			self.match(VHDLParser.KW_END)
			self.state = 1560
			self.match(VHDLParser.KW_UNITS)
			self.state = 1562
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1561
				self.match(VHDLParser.LIT_IDENTIFIER)


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Port_clauseContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_PORT(self):
			return self.getToken(VHDLParser.KW_PORT, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def port_list(self):
			return self.getTypedRuleContext(VHDLParser.Port_listContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_port_clause

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitPort_clause"):
				return visitor.visitPort_clause(self)
			else:
				return visitor.visitChildren(self)

	def port_clause(self):

		localctx = VHDLParser.Port_clauseContext(self, self._ctx, self.state)
		self.enterRule(localctx, 292, self.RULE_port_clause)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1564
			self.match(VHDLParser.KW_PORT)
			self.state = 1565
			self.match(VHDLParser.TOK_LP)
			self.state = 1566
			self.port_list()
			self.state = 1567
			self.match(VHDLParser.TOK_RP)
			self.state = 1568
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Port_listContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def interface_port_list(self):
			return self.getTypedRuleContext(VHDLParser.Interface_port_listContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_port_list

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitPort_list"):
				return visitor.visitPort_list(self)
			else:
				return visitor.visitChildren(self)

	def port_list(self):

		localctx = VHDLParser.Port_listContext(self, self._ctx, self.state)
		self.enterRule(localctx, 294, self.RULE_port_list)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1570
			self.interface_port_list()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Port_map_aspectContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_PORT(self):
			return self.getToken(VHDLParser.KW_PORT, 0)

		def KW_MAP(self):
			return self.getToken(VHDLParser.KW_MAP, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def association_list(self):
			return self.getTypedRuleContext(VHDLParser.Association_listContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_port_map_aspect

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitPort_map_aspect"):
				return visitor.visitPort_map_aspect(self)
			else:
				return visitor.visitChildren(self)

	def port_map_aspect(self):

		localctx = VHDLParser.Port_map_aspectContext(self, self._ctx, self.state)
		self.enterRule(localctx, 296, self.RULE_port_map_aspect)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1572
			self.match(VHDLParser.KW_PORT)
			self.state = 1573
			self.match(VHDLParser.KW_MAP)
			self.state = 1574
			self.match(VHDLParser.TOK_LP)
			self.state = 1575
			self.association_list()
			self.state = 1576
			self.match(VHDLParser.TOK_RP)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class PrimaryContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def literal(self):
			return self.getTypedRuleContext(VHDLParser.LiteralContext, 0)

		def qualified_expression(self):
			return self.getTypedRuleContext(VHDLParser.Qualified_expressionContext, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def expression(self):
			return self.getTypedRuleContext(VHDLParser.ExpressionContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def allocator(self):
			return self.getTypedRuleContext(VHDLParser.AllocatorContext, 0)

		def aggregate(self):
			return self.getTypedRuleContext(VHDLParser.AggregateContext, 0)

		def name(self):
			return self.getTypedRuleContext(VHDLParser.NameContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_primary

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitPrimary"):
				return visitor.visitPrimary(self)
			else:
				return visitor.visitChildren(self)

	def primary(self):

		localctx = VHDLParser.PrimaryContext(self, self._ctx, self.state)
		self.enterRule(localctx, 298, self.RULE_primary)
		try:
			self.state = 1587
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 165, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1578
				self.literal()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1579
				self.qualified_expression()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 1580
				self.match(VHDLParser.TOK_LP)
				self.state = 1581
				self.expression()
				self.state = 1582
				self.match(VHDLParser.TOK_RP)
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 1584
				self.allocator()
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 1585
				self.aggregate()
				pass

			elif la_ == 6:
				self.enterOuterAlt(localctx, 6)
				self.state = 1586
				self.name()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Primary_unitContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.entity = None  # Entity_declarationContext
			self.configuration = None  # Configuration_declarationContext
			self.package = None  # Package_declarationContext

		def entity_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Entity_declarationContext, 0)

		def configuration_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Configuration_declarationContext, 0)

		def package_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Package_declarationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_primary_unit

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitPrimary_unit"):
				return visitor.visitPrimary_unit(self)
			else:
				return visitor.visitChildren(self)

	def primary_unit(self):

		localctx = VHDLParser.Primary_unitContext(self, self._ctx, self.state)
		self.enterRule(localctx, 300, self.RULE_primary_unit)
		try:
			self.state = 1592
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.KW_ENTITY]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1589
				localctx.entity = self.entity_declaration()
				pass
			elif token in [VHDLParser.KW_CONFIGURATION]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1590
				localctx.configuration = self.configuration_declaration()
				pass
			elif token in [VHDLParser.KW_PACKAGE]:
				self.enterOuterAlt(localctx, 3)
				self.state = 1591
				localctx.package = self.package_declaration()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Procedure_callContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def selected_name(self):
			return self.getTypedRuleContext(VHDLParser.Selected_nameContext, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def actual_parameter_part(self):
			return self.getTypedRuleContext(VHDLParser.Actual_parameter_partContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_procedure_call

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitProcedure_call"):
				return visitor.visitProcedure_call(self)
			else:
				return visitor.visitChildren(self)

	def procedure_call(self):

		localctx = VHDLParser.Procedure_callContext(self, self._ctx, self.state)
		self.enterRule(localctx, 302, self.RULE_procedure_call)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1594
			self.selected_name()
			self.state = 1599
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_LP:
				self.state = 1595
				self.match(VHDLParser.TOK_LP)
				self.state = 1596
				self.actual_parameter_part()
				self.state = 1597
				self.match(VHDLParser.TOK_RP)


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Procedure_call_statementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def procedure_call(self):
			return self.getTypedRuleContext(VHDLParser.Procedure_callContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def label_colon(self):
			return self.getTypedRuleContext(VHDLParser.Label_colonContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_procedure_call_statement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitProcedure_call_statement"):
				return visitor.visitProcedure_call_statement(self)
			else:
				return visitor.visitChildren(self)

	def procedure_call_statement(self):

		localctx = VHDLParser.Procedure_call_statementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 304, self.RULE_procedure_call_statement)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1602
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 168, self._ctx)
			if la_ == 1:
				self.state = 1601
				self.label_colon()

			self.state = 1604
			self.procedure_call()
			self.state = 1605
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Process_declarative_itemContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def subprogram_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Subprogram_declarationContext, 0)

		def subprogram_body(self):
			return self.getTypedRuleContext(VHDLParser.Subprogram_bodyContext, 0)

		def type_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Type_declarationContext, 0)

		def subtype_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Subtype_declarationContext, 0)

		def constant_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Constant_declarationContext, 0)

		def variable_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Variable_declarationContext, 0)

		def file_declaration(self):
			return self.getTypedRuleContext(VHDLParser.File_declarationContext, 0)

		def alias_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Alias_declarationContext, 0)

		def attribute_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Attribute_declarationContext, 0)

		def attribute_specification(self):
			return self.getTypedRuleContext(VHDLParser.Attribute_specificationContext, 0)

		def use_clause(self):
			return self.getTypedRuleContext(VHDLParser.Use_clauseContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_process_declarative_item

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitProcess_declarative_item"):
				return visitor.visitProcess_declarative_item(self)
			else:
				return visitor.visitChildren(self)

	def process_declarative_item(self):

		localctx = VHDLParser.Process_declarative_itemContext(self, self._ctx, self.state)
		self.enterRule(localctx, 306, self.RULE_process_declarative_item)
		try:
			self.state = 1618
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 169, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1607
				self.subprogram_declaration()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1608
				self.subprogram_body()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 1609
				self.type_declaration()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 1610
				self.subtype_declaration()
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 1611
				self.constant_declaration()
				pass

			elif la_ == 6:
				self.enterOuterAlt(localctx, 6)
				self.state = 1612
				self.variable_declaration()
				pass

			elif la_ == 7:
				self.enterOuterAlt(localctx, 7)
				self.state = 1613
				self.file_declaration()
				pass

			elif la_ == 8:
				self.enterOuterAlt(localctx, 8)
				self.state = 1614
				self.alias_declaration()
				pass

			elif la_ == 9:
				self.enterOuterAlt(localctx, 9)
				self.state = 1615
				self.attribute_declaration()
				pass

			elif la_ == 10:
				self.enterOuterAlt(localctx, 10)
				self.state = 1616
				self.attribute_specification()
				pass

			elif la_ == 11:
				self.enterOuterAlt(localctx, 11)
				self.state = 1617
				self.use_clause()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Process_declarative_partContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def process_declarative_item(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Process_declarative_itemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Process_declarative_itemContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_process_declarative_part

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitProcess_declarative_part"):
				return visitor.visitProcess_declarative_part(self)
			else:
				return visitor.visitChildren(self)

	def process_declarative_part(self):

		localctx = VHDLParser.Process_declarative_partContext(self, self._ctx, self.state)
		self.enterRule(localctx, 308, self.RULE_process_declarative_part)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1623
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_ALIAS) | (1 << VHDLParser.KW_ATTRIBUTE) | (1 << VHDLParser.KW_CONSTANT) | (
				1 << VHDLParser.KW_FILE) | (1 << VHDLParser.KW_FUNCTION) | (1 << VHDLParser.KW_IMPURE))) != 0) or (
				(((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & (
				(1 << (VHDLParser.KW_PROCEDURE - 65)) | (1 << (VHDLParser.KW_PURE - 65)) | (
				1 << (VHDLParser.KW_SHARED - 65)) | (1 << (VHDLParser.KW_SUBTYPE - 65)) | (1 << (VHDLParser.KW_TYPE - 65)) | (
					1 << (VHDLParser.KW_USE - 65)) | (1 << (VHDLParser.KW_VARIABLE - 65)))) != 0):
				self.state = 1620
				self.process_declarative_item()
				self.state = 1625
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Process_statementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_PROCESS(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_PROCESS)
			else:
				return self.getToken(VHDLParser.KW_PROCESS, i)

		def process_declarative_part(self):
			return self.getTypedRuleContext(VHDLParser.Process_declarative_partContext, 0)

		def KW_BEGIN(self):
			return self.getToken(VHDLParser.KW_BEGIN, 0)

		def process_statement_part(self):
			return self.getTypedRuleContext(VHDLParser.Process_statement_partContext, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def label_colon(self):
			return self.getTypedRuleContext(VHDLParser.Label_colonContext, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def sensitivity_list(self):
			return self.getTypedRuleContext(VHDLParser.Sensitivity_listContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_process_statement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitProcess_statement"):
				return visitor.visitProcess_statement(self)
			else:
				return visitor.visitChildren(self)

	def process_statement(self):

		localctx = VHDLParser.Process_statementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 310, self.RULE_process_statement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1627
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1626
				self.label_colon()

			self.state = 1629
			self.match(VHDLParser.KW_PROCESS)
			self.state = 1634
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_LP:
				self.state = 1630
				self.match(VHDLParser.TOK_LP)
				self.state = 1631
				self.sensitivity_list()
				self.state = 1632
				self.match(VHDLParser.TOK_RP)

			self.state = 1637
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_IS:
				self.state = 1636
				self.match(VHDLParser.KW_IS)

			self.state = 1639
			self.process_declarative_part()
			self.state = 1640
			self.match(VHDLParser.KW_BEGIN)
			self.state = 1641
			self.process_statement_part()
			self.state = 1642
			self.match(VHDLParser.KW_END)
			self.state = 1643
			self.match(VHDLParser.KW_PROCESS)
			self.state = 1645
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1644
				self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 1647
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Postponed_process_statementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_PROCESS(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_PROCESS)
			else:
				return self.getToken(VHDLParser.KW_PROCESS, i)

		def process_declarative_part(self):
			return self.getTypedRuleContext(VHDLParser.Process_declarative_partContext, 0)

		def KW_BEGIN(self):
			return self.getToken(VHDLParser.KW_BEGIN, 0)

		def process_statement_part(self):
			return self.getTypedRuleContext(VHDLParser.Process_statement_partContext, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def label_colon(self):
			return self.getTypedRuleContext(VHDLParser.Label_colonContext, 0)

		def KW_POSTPONED(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_POSTPONED)
			else:
				return self.getToken(VHDLParser.KW_POSTPONED, i)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def sensitivity_list(self):
			return self.getTypedRuleContext(VHDLParser.Sensitivity_listContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_postponed_process_statement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitPostponed_process_statement"):
				return visitor.visitPostponed_process_statement(self)
			else:
				return visitor.visitChildren(self)

	def postponed_process_statement(self):

		localctx = VHDLParser.Postponed_process_statementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 312, self.RULE_postponed_process_statement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1650
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1649
				self.label_colon()

			self.state = 1653
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_POSTPONED:
				self.state = 1652
				self.match(VHDLParser.KW_POSTPONED)

			self.state = 1655
			self.match(VHDLParser.KW_PROCESS)
			self.state = 1660
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_LP:
				self.state = 1656
				self.match(VHDLParser.TOK_LP)
				self.state = 1657
				self.sensitivity_list()
				self.state = 1658
				self.match(VHDLParser.TOK_RP)

			self.state = 1663
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_IS:
				self.state = 1662
				self.match(VHDLParser.KW_IS)

			self.state = 1665
			self.process_declarative_part()
			self.state = 1666
			self.match(VHDLParser.KW_BEGIN)
			self.state = 1667
			self.process_statement_part()
			self.state = 1668
			self.match(VHDLParser.KW_END)
			self.state = 1670
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_POSTPONED:
				self.state = 1669
				self.match(VHDLParser.KW_POSTPONED)

			self.state = 1672
			self.match(VHDLParser.KW_PROCESS)
			self.state = 1674
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1673
				self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 1676
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Process_statement_partContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def sequential_statement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Sequential_statementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Sequential_statementContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_process_statement_part

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitProcess_statement_part"):
				return visitor.visitProcess_statement_part(self)
			else:
				return visitor.visitChildren(self)

	def process_statement_part(self):

		localctx = VHDLParser.Process_statement_partContext(self, self._ctx, self.state)
		self.enterRule(localctx, 314, self.RULE_process_statement_part)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1681
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_ASSERT) | (1 << VHDLParser.KW_CASE) | (1 << VHDLParser.KW_EXIT) | (
				1 << VHDLParser.KW_FOR) | (1 << VHDLParser.KW_IF) | (1 << VHDLParser.KW_LOOP) | (1 << VHDLParser.KW_NEXT) | (
					1 << VHDLParser.KW_NULL))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & (
				(1 << (VHDLParser.KW_REPORT - 72)) | (1 << (VHDLParser.KW_RETURN - 72)) | (1 << (VHDLParser.KW_WAIT - 72)) | (
				1 << (VHDLParser.KW_WHILE - 72)) | (1 << (VHDLParser.TOK_LP - 72)) | (1 << (VHDLParser.LIT_STRING - 72)) | (
					1 << (VHDLParser.LIT_IDENTIFIER - 72)))) != 0):
				self.state = 1678
				self.sequential_statement()
				self.state = 1683
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Qualified_expressionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def subtype_indication(self):
			return self.getTypedRuleContext(VHDLParser.Subtype_indicationContext, 0)

		def TOK_APOSTROPHE(self):
			return self.getToken(VHDLParser.TOK_APOSTROPHE, 0)

		def aggregate(self):
			return self.getTypedRuleContext(VHDLParser.AggregateContext, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def expression(self):
			return self.getTypedRuleContext(VHDLParser.ExpressionContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_qualified_expression

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitQualified_expression"):
				return visitor.visitQualified_expression(self)
			else:
				return visitor.visitChildren(self)

	def qualified_expression(self):

		localctx = VHDLParser.Qualified_expressionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 316, self.RULE_qualified_expression)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1684
			self.subtype_indication()
			self.state = 1685
			self.match(VHDLParser.TOK_APOSTROPHE)
			self.state = 1691
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 182, self._ctx)
			if la_ == 1:
				self.state = 1686
				self.aggregate()
				pass

			elif la_ == 2:
				self.state = 1687
				self.match(VHDLParser.TOK_LP)
				self.state = 1688
				self.expression()
				self.state = 1689
				self.match(VHDLParser.TOK_RP)
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Range_declContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def explicit_range(self):
			return self.getTypedRuleContext(VHDLParser.Explicit_rangeContext, 0)

		def name(self):
			return self.getTypedRuleContext(VHDLParser.NameContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_range_decl

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRange_decl"):
				return visitor.visitRange_decl(self)
			else:
				return visitor.visitChildren(self)

	def range_decl(self):

		localctx = VHDLParser.Range_declContext(self, self._ctx, self.state)
		self.enterRule(localctx, 318, self.RULE_range_decl)
		try:
			self.state = 1695
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 183, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1693
				self.explicit_range()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1694
				self.name()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Explicit_rangeContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def simple_expression(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Simple_expressionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Simple_expressionContext, i)

		def direction(self):
			return self.getTypedRuleContext(VHDLParser.DirectionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_explicit_range

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitExplicit_range"):
				return visitor.visitExplicit_range(self)
			else:
				return visitor.visitChildren(self)

	def explicit_range(self):

		localctx = VHDLParser.Explicit_rangeContext(self, self._ctx, self.state)
		self.enterRule(localctx, 320, self.RULE_explicit_range)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1697
			self.simple_expression()
			self.state = 1701
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 184, self._ctx)
			if la_ == 1:
				self.state = 1698
				self.direction()
				self.state = 1699
				self.simple_expression()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Range_constraintContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_RANGE(self):
			return self.getToken(VHDLParser.KW_RANGE, 0)

		def range_decl(self):
			return self.getTypedRuleContext(VHDLParser.Range_declContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_range_constraint

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRange_constraint"):
				return visitor.visitRange_constraint(self)
			else:
				return visitor.visitChildren(self)

	def range_constraint(self):

		localctx = VHDLParser.Range_constraintContext(self, self._ctx, self.state)
		self.enterRule(localctx, 322, self.RULE_range_constraint)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1703
			self.match(VHDLParser.KW_RANGE)
			self.state = 1704
			self.range_decl()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Record_type_definitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_RECORD(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_RECORD)
			else:
				return self.getToken(VHDLParser.KW_RECORD, i)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def element_declaration(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Element_declarationContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Element_declarationContext, i)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_record_type_definition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRecord_type_definition"):
				return visitor.visitRecord_type_definition(self)
			else:
				return visitor.visitChildren(self)

	def record_type_definition(self):

		localctx = VHDLParser.Record_type_definitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 324, self.RULE_record_type_definition)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1706
			self.match(VHDLParser.KW_RECORD)
			self.state = 1708
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while True:
				self.state = 1707
				self.element_declaration()
				self.state = 1710
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if not (_la == VHDLParser.LIT_IDENTIFIER):
					break

			self.state = 1712
			self.match(VHDLParser.KW_END)
			self.state = 1713
			self.match(VHDLParser.KW_RECORD)
			self.state = 1715
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1714
				self.match(VHDLParser.LIT_IDENTIFIER)


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class RelationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def shift_expression(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Shift_expressionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Shift_expressionContext, i)

		def relational_operator(self):
			return self.getTypedRuleContext(VHDLParser.Relational_operatorContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_relation

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRelation"):
				return visitor.visitRelation(self)
			else:
				return visitor.visitChildren(self)

	def relation(self):

		localctx = VHDLParser.RelationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 326, self.RULE_relation)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1717
			self.shift_expression()
			self.state = 1721
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & (
				(1 << (VHDLParser.OP_EQ - 100)) | (1 << (VHDLParser.OP_NE - 100)) | (1 << (VHDLParser.OP_LT - 100)) | (
				1 << (VHDLParser.OP_LE - 100)) | (1 << (VHDLParser.OP_GT - 100)) | (1 << (VHDLParser.OP_GE - 100)))) != 0):
				self.state = 1718
				self.relational_operator()
				self.state = 1719
				self.shift_expression()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Relational_operatorContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def OP_EQ(self):
			return self.getToken(VHDLParser.OP_EQ, 0)

		def OP_NE(self):
			return self.getToken(VHDLParser.OP_NE, 0)

		def OP_LT(self):
			return self.getToken(VHDLParser.OP_LT, 0)

		def OP_LE(self):
			return self.getToken(VHDLParser.OP_LE, 0)

		def OP_GT(self):
			return self.getToken(VHDLParser.OP_GT, 0)

		def OP_GE(self):
			return self.getToken(VHDLParser.OP_GE, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_relational_operator

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRelational_operator"):
				return visitor.visitRelational_operator(self)
			else:
				return visitor.visitChildren(self)

	def relational_operator(self):

		localctx = VHDLParser.Relational_operatorContext(self, self._ctx, self.state)
		self.enterRule(localctx, 328, self.RULE_relational_operator)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1723
			_la = self._input.LA(1)
			if not (((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & (
				(1 << (VHDLParser.OP_EQ - 100)) | (1 << (VHDLParser.OP_NE - 100)) | (1 << (VHDLParser.OP_LT - 100)) | (
				1 << (VHDLParser.OP_LE - 100)) | (1 << (VHDLParser.OP_GT - 100)) | (1 << (VHDLParser.OP_GE - 100)))) != 0)):
				self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Report_statementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_REPORT(self):
			return self.getToken(VHDLParser.KW_REPORT, 0)

		def expression(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.ExpressionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.ExpressionContext, i)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def label_colon(self):
			return self.getTypedRuleContext(VHDLParser.Label_colonContext, 0)

		def KW_SEVERITY(self):
			return self.getToken(VHDLParser.KW_SEVERITY, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_report_statement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitReport_statement"):
				return visitor.visitReport_statement(self)
			else:
				return visitor.visitChildren(self)

	def report_statement(self):

		localctx = VHDLParser.Report_statementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 330, self.RULE_report_statement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1726
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1725
				self.label_colon()

			self.state = 1728
			self.match(VHDLParser.KW_REPORT)
			self.state = 1729
			self.expression()
			self.state = 1732
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_SEVERITY:
				self.state = 1730
				self.match(VHDLParser.KW_SEVERITY)
				self.state = 1731
				self.expression()

			self.state = 1734
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Return_statementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_RETURN(self):
			return self.getToken(VHDLParser.KW_RETURN, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def label_colon(self):
			return self.getTypedRuleContext(VHDLParser.Label_colonContext, 0)

		def expression(self):
			return self.getTypedRuleContext(VHDLParser.ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_return_statement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitReturn_statement"):
				return visitor.visitReturn_statement(self)
			else:
				return visitor.visitChildren(self)

	def return_statement(self):

		localctx = VHDLParser.Return_statementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 332, self.RULE_return_statement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1737
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1736
				self.label_colon()

			self.state = 1739
			self.match(VHDLParser.KW_RETURN)
			self.state = 1741
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.OP_ABS) | (1 << VHDLParser.KW_NEW) | (1 << VHDLParser.OP_NOT) | (
				1 << VHDLParser.KW_NULL))) != 0) or ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & (
				(1 << (VHDLParser.OP_PLUS - 106)) | (1 << (VHDLParser.OP_MINUS - 106)) | (1 << (VHDLParser.TOK_LP - 106)) | (
				1 << (VHDLParser.LIT_ABSTRACT - 106)) | (1 << (VHDLParser.LIT_BIT_STRING - 106)) | (
					1 << (VHDLParser.LIT_CHARACTER - 106)) | (1 << (VHDLParser.LIT_STRING - 106)) | (
					1 << (VHDLParser.LIT_IDENTIFIER - 106)))) != 0):
				self.state = 1740
				self.expression()

			self.state = 1743
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Scalar_type_definitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def physical_type_definition(self):
			return self.getTypedRuleContext(VHDLParser.Physical_type_definitionContext, 0)

		def enumeration_type_definition(self):
			return self.getTypedRuleContext(VHDLParser.Enumeration_type_definitionContext, 0)

		def range_constraint(self):
			return self.getTypedRuleContext(VHDLParser.Range_constraintContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_scalar_type_definition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitScalar_type_definition"):
				return visitor.visitScalar_type_definition(self)
			else:
				return visitor.visitChildren(self)

	def scalar_type_definition(self):

		localctx = VHDLParser.Scalar_type_definitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 334, self.RULE_scalar_type_definition)
		try:
			self.state = 1748
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 192, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1745
				self.physical_type_definition()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1746
				self.enumeration_type_definition()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 1747
				self.range_constraint()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Secondary_unitContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def architecture_body(self):
			return self.getTypedRuleContext(VHDLParser.Architecture_bodyContext, 0)

		def package_body(self):
			return self.getTypedRuleContext(VHDLParser.Package_bodyContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_secondary_unit

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitSecondary_unit"):
				return visitor.visitSecondary_unit(self)
			else:
				return visitor.visitChildren(self)

	def secondary_unit(self):

		localctx = VHDLParser.Secondary_unitContext(self, self._ctx, self.state)
		self.enterRule(localctx, 336, self.RULE_secondary_unit)
		try:
			self.state = 1752
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.KW_ARCHITECTURE]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1750
				self.architecture_body()
				pass
			elif token in [VHDLParser.KW_PACKAGE]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1751
				self.package_body()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Secondary_unit_declarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def OP_EQ(self):
			return self.getToken(VHDLParser.OP_EQ, 0)

		def physical_literal(self):
			return self.getTypedRuleContext(VHDLParser.Physical_literalContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_secondary_unit_declaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitSecondary_unit_declaration"):
				return visitor.visitSecondary_unit_declaration(self)
			else:
				return visitor.visitChildren(self)

	def secondary_unit_declaration(self):

		localctx = VHDLParser.Secondary_unit_declarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 338, self.RULE_secondary_unit_declaration)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1754
			self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 1755
			self.match(VHDLParser.OP_EQ)
			self.state = 1756
			self.physical_literal()
			self.state = 1757
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Selected_signal_assignmentContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_WITH(self):
			return self.getToken(VHDLParser.KW_WITH, 0)

		def expression(self):
			return self.getTypedRuleContext(VHDLParser.ExpressionContext, 0)

		def KW_SELECT(self):
			return self.getToken(VHDLParser.KW_SELECT, 0)

		def target(self):
			return self.getTypedRuleContext(VHDLParser.TargetContext, 0)

		def TOK_SIG_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_SIG_ASSIGN, 0)

		def opts(self):
			return self.getTypedRuleContext(VHDLParser.OptsContext, 0)

		def selected_waveforms(self):
			return self.getTypedRuleContext(VHDLParser.Selected_waveformsContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_selected_signal_assignment

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitSelected_signal_assignment"):
				return visitor.visitSelected_signal_assignment(self)
			else:
				return visitor.visitChildren(self)

	def selected_signal_assignment(self):

		localctx = VHDLParser.Selected_signal_assignmentContext(self, self._ctx, self.state)
		self.enterRule(localctx, 340, self.RULE_selected_signal_assignment)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1759
			self.match(VHDLParser.KW_WITH)
			self.state = 1760
			self.expression()
			self.state = 1761
			self.match(VHDLParser.KW_SELECT)
			self.state = 1762
			self.target()
			self.state = 1763
			self.match(VHDLParser.TOK_SIG_ASSIGN)
			self.state = 1764
			self.opts()
			self.state = 1765
			self.selected_waveforms()
			self.state = 1766
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Selected_waveformsContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def waveform(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.WaveformContext)
			else:
				return self.getTypedRuleContext(VHDLParser.WaveformContext, i)

		def KW_WHEN(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_WHEN)
			else:
				return self.getToken(VHDLParser.KW_WHEN, i)

		def choices(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.ChoicesContext)
			else:
				return self.getTypedRuleContext(VHDLParser.ChoicesContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_selected_waveforms

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitSelected_waveforms"):
				return visitor.visitSelected_waveforms(self)
			else:
				return visitor.visitChildren(self)

	def selected_waveforms(self):

		localctx = VHDLParser.Selected_waveformsContext(self, self._ctx, self.state)
		self.enterRule(localctx, 342, self.RULE_selected_waveforms)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1768
			self.waveform()
			self.state = 1769
			self.match(VHDLParser.KW_WHEN)
			self.state = 1770
			self.choices()
			self.state = 1778
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.TOK_COMMA:
				self.state = 1771
				self.match(VHDLParser.TOK_COMMA)
				self.state = 1772
				self.waveform()
				self.state = 1773
				self.match(VHDLParser.KW_WHEN)
				self.state = 1774
				self.choices()
				self.state = 1780
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Sensitivity_clauseContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_ON(self):
			return self.getToken(VHDLParser.KW_ON, 0)

		def sensitivity_list(self):
			return self.getTypedRuleContext(VHDLParser.Sensitivity_listContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_sensitivity_clause

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitSensitivity_clause"):
				return visitor.visitSensitivity_clause(self)
			else:
				return visitor.visitChildren(self)

	def sensitivity_clause(self):

		localctx = VHDLParser.Sensitivity_clauseContext(self, self._ctx, self.state)
		self.enterRule(localctx, 344, self.RULE_sensitivity_clause)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1781
			self.match(VHDLParser.KW_ON)
			self.state = 1782
			self.sensitivity_list()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Sensitivity_listContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def name(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.NameContext)
			else:
				return self.getTypedRuleContext(VHDLParser.NameContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_sensitivity_list

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitSensitivity_list"):
				return visitor.visitSensitivity_list(self)
			else:
				return visitor.visitChildren(self)

	def sensitivity_list(self):

		localctx = VHDLParser.Sensitivity_listContext(self, self._ctx, self.state)
		self.enterRule(localctx, 346, self.RULE_sensitivity_list)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1784
			self.name()
			self.state = 1789
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.TOK_COMMA:
				self.state = 1785
				self.match(VHDLParser.TOK_COMMA)
				self.state = 1786
				self.name()
				self.state = 1791
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Sequence_of_statementsContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def sequential_statement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Sequential_statementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Sequential_statementContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_sequence_of_statements

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitSequence_of_statements"):
				return visitor.visitSequence_of_statements(self)
			else:
				return visitor.visitChildren(self)

	def sequence_of_statements(self):

		localctx = VHDLParser.Sequence_of_statementsContext(self, self._ctx, self.state)
		self.enterRule(localctx, 348, self.RULE_sequence_of_statements)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1795
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_ASSERT) | (1 << VHDLParser.KW_CASE) | (1 << VHDLParser.KW_EXIT) | (
				1 << VHDLParser.KW_FOR) | (1 << VHDLParser.KW_IF) | (1 << VHDLParser.KW_LOOP) | (1 << VHDLParser.KW_NEXT) | (
					1 << VHDLParser.KW_NULL))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & (
				(1 << (VHDLParser.KW_REPORT - 72)) | (1 << (VHDLParser.KW_RETURN - 72)) | (1 << (VHDLParser.KW_WAIT - 72)) | (
				1 << (VHDLParser.KW_WHILE - 72)) | (1 << (VHDLParser.TOK_LP - 72)) | (1 << (VHDLParser.LIT_STRING - 72)) | (
					1 << (VHDLParser.LIT_IDENTIFIER - 72)))) != 0):
				self.state = 1792
				self.sequential_statement()
				self.state = 1797
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Sequential_statementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def wait_statement(self):
			return self.getTypedRuleContext(VHDLParser.Wait_statementContext, 0)

		def assertion_statement(self):
			return self.getTypedRuleContext(VHDLParser.Assertion_statementContext, 0)

		def report_statement(self):
			return self.getTypedRuleContext(VHDLParser.Report_statementContext, 0)

		def signal_assignment_statement(self):
			return self.getTypedRuleContext(VHDLParser.Signal_assignment_statementContext, 0)

		def variable_assignment_statement(self):
			return self.getTypedRuleContext(VHDLParser.Variable_assignment_statementContext, 0)

		def if_statement(self):
			return self.getTypedRuleContext(VHDLParser.If_statementContext, 0)

		def case_statement(self):
			return self.getTypedRuleContext(VHDLParser.Case_statementContext, 0)

		def loop_statement(self):
			return self.getTypedRuleContext(VHDLParser.Loop_statementContext, 0)

		def next_statement(self):
			return self.getTypedRuleContext(VHDLParser.Next_statementContext, 0)

		def exit_statement(self):
			return self.getTypedRuleContext(VHDLParser.Exit_statementContext, 0)

		def return_statement(self):
			return self.getTypedRuleContext(VHDLParser.Return_statementContext, 0)

		def KW_NULL(self):
			return self.getToken(VHDLParser.KW_NULL, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def label_colon(self):
			return self.getTypedRuleContext(VHDLParser.Label_colonContext, 0)

		def procedure_call_statement(self):
			return self.getTypedRuleContext(VHDLParser.Procedure_call_statementContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_sequential_statement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitSequential_statement"):
				return visitor.visitSequential_statement(self)
			else:
				return visitor.visitChildren(self)

	def sequential_statement(self):

		localctx = VHDLParser.Sequential_statementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 350, self.RULE_sequential_statement)
		self._la = 0  # Token type
		try:
			self.state = 1815
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 198, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1798
				self.wait_statement()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1799
				self.assertion_statement()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 1800
				self.report_statement()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 1801
				self.signal_assignment_statement()
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 1802
				self.variable_assignment_statement()
				pass

			elif la_ == 6:
				self.enterOuterAlt(localctx, 6)
				self.state = 1803
				self.if_statement()
				pass

			elif la_ == 7:
				self.enterOuterAlt(localctx, 7)
				self.state = 1804
				self.case_statement()
				pass

			elif la_ == 8:
				self.enterOuterAlt(localctx, 8)
				self.state = 1805
				self.loop_statement()
				pass

			elif la_ == 9:
				self.enterOuterAlt(localctx, 9)
				self.state = 1806
				self.next_statement()
				pass

			elif la_ == 10:
				self.enterOuterAlt(localctx, 10)
				self.state = 1807
				self.exit_statement()
				pass

			elif la_ == 11:
				self.enterOuterAlt(localctx, 11)
				self.state = 1808
				self.return_statement()
				pass

			elif la_ == 12:
				self.enterOuterAlt(localctx, 12)
				self.state = 1810
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == VHDLParser.LIT_IDENTIFIER:
					self.state = 1809
					self.label_colon()

				self.state = 1812
				self.match(VHDLParser.KW_NULL)
				self.state = 1813
				self.match(VHDLParser.TOK_SEMICOL)
				pass

			elif la_ == 13:
				self.enterOuterAlt(localctx, 13)
				self.state = 1814
				self.procedure_call_statement()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Shift_expressionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def simple_expression(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Simple_expressionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Simple_expressionContext, i)

		def shift_operator(self):
			return self.getTypedRuleContext(VHDLParser.Shift_operatorContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_shift_expression

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitShift_expression"):
				return visitor.visitShift_expression(self)
			else:
				return visitor.visitChildren(self)

	def shift_expression(self):

		localctx = VHDLParser.Shift_expressionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 352, self.RULE_shift_expression)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1817
			self.simple_expression()
			self.state = 1821
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & (
				(1 << (VHDLParser.OP_ROL - 74)) | (1 << (VHDLParser.OP_ROR - 74)) | (1 << (VHDLParser.OP_SLA - 74)) | (
				1 << (VHDLParser.OP_SLL - 74)) | (1 << (VHDLParser.OP_SRA - 74)) | (1 << (VHDLParser.OP_SRL - 74)))) != 0):
				self.state = 1818
				self.shift_operator()
				self.state = 1819
				self.simple_expression()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Shift_operatorContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def OP_SLL(self):
			return self.getToken(VHDLParser.OP_SLL, 0)

		def OP_SRL(self):
			return self.getToken(VHDLParser.OP_SRL, 0)

		def OP_SLA(self):
			return self.getToken(VHDLParser.OP_SLA, 0)

		def OP_SRA(self):
			return self.getToken(VHDLParser.OP_SRA, 0)

		def OP_ROL(self):
			return self.getToken(VHDLParser.OP_ROL, 0)

		def OP_ROR(self):
			return self.getToken(VHDLParser.OP_ROR, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_shift_operator

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitShift_operator"):
				return visitor.visitShift_operator(self)
			else:
				return visitor.visitChildren(self)

	def shift_operator(self):

		localctx = VHDLParser.Shift_operatorContext(self, self._ctx, self.state)
		self.enterRule(localctx, 354, self.RULE_shift_operator)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1823
			_la = self._input.LA(1)
			if not (((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & (
				(1 << (VHDLParser.OP_ROL - 74)) | (1 << (VHDLParser.OP_ROR - 74)) | (1 << (VHDLParser.OP_SLA - 74)) | (
				1 << (VHDLParser.OP_SLL - 74)) | (1 << (VHDLParser.OP_SRA - 74)) | (1 << (VHDLParser.OP_SRL - 74)))) != 0)):
				self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Signal_assignment_statementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def target(self):
			return self.getTypedRuleContext(VHDLParser.TargetContext, 0)

		def TOK_SIG_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_SIG_ASSIGN, 0)

		def waveform(self):
			return self.getTypedRuleContext(VHDLParser.WaveformContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def label_colon(self):
			return self.getTypedRuleContext(VHDLParser.Label_colonContext, 0)

		def delay_mechanism(self):
			return self.getTypedRuleContext(VHDLParser.Delay_mechanismContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_signal_assignment_statement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitSignal_assignment_statement"):
				return visitor.visitSignal_assignment_statement(self)
			else:
				return visitor.visitChildren(self)

	def signal_assignment_statement(self):

		localctx = VHDLParser.Signal_assignment_statementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 356, self.RULE_signal_assignment_statement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1826
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 200, self._ctx)
			if la_ == 1:
				self.state = 1825
				self.label_colon()

			self.state = 1828
			self.target()
			self.state = 1829
			self.match(VHDLParser.TOK_SIG_ASSIGN)
			self.state = 1831
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & (
				(1 << (VHDLParser.KW_INERTIAL - 40)) | (1 << (VHDLParser.KW_REJECT - 40)) | (
				1 << (VHDLParser.KW_TRANSPORT - 40)))) != 0):
				self.state = 1830
				self.delay_mechanism()

			self.state = 1833
			self.waveform()
			self.state = 1834
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Signal_declarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_SIGNAL(self):
			return self.getToken(VHDLParser.KW_SIGNAL, 0)

		def identifier_list(self):
			return self.getTypedRuleContext(VHDLParser.Identifier_listContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def subtype_indication(self):
			return self.getTypedRuleContext(VHDLParser.Subtype_indicationContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def signal_kind(self):
			return self.getTypedRuleContext(VHDLParser.Signal_kindContext, 0)

		def TOK_VAR_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_VAR_ASSIGN, 0)

		def expression(self):
			return self.getTypedRuleContext(VHDLParser.ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_signal_declaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitSignal_declaration"):
				return visitor.visitSignal_declaration(self)
			else:
				return visitor.visitChildren(self)

	def signal_declaration(self):

		localctx = VHDLParser.Signal_declarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 358, self.RULE_signal_declaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1836
			self.match(VHDLParser.KW_SIGNAL)
			self.state = 1837
			self.identifier_list()
			self.state = 1838
			self.match(VHDLParser.TOK_COLON)
			self.state = 1839
			self.subtype_indication()
			self.state = 1841
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_BUS or _la == VHDLParser.KW_REGISTER:
				self.state = 1840
				self.signal_kind()

			self.state = 1845
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_VAR_ASSIGN:
				self.state = 1843
				self.match(VHDLParser.TOK_VAR_ASSIGN)
				self.state = 1844
				self.expression()

			self.state = 1847
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Signal_kindContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_REGISTER(self):
			return self.getToken(VHDLParser.KW_REGISTER, 0)

		def KW_BUS(self):
			return self.getToken(VHDLParser.KW_BUS, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_signal_kind

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitSignal_kind"):
				return visitor.visitSignal_kind(self)
			else:
				return visitor.visitChildren(self)

	def signal_kind(self):

		localctx = VHDLParser.Signal_kindContext(self, self._ctx, self.state)
		self.enterRule(localctx, 360, self.RULE_signal_kind)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1849
			_la = self._input.LA(1)
			if not (_la == VHDLParser.KW_BUS or _la == VHDLParser.KW_REGISTER):
				self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Signal_listContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def name(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.NameContext)
			else:
				return self.getTypedRuleContext(VHDLParser.NameContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def KW_OTHERS(self):
			return self.getToken(VHDLParser.KW_OTHERS, 0)

		def KW_ALL(self):
			return self.getToken(VHDLParser.KW_ALL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_signal_list

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitSignal_list"):
				return visitor.visitSignal_list(self)
			else:
				return visitor.visitChildren(self)

	def signal_list(self):

		localctx = VHDLParser.Signal_listContext(self, self._ctx, self.state)
		self.enterRule(localctx, 362, self.RULE_signal_list)
		self._la = 0  # Token type
		try:
			self.state = 1861
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.LIT_STRING, VHDLParser.LIT_IDENTIFIER]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1851
				self.name()
				self.state = 1856
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				while _la == VHDLParser.TOK_COMMA:
					self.state = 1852
					self.match(VHDLParser.TOK_COMMA)
					self.state = 1853
					self.name()
					self.state = 1858
					self._errHandler.sync(self)
					_la = self._input.LA(1)

				pass
			elif token in [VHDLParser.KW_OTHERS]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1859
				self.match(VHDLParser.KW_OTHERS)
				pass
			elif token in [VHDLParser.KW_ALL]:
				self.enterOuterAlt(localctx, 3)
				self.state = 1860
				self.match(VHDLParser.KW_ALL)
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class SignatureContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def TOK_LB(self):
			return self.getToken(VHDLParser.TOK_LB, 0)

		def TOK_RB(self):
			return self.getToken(VHDLParser.TOK_RB, 0)

		def name(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.NameContext)
			else:
				return self.getTypedRuleContext(VHDLParser.NameContext, i)

		def KW_RETURN(self):
			return self.getToken(VHDLParser.KW_RETURN, 0)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_signature

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitSignature"):
				return visitor.visitSignature(self)
			else:
				return visitor.visitChildren(self)

	def signature(self):

		localctx = VHDLParser.SignatureContext(self, self._ctx, self.state)
		self.enterRule(localctx, 364, self.RULE_signature)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1863
			self.match(VHDLParser.TOK_LB)
			self.state = 1872
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_STRING or _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1864
				self.name()
				self.state = 1869
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				while _la == VHDLParser.TOK_COMMA:
					self.state = 1865
					self.match(VHDLParser.TOK_COMMA)
					self.state = 1866
					self.name()
					self.state = 1871
					self._errHandler.sync(self)
					_la = self._input.LA(1)

			self.state = 1876
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_RETURN:
				self.state = 1874
				self.match(VHDLParser.KW_RETURN)
				self.state = 1875
				self.name()

			self.state = 1878
			self.match(VHDLParser.TOK_RB)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Simple_expressionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def term(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.TermContext)
			else:
				return self.getTypedRuleContext(VHDLParser.TermContext, i)

		def adding_operator(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Adding_operatorContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Adding_operatorContext, i)

		def OP_PLUS(self):
			return self.getToken(VHDLParser.OP_PLUS, 0)

		def OP_MINUS(self):
			return self.getToken(VHDLParser.OP_MINUS, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_simple_expression

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitSimple_expression"):
				return visitor.visitSimple_expression(self)
			else:
				return visitor.visitChildren(self)

	def simple_expression(self):

		localctx = VHDLParser.Simple_expressionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 366, self.RULE_simple_expression)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1881
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.OP_PLUS or _la == VHDLParser.OP_MINUS:
				self.state = 1880
				_la = self._input.LA(1)
				if not (_la == VHDLParser.OP_PLUS or _la == VHDLParser.OP_MINUS):
					self._errHandler.recoverInline(self)
				else:
					self._errHandler.reportMatch(self)
					self.consume()

			self.state = 1883
			self.term()
			self.state = 1889
			self._errHandler.sync(self)
			_alt = self._interp.adaptivePredict(self._input, 210, self._ctx)
			while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
				if _alt == 1:
					self.state = 1884
					self.adding_operator()
					self.state = 1885
					self.term()
				self.state = 1891
				self._errHandler.sync(self)
				_alt = self._interp.adaptivePredict(self._input, 210, self._ctx)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Simple_simultaneous_statementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def simple_expression(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Simple_expressionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Simple_expressionContext, i)

		def TOK_SIG_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_SIG_ASSIGN, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def label_colon(self):
			return self.getTypedRuleContext(VHDLParser.Label_colonContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_simple_simultaneous_statement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitSimple_simultaneous_statement"):
				return visitor.visitSimple_simultaneous_statement(self)
			else:
				return visitor.visitChildren(self)

	def simple_simultaneous_statement(self):

		localctx = VHDLParser.Simple_simultaneous_statementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 368, self.RULE_simple_simultaneous_statement)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1893
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 211, self._ctx)
			if la_ == 1:
				self.state = 1892
				self.label_colon()

			self.state = 1895
			self.simple_expression()
			self.state = 1896
			self.match(VHDLParser.TOK_SIG_ASSIGN)
			self.state = 1897
			self.simple_expression()
			self.state = 1898
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Simultaneous_alternativeContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_WHEN(self):
			return self.getToken(VHDLParser.KW_WHEN, 0)

		def choices(self):
			return self.getTypedRuleContext(VHDLParser.ChoicesContext, 0)

		def TOK_RARROW(self):
			return self.getToken(VHDLParser.TOK_RARROW, 0)

		def simultaneous_statement_part(self):
			return self.getTypedRuleContext(VHDLParser.Simultaneous_statement_partContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_simultaneous_alternative

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitSimultaneous_alternative"):
				return visitor.visitSimultaneous_alternative(self)
			else:
				return visitor.visitChildren(self)

	def simultaneous_alternative(self):

		localctx = VHDLParser.Simultaneous_alternativeContext(self, self._ctx, self.state)
		self.enterRule(localctx, 370, self.RULE_simultaneous_alternative)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1900
			self.match(VHDLParser.KW_WHEN)
			self.state = 1901
			self.choices()
			self.state = 1902
			self.match(VHDLParser.TOK_RARROW)
			self.state = 1903
			self.simultaneous_statement_part()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Simultaneous_case_statementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_CASE(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_CASE)
			else:
				return self.getToken(VHDLParser.KW_CASE, i)

		def expression(self):
			return self.getTypedRuleContext(VHDLParser.ExpressionContext, 0)

		def KW_USE(self):
			return self.getToken(VHDLParser.KW_USE, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def label_colon(self):
			return self.getTypedRuleContext(VHDLParser.Label_colonContext, 0)

		def simultaneous_alternative(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Simultaneous_alternativeContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Simultaneous_alternativeContext, i)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_simultaneous_case_statement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitSimultaneous_case_statement"):
				return visitor.visitSimultaneous_case_statement(self)
			else:
				return visitor.visitChildren(self)

	def simultaneous_case_statement(self):

		localctx = VHDLParser.Simultaneous_case_statementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 372, self.RULE_simultaneous_case_statement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1906
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1905
				self.label_colon()

			self.state = 1908
			self.match(VHDLParser.KW_CASE)
			self.state = 1909
			self.expression()
			self.state = 1910
			self.match(VHDLParser.KW_USE)
			self.state = 1912
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while True:
				self.state = 1911
				self.simultaneous_alternative()
				self.state = 1914
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if not (_la == VHDLParser.KW_WHEN):
					break

			self.state = 1916
			self.match(VHDLParser.KW_END)
			self.state = 1917
			self.match(VHDLParser.KW_CASE)
			self.state = 1919
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1918
				self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 1921
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Simultaneous_if_statementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_IF(self):
			return self.getToken(VHDLParser.KW_IF, 0)

		def condition(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.ConditionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.ConditionContext, i)

		def KW_USE(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_USE)
			else:
				return self.getToken(VHDLParser.KW_USE, i)

		def simultaneous_statement_part(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Simultaneous_statement_partContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Simultaneous_statement_partContext, i)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def label_colon(self):
			return self.getTypedRuleContext(VHDLParser.Label_colonContext, 0)

		def KW_ELSIF(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_ELSIF)
			else:
				return self.getToken(VHDLParser.KW_ELSIF, i)

		def KW_ELSE(self):
			return self.getToken(VHDLParser.KW_ELSE, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_simultaneous_if_statement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitSimultaneous_if_statement"):
				return visitor.visitSimultaneous_if_statement(self)
			else:
				return visitor.visitChildren(self)

	def simultaneous_if_statement(self):

		localctx = VHDLParser.Simultaneous_if_statementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 374, self.RULE_simultaneous_if_statement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1924
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1923
				self.label_colon()

			self.state = 1926
			self.match(VHDLParser.KW_IF)
			self.state = 1927
			self.condition()
			self.state = 1928
			self.match(VHDLParser.KW_USE)
			self.state = 1929
			self.simultaneous_statement_part()
			self.state = 1937
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.KW_ELSIF:
				self.state = 1930
				self.match(VHDLParser.KW_ELSIF)
				self.state = 1931
				self.condition()
				self.state = 1932
				self.match(VHDLParser.KW_USE)
				self.state = 1933
				self.simultaneous_statement_part()
				self.state = 1939
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1942
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_ELSE:
				self.state = 1940
				self.match(VHDLParser.KW_ELSE)
				self.state = 1941
				self.simultaneous_statement_part()

			self.state = 1944
			self.match(VHDLParser.KW_END)
			self.state = 1945
			self.match(VHDLParser.KW_USE)
			self.state = 1947
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1946
				self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 1949
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Simultaneous_statementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def simple_simultaneous_statement(self):
			return self.getTypedRuleContext(VHDLParser.Simple_simultaneous_statementContext, 0)

		def simultaneous_if_statement(self):
			return self.getTypedRuleContext(VHDLParser.Simultaneous_if_statementContext, 0)

		def simultaneous_case_statement(self):
			return self.getTypedRuleContext(VHDLParser.Simultaneous_case_statementContext, 0)

		def KW_NULL(self):
			return self.getToken(VHDLParser.KW_NULL, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def label_colon(self):
			return self.getTypedRuleContext(VHDLParser.Label_colonContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_simultaneous_statement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitSimultaneous_statement"):
				return visitor.visitSimultaneous_statement(self)
			else:
				return visitor.visitChildren(self)

	def simultaneous_statement(self):

		localctx = VHDLParser.Simultaneous_statementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 376, self.RULE_simultaneous_statement)
		self._la = 0  # Token type
		try:
			self.state = 1959
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 220, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1951
				self.simple_simultaneous_statement()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1952
				self.simultaneous_if_statement()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 1953
				self.simultaneous_case_statement()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 1955
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == VHDLParser.LIT_IDENTIFIER:
					self.state = 1954
					self.label_colon()

				self.state = 1957
				self.match(VHDLParser.KW_NULL)
				self.state = 1958
				self.match(VHDLParser.TOK_SEMICOL)
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Simultaneous_statement_partContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def simultaneous_statement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Simultaneous_statementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Simultaneous_statementContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_simultaneous_statement_part

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitSimultaneous_statement_part"):
				return visitor.visitSimultaneous_statement_part(self)
			else:
				return visitor.visitChildren(self)

	def simultaneous_statement_part(self):

		localctx = VHDLParser.Simultaneous_statement_partContext(self, self._ctx, self.state)
		self.enterRule(localctx, 378, self.RULE_simultaneous_statement_part)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1964
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.OP_ABS) | (1 << VHDLParser.KW_CASE) | (1 << VHDLParser.KW_IF) | (1 << VHDLParser.KW_NEW) | (
				1 << VHDLParser.OP_NOT) | (1 << VHDLParser.KW_NULL))) != 0) or ((((_la - 106)) & ~0x3f) == 0 and (
				(1 << (_la - 106)) & (
				(1 << (VHDLParser.OP_PLUS - 106)) | (1 << (VHDLParser.OP_MINUS - 106)) | (1 << (VHDLParser.TOK_LP - 106)) | (
				1 << (VHDLParser.LIT_ABSTRACT - 106)) | (1 << (VHDLParser.LIT_BIT_STRING - 106)) | (
					1 << (VHDLParser.LIT_CHARACTER - 106)) | (1 << (VHDLParser.LIT_STRING - 106)) | (
					1 << (VHDLParser.LIT_IDENTIFIER - 106)))) != 0):
				self.state = 1961
				self.simultaneous_statement()
				self.state = 1966
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Subprogram_bodyContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def subprogram_specification(self):
			return self.getTypedRuleContext(VHDLParser.Subprogram_specificationContext, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def subprogram_declarative_part(self):
			return self.getTypedRuleContext(VHDLParser.Subprogram_declarative_partContext, 0)

		def KW_BEGIN(self):
			return self.getToken(VHDLParser.KW_BEGIN, 0)

		def subprogram_statement_part(self):
			return self.getTypedRuleContext(VHDLParser.Subprogram_statement_partContext, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def subprogram_kind(self):
			return self.getTypedRuleContext(VHDLParser.Subprogram_kindContext, 0)

		def designator(self):
			return self.getTypedRuleContext(VHDLParser.DesignatorContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_subprogram_body

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitSubprogram_body"):
				return visitor.visitSubprogram_body(self)
			else:
				return visitor.visitChildren(self)

	def subprogram_body(self):

		localctx = VHDLParser.Subprogram_bodyContext(self, self._ctx, self.state)
		self.enterRule(localctx, 380, self.RULE_subprogram_body)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1967
			self.subprogram_specification()
			self.state = 1968
			self.match(VHDLParser.KW_IS)
			self.state = 1969
			self.subprogram_declarative_part()
			self.state = 1970
			self.match(VHDLParser.KW_BEGIN)
			self.state = 1971
			self.subprogram_statement_part()
			self.state = 1972
			self.match(VHDLParser.KW_END)
			self.state = 1974
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_FUNCTION or _la == VHDLParser.KW_PROCEDURE:
				self.state = 1973
				self.subprogram_kind()

			self.state = 1977
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_STRING or _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1976
				self.designator()

			self.state = 1979
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Subprogram_declarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def subprogram_specification(self):
			return self.getTypedRuleContext(VHDLParser.Subprogram_specificationContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_subprogram_declaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitSubprogram_declaration"):
				return visitor.visitSubprogram_declaration(self)
			else:
				return visitor.visitChildren(self)

	def subprogram_declaration(self):

		localctx = VHDLParser.Subprogram_declarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 382, self.RULE_subprogram_declaration)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1981
			self.subprogram_specification()
			self.state = 1982
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Subprogram_declarative_itemContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def subprogram_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Subprogram_declarationContext, 0)

		def subprogram_body(self):
			return self.getTypedRuleContext(VHDLParser.Subprogram_bodyContext, 0)

		def type_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Type_declarationContext, 0)

		def subtype_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Subtype_declarationContext, 0)

		def constant_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Constant_declarationContext, 0)

		def variable_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Variable_declarationContext, 0)

		def file_declaration(self):
			return self.getTypedRuleContext(VHDLParser.File_declarationContext, 0)

		def alias_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Alias_declarationContext, 0)

		def attribute_declaration(self):
			return self.getTypedRuleContext(VHDLParser.Attribute_declarationContext, 0)

		def attribute_specification(self):
			return self.getTypedRuleContext(VHDLParser.Attribute_specificationContext, 0)

		def use_clause(self):
			return self.getTypedRuleContext(VHDLParser.Use_clauseContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_subprogram_declarative_item

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitSubprogram_declarative_item"):
				return visitor.visitSubprogram_declarative_item(self)
			else:
				return visitor.visitChildren(self)

	def subprogram_declarative_item(self):

		localctx = VHDLParser.Subprogram_declarative_itemContext(self, self._ctx, self.state)
		self.enterRule(localctx, 384, self.RULE_subprogram_declarative_item)
		try:
			self.state = 1995
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 224, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1984
				self.subprogram_declaration()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1985
				self.subprogram_body()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 1986
				self.type_declaration()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 1987
				self.subtype_declaration()
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 1988
				self.constant_declaration()
				pass

			elif la_ == 6:
				self.enterOuterAlt(localctx, 6)
				self.state = 1989
				self.variable_declaration()
				pass

			elif la_ == 7:
				self.enterOuterAlt(localctx, 7)
				self.state = 1990
				self.file_declaration()
				pass

			elif la_ == 8:
				self.enterOuterAlt(localctx, 8)
				self.state = 1991
				self.alias_declaration()
				pass

			elif la_ == 9:
				self.enterOuterAlt(localctx, 9)
				self.state = 1992
				self.attribute_declaration()
				pass

			elif la_ == 10:
				self.enterOuterAlt(localctx, 10)
				self.state = 1993
				self.attribute_specification()
				pass

			elif la_ == 11:
				self.enterOuterAlt(localctx, 11)
				self.state = 1994
				self.use_clause()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Subprogram_declarative_partContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def subprogram_declarative_item(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Subprogram_declarative_itemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Subprogram_declarative_itemContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_subprogram_declarative_part

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitSubprogram_declarative_part"):
				return visitor.visitSubprogram_declarative_part(self)
			else:
				return visitor.visitChildren(self)

	def subprogram_declarative_part(self):

		localctx = VHDLParser.Subprogram_declarative_partContext(self, self._ctx, self.state)
		self.enterRule(localctx, 386, self.RULE_subprogram_declarative_part)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2000
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_ALIAS) | (1 << VHDLParser.KW_ATTRIBUTE) | (1 << VHDLParser.KW_CONSTANT) | (
				1 << VHDLParser.KW_FILE) | (1 << VHDLParser.KW_FUNCTION) | (1 << VHDLParser.KW_IMPURE))) != 0) or (
				(((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & (
				(1 << (VHDLParser.KW_PROCEDURE - 65)) | (1 << (VHDLParser.KW_PURE - 65)) | (
				1 << (VHDLParser.KW_SHARED - 65)) | (1 << (VHDLParser.KW_SUBTYPE - 65)) | (1 << (VHDLParser.KW_TYPE - 65)) | (
					1 << (VHDLParser.KW_USE - 65)) | (1 << (VHDLParser.KW_VARIABLE - 65)))) != 0):
				self.state = 1997
				self.subprogram_declarative_item()
				self.state = 2002
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Subprogram_kindContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_PROCEDURE(self):
			return self.getToken(VHDLParser.KW_PROCEDURE, 0)

		def KW_FUNCTION(self):
			return self.getToken(VHDLParser.KW_FUNCTION, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_subprogram_kind

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitSubprogram_kind"):
				return visitor.visitSubprogram_kind(self)
			else:
				return visitor.visitChildren(self)

	def subprogram_kind(self):

		localctx = VHDLParser.Subprogram_kindContext(self, self._ctx, self.state)
		self.enterRule(localctx, 388, self.RULE_subprogram_kind)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2003
			_la = self._input.LA(1)
			if not (_la == VHDLParser.KW_FUNCTION or _la == VHDLParser.KW_PROCEDURE):
				self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Subprogram_specificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def procedure_specification(self):
			return self.getTypedRuleContext(VHDLParser.Procedure_specificationContext, 0)

		def function_specification(self):
			return self.getTypedRuleContext(VHDLParser.Function_specificationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_subprogram_specification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitSubprogram_specification"):
				return visitor.visitSubprogram_specification(self)
			else:
				return visitor.visitChildren(self)

	def subprogram_specification(self):

		localctx = VHDLParser.Subprogram_specificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 390, self.RULE_subprogram_specification)
		try:
			self.state = 2007
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.KW_PROCEDURE]:
				self.enterOuterAlt(localctx, 1)
				self.state = 2005
				self.procedure_specification()
				pass
			elif token in [VHDLParser.KW_FUNCTION, VHDLParser.KW_IMPURE, VHDLParser.KW_PURE]:
				self.enterOuterAlt(localctx, 2)
				self.state = 2006
				self.function_specification()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Procedure_specificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_PROCEDURE(self):
			return self.getToken(VHDLParser.KW_PROCEDURE, 0)

		def designator(self):
			return self.getTypedRuleContext(VHDLParser.DesignatorContext, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def formal_parameter_list(self):
			return self.getTypedRuleContext(VHDLParser.Formal_parameter_listContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_procedure_specification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitProcedure_specification"):
				return visitor.visitProcedure_specification(self)
			else:
				return visitor.visitChildren(self)

	def procedure_specification(self):

		localctx = VHDLParser.Procedure_specificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 392, self.RULE_procedure_specification)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2009
			self.match(VHDLParser.KW_PROCEDURE)
			self.state = 2010
			self.designator()
			self.state = 2015
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_LP:
				self.state = 2011
				self.match(VHDLParser.TOK_LP)
				self.state = 2012
				self.formal_parameter_list()
				self.state = 2013
				self.match(VHDLParser.TOK_RP)


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Function_specificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_FUNCTION(self):
			return self.getToken(VHDLParser.KW_FUNCTION, 0)

		def designator(self):
			return self.getTypedRuleContext(VHDLParser.DesignatorContext, 0)

		def KW_RETURN(self):
			return self.getToken(VHDLParser.KW_RETURN, 0)

		def subtype_indication(self):
			return self.getTypedRuleContext(VHDLParser.Subtype_indicationContext, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def formal_parameter_list(self):
			return self.getTypedRuleContext(VHDLParser.Formal_parameter_listContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def KW_PURE(self):
			return self.getToken(VHDLParser.KW_PURE, 0)

		def KW_IMPURE(self):
			return self.getToken(VHDLParser.KW_IMPURE, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_function_specification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitFunction_specification"):
				return visitor.visitFunction_specification(self)
			else:
				return visitor.visitChildren(self)

	def function_specification(self):

		localctx = VHDLParser.Function_specificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 394, self.RULE_function_specification)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2018
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_IMPURE or _la == VHDLParser.KW_PURE:
				self.state = 2017
				_la = self._input.LA(1)
				if not (_la == VHDLParser.KW_IMPURE or _la == VHDLParser.KW_PURE):
					self._errHandler.recoverInline(self)
				else:
					self._errHandler.reportMatch(self)
					self.consume()

			self.state = 2020
			self.match(VHDLParser.KW_FUNCTION)
			self.state = 2021
			self.designator()
			self.state = 2026
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_LP:
				self.state = 2022
				self.match(VHDLParser.TOK_LP)
				self.state = 2023
				self.formal_parameter_list()
				self.state = 2024
				self.match(VHDLParser.TOK_RP)

			self.state = 2028
			self.match(VHDLParser.KW_RETURN)
			self.state = 2029
			self.subtype_indication()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Subprogram_statement_partContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def sequential_statement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Sequential_statementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Sequential_statementContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_subprogram_statement_part

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitSubprogram_statement_part"):
				return visitor.visitSubprogram_statement_part(self)
			else:
				return visitor.visitChildren(self)

	def subprogram_statement_part(self):

		localctx = VHDLParser.Subprogram_statement_partContext(self, self._ctx, self.state)
		self.enterRule(localctx, 396, self.RULE_subprogram_statement_part)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2034
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_ASSERT) | (1 << VHDLParser.KW_CASE) | (1 << VHDLParser.KW_EXIT) | (
				1 << VHDLParser.KW_FOR) | (1 << VHDLParser.KW_IF) | (1 << VHDLParser.KW_LOOP) | (1 << VHDLParser.KW_NEXT) | (
					1 << VHDLParser.KW_NULL))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & (
				(1 << (VHDLParser.KW_REPORT - 72)) | (1 << (VHDLParser.KW_RETURN - 72)) | (1 << (VHDLParser.KW_WAIT - 72)) | (
				1 << (VHDLParser.KW_WHILE - 72)) | (1 << (VHDLParser.TOK_LP - 72)) | (1 << (VHDLParser.LIT_STRING - 72)) | (
					1 << (VHDLParser.LIT_IDENTIFIER - 72)))) != 0):
				self.state = 2031
				self.sequential_statement()
				self.state = 2036
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Subtype_declarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_SUBTYPE(self):
			return self.getToken(VHDLParser.KW_SUBTYPE, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def subtype_indication(self):
			return self.getTypedRuleContext(VHDLParser.Subtype_indicationContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_subtype_declaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitSubtype_declaration"):
				return visitor.visitSubtype_declaration(self)
			else:
				return visitor.visitChildren(self)

	def subtype_declaration(self):

		localctx = VHDLParser.Subtype_declarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 398, self.RULE_subtype_declaration)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2037
			self.match(VHDLParser.KW_SUBTYPE)
			self.state = 2038
			self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 2039
			self.match(VHDLParser.KW_IS)
			self.state = 2040
			self.subtype_indication()
			self.state = 2041
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Subtype_indicationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def selected_name(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Selected_nameContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Selected_nameContext, i)

		def constraint(self):
			return self.getTypedRuleContext(VHDLParser.ConstraintContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_subtype_indication

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitSubtype_indication"):
				return visitor.visitSubtype_indication(self)
			else:
				return visitor.visitChildren(self)

	def subtype_indication(self):

		localctx = VHDLParser.Subtype_indicationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 400, self.RULE_subtype_indication)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2043
			self.selected_name()
			self.state = 2045
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 2044
				self.selected_name()

			self.state = 2048
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_RANGE or _la == VHDLParser.TOK_LP:
				self.state = 2047
				self.constraint()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class SuffixContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def LIT_CHARACTER(self):
			return self.getToken(VHDLParser.LIT_CHARACTER, 0)

		def LIT_STRING(self):
			return self.getToken(VHDLParser.LIT_STRING, 0)

		def KW_ALL(self):
			return self.getToken(VHDLParser.KW_ALL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_suffix

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitSuffix"):
				return visitor.visitSuffix(self)
			else:
				return visitor.visitChildren(self)

	def suffix(self):

		localctx = VHDLParser.SuffixContext(self, self._ctx, self.state)
		self.enterRule(localctx, 402, self.RULE_suffix)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2050
			_la = self._input.LA(1)
			if not (_la == VHDLParser.KW_ALL or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & (
				(1 << (VHDLParser.LIT_CHARACTER - 128)) | (1 << (VHDLParser.LIT_STRING - 128)) | (
				1 << (VHDLParser.LIT_IDENTIFIER - 128)))) != 0)):
				self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class TargetContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def name(self):
			return self.getTypedRuleContext(VHDLParser.NameContext, 0)

		def aggregate(self):
			return self.getTypedRuleContext(VHDLParser.AggregateContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_target

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitTarget"):
				return visitor.visitTarget(self)
			else:
				return visitor.visitChildren(self)

	def target(self):

		localctx = VHDLParser.TargetContext(self, self._ctx, self.state)
		self.enterRule(localctx, 404, self.RULE_target)
		try:
			self.state = 2054
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.LIT_STRING, VHDLParser.LIT_IDENTIFIER]:
				self.enterOuterAlt(localctx, 1)
				self.state = 2052
				self.name()
				pass
			elif token in [VHDLParser.TOK_LP]:
				self.enterOuterAlt(localctx, 2)
				self.state = 2053
				self.aggregate()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class TermContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def factor(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.FactorContext)
			else:
				return self.getTypedRuleContext(VHDLParser.FactorContext, i)

		def multiplying_operator(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Multiplying_operatorContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Multiplying_operatorContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_term

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitTerm"):
				return visitor.visitTerm(self)
			else:
				return visitor.visitChildren(self)

	def term(self):

		localctx = VHDLParser.TermContext(self, self._ctx, self.state)
		self.enterRule(localctx, 406, self.RULE_term)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2056
			self.factor()
			self.state = 2062
			self._errHandler.sync(self)
			_alt = self._interp.adaptivePredict(self._input, 234, self._ctx)
			while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
				if _alt == 1:
					self.state = 2057
					self.multiplying_operator()
					self.state = 2058
					self.factor()
				self.state = 2064
				self._errHandler.sync(self)
				_alt = self._interp.adaptivePredict(self._input, 234, self._ctx)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Timeout_clauseContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_FOR(self):
			return self.getToken(VHDLParser.KW_FOR, 0)

		def expression(self):
			return self.getTypedRuleContext(VHDLParser.ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_timeout_clause

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitTimeout_clause"):
				return visitor.visitTimeout_clause(self)
			else:
				return visitor.visitChildren(self)

	def timeout_clause(self):

		localctx = VHDLParser.Timeout_clauseContext(self, self._ctx, self.state)
		self.enterRule(localctx, 408, self.RULE_timeout_clause)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2065
			self.match(VHDLParser.KW_FOR)
			self.state = 2066
			self.expression()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Type_declarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_TYPE(self):
			return self.getToken(VHDLParser.KW_TYPE, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def type_definition(self):
			return self.getTypedRuleContext(VHDLParser.Type_definitionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_type_declaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitType_declaration"):
				return visitor.visitType_declaration(self)
			else:
				return visitor.visitChildren(self)

	def type_declaration(self):

		localctx = VHDLParser.Type_declarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 410, self.RULE_type_declaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2068
			self.match(VHDLParser.KW_TYPE)
			self.state = 2069
			self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 2072
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_IS:
				self.state = 2070
				self.match(VHDLParser.KW_IS)
				self.state = 2071
				self.type_definition()

			self.state = 2074
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Type_definitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def scalar_type_definition(self):
			return self.getTypedRuleContext(VHDLParser.Scalar_type_definitionContext, 0)

		def composite_type_definition(self):
			return self.getTypedRuleContext(VHDLParser.Composite_type_definitionContext, 0)

		def access_type_definition(self):
			return self.getTypedRuleContext(VHDLParser.Access_type_definitionContext, 0)

		def file_type_definition(self):
			return self.getTypedRuleContext(VHDLParser.File_type_definitionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_type_definition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitType_definition"):
				return visitor.visitType_definition(self)
			else:
				return visitor.visitChildren(self)

	def type_definition(self):

		localctx = VHDLParser.Type_definitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 412, self.RULE_type_definition)
		try:
			self.state = 2080
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.KW_RANGE, VHDLParser.TOK_LP]:
				self.enterOuterAlt(localctx, 1)
				self.state = 2076
				self.scalar_type_definition()
				pass
			elif token in [VHDLParser.KW_ARRAY, VHDLParser.KW_RECORD]:
				self.enterOuterAlt(localctx, 2)
				self.state = 2077
				self.composite_type_definition()
				pass
			elif token in [VHDLParser.KW_ACCESS]:
				self.enterOuterAlt(localctx, 3)
				self.state = 2078
				self.access_type_definition()
				pass
			elif token in [VHDLParser.KW_FILE]:
				self.enterOuterAlt(localctx, 4)
				self.state = 2079
				self.file_type_definition()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Unconstrained_array_definitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_ARRAY(self):
			return self.getToken(VHDLParser.KW_ARRAY, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def index_subtype_definition(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Index_subtype_definitionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Index_subtype_definitionContext, i)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def KW_OF(self):
			return self.getToken(VHDLParser.KW_OF, 0)

		def subtype_indication(self):
			return self.getTypedRuleContext(VHDLParser.Subtype_indicationContext, 0)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_unconstrained_array_definition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitUnconstrained_array_definition"):
				return visitor.visitUnconstrained_array_definition(self)
			else:
				return visitor.visitChildren(self)

	def unconstrained_array_definition(self):

		localctx = VHDLParser.Unconstrained_array_definitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 414, self.RULE_unconstrained_array_definition)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2082
			self.match(VHDLParser.KW_ARRAY)
			self.state = 2083
			self.match(VHDLParser.TOK_LP)
			self.state = 2084
			self.index_subtype_definition()
			self.state = 2089
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.TOK_COMMA:
				self.state = 2085
				self.match(VHDLParser.TOK_COMMA)
				self.state = 2086
				self.index_subtype_definition()
				self.state = 2091
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 2092
			self.match(VHDLParser.TOK_RP)
			self.state = 2093
			self.match(VHDLParser.KW_OF)
			self.state = 2094
			self.subtype_indication()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Use_clauseContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_USE(self):
			return self.getToken(VHDLParser.KW_USE, 0)

		def selected_name(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Selected_nameContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Selected_nameContext, i)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_use_clause

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitUse_clause"):
				return visitor.visitUse_clause(self)
			else:
				return visitor.visitChildren(self)

	def use_clause(self):

		localctx = VHDLParser.Use_clauseContext(self, self._ctx, self.state)
		self.enterRule(localctx, 416, self.RULE_use_clause)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2096
			self.match(VHDLParser.KW_USE)
			self.state = 2097
			self.selected_name()
			self.state = 2102
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.TOK_COMMA:
				self.state = 2098
				self.match(VHDLParser.TOK_COMMA)
				self.state = 2099
				self.selected_name()
				self.state = 2104
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 2105
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Variable_assignment_statementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def target(self):
			return self.getTypedRuleContext(VHDLParser.TargetContext, 0)

		def TOK_VAR_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_VAR_ASSIGN, 0)

		def expression(self):
			return self.getTypedRuleContext(VHDLParser.ExpressionContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def label_colon(self):
			return self.getTypedRuleContext(VHDLParser.Label_colonContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_variable_assignment_statement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitVariable_assignment_statement"):
				return visitor.visitVariable_assignment_statement(self)
			else:
				return visitor.visitChildren(self)

	def variable_assignment_statement(self):

		localctx = VHDLParser.Variable_assignment_statementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 418, self.RULE_variable_assignment_statement)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2108
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 239, self._ctx)
			if la_ == 1:
				self.state = 2107
				self.label_colon()

			self.state = 2110
			self.target()
			self.state = 2111
			self.match(VHDLParser.TOK_VAR_ASSIGN)
			self.state = 2112
			self.expression()
			self.state = 2113
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Variable_declarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_VARIABLE(self):
			return self.getToken(VHDLParser.KW_VARIABLE, 0)

		def identifier_list(self):
			return self.getTypedRuleContext(VHDLParser.Identifier_listContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def subtype_indication(self):
			return self.getTypedRuleContext(VHDLParser.Subtype_indicationContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def KW_SHARED(self):
			return self.getToken(VHDLParser.KW_SHARED, 0)

		def TOK_VAR_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_VAR_ASSIGN, 0)

		def expression(self):
			return self.getTypedRuleContext(VHDLParser.ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_variable_declaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitVariable_declaration"):
				return visitor.visitVariable_declaration(self)
			else:
				return visitor.visitChildren(self)

	def variable_declaration(self):

		localctx = VHDLParser.Variable_declarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 420, self.RULE_variable_declaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2116
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_SHARED:
				self.state = 2115
				self.match(VHDLParser.KW_SHARED)

			self.state = 2118
			self.match(VHDLParser.KW_VARIABLE)
			self.state = 2119
			self.identifier_list()
			self.state = 2120
			self.match(VHDLParser.TOK_COLON)
			self.state = 2121
			self.subtype_indication()
			self.state = 2124
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_VAR_ASSIGN:
				self.state = 2122
				self.match(VHDLParser.TOK_VAR_ASSIGN)
				self.state = 2123
				self.expression()

			self.state = 2126
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Wait_statementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_WAIT(self):
			return self.getToken(VHDLParser.KW_WAIT, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def label_colon(self):
			return self.getTypedRuleContext(VHDLParser.Label_colonContext, 0)

		def sensitivity_clause(self):
			return self.getTypedRuleContext(VHDLParser.Sensitivity_clauseContext, 0)

		def condition_clause(self):
			return self.getTypedRuleContext(VHDLParser.Condition_clauseContext, 0)

		def timeout_clause(self):
			return self.getTypedRuleContext(VHDLParser.Timeout_clauseContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_wait_statement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitWait_statement"):
				return visitor.visitWait_statement(self)
			else:
				return visitor.visitChildren(self)

	def wait_statement(self):

		localctx = VHDLParser.Wait_statementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 422, self.RULE_wait_statement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2129
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 2128
				self.label_colon()

			self.state = 2131
			self.match(VHDLParser.KW_WAIT)
			self.state = 2133
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_ON:
				self.state = 2132
				self.sensitivity_clause()

			self.state = 2136
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_UNTIL:
				self.state = 2135
				self.condition_clause()

			self.state = 2139
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_FOR:
				self.state = 2138
				self.timeout_clause()

			self.state = 2141
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class WaveformContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def waveform_element(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Waveform_elementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Waveform_elementContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def KW_UNAFFECTED(self):
			return self.getToken(VHDLParser.KW_UNAFFECTED, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_waveform

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitWaveform"):
				return visitor.visitWaveform(self)
			else:
				return visitor.visitChildren(self)

	def waveform(self):

		localctx = VHDLParser.WaveformContext(self, self._ctx, self.state)
		self.enterRule(localctx, 424, self.RULE_waveform)
		self._la = 0  # Token type
		try:
			self.state = 2152
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.OP_ABS, VHDLParser.KW_NEW, VHDLParser.OP_NOT, VHDLParser.KW_NULL, VHDLParser.OP_PLUS,
									 VHDLParser.OP_MINUS, VHDLParser.TOK_LP, VHDLParser.LIT_ABSTRACT, VHDLParser.LIT_BIT_STRING,
									 VHDLParser.LIT_CHARACTER, VHDLParser.LIT_STRING, VHDLParser.LIT_IDENTIFIER]:
				self.enterOuterAlt(localctx, 1)
				self.state = 2143
				self.waveform_element()
				self.state = 2148
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				while _la == VHDLParser.TOK_COMMA:
					self.state = 2144
					self.match(VHDLParser.TOK_COMMA)
					self.state = 2145
					self.waveform_element()
					self.state = 2150
					self._errHandler.sync(self)
					_la = self._input.LA(1)

				pass
			elif token in [VHDLParser.KW_UNAFFECTED]:
				self.enterOuterAlt(localctx, 2)
				self.state = 2151
				self.match(VHDLParser.KW_UNAFFECTED)
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Waveform_elementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def expression(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.ExpressionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.ExpressionContext, i)

		def KW_AFTER(self):
			return self.getToken(VHDLParser.KW_AFTER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_waveform_element

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitWaveform_element"):
				return visitor.visitWaveform_element(self)
			else:
				return visitor.visitChildren(self)

	def waveform_element(self):

		localctx = VHDLParser.Waveform_elementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 426, self.RULE_waveform_element)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2154
			self.expression()
			self.state = 2157
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_AFTER:
				self.state = 2155
				self.match(VHDLParser.KW_AFTER)
				self.state = 2156
				self.expression()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx
