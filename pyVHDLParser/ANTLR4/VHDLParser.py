from sys import stdout
from typing import TextIO

from antlr4 import ATNDeserializer, Parser, PredictionContextCache, DFA, TokenStream, ParserATNSimulator, \
	ParserRuleContext, ParseTreeVisitor, Token, RecognitionException, NoViableAltException, ATN


def serializedATN():
	return (
		4, 1, 130, 2035, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2,
		8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7,
		16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24,
		2, 25, 7, 25, 2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7, 31, 2, 32, 7, 32, 2,
		33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41,
		7, 41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7,
		49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7, 57,
		2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62, 2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2,
		66, 7, 66, 2, 67, 7, 67, 2, 68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73, 7, 73, 2, 74,
		7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2, 78, 7, 78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7,
		82, 2, 83, 7, 83, 2, 84, 7, 84, 2, 85, 7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7, 88, 2, 89, 7, 89, 2, 90, 7, 90,
		2, 91, 7, 91, 2, 92, 7, 92, 2, 93, 7, 93, 2, 94, 7, 94, 2, 95, 7, 95, 2, 96, 7, 96, 2, 97, 7, 97, 2, 98, 7, 98, 2,
		99, 7, 99, 2, 100, 7, 100, 2, 101, 7, 101, 2, 102, 7, 102, 2, 103, 7, 103, 2, 104, 7, 104, 2, 105, 7, 105, 2, 106,
		7, 106, 2, 107, 7, 107, 2, 108, 7, 108, 2, 109, 7, 109, 2, 110, 7, 110, 2, 111, 7, 111, 2, 112, 7, 112, 2, 113, 7,
		113, 2, 114, 7, 114, 2, 115, 7, 115, 2, 116, 7, 116, 2, 117, 7, 117, 2, 118, 7, 118, 2, 119, 7, 119, 2, 120, 7, 120,
		2, 121, 7, 121, 2, 122, 7, 122, 2, 123, 7, 123, 2, 124, 7, 124, 2, 125, 7, 125, 2, 126, 7, 126, 2, 127, 7, 127, 2,
		128, 7, 128, 2, 129, 7, 129, 2, 130, 7, 130, 2, 131, 7, 131, 2, 132, 7, 132, 2, 133, 7, 133, 2, 134, 7, 134, 2, 135,
		7, 135, 2, 136, 7, 136, 2, 137, 7, 137, 2, 138, 7, 138, 2, 139, 7, 139, 2, 140, 7, 140, 2, 141, 7, 141, 2, 142, 7,
		142, 2, 143, 7, 143, 2, 144, 7, 144, 2, 145, 7, 145, 2, 146, 7, 146, 2, 147, 7, 147, 2, 148, 7, 148, 2, 149, 7, 149,
		2, 150, 7, 150, 2, 151, 7, 151, 2, 152, 7, 152, 2, 153, 7, 153, 2, 154, 7, 154, 2, 155, 7, 155, 2, 156, 7, 156, 2,
		157, 7, 157, 2, 158, 7, 158, 2, 159, 7, 159, 2, 160, 7, 160, 2, 161, 7, 161, 2, 162, 7, 162, 2, 163, 7, 163, 2, 164,
		7, 164, 2, 165, 7, 165, 2, 166, 7, 166, 2, 167, 7, 167, 2, 168, 7, 168, 2, 169, 7, 169, 2, 170, 7, 170, 2, 171, 7,
		171, 2, 172, 7, 172, 2, 173, 7, 173, 2, 174, 7, 174, 2, 175, 7, 175, 2, 176, 7, 176, 2, 177, 7, 177, 2, 178, 7, 178,
		2, 179, 7, 179, 2, 180, 7, 180, 2, 181, 7, 181, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 3, 2, 372, 8, 2, 1, 2, 1,
		2, 1, 2, 1, 2, 3, 2, 378, 8, 2, 1, 3, 1, 3, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 3, 4, 388, 8, 4, 1, 5, 1, 5, 1, 5,
		1, 5, 5, 5, 394, 8, 5, 10, 5, 12, 5, 397, 9, 5, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 6, 3, 6, 405, 8, 6, 1, 6, 1, 6, 1,
		6, 3, 6, 410, 8, 6, 1, 6, 1, 6, 1, 7, 1, 7, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 3, 9, 421, 8, 9, 1, 10, 1, 10, 1, 10, 1,
		10, 1, 10, 1, 10, 5, 10, 429, 8, 10, 10, 10, 12, 10, 432, 9, 10, 1, 10, 1, 10, 5, 10, 436, 8, 10, 10, 10, 12, 10,
		439, 9, 10, 1, 10, 1, 10, 3, 10, 443, 8, 10, 1, 10, 3, 10, 446, 8, 10, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11, 1, 11, 1,
		11, 3, 11, 455, 8, 11, 1, 11, 1, 11, 1, 11, 3, 11, 460, 8, 11, 1, 11, 1, 11, 1, 11, 3, 11, 465, 8, 11, 1, 11, 3, 11,
		468, 8, 11, 1, 11, 1, 11, 1, 11, 3, 11, 473, 8, 11, 1, 12, 1, 12, 3, 12, 477, 8, 12, 1, 13, 1, 13, 1, 13, 1, 13, 3,
		13, 483, 8, 13, 1, 13, 1, 13, 3, 13, 487, 8, 13, 1, 14, 1, 14, 3, 14, 491, 8, 14, 1, 14, 1, 14, 1, 14, 1, 15, 1, 15,
		1, 15, 3, 15, 499, 8, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 5, 16, 506, 8, 16, 10, 16, 12, 16, 509, 9, 16, 1, 17,
		1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 18, 1, 18, 1, 19, 3, 19, 520, 8, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19,
		3, 19, 528, 8, 19, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 21, 1, 21, 3, 21, 540, 8, 21, 1, 21,
		3, 21, 543, 8, 21, 1, 21, 3, 21, 546, 8, 21, 1, 22, 1, 22, 1, 22, 5, 22, 551, 8, 22, 10, 22, 12, 22, 554, 9, 22, 1,
		22, 5, 22, 557, 8, 22, 10, 22, 12, 22, 560, 9, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1,
		23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 3, 23, 581, 8, 23, 1, 24, 1, 24, 1, 24, 1, 24, 1,
		24, 3, 24, 588, 8, 24, 1, 24, 3, 24, 591, 8, 24, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 3, 25, 600, 8, 25,
		1, 25, 3, 25, 603, 8, 25, 1, 25, 1, 25, 1, 25, 1, 25, 3, 25, 609, 8, 25, 3, 25, 611, 8, 25, 1, 25, 1, 25, 1, 25, 1,
		25, 3, 25, 617, 8, 25, 3, 25, 619, 8, 25, 1, 25, 5, 25, 622, 8, 25, 10, 25, 12, 25, 625, 9, 25, 1, 25, 1, 25, 5, 25,
		629, 8, 25, 10, 25, 12, 25, 632, 9, 25, 1, 25, 1, 25, 1, 25, 3, 25, 637, 8, 25, 1, 25, 1, 25, 1, 26, 1, 26, 3, 26,
		643, 8, 26, 1, 26, 1, 26, 1, 26, 1, 26, 4, 26, 649, 8, 26, 11, 26, 12, 26, 650, 1, 26, 1, 26, 1, 26, 3, 26, 656, 8,
		26, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 27, 5, 27, 664, 8, 27, 10, 27, 12, 27, 667, 9, 27, 1, 28, 1, 28, 1, 28, 1,
		28, 3, 28, 673, 8, 28, 1, 29, 1, 29, 1, 29, 5, 29, 678, 8, 29, 10, 29, 12, 29, 681, 9, 29, 1, 30, 1, 30, 1, 30, 1,
		30, 1, 30, 3, 30, 688, 8, 30, 1, 30, 3, 30, 691, 8, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 31, 1, 31, 1, 31, 3, 31, 700,
		8, 31, 1, 31, 3, 31, 703, 8, 31, 1, 31, 3, 31, 706, 8, 31, 1, 31, 1, 31, 1, 31, 3, 31, 711, 8, 31, 1, 31, 1, 31, 1,
		32, 1, 32, 1, 32, 1, 32, 3, 32, 719, 8, 32, 1, 32, 3, 32, 722, 8, 32, 1, 32, 1, 32, 1, 33, 1, 33, 1, 33, 1, 33, 1,
		34, 1, 34, 3, 34, 732, 8, 34, 1, 35, 1, 35, 3, 35, 736, 8, 35, 1, 35, 3, 35, 739, 8, 35, 1, 35, 1, 35, 1, 35, 1, 36,
		1, 36, 3, 36, 746, 8, 36, 1, 36, 3, 36, 749, 8, 36, 1, 36, 1, 36, 1, 36, 1, 37, 1, 37, 3, 37, 756, 8, 37, 1, 37, 3,
		37, 759, 8, 37, 1, 37, 1, 37, 3, 37, 763, 8, 37, 1, 38, 1, 38, 1, 38, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1,
		40, 1, 40, 1, 40, 1, 40, 1, 40, 3, 40, 779, 8, 40, 3, 40, 781, 8, 40, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 5,
		41, 789, 8, 41, 10, 41, 12, 41, 792, 9, 41, 1, 41, 1, 41, 1, 41, 3, 41, 797, 8, 41, 1, 41, 3, 41, 800, 8, 41, 1, 41,
		1, 41, 1, 42, 1, 42, 3, 42, 806, 8, 42, 1, 43, 1, 43, 3, 43, 810, 8, 43, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 45,
		1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 3, 45, 823, 8, 45, 1, 45, 1, 45, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 47, 1, 47,
		3, 47, 834, 8, 47, 1, 48, 1, 48, 3, 48, 838, 8, 48, 1, 49, 1, 49, 1, 49, 3, 49, 843, 8, 49, 1, 49, 3, 49, 846, 8,
		49, 1, 50, 5, 50, 849, 8, 50, 10, 50, 12, 50, 852, 9, 50, 1, 50, 1, 50, 1, 51, 5, 51, 857, 8, 51, 10, 51, 12, 51,
		860, 9, 51, 1, 51, 1, 51, 1, 52, 1, 52, 1, 53, 1, 53, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 55, 1, 55, 3, 55,
		876, 8, 55, 1, 56, 1, 56, 1, 56, 3, 56, 881, 8, 56, 1, 56, 1, 56, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 58, 1, 58,
		1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 3, 59, 897, 8, 59, 1, 59, 1, 59, 1, 59, 3, 59, 902, 8, 59, 1, 60, 1, 60, 1, 61,
		1, 61, 3, 61, 908, 8, 61, 1, 62, 1, 62, 1, 62, 5, 62, 913, 8, 62, 10, 62, 12, 62, 916, 9, 62, 1, 63, 1, 63, 1, 63,
		1, 63, 3, 63, 922, 8, 63, 1, 63, 3, 63, 925, 8, 63, 1, 63, 1, 63, 1, 63, 3, 63, 930, 8, 63, 1, 63, 1, 63, 3, 63,
		934, 8, 63, 1, 63, 3, 63, 937, 8, 63, 1, 63, 1, 63, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64,
		1, 64, 1, 64, 1, 64, 1, 64, 3, 64, 954, 8, 64, 1, 65, 5, 65, 957, 8, 65, 10, 65, 12, 65, 960, 9, 65, 1, 66, 1, 66,
		3, 66, 964, 8, 66, 1, 67, 1, 67, 1, 67, 5, 67, 969, 8, 67, 10, 67, 12, 67, 972, 9, 67, 1, 67, 1, 67, 3, 67, 976, 8,
		67, 1, 68, 1, 68, 1, 68, 1, 68, 1, 69, 1, 69, 1, 69, 1, 69, 3, 69, 986, 8, 69, 1, 70, 5, 70, 989, 8, 70, 10, 70, 12,
		70, 992, 9, 70, 1, 71, 1, 71, 1, 72, 1, 72, 1, 73, 1, 73, 1, 73, 1, 73, 5, 73, 1002, 8, 73, 10, 73, 12, 73, 1005, 9,
		73, 1, 73, 1, 73, 1, 74, 1, 74, 3, 74, 1011, 8, 74, 1, 74, 1, 74, 3, 74, 1015, 8, 74, 1, 74, 1, 74, 3, 74, 1019, 8,
		74, 1, 74, 1, 74, 1, 75, 1, 75, 1, 75, 5, 75, 1026, 8, 75, 10, 75, 12, 75, 1029, 9, 75, 1, 76, 1, 76, 1, 76, 3, 76,
		1034, 8, 76, 1, 76, 1, 76, 1, 76, 1, 76, 3, 76, 1040, 8, 76, 1, 77, 1, 77, 1, 77, 1, 77, 1, 77, 3, 77, 1047, 8, 77,
		1, 77, 1, 77, 1, 78, 1, 78, 3, 78, 1053, 8, 78, 1, 78, 1, 78, 1, 78, 1, 79, 1, 79, 1, 79, 1, 79, 1, 80, 1, 80, 1,
		81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 3, 81, 1070, 8, 81, 1, 82, 1, 82, 1, 82, 1, 82, 1, 82, 5, 82, 1077, 8, 82,
		10, 82, 12, 82, 1080, 9, 82, 1, 82, 3, 82, 1083, 8, 82, 1, 82, 5, 82, 1086, 8, 82, 10, 82, 12, 82, 1089, 9, 82, 1,
		82, 1, 82, 1, 82, 3, 82, 1094, 8, 82, 1, 82, 1, 82, 1, 83, 1, 83, 1, 83, 1, 83, 3, 83, 1102, 8, 83, 1, 84, 1, 84, 1,
		84, 1, 84, 1, 84, 5, 84, 1109, 8, 84, 10, 84, 12, 84, 1112, 9, 84, 1, 84, 1, 84, 1, 84, 1, 85, 1, 85, 1, 85, 1, 85,
		1, 85, 1, 85, 1, 86, 1, 86, 1, 86, 1, 86, 1, 87, 1, 87, 1, 87, 5, 87, 1130, 8, 87, 10, 87, 12, 87, 1133, 9, 87, 1,
		88, 1, 88, 3, 88, 1137, 8, 88, 1, 88, 1, 88, 1, 88, 1, 88, 5, 88, 1143, 8, 88, 10, 88, 12, 88, 1146, 9, 88, 1, 88,
		1, 88, 1, 88, 1, 88, 5, 88, 1152, 8, 88, 10, 88, 12, 88, 1155, 9, 88, 5, 88, 1157, 8, 88, 10, 88, 12, 88, 1160, 9,
		88, 1, 88, 1, 88, 5, 88, 1164, 8, 88, 10, 88, 12, 88, 1167, 9, 88, 3, 88, 1169, 8, 88, 1, 88, 1, 88, 1, 88, 3, 88,
		1174, 8, 88, 1, 88, 1, 88, 1, 89, 1, 89, 1, 89, 1, 89, 5, 89, 1182, 8, 89, 10, 89, 12, 89, 1185, 9, 89, 1, 89, 1,
		89, 1, 90, 1, 90, 3, 90, 1191, 8, 90, 1, 91, 1, 91, 1, 91, 1, 91, 1, 92, 3, 92, 1198, 8, 92, 1, 92, 1, 92, 1, 92, 1,
		92, 1, 92, 1, 92, 3, 92, 1206, 8, 92, 1, 92, 1, 92, 3, 92, 1210, 8, 92, 1, 93, 1, 93, 1, 93, 5, 93, 1215, 8, 93, 10,
		93, 12, 93, 1218, 9, 93, 1, 93, 1, 93, 3, 93, 1222, 8, 93, 1, 94, 3, 94, 1225, 8, 94, 1, 94, 1, 94, 1, 94, 3, 94,
		1230, 8, 94, 1, 94, 1, 94, 1, 94, 3, 94, 1235, 8, 94, 1, 95, 1, 95, 1, 95, 1, 95, 3, 95, 1241, 8, 95, 1, 96, 1, 96,
		1, 97, 1, 97, 1, 97, 1, 97, 1, 97, 1, 98, 1, 98, 1, 98, 5, 98, 1253, 8, 98, 10, 98, 12, 98, 1256, 9, 98, 1, 99, 1,
		99, 1, 99, 5, 99, 1261, 8, 99, 10, 99, 12, 99, 1264, 9, 99, 1, 100, 1, 100, 1, 100, 3, 100, 1269, 8, 100, 1, 100, 1,
		100, 3, 100, 1273, 8, 100, 1, 100, 1, 100, 3, 100, 1277, 8, 100, 1, 101, 1, 101, 1, 101, 1, 101, 3, 101, 1283, 8,
		101, 1, 101, 1, 101, 3, 101, 1287, 8, 101, 1, 101, 1, 101, 3, 101, 1291, 8, 101, 1, 102, 3, 102, 1294, 8, 102, 1,
		102, 1, 102, 1, 102, 3, 102, 1299, 8, 102, 1, 102, 1, 102, 1, 102, 3, 102, 1304, 8, 102, 1, 103, 1, 103, 1, 103, 1,
		103, 3, 103, 1310, 8, 103, 1, 104, 1, 104, 1, 104, 1, 104, 5, 104, 1316, 8, 104, 10, 104, 12, 104, 1319, 9, 104, 1,
		104, 1, 104, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 3, 105, 1328, 8, 105, 1, 106, 1, 106, 1, 106, 1, 106, 1, 106,
		3, 106, 1335, 8, 106, 1, 107, 1, 107, 3, 107, 1339, 8, 107, 1, 107, 3, 107, 1342, 8, 107, 1, 107, 1, 107, 5, 107,
		1346, 8, 107, 10, 107, 12, 107, 1349, 9, 107, 1, 107, 1, 107, 1, 107, 3, 107, 1354, 8, 107, 1, 107, 1, 107, 1, 108,
		1, 108, 1, 109, 1, 109, 5, 109, 1362, 8, 109, 10, 109, 12, 109, 1365, 9, 109, 1, 110, 1, 110, 1, 110, 1, 110, 3,
		110, 1371, 8, 110, 1, 111, 1, 111, 1, 111, 5, 111, 1376, 8, 111, 10, 111, 12, 111, 1379, 9, 111, 1, 112, 1, 112, 4,
		112, 1383, 8, 112, 11, 112, 12, 112, 1384, 1, 113, 1, 113, 1, 113, 1, 113, 1, 114, 1, 114, 1, 114, 1, 114, 1, 115,
		1, 115, 3, 115, 1397, 8, 115, 1, 115, 1, 115, 3, 115, 1401, 8, 115, 1, 115, 1, 115, 3, 115, 1405, 8, 115, 1, 115, 1,
		115, 1, 116, 1, 116, 3, 116, 1411, 8, 116, 1, 117, 1, 117, 1, 117, 1, 117, 3, 117, 1417, 8, 117, 1, 118, 3, 118,
		1420, 8, 118, 1, 118, 3, 118, 1423, 8, 118, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 5, 119, 1430, 8, 119, 10, 119,
		12, 119, 1433, 9, 119, 1, 119, 1, 119, 1, 119, 3, 119, 1438, 8, 119, 1, 119, 3, 119, 1441, 8, 119, 1, 119, 1, 119,
		1, 120, 1, 120, 1, 120, 1, 120, 1, 120, 1, 120, 1, 120, 1, 120, 1, 120, 3, 120, 1454, 8, 120, 1, 121, 1, 121, 1,
		121, 1, 121, 5, 121, 1460, 8, 121, 10, 121, 12, 121, 1463, 9, 121, 1, 121, 1, 121, 3, 121, 1467, 8, 121, 1, 121, 3,
		121, 1470, 8, 121, 1, 121, 1, 121, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122,
		1, 122, 1, 122, 1, 122, 1, 122, 3, 122, 1488, 8, 122, 1, 123, 1, 123, 1, 123, 1, 123, 1, 124, 1, 124, 1, 124, 5,
		124, 1497, 8, 124, 10, 124, 12, 124, 1500, 9, 124, 1, 124, 1, 124, 1, 125, 1, 125, 3, 125, 1506, 8, 125, 1, 126, 1,
		126, 1, 126, 1, 127, 1, 127, 1, 127, 1, 127, 1, 127, 5, 127, 1516, 8, 127, 10, 127, 12, 127, 1519, 9, 127, 1, 127,
		1, 127, 1, 127, 3, 127, 1524, 8, 127, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 5, 128, 1531, 8, 128, 10, 128, 12,
		128, 1534, 9, 128, 1, 128, 1, 128, 1, 128, 1, 129, 1, 129, 1, 129, 1, 129, 1, 129, 1, 129, 1, 130, 1, 130, 1, 130,
		1, 130, 1, 130, 1, 130, 1, 130, 1, 130, 1, 130, 3, 130, 1554, 8, 130, 1, 131, 1, 131, 1, 131, 1, 131, 1, 131, 3,
		131, 1561, 8, 131, 1, 132, 1, 132, 3, 132, 1565, 8, 132, 1, 132, 1, 132, 1, 132, 1, 133, 1, 133, 1, 133, 1, 133, 1,
		133, 1, 133, 1, 133, 1, 133, 1, 133, 1, 133, 1, 133, 3, 133, 1581, 8, 133, 1, 134, 5, 134, 1584, 8, 134, 10, 134,
		12, 134, 1587, 9, 134, 1, 135, 1, 135, 3, 135, 1591, 8, 135, 1, 135, 1, 135, 1, 135, 1, 135, 1, 135, 3, 135, 1598,
		8, 135, 1, 135, 3, 135, 1601, 8, 135, 1, 135, 1, 135, 1, 135, 1, 135, 1, 135, 1, 135, 3, 135, 1609, 8, 135, 1, 135,
		1, 135, 1, 136, 1, 136, 3, 136, 1615, 8, 136, 1, 136, 3, 136, 1618, 8, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136,
		3, 136, 1625, 8, 136, 1, 136, 3, 136, 1628, 8, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 3, 136, 1635, 8, 136, 1,
		136, 1, 136, 3, 136, 1639, 8, 136, 1, 136, 1, 136, 1, 137, 5, 137, 1644, 8, 137, 10, 137, 12, 137, 1647, 9, 137, 1,
		138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 3, 138, 1656, 8, 138, 1, 139, 1, 139, 3, 139, 1660, 8, 139, 1,
		140, 1, 140, 1, 140, 1, 140, 3, 140, 1666, 8, 140, 1, 141, 1, 141, 1, 141, 1, 142, 1, 142, 4, 142, 1673, 8, 142, 11,
		142, 12, 142, 1674, 1, 142, 1, 142, 1, 142, 3, 142, 1680, 8, 142, 1, 143, 1, 143, 1, 143, 3, 143, 1685, 8, 143, 1,
		144, 1, 144, 3, 144, 1689, 8, 144, 1, 144, 1, 144, 1, 144, 1, 144, 3, 144, 1695, 8, 144, 1, 144, 1, 144, 1, 145, 1,
		145, 3, 145, 1701, 8, 145, 1, 145, 1, 145, 3, 145, 1705, 8, 145, 1, 145, 1, 145, 1, 146, 1, 146, 1, 146, 3, 146,
		1712, 8, 146, 1, 147, 1, 147, 1, 147, 1, 147, 1, 147, 1, 148, 1, 148, 1, 148, 1, 148, 1, 148, 1, 148, 1, 148, 1,
		148, 1, 148, 1, 149, 1, 149, 1, 149, 1, 149, 1, 149, 1, 149, 1, 149, 1, 149, 5, 149, 1736, 8, 149, 10, 149, 12, 149,
		1739, 9, 149, 1, 150, 1, 150, 1, 150, 1, 151, 1, 151, 1, 151, 5, 151, 1747, 8, 151, 10, 151, 12, 151, 1750, 9, 151,
		1, 152, 1, 152, 1, 152, 1, 152, 1, 152, 1, 152, 1, 152, 1, 152, 1, 152, 1, 152, 1, 152, 1, 152, 1, 152, 3, 152,
		1765, 8, 152, 1, 152, 1, 152, 1, 152, 3, 152, 1770, 8, 152, 1, 153, 1, 153, 1, 153, 3, 153, 1775, 8, 153, 1, 154, 1,
		154, 3, 154, 1779, 8, 154, 1, 154, 1, 154, 1, 154, 3, 154, 1784, 8, 154, 1, 154, 1, 154, 1, 154, 1, 155, 1, 155, 1,
		155, 1, 155, 1, 155, 3, 155, 1794, 8, 155, 1, 155, 1, 155, 3, 155, 1798, 8, 155, 1, 155, 1, 155, 1, 156, 1, 156, 1,
		156, 5, 156, 1805, 8, 156, 10, 156, 12, 156, 1808, 9, 156, 1, 156, 1, 156, 3, 156, 1812, 8, 156, 1, 157, 1, 157, 1,
		157, 1, 157, 5, 157, 1818, 8, 157, 10, 157, 12, 157, 1821, 9, 157, 3, 157, 1823, 8, 157, 1, 157, 1, 157, 3, 157,
		1827, 8, 157, 1, 157, 1, 157, 1, 158, 3, 158, 1832, 8, 158, 1, 158, 1, 158, 1, 158, 5, 158, 1837, 8, 158, 10, 158,
		12, 158, 1840, 9, 158, 1, 159, 1, 159, 1, 160, 1, 160, 1, 160, 5, 160, 1847, 8, 160, 10, 160, 12, 160, 1850, 9, 160,
		1, 160, 1, 160, 5, 160, 1854, 8, 160, 10, 160, 12, 160, 1857, 9, 160, 1, 160, 1, 160, 3, 160, 1861, 8, 160, 1, 160,
		3, 160, 1864, 8, 160, 1, 160, 1, 160, 1, 161, 1, 161, 1, 161, 1, 162, 1, 162, 1, 162, 1, 162, 1, 162, 1, 162, 1,
		162, 1, 162, 1, 162, 1, 162, 1, 162, 3, 162, 1882, 8, 162, 1, 163, 1, 163, 1, 164, 1, 164, 3, 164, 1888, 8, 164, 1,
		165, 1, 165, 1, 165, 1, 165, 1, 165, 1, 165, 3, 165, 1896, 8, 165, 1, 166, 3, 166, 1899, 8, 166, 1, 166, 1, 166, 1,
		166, 1, 166, 1, 166, 1, 166, 3, 166, 1907, 8, 166, 1, 166, 1, 166, 1, 166, 1, 167, 1, 167, 1, 167, 1, 167, 1, 167,
		1, 167, 1, 168, 1, 168, 3, 168, 1920, 8, 168, 1, 168, 3, 168, 1923, 8, 168, 1, 169, 1, 169, 1, 170, 1, 170, 3, 170,
		1929, 8, 170, 1, 171, 1, 171, 1, 171, 5, 171, 1934, 8, 171, 10, 171, 12, 171, 1937, 9, 171, 1, 172, 1, 172, 1, 172,
		1, 173, 1, 173, 1, 173, 1, 173, 3, 173, 1946, 8, 173, 1, 173, 1, 173, 1, 174, 1, 174, 1, 174, 1, 174, 3, 174, 1954,
		8, 174, 1, 175, 1, 175, 1, 175, 1, 175, 1, 175, 5, 175, 1961, 8, 175, 10, 175, 12, 175, 1964, 9, 175, 1, 175, 1,
		175, 1, 175, 1, 175, 1, 176, 1, 176, 1, 176, 1, 176, 5, 176, 1974, 8, 176, 10, 176, 12, 176, 1977, 9, 176, 1, 176,
		1, 176, 1, 177, 1, 177, 3, 177, 1983, 8, 177, 1, 177, 1, 177, 1, 177, 1, 177, 1, 177, 1, 178, 3, 178, 1991, 8, 178,
		1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 3, 178, 1999, 8, 178, 1, 178, 1, 178, 1, 179, 1, 179, 3, 179, 2005,
		8, 179, 1, 179, 1, 179, 3, 179, 2009, 8, 179, 1, 179, 3, 179, 2012, 8, 179, 1, 179, 3, 179, 2015, 8, 179, 1, 179, 1,
		179, 1, 180, 1, 180, 1, 180, 5, 180, 2022, 8, 180, 10, 180, 12, 180, 2025, 9, 180, 1, 180, 3, 180, 2028, 8, 180, 1,
		181, 1, 181, 1, 181, 3, 181, 2033, 8, 181, 1, 181, 0, 0, 182, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28,
		30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86,
		88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134,
		136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180,
		182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226,
		228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272,
		274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318,
		320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 0, 16,
		1, 0, 128, 130, 1, 0, 129, 130, 2, 0, 24, 24, 86, 86, 13, 0, 10, 10, 20, 22, 26, 26, 30, 30, 32, 32, 43, 43, 61, 61,
		65, 65, 79, 79, 84, 84, 88, 88, 90, 90, 93, 93, 2, 0, 128, 128, 130, 130, 5, 0, 9, 9, 49, 49, 52, 52, 58, 58, 98,
		99, 5, 0, 17, 17, 39, 39, 41, 41, 45, 45, 60, 60, 1, 0, 100, 105, 2, 0, 74, 75, 80, 83, 2, 0, 18, 18, 71, 71, 1, 0,
		106, 107, 2, 0, 106, 107, 111, 111, 2, 0, 32, 32, 65, 65, 2, 0, 38, 38, 66, 66, 2, 0, 8, 8, 128, 130, 3, 0, 48, 48,
		69, 69, 108, 109, 2204, 0, 364, 1, 0, 0, 0, 2, 367, 1, 0, 0, 0, 4, 377, 1, 0, 0, 0, 6, 379, 1, 0, 0, 0, 8, 387, 1,
		0, 0, 0, 10, 389, 1, 0, 0, 0, 12, 400, 1, 0, 0, 0, 14, 413, 1, 0, 0, 0, 16, 415, 1, 0, 0, 0, 18, 417, 1, 0, 0, 0,
		20, 422, 1, 0, 0, 0, 22, 472, 1, 0, 0, 0, 24, 476, 1, 0, 0, 0, 26, 478, 1, 0, 0, 0, 28, 490, 1, 0, 0, 0, 30, 498, 1,
		0, 0, 0, 32, 502, 1, 0, 0, 0, 34, 510, 1, 0, 0, 0, 36, 516, 1, 0, 0, 0, 38, 519, 1, 0, 0, 0, 40, 529, 1, 0, 0, 0,
		42, 539, 1, 0, 0, 0, 44, 547, 1, 0, 0, 0, 46, 580, 1, 0, 0, 0, 48, 590, 1, 0, 0, 0, 50, 592, 1, 0, 0, 0, 52, 642, 1,
		0, 0, 0, 54, 659, 1, 0, 0, 0, 56, 672, 1, 0, 0, 0, 58, 674, 1, 0, 0, 0, 60, 682, 1, 0, 0, 0, 62, 696, 1, 0, 0, 0,
		64, 714, 1, 0, 0, 0, 66, 725, 1, 0, 0, 0, 68, 731, 1, 0, 0, 0, 70, 735, 1, 0, 0, 0, 72, 745, 1, 0, 0, 0, 74, 755, 1,
		0, 0, 0, 76, 764, 1, 0, 0, 0, 78, 767, 1, 0, 0, 0, 80, 773, 1, 0, 0, 0, 82, 782, 1, 0, 0, 0, 84, 805, 1, 0, 0, 0,
		86, 809, 1, 0, 0, 0, 88, 811, 1, 0, 0, 0, 90, 816, 1, 0, 0, 0, 92, 826, 1, 0, 0, 0, 94, 833, 1, 0, 0, 0, 96, 837, 1,
		0, 0, 0, 98, 845, 1, 0, 0, 0, 100, 850, 1, 0, 0, 0, 102, 858, 1, 0, 0, 0, 104, 863, 1, 0, 0, 0, 106, 865, 1, 0, 0,
		0, 108, 867, 1, 0, 0, 0, 110, 875, 1, 0, 0, 0, 112, 880, 1, 0, 0, 0, 114, 884, 1, 0, 0, 0, 116, 889, 1, 0, 0, 0,
		118, 901, 1, 0, 0, 0, 120, 903, 1, 0, 0, 0, 122, 905, 1, 0, 0, 0, 124, 909, 1, 0, 0, 0, 126, 917, 1, 0, 0, 0, 128,
		953, 1, 0, 0, 0, 130, 958, 1, 0, 0, 0, 132, 961, 1, 0, 0, 0, 134, 975, 1, 0, 0, 0, 136, 977, 1, 0, 0, 0, 138, 985,
		1, 0, 0, 0, 140, 990, 1, 0, 0, 0, 142, 993, 1, 0, 0, 0, 144, 995, 1, 0, 0, 0, 146, 997, 1, 0, 0, 0, 148, 1010, 1, 0,
		0, 0, 150, 1022, 1, 0, 0, 0, 152, 1039, 1, 0, 0, 0, 154, 1041, 1, 0, 0, 0, 156, 1052, 1, 0, 0, 0, 158, 1057, 1, 0,
		0, 0, 160, 1061, 1, 0, 0, 0, 162, 1069, 1, 0, 0, 0, 164, 1071, 1, 0, 0, 0, 166, 1101, 1, 0, 0, 0, 168, 1103, 1, 0,
		0, 0, 170, 1116, 1, 0, 0, 0, 172, 1122, 1, 0, 0, 0, 174, 1126, 1, 0, 0, 0, 176, 1136, 1, 0, 0, 0, 178, 1177, 1, 0,
		0, 0, 180, 1190, 1, 0, 0, 0, 182, 1192, 1, 0, 0, 0, 184, 1209, 1, 0, 0, 0, 186, 1221, 1, 0, 0, 0, 188, 1224, 1, 0,
		0, 0, 190, 1240, 1, 0, 0, 0, 192, 1242, 1, 0, 0, 0, 194, 1244, 1, 0, 0, 0, 196, 1249, 1, 0, 0, 0, 198, 1257, 1, 0,
		0, 0, 200, 1265, 1, 0, 0, 0, 202, 1278, 1, 0, 0, 0, 204, 1293, 1, 0, 0, 0, 206, 1309, 1, 0, 0, 0, 208, 1311, 1, 0,
		0, 0, 210, 1327, 1, 0, 0, 0, 212, 1334, 1, 0, 0, 0, 214, 1338, 1, 0, 0, 0, 216, 1357, 1, 0, 0, 0, 218, 1359, 1, 0,
		0, 0, 220, 1370, 1, 0, 0, 0, 222, 1372, 1, 0, 0, 0, 224, 1382, 1, 0, 0, 0, 226, 1386, 1, 0, 0, 0, 228, 1390, 1, 0,
		0, 0, 230, 1396, 1, 0, 0, 0, 232, 1410, 1, 0, 0, 0, 234, 1416, 1, 0, 0, 0, 236, 1419, 1, 0, 0, 0, 238, 1424, 1, 0,
		0, 0, 240, 1453, 1, 0, 0, 0, 242, 1455, 1, 0, 0, 0, 244, 1487, 1, 0, 0, 0, 246, 1489, 1, 0, 0, 0, 248, 1498, 1, 0,
		0, 0, 250, 1505, 1, 0, 0, 0, 252, 1507, 1, 0, 0, 0, 254, 1510, 1, 0, 0, 0, 256, 1525, 1, 0, 0, 0, 258, 1538, 1, 0,
		0, 0, 260, 1553, 1, 0, 0, 0, 262, 1555, 1, 0, 0, 0, 264, 1564, 1, 0, 0, 0, 266, 1580, 1, 0, 0, 0, 268, 1585, 1, 0,
		0, 0, 270, 1590, 1, 0, 0, 0, 272, 1614, 1, 0, 0, 0, 274, 1645, 1, 0, 0, 0, 276, 1648, 1, 0, 0, 0, 278, 1659, 1, 0,
		0, 0, 280, 1661, 1, 0, 0, 0, 282, 1667, 1, 0, 0, 0, 284, 1670, 1, 0, 0, 0, 286, 1681, 1, 0, 0, 0, 288, 1688, 1, 0,
		0, 0, 290, 1700, 1, 0, 0, 0, 292, 1711, 1, 0, 0, 0, 294, 1713, 1, 0, 0, 0, 296, 1718, 1, 0, 0, 0, 298, 1727, 1, 0,
		0, 0, 300, 1740, 1, 0, 0, 0, 302, 1743, 1, 0, 0, 0, 304, 1769, 1, 0, 0, 0, 306, 1771, 1, 0, 0, 0, 308, 1778, 1, 0,
		0, 0, 310, 1788, 1, 0, 0, 0, 312, 1811, 1, 0, 0, 0, 314, 1813, 1, 0, 0, 0, 316, 1831, 1, 0, 0, 0, 318, 1841, 1, 0,
		0, 0, 320, 1843, 1, 0, 0, 0, 322, 1867, 1, 0, 0, 0, 324, 1881, 1, 0, 0, 0, 326, 1883, 1, 0, 0, 0, 328, 1887, 1, 0,
		0, 0, 330, 1889, 1, 0, 0, 0, 332, 1898, 1, 0, 0, 0, 334, 1911, 1, 0, 0, 0, 336, 1917, 1, 0, 0, 0, 338, 1924, 1, 0,
		0, 0, 340, 1928, 1, 0, 0, 0, 342, 1930, 1, 0, 0, 0, 344, 1938, 1, 0, 0, 0, 346, 1941, 1, 0, 0, 0, 348, 1953, 1, 0,
		0, 0, 350, 1955, 1, 0, 0, 0, 352, 1969, 1, 0, 0, 0, 354, 1982, 1, 0, 0, 0, 356, 1990, 1, 0, 0, 0, 358, 2004, 1, 0,
		0, 0, 360, 2027, 1, 0, 0, 0, 362, 2029, 1, 0, 0, 0, 364, 365, 5, 124, 0, 0, 365, 366, 3, 248, 124, 0, 366, 1, 1, 0,
		0, 0, 367, 368, 5, 5, 0, 0, 368, 369, 3, 336, 168, 0, 369, 3, 1, 0, 0, 0, 370, 372, 5, 40, 0, 0, 371, 370, 1, 0, 0,
		0, 371, 372, 1, 0, 0, 0, 372, 373, 1, 0, 0, 0, 373, 378, 3, 150, 75, 0, 374, 378, 3, 218, 109, 0, 375, 378, 3, 336,
		168, 0, 376, 378, 5, 57, 0, 0, 377, 371, 1, 0, 0, 0, 377, 374, 1, 0, 0, 0, 377, 375, 1, 0, 0, 0, 377, 376, 1, 0, 0,
		0, 378, 5, 1, 0, 0, 0, 379, 380, 3, 32, 16, 0, 380, 7, 1, 0, 0, 0, 381, 388, 3, 4, 2, 0, 382, 383, 3, 218, 109, 0,
		383, 384, 5, 116, 0, 0, 384, 385, 3, 4, 2, 0, 385, 386, 5, 117, 0, 0, 386, 388, 1, 0, 0, 0, 387, 381, 1, 0, 0, 0,
		387, 382, 1, 0, 0, 0, 388, 9, 1, 0, 0, 0, 389, 390, 5, 116, 0, 0, 390, 395, 3, 112, 56, 0, 391, 392, 5, 122, 0, 0,
		392, 394, 3, 112, 56, 0, 393, 391, 1, 0, 0, 0, 394, 397, 1, 0, 0, 0, 395, 393, 1, 0, 0, 0, 395, 396, 1, 0, 0, 0,
		396, 398, 1, 0, 0, 0, 397, 395, 1, 0, 0, 0, 398, 399, 5, 117, 0, 0, 399, 11, 1, 0, 0, 0, 400, 401, 5, 7, 0, 0, 401,
		404, 3, 14, 7, 0, 402, 403, 5, 120, 0, 0, 403, 405, 3, 16, 8, 0, 404, 402, 1, 0, 0, 0, 404, 405, 1, 0, 0, 0, 405,
		406, 1, 0, 0, 0, 406, 407, 5, 42, 0, 0, 407, 409, 3, 218, 109, 0, 408, 410, 3, 314, 157, 0, 409, 408, 1, 0, 0, 0,
		409, 410, 1, 0, 0, 0, 410, 411, 1, 0, 0, 0, 411, 412, 5, 121, 0, 0, 412, 13, 1, 0, 0, 0, 413, 414, 7, 0, 0, 0, 414,
		15, 1, 0, 0, 0, 415, 416, 3, 336, 168, 0, 416, 17, 1, 0, 0, 0, 417, 420, 5, 50, 0, 0, 418, 421, 3, 336, 168, 0, 419,
		421, 3, 276, 138, 0, 420, 418, 1, 0, 0, 0, 420, 419, 1, 0, 0, 0, 421, 19, 1, 0, 0, 0, 422, 423, 5, 10, 0, 0, 423,
		424, 5, 130, 0, 0, 424, 425, 5, 55, 0, 0, 425, 426, 5, 130, 0, 0, 426, 430, 5, 42, 0, 0, 427, 429, 3, 46, 23, 0,
		428, 427, 1, 0, 0, 0, 429, 432, 1, 0, 0, 0, 430, 428, 1, 0, 0, 0, 430, 431, 1, 0, 0, 0, 431, 433, 1, 0, 0, 0, 432,
		430, 1, 0, 0, 0, 433, 437, 5, 14, 0, 0, 434, 436, 3, 22, 11, 0, 435, 434, 1, 0, 0, 0, 436, 439, 1, 0, 0, 0, 437,
		435, 1, 0, 0, 0, 437, 438, 1, 0, 0, 0, 438, 440, 1, 0, 0, 0, 439, 437, 1, 0, 0, 0, 440, 442, 5, 25, 0, 0, 441, 443,
		5, 10, 0, 0, 442, 441, 1, 0, 0, 0, 442, 443, 1, 0, 0, 0, 443, 445, 1, 0, 0, 0, 444, 446, 5, 130, 0, 0, 445, 444, 1,
		0, 0, 0, 445, 446, 1, 0, 0, 0, 446, 447, 1, 0, 0, 0, 447, 448, 5, 121, 0, 0, 448, 21, 1, 0, 0, 0, 449, 473, 3, 50,
		25, 0, 450, 473, 3, 270, 135, 0, 451, 473, 3, 272, 136, 0, 452, 453, 5, 130, 0, 0, 453, 455, 5, 120, 0, 0, 454, 452,
		1, 0, 0, 0, 454, 455, 1, 0, 0, 0, 455, 456, 1, 0, 0, 0, 456, 473, 3, 72, 36, 0, 457, 458, 5, 130, 0, 0, 458, 460, 5,
		120, 0, 0, 459, 457, 1, 0, 0, 0, 459, 460, 1, 0, 0, 0, 460, 461, 1, 0, 0, 0, 461, 473, 3, 70, 35, 0, 462, 463, 5,
		130, 0, 0, 463, 465, 5, 120, 0, 0, 464, 462, 1, 0, 0, 0, 464, 465, 1, 0, 0, 0, 465, 467, 1, 0, 0, 0, 466, 468, 5,
		63, 0, 0, 467, 466, 1, 0, 0, 0, 467, 468, 1, 0, 0, 0, 468, 469, 1, 0, 0, 0, 469, 473, 3, 74, 37, 0, 470, 473, 3, 64,
		32, 0, 471, 473, 3, 164, 82, 0, 472, 449, 1, 0, 0, 0, 472, 450, 1, 0, 0, 0, 472, 451, 1, 0, 0, 0, 472, 454, 1, 0, 0,
		0, 472, 459, 1, 0, 0, 0, 472, 464, 1, 0, 0, 0, 472, 470, 1, 0, 0, 0, 472, 471, 1, 0, 0, 0, 473, 23, 1, 0, 0, 0, 474,
		477, 3, 350, 175, 0, 475, 477, 3, 92, 46, 0, 476, 474, 1, 0, 0, 0, 476, 475, 1, 0, 0, 0, 477, 25, 1, 0, 0, 0, 478,
		479, 5, 12, 0, 0, 479, 482, 3, 150, 75, 0, 480, 481, 5, 72, 0, 0, 481, 483, 3, 150, 75, 0, 482, 480, 1, 0, 0, 0,
		482, 483, 1, 0, 0, 0, 483, 486, 1, 0, 0, 0, 484, 485, 5, 77, 0, 0, 485, 487, 3, 150, 75, 0, 486, 484, 1, 0, 0, 0,
		486, 487, 1, 0, 0, 0, 487, 27, 1, 0, 0, 0, 488, 489, 5, 130, 0, 0, 489, 491, 5, 120, 0, 0, 490, 488, 1, 0, 0, 0,
		490, 491, 1, 0, 0, 0, 491, 492, 1, 0, 0, 0, 492, 493, 3, 26, 13, 0, 493, 494, 5, 121, 0, 0, 494, 29, 1, 0, 0, 0,
		495, 496, 3, 162, 81, 0, 496, 497, 5, 112, 0, 0, 497, 499, 1, 0, 0, 0, 498, 495, 1, 0, 0, 0, 498, 499, 1, 0, 0, 0,
		499, 500, 1, 0, 0, 0, 500, 501, 3, 8, 4, 0, 501, 31, 1, 0, 0, 0, 502, 507, 3, 30, 15, 0, 503, 504, 5, 122, 0, 0,
		504, 506, 3, 30, 15, 0, 505, 503, 1, 0, 0, 0, 506, 509, 1, 0, 0, 0, 507, 505, 1, 0, 0, 0, 507, 508, 1, 0, 0, 0, 508,
		33, 1, 0, 0, 0, 509, 507, 1, 0, 0, 0, 510, 511, 5, 13, 0, 0, 511, 512, 5, 130, 0, 0, 512, 513, 5, 120, 0, 0, 513,
		514, 3, 218, 109, 0, 514, 515, 5, 121, 0, 0, 515, 35, 1, 0, 0, 0, 516, 517, 5, 130, 0, 0, 517, 37, 1, 0, 0, 0, 518,
		520, 3, 314, 157, 0, 519, 518, 1, 0, 0, 0, 519, 520, 1, 0, 0, 0, 520, 521, 1, 0, 0, 0, 521, 522, 5, 125, 0, 0, 522,
		527, 3, 36, 18, 0, 523, 524, 5, 116, 0, 0, 524, 525, 3, 150, 75, 0, 525, 526, 5, 117, 0, 0, 526, 528, 1, 0, 0, 0,
		527, 523, 1, 0, 0, 0, 527, 528, 1, 0, 0, 0, 528, 39, 1, 0, 0, 0, 529, 530, 5, 13, 0, 0, 530, 531, 3, 36, 18, 0, 531,
		532, 5, 55, 0, 0, 532, 533, 3, 136, 68, 0, 533, 534, 5, 42, 0, 0, 534, 535, 3, 150, 75, 0, 535, 536, 5, 121, 0, 0,
		536, 41, 1, 0, 0, 0, 537, 538, 5, 92, 0, 0, 538, 540, 3, 118, 59, 0, 539, 537, 1, 0, 0, 0, 539, 540, 1, 0, 0, 0,
		540, 542, 1, 0, 0, 0, 541, 543, 3, 170, 85, 0, 542, 541, 1, 0, 0, 0, 542, 543, 1, 0, 0, 0, 543, 545, 1, 0, 0, 0,
		544, 546, 3, 258, 129, 0, 545, 544, 1, 0, 0, 0, 545, 546, 1, 0, 0, 0, 546, 43, 1, 0, 0, 0, 547, 548, 5, 31, 0, 0,
		548, 552, 3, 48, 24, 0, 549, 551, 3, 352, 176, 0, 550, 549, 1, 0, 0, 0, 551, 554, 1, 0, 0, 0, 552, 550, 1, 0, 0, 0,
		552, 553, 1, 0, 0, 0, 553, 558, 1, 0, 0, 0, 554, 552, 1, 0, 0, 0, 555, 557, 3, 86, 43, 0, 556, 555, 1, 0, 0, 0, 557,
		560, 1, 0, 0, 0, 558, 556, 1, 0, 0, 0, 558, 559, 1, 0, 0, 0, 559, 561, 1, 0, 0, 0, 560, 558, 1, 0, 0, 0, 561, 562,
		5, 25, 0, 0, 562, 563, 5, 31, 0, 0, 563, 564, 5, 121, 0, 0, 564, 45, 1, 0, 0, 0, 565, 581, 3, 322, 161, 0, 566, 581,
		3, 320, 160, 0, 567, 581, 3, 346, 173, 0, 568, 581, 3, 334, 167, 0, 569, 581, 3, 90, 45, 0, 570, 581, 3, 310, 155,
		0, 571, 581, 3, 356, 178, 0, 572, 581, 3, 154, 77, 0, 573, 581, 3, 12, 6, 0, 574, 581, 3, 62, 31, 0, 575, 581, 3,
		34, 17, 0, 576, 581, 3, 40, 20, 0, 577, 581, 3, 88, 44, 0, 578, 581, 3, 108, 54, 0, 579, 581, 3, 352, 176, 0, 580,
		565, 1, 0, 0, 0, 580, 566, 1, 0, 0, 0, 580, 567, 1, 0, 0, 0, 580, 568, 1, 0, 0, 0, 580, 569, 1, 0, 0, 0, 580, 570,
		1, 0, 0, 0, 580, 571, 1, 0, 0, 0, 580, 572, 1, 0, 0, 0, 580, 573, 1, 0, 0, 0, 580, 574, 1, 0, 0, 0, 580, 575, 1, 0,
		0, 0, 580, 576, 1, 0, 0, 0, 580, 577, 1, 0, 0, 0, 580, 578, 1, 0, 0, 0, 580, 579, 1, 0, 0, 0, 581, 47, 1, 0, 0, 0,
		582, 587, 5, 130, 0, 0, 583, 584, 5, 116, 0, 0, 584, 585, 3, 180, 90, 0, 585, 586, 5, 117, 0, 0, 586, 588, 1, 0, 0,
		0, 587, 583, 1, 0, 0, 0, 587, 588, 1, 0, 0, 0, 588, 591, 1, 0, 0, 0, 589, 591, 3, 218, 109, 0, 590, 582, 1, 0, 0, 0,
		590, 589, 1, 0, 0, 0, 591, 49, 1, 0, 0, 0, 592, 593, 5, 130, 0, 0, 593, 594, 5, 120, 0, 0, 594, 599, 5, 15, 0, 0,
		595, 596, 5, 116, 0, 0, 596, 597, 3, 150, 75, 0, 597, 598, 5, 117, 0, 0, 598, 600, 1, 0, 0, 0, 599, 595, 1, 0, 0, 0,
		599, 600, 1, 0, 0, 0, 600, 602, 1, 0, 0, 0, 601, 603, 5, 42, 0, 0, 602, 601, 1, 0, 0, 0, 602, 603, 1, 0, 0, 0, 603,
		610, 1, 0, 0, 0, 604, 608, 3, 168, 84, 0, 605, 606, 3, 170, 85, 0, 606, 607, 5, 121, 0, 0, 607, 609, 1, 0, 0, 0,
		608, 605, 1, 0, 0, 0, 608, 609, 1, 0, 0, 0, 609, 611, 1, 0, 0, 0, 610, 604, 1, 0, 0, 0, 610, 611, 1, 0, 0, 0, 611,
		618, 1, 0, 0, 0, 612, 616, 3, 256, 128, 0, 613, 614, 3, 258, 129, 0, 614, 615, 5, 121, 0, 0, 615, 617, 1, 0, 0, 0,
		616, 613, 1, 0, 0, 0, 616, 617, 1, 0, 0, 0, 617, 619, 1, 0, 0, 0, 618, 612, 1, 0, 0, 0, 618, 619, 1, 0, 0, 0, 619,
		623, 1, 0, 0, 0, 620, 622, 3, 46, 23, 0, 621, 620, 1, 0, 0, 0, 622, 625, 1, 0, 0, 0, 623, 621, 1, 0, 0, 0, 623, 624,
		1, 0, 0, 0, 624, 626, 1, 0, 0, 0, 625, 623, 1, 0, 0, 0, 626, 630, 5, 14, 0, 0, 627, 629, 3, 22, 11, 0, 628, 627, 1,
		0, 0, 0, 629, 632, 1, 0, 0, 0, 630, 628, 1, 0, 0, 0, 630, 631, 1, 0, 0, 0, 631, 633, 1, 0, 0, 0, 632, 630, 1, 0, 0,
		0, 633, 634, 5, 25, 0, 0, 634, 636, 5, 15, 0, 0, 635, 637, 5, 130, 0, 0, 636, 635, 1, 0, 0, 0, 636, 637, 1, 0, 0, 0,
		637, 638, 1, 0, 0, 0, 638, 639, 5, 121, 0, 0, 639, 51, 1, 0, 0, 0, 640, 641, 5, 130, 0, 0, 641, 643, 5, 120, 0, 0,
		642, 640, 1, 0, 0, 0, 642, 643, 1, 0, 0, 0, 643, 644, 1, 0, 0, 0, 644, 645, 5, 19, 0, 0, 645, 646, 3, 150, 75, 0,
		646, 648, 5, 42, 0, 0, 647, 649, 3, 54, 27, 0, 648, 647, 1, 0, 0, 0, 649, 650, 1, 0, 0, 0, 650, 648, 1, 0, 0, 0,
		650, 651, 1, 0, 0, 0, 651, 652, 1, 0, 0, 0, 652, 653, 5, 25, 0, 0, 653, 655, 5, 19, 0, 0, 654, 656, 5, 130, 0, 0,
		655, 654, 1, 0, 0, 0, 655, 656, 1, 0, 0, 0, 656, 657, 1, 0, 0, 0, 657, 658, 5, 121, 0, 0, 658, 53, 1, 0, 0, 0, 659,
		660, 5, 96, 0, 0, 660, 661, 3, 58, 29, 0, 661, 665, 5, 112, 0, 0, 662, 664, 3, 304, 152, 0, 663, 662, 1, 0, 0, 0,
		664, 667, 1, 0, 0, 0, 665, 663, 1, 0, 0, 0, 665, 666, 1, 0, 0, 0, 666, 55, 1, 0, 0, 0, 667, 665, 1, 0, 0, 0, 668,
		673, 5, 130, 0, 0, 669, 673, 3, 110, 55, 0, 670, 673, 3, 316, 158, 0, 671, 673, 5, 59, 0, 0, 672, 668, 1, 0, 0, 0,
		672, 669, 1, 0, 0, 0, 672, 670, 1, 0, 0, 0, 672, 671, 1, 0, 0, 0, 673, 57, 1, 0, 0, 0, 674, 679, 3, 56, 28, 0, 675,
		676, 5, 123, 0, 0, 676, 678, 3, 56, 28, 0, 677, 675, 1, 0, 0, 0, 678, 681, 1, 0, 0, 0, 679, 677, 1, 0, 0, 0, 679,
		680, 1, 0, 0, 0, 680, 59, 1, 0, 0, 0, 681, 679, 1, 0, 0, 0, 682, 683, 5, 31, 0, 0, 683, 687, 3, 66, 33, 0, 684, 685,
		3, 42, 21, 0, 685, 686, 5, 121, 0, 0, 686, 688, 1, 0, 0, 0, 687, 684, 1, 0, 0, 0, 687, 688, 1, 0, 0, 0, 688, 690, 1,
		0, 0, 0, 689, 691, 3, 44, 22, 0, 690, 689, 1, 0, 0, 0, 690, 691, 1, 0, 0, 0, 691, 692, 1, 0, 0, 0, 692, 693, 5, 25,
		0, 0, 693, 694, 5, 31, 0, 0, 694, 695, 5, 121, 0, 0, 695, 61, 1, 0, 0, 0, 696, 697, 5, 20, 0, 0, 697, 699, 5, 130,
		0, 0, 698, 700, 5, 42, 0, 0, 699, 698, 1, 0, 0, 0, 699, 700, 1, 0, 0, 0, 700, 702, 1, 0, 0, 0, 701, 703, 3, 168, 84,
		0, 702, 701, 1, 0, 0, 0, 702, 703, 1, 0, 0, 0, 703, 705, 1, 0, 0, 0, 704, 706, 3, 256, 128, 0, 705, 704, 1, 0, 0, 0,
		705, 706, 1, 0, 0, 0, 706, 707, 1, 0, 0, 0, 707, 708, 5, 25, 0, 0, 708, 710, 5, 20, 0, 0, 709, 711, 5, 130, 0, 0,
		710, 709, 1, 0, 0, 0, 710, 711, 1, 0, 0, 0, 711, 712, 1, 0, 0, 0, 712, 713, 5, 121, 0, 0, 713, 63, 1, 0, 0, 0, 714,
		715, 5, 130, 0, 0, 715, 716, 5, 120, 0, 0, 716, 718, 3, 184, 92, 0, 717, 719, 3, 170, 85, 0, 718, 717, 1, 0, 0, 0,
		718, 719, 1, 0, 0, 0, 719, 721, 1, 0, 0, 0, 720, 722, 3, 258, 129, 0, 721, 720, 1, 0, 0, 0, 721, 722, 1, 0, 0, 0,
		722, 723, 1, 0, 0, 0, 723, 724, 5, 121, 0, 0, 724, 65, 1, 0, 0, 0, 725, 726, 3, 186, 93, 0, 726, 727, 5, 120, 0, 0,
		727, 728, 3, 218, 109, 0, 728, 67, 1, 0, 0, 0, 729, 732, 3, 24, 12, 0, 730, 732, 3, 284, 142, 0, 731, 729, 1, 0, 0,
		0, 731, 730, 1, 0, 0, 0, 732, 69, 1, 0, 0, 0, 733, 734, 5, 130, 0, 0, 734, 736, 5, 120, 0, 0, 735, 733, 1, 0, 0, 0,
		735, 736, 1, 0, 0, 0, 736, 738, 1, 0, 0, 0, 737, 739, 5, 63, 0, 0, 738, 737, 1, 0, 0, 0, 738, 739, 1, 0, 0, 0, 739,
		740, 1, 0, 0, 0, 740, 741, 3, 26, 13, 0, 741, 742, 5, 121, 0, 0, 742, 71, 1, 0, 0, 0, 743, 744, 5, 130, 0, 0, 744,
		746, 5, 120, 0, 0, 745, 743, 1, 0, 0, 0, 745, 746, 1, 0, 0, 0, 746, 748, 1, 0, 0, 0, 747, 749, 5, 63, 0, 0, 748,
		747, 1, 0, 0, 0, 748, 749, 1, 0, 0, 0, 749, 750, 1, 0, 0, 0, 750, 751, 3, 262, 131, 0, 751, 752, 5, 121, 0, 0, 752,
		73, 1, 0, 0, 0, 753, 754, 5, 130, 0, 0, 754, 756, 5, 120, 0, 0, 755, 753, 1, 0, 0, 0, 755, 756, 1, 0, 0, 0, 756,
		758, 1, 0, 0, 0, 757, 759, 5, 63, 0, 0, 758, 757, 1, 0, 0, 0, 758, 759, 1, 0, 0, 0, 759, 762, 1, 0, 0, 0, 760, 763,
		3, 78, 39, 0, 761, 763, 3, 296, 148, 0, 762, 760, 1, 0, 0, 0, 762, 761, 1, 0, 0, 0, 763, 75, 1, 0, 0, 0, 764, 765,
		5, 91, 0, 0, 765, 766, 3, 150, 75, 0, 766, 77, 1, 0, 0, 0, 767, 768, 3, 340, 170, 0, 768, 769, 5, 113, 0, 0, 769,
		770, 3, 236, 118, 0, 770, 771, 3, 80, 40, 0, 771, 772, 5, 121, 0, 0, 772, 79, 1, 0, 0, 0, 773, 780, 3, 360, 180, 0,
		774, 775, 5, 96, 0, 0, 775, 778, 3, 150, 75, 0, 776, 777, 5, 27, 0, 0, 777, 779, 3, 80, 40, 0, 778, 776, 1, 0, 0, 0,
		778, 779, 1, 0, 0, 0, 779, 781, 1, 0, 0, 0, 780, 774, 1, 0, 0, 0, 780, 781, 1, 0, 0, 0, 781, 81, 1, 0, 0, 0, 782,
		783, 5, 21, 0, 0, 783, 784, 5, 130, 0, 0, 784, 785, 5, 55, 0, 0, 785, 786, 3, 218, 109, 0, 786, 790, 5, 42, 0, 0,
		787, 789, 3, 84, 42, 0, 788, 787, 1, 0, 0, 0, 789, 792, 1, 0, 0, 0, 790, 788, 1, 0, 0, 0, 790, 791, 1, 0, 0, 0, 791,
		793, 1, 0, 0, 0, 792, 790, 1, 0, 0, 0, 793, 794, 3, 44, 22, 0, 794, 796, 5, 25, 0, 0, 795, 797, 5, 21, 0, 0, 796,
		795, 1, 0, 0, 0, 796, 797, 1, 0, 0, 0, 797, 799, 1, 0, 0, 0, 798, 800, 5, 130, 0, 0, 799, 798, 1, 0, 0, 0, 799, 800,
		1, 0, 0, 0, 800, 801, 1, 0, 0, 0, 801, 802, 5, 121, 0, 0, 802, 83, 1, 0, 0, 0, 803, 806, 3, 352, 176, 0, 804, 806,
		3, 40, 20, 0, 805, 803, 1, 0, 0, 0, 805, 804, 1, 0, 0, 0, 806, 85, 1, 0, 0, 0, 807, 810, 3, 44, 22, 0, 808, 810, 3,
		60, 30, 0, 809, 807, 1, 0, 0, 0, 809, 808, 1, 0, 0, 0, 810, 87, 1, 0, 0, 0, 811, 812, 5, 31, 0, 0, 812, 813, 3, 66,
		33, 0, 813, 814, 3, 42, 21, 0, 814, 815, 5, 121, 0, 0, 815, 89, 1, 0, 0, 0, 816, 817, 5, 22, 0, 0, 817, 818, 3, 174,
		87, 0, 818, 819, 5, 120, 0, 0, 819, 822, 3, 336, 168, 0, 820, 821, 5, 114, 0, 0, 821, 823, 3, 150, 75, 0, 822, 820,
		1, 0, 0, 0, 822, 823, 1, 0, 0, 0, 823, 824, 1, 0, 0, 0, 824, 825, 5, 121, 0, 0, 825, 91, 1, 0, 0, 0, 826, 827, 5,
		11, 0, 0, 827, 828, 3, 178, 89, 0, 828, 829, 5, 55, 0, 0, 829, 830, 3, 336, 168, 0, 830, 93, 1, 0, 0, 0, 831, 834,
		3, 282, 141, 0, 832, 834, 3, 178, 89, 0, 833, 831, 1, 0, 0, 0, 833, 832, 1, 0, 0, 0, 834, 95, 1, 0, 0, 0, 835, 838,
		3, 208, 104, 0, 836, 838, 3, 352, 176, 0, 837, 835, 1, 0, 0, 0, 837, 836, 1, 0, 0, 0, 838, 97, 1, 0, 0, 0, 839, 846,
		5, 87, 0, 0, 840, 841, 5, 68, 0, 0, 841, 843, 3, 150, 75, 0, 842, 840, 1, 0, 0, 0, 842, 843, 1, 0, 0, 0, 843, 844,
		1, 0, 0, 0, 844, 846, 5, 40, 0, 0, 845, 839, 1, 0, 0, 0, 845, 842, 1, 0, 0, 0, 846, 99, 1, 0, 0, 0, 847, 849, 3,
		102, 51, 0, 848, 847, 1, 0, 0, 0, 849, 852, 1, 0, 0, 0, 850, 848, 1, 0, 0, 0, 850, 851, 1, 0, 0, 0, 851, 853, 1, 0,
		0, 0, 852, 850, 1, 0, 0, 0, 853, 854, 5, 0, 0, 1, 854, 101, 1, 0, 0, 0, 855, 857, 3, 96, 48, 0, 856, 855, 1, 0, 0,
		0, 857, 860, 1, 0, 0, 0, 858, 856, 1, 0, 0, 0, 858, 859, 1, 0, 0, 0, 859, 861, 1, 0, 0, 0, 860, 858, 1, 0, 0, 0,
		861, 862, 3, 210, 105, 0, 862, 103, 1, 0, 0, 0, 863, 864, 7, 1, 0, 0, 864, 105, 1, 0, 0, 0, 865, 866, 7, 2, 0, 0,
		866, 107, 1, 0, 0, 0, 867, 868, 5, 23, 0, 0, 868, 869, 3, 172, 86, 0, 869, 870, 5, 6, 0, 0, 870, 871, 3, 150, 75, 0,
		871, 872, 5, 121, 0, 0, 872, 109, 1, 0, 0, 0, 873, 876, 3, 278, 139, 0, 874, 876, 3, 336, 168, 0, 875, 873, 1, 0, 0,
		0, 875, 874, 1, 0, 0, 0, 876, 111, 1, 0, 0, 0, 877, 878, 3, 58, 29, 0, 878, 879, 5, 112, 0, 0, 879, 881, 1, 0, 0, 0,
		880, 877, 1, 0, 0, 0, 880, 881, 1, 0, 0, 0, 881, 882, 1, 0, 0, 0, 882, 883, 3, 150, 75, 0, 883, 113, 1, 0, 0, 0,
		884, 885, 3, 174, 87, 0, 885, 886, 5, 120, 0, 0, 886, 887, 3, 116, 58, 0, 887, 888, 5, 121, 0, 0, 888, 115, 1, 0, 0,
		0, 889, 890, 3, 336, 168, 0, 890, 117, 1, 0, 0, 0, 891, 892, 5, 26, 0, 0, 892, 896, 3, 218, 109, 0, 893, 894, 5,
		116, 0, 0, 894, 895, 5, 130, 0, 0, 895, 897, 5, 117, 0, 0, 896, 893, 1, 0, 0, 0, 896, 897, 1, 0, 0, 0, 897, 902, 1,
		0, 0, 0, 898, 899, 5, 21, 0, 0, 899, 902, 3, 218, 109, 0, 900, 902, 5, 57, 0, 0, 901, 891, 1, 0, 0, 0, 901, 898, 1,
		0, 0, 0, 901, 900, 1, 0, 0, 0, 902, 119, 1, 0, 0, 0, 903, 904, 7, 3, 0, 0, 904, 121, 1, 0, 0, 0, 905, 907, 3, 120,
		60, 0, 906, 908, 5, 115, 0, 0, 907, 906, 1, 0, 0, 0, 907, 908, 1, 0, 0, 0, 908, 123, 1, 0, 0, 0, 909, 914, 3, 122,
		61, 0, 910, 911, 5, 122, 0, 0, 911, 913, 3, 122, 61, 0, 912, 910, 1, 0, 0, 0, 913, 916, 1, 0, 0, 0, 914, 912, 1, 0,
		0, 0, 914, 915, 1, 0, 0, 0, 915, 125, 1, 0, 0, 0, 916, 914, 1, 0, 0, 0, 917, 918, 5, 26, 0, 0, 918, 919, 5, 130, 0,
		0, 919, 921, 5, 42, 0, 0, 920, 922, 3, 168, 84, 0, 921, 920, 1, 0, 0, 0, 921, 922, 1, 0, 0, 0, 922, 924, 1, 0, 0, 0,
		923, 925, 3, 256, 128, 0, 924, 923, 1, 0, 0, 0, 924, 925, 1, 0, 0, 0, 925, 926, 1, 0, 0, 0, 926, 929, 3, 130, 65, 0,
		927, 928, 5, 14, 0, 0, 928, 930, 3, 140, 70, 0, 929, 927, 1, 0, 0, 0, 929, 930, 1, 0, 0, 0, 930, 931, 1, 0, 0, 0,
		931, 933, 5, 25, 0, 0, 932, 934, 5, 26, 0, 0, 933, 932, 1, 0, 0, 0, 933, 934, 1, 0, 0, 0, 934, 936, 1, 0, 0, 0, 935,
		937, 5, 130, 0, 0, 936, 935, 1, 0, 0, 0, 936, 937, 1, 0, 0, 0, 937, 938, 1, 0, 0, 0, 938, 939, 5, 121, 0, 0, 939,
		127, 1, 0, 0, 0, 940, 954, 3, 322, 161, 0, 941, 954, 3, 320, 160, 0, 942, 954, 3, 346, 173, 0, 943, 954, 3, 334,
		167, 0, 944, 954, 3, 90, 45, 0, 945, 954, 3, 310, 155, 0, 946, 954, 3, 356, 178, 0, 947, 954, 3, 154, 77, 0, 948,
		954, 3, 12, 6, 0, 949, 954, 3, 34, 17, 0, 950, 954, 3, 40, 20, 0, 951, 954, 3, 108, 54, 0, 952, 954, 3, 352, 176, 0,
		953, 940, 1, 0, 0, 0, 953, 941, 1, 0, 0, 0, 953, 942, 1, 0, 0, 0, 953, 943, 1, 0, 0, 0, 953, 944, 1, 0, 0, 0, 953,
		945, 1, 0, 0, 0, 953, 946, 1, 0, 0, 0, 953, 947, 1, 0, 0, 0, 953, 948, 1, 0, 0, 0, 953, 949, 1, 0, 0, 0, 953, 950,
		1, 0, 0, 0, 953, 951, 1, 0, 0, 0, 953, 952, 1, 0, 0, 0, 954, 129, 1, 0, 0, 0, 955, 957, 3, 128, 64, 0, 956, 955, 1,
		0, 0, 0, 957, 960, 1, 0, 0, 0, 958, 956, 1, 0, 0, 0, 958, 959, 1, 0, 0, 0, 959, 131, 1, 0, 0, 0, 960, 958, 1, 0, 0,
		0, 961, 963, 3, 142, 71, 0, 962, 964, 3, 314, 157, 0, 963, 962, 1, 0, 0, 0, 963, 964, 1, 0, 0, 0, 964, 133, 1, 0, 0,
		0, 965, 970, 3, 132, 66, 0, 966, 967, 5, 122, 0, 0, 967, 969, 3, 132, 66, 0, 968, 966, 1, 0, 0, 0, 969, 972, 1, 0,
		0, 0, 970, 968, 1, 0, 0, 0, 970, 971, 1, 0, 0, 0, 971, 976, 1, 0, 0, 0, 972, 970, 1, 0, 0, 0, 973, 976, 5, 59, 0, 0,
		974, 976, 5, 8, 0, 0, 975, 965, 1, 0, 0, 0, 975, 973, 1, 0, 0, 0, 975, 974, 1, 0, 0, 0, 976, 135, 1, 0, 0, 0, 977,
		978, 3, 134, 67, 0, 978, 979, 5, 120, 0, 0, 979, 980, 3, 120, 60, 0, 980, 137, 1, 0, 0, 0, 981, 986, 3, 70, 35, 0,
		982, 986, 3, 270, 135, 0, 983, 986, 3, 272, 136, 0, 984, 986, 3, 72, 36, 0, 985, 981, 1, 0, 0, 0, 985, 982, 1, 0, 0,
		0, 985, 983, 1, 0, 0, 0, 985, 984, 1, 0, 0, 0, 986, 139, 1, 0, 0, 0, 987, 989, 3, 138, 69, 0, 988, 987, 1, 0, 0, 0,
		989, 992, 1, 0, 0, 0, 990, 988, 1, 0, 0, 0, 990, 991, 1, 0, 0, 0, 991, 141, 1, 0, 0, 0, 992, 990, 1, 0, 0, 0, 993,
		994, 7, 0, 0, 0, 994, 143, 1, 0, 0, 0, 995, 996, 7, 4, 0, 0, 996, 145, 1, 0, 0, 0, 997, 998, 5, 116, 0, 0, 998,
		1003, 3, 144, 72, 0, 999, 1000, 5, 122, 0, 0, 1000, 1002, 3, 144, 72, 0, 1001, 999, 1, 0, 0, 0, 1002, 1005, 1, 0, 0,
		0, 1003, 1001, 1, 0, 0, 0, 1003, 1004, 1, 0, 0, 0, 1004, 1006, 1, 0, 0, 0, 1005, 1003, 1, 0, 0, 0, 1006, 1007, 5,
		117, 0, 0, 1007, 147, 1, 0, 0, 0, 1008, 1009, 5, 130, 0, 0, 1009, 1011, 5, 120, 0, 0, 1010, 1008, 1, 0, 0, 0, 1010,
		1011, 1, 0, 0, 0, 1011, 1012, 1, 0, 0, 0, 1012, 1014, 5, 29, 0, 0, 1013, 1015, 5, 130, 0, 0, 1014, 1013, 1, 0, 0, 0,
		1014, 1015, 1, 0, 0, 0, 1015, 1018, 1, 0, 0, 0, 1016, 1017, 5, 96, 0, 0, 1017, 1019, 3, 150, 75, 0, 1018, 1016, 1,
		0, 0, 0, 1018, 1019, 1, 0, 0, 0, 1019, 1020, 1, 0, 0, 0, 1020, 1021, 5, 121, 0, 0, 1021, 149, 1, 0, 0, 0, 1022,
		1027, 3, 286, 143, 0, 1023, 1024, 7, 5, 0, 0, 1024, 1026, 3, 286, 143, 0, 1025, 1023, 1, 0, 0, 0, 1026, 1029, 1, 0,
		0, 0, 1027, 1025, 1, 0, 0, 0, 1027, 1028, 1, 0, 0, 0, 1028, 151, 1, 0, 0, 0, 1029, 1027, 1, 0, 0, 0, 1030, 1033, 3,
		260, 130, 0, 1031, 1032, 5, 110, 0, 0, 1032, 1034, 3, 260, 130, 0, 1033, 1031, 1, 0, 0, 0, 1033, 1034, 1, 0, 0, 0,
		1034, 1040, 1, 0, 0, 0, 1035, 1036, 5, 4, 0, 0, 1036, 1040, 3, 260, 130, 0, 1037, 1038, 5, 53, 0, 0, 1038, 1040, 3,
		260, 130, 0, 1039, 1030, 1, 0, 0, 0, 1039, 1035, 1, 0, 0, 0, 1039, 1037, 1, 0, 0, 0, 1040, 153, 1, 0, 0, 0, 1041,
		1042, 5, 30, 0, 0, 1042, 1043, 3, 174, 87, 0, 1043, 1044, 5, 120, 0, 0, 1044, 1046, 3, 336, 168, 0, 1045, 1047, 3,
		156, 78, 0, 1046, 1045, 1, 0, 0, 0, 1046, 1047, 1, 0, 0, 0, 1047, 1048, 1, 0, 0, 0, 1048, 1049, 5, 121, 0, 0, 1049,
		155, 1, 0, 0, 0, 1050, 1051, 5, 57, 0, 0, 1051, 1053, 3, 150, 75, 0, 1052, 1050, 1, 0, 0, 0, 1052, 1053, 1, 0, 0, 0,
		1053, 1054, 1, 0, 0, 0, 1054, 1055, 5, 42, 0, 0, 1055, 1056, 3, 150, 75, 0, 1056, 157, 1, 0, 0, 0, 1057, 1058, 5,
		30, 0, 0, 1058, 1059, 5, 55, 0, 0, 1059, 1060, 3, 336, 168, 0, 1060, 159, 1, 0, 0, 0, 1061, 1062, 3, 198, 99, 0,
		1062, 161, 1, 0, 0, 0, 1063, 1070, 5, 130, 0, 0, 1064, 1065, 5, 130, 0, 0, 1065, 1066, 5, 116, 0, 0, 1066, 1067, 3,
		280, 140, 0, 1067, 1068, 5, 117, 0, 0, 1068, 1070, 1, 0, 0, 0, 1069, 1063, 1, 0, 0, 0, 1069, 1064, 1, 0, 0, 0, 1070,
		163, 1, 0, 0, 0, 1071, 1072, 5, 130, 0, 0, 1072, 1073, 5, 120, 0, 0, 1073, 1074, 3, 166, 83, 0, 1074, 1082, 5, 33,
		0, 0, 1075, 1077, 3, 46, 23, 0, 1076, 1075, 1, 0, 0, 0, 1077, 1080, 1, 0, 0, 0, 1078, 1076, 1, 0, 0, 0, 1078, 1079,
		1, 0, 0, 0, 1079, 1081, 1, 0, 0, 0, 1080, 1078, 1, 0, 0, 0, 1081, 1083, 5, 14, 0, 0, 1082, 1078, 1, 0, 0, 0, 1082,
		1083, 1, 0, 0, 0, 1083, 1087, 1, 0, 0, 0, 1084, 1086, 3, 22, 11, 0, 1085, 1084, 1, 0, 0, 0, 1086, 1089, 1, 0, 0, 0,
		1087, 1085, 1, 0, 0, 0, 1087, 1088, 1, 0, 0, 0, 1088, 1090, 1, 0, 0, 0, 1089, 1087, 1, 0, 0, 0, 1090, 1091, 5, 25,
		0, 0, 1091, 1093, 5, 33, 0, 0, 1092, 1094, 5, 130, 0, 0, 1093, 1092, 1, 0, 0, 0, 1093, 1094, 1, 0, 0, 0, 1094, 1095,
		1, 0, 0, 0, 1095, 1096, 5, 121, 0, 0, 1096, 165, 1, 0, 0, 0, 1097, 1098, 5, 31, 0, 0, 1098, 1102, 3, 246, 123, 0,
		1099, 1100, 5, 37, 0, 0, 1100, 1102, 3, 150, 75, 0, 1101, 1097, 1, 0, 0, 0, 1101, 1099, 1, 0, 0, 0, 1102, 167, 1, 0,
		0, 0, 1103, 1104, 5, 34, 0, 0, 1104, 1105, 5, 116, 0, 0, 1105, 1110, 3, 188, 94, 0, 1106, 1107, 5, 121, 0, 0, 1107,
		1109, 3, 188, 94, 0, 1108, 1106, 1, 0, 0, 0, 1109, 1112, 1, 0, 0, 0, 1110, 1108, 1, 0, 0, 0, 1110, 1111, 1, 0, 0, 0,
		1111, 1113, 1, 0, 0, 0, 1112, 1110, 1, 0, 0, 0, 1113, 1114, 5, 117, 0, 0, 1114, 1115, 5, 121, 0, 0, 1115, 169, 1, 0,
		0, 0, 1116, 1117, 5, 34, 0, 0, 1117, 1118, 5, 47, 0, 0, 1118, 1119, 5, 116, 0, 0, 1119, 1120, 3, 32, 16, 0, 1120,
		1121, 5, 117, 0, 0, 1121, 171, 1, 0, 0, 0, 1122, 1123, 3, 312, 156, 0, 1123, 1124, 5, 120, 0, 0, 1124, 1125, 3, 218,
		109, 0, 1125, 173, 1, 0, 0, 0, 1126, 1131, 5, 130, 0, 0, 1127, 1128, 5, 122, 0, 0, 1128, 1130, 5, 130, 0, 0, 1129,
		1127, 1, 0, 0, 0, 1130, 1133, 1, 0, 0, 0, 1131, 1129, 1, 0, 0, 0, 1131, 1132, 1, 0, 0, 0, 1132, 175, 1, 0, 0, 0,
		1133, 1131, 1, 0, 0, 0, 1134, 1135, 5, 130, 0, 0, 1135, 1137, 5, 120, 0, 0, 1136, 1134, 1, 0, 0, 0, 1136, 1137, 1,
		0, 0, 0, 1137, 1138, 1, 0, 0, 0, 1138, 1139, 5, 37, 0, 0, 1139, 1140, 3, 150, 75, 0, 1140, 1144, 5, 85, 0, 0, 1141,
		1143, 3, 304, 152, 0, 1142, 1141, 1, 0, 0, 0, 1143, 1146, 1, 0, 0, 0, 1144, 1142, 1, 0, 0, 0, 1144, 1145, 1, 0, 0,
		0, 1145, 1158, 1, 0, 0, 0, 1146, 1144, 1, 0, 0, 0, 1147, 1148, 5, 28, 0, 0, 1148, 1149, 3, 150, 75, 0, 1149, 1153,
		5, 85, 0, 0, 1150, 1152, 3, 304, 152, 0, 1151, 1150, 1, 0, 0, 0, 1152, 1155, 1, 0, 0, 0, 1153, 1151, 1, 0, 0, 0,
		1153, 1154, 1, 0, 0, 0, 1154, 1157, 1, 0, 0, 0, 1155, 1153, 1, 0, 0, 0, 1156, 1147, 1, 0, 0, 0, 1157, 1160, 1, 0, 0,
		0, 1158, 1156, 1, 0, 0, 0, 1158, 1159, 1, 0, 0, 0, 1159, 1168, 1, 0, 0, 0, 1160, 1158, 1, 0, 0, 0, 1161, 1165, 5,
		27, 0, 0, 1162, 1164, 3, 304, 152, 0, 1163, 1162, 1, 0, 0, 0, 1164, 1167, 1, 0, 0, 0, 1165, 1163, 1, 0, 0, 0, 1165,
		1166, 1, 0, 0, 0, 1166, 1169, 1, 0, 0, 0, 1167, 1165, 1, 0, 0, 0, 1168, 1161, 1, 0, 0, 0, 1168, 1169, 1, 0, 0, 0,
		1169, 1170, 1, 0, 0, 0, 1170, 1171, 5, 25, 0, 0, 1171, 1173, 5, 37, 0, 0, 1172, 1174, 5, 130, 0, 0, 1173, 1172, 1,
		0, 0, 0, 1173, 1174, 1, 0, 0, 0, 1174, 1175, 1, 0, 0, 0, 1175, 1176, 5, 121, 0, 0, 1176, 177, 1, 0, 0, 0, 1177,
		1178, 5, 116, 0, 0, 1178, 1183, 3, 110, 55, 0, 1179, 1180, 5, 122, 0, 0, 1180, 1182, 3, 110, 55, 0, 1181, 1179, 1,
		0, 0, 0, 1182, 1185, 1, 0, 0, 0, 1183, 1181, 1, 0, 0, 0, 1183, 1184, 1, 0, 0, 0, 1184, 1186, 1, 0, 0, 0, 1185, 1183,
		1, 0, 0, 0, 1186, 1187, 5, 117, 0, 0, 1187, 179, 1, 0, 0, 0, 1188, 1191, 3, 110, 55, 0, 1189, 1191, 3, 150, 75, 0,
		1190, 1188, 1, 0, 0, 0, 1190, 1189, 1, 0, 0, 0, 1191, 181, 1, 0, 0, 0, 1192, 1193, 3, 218, 109, 0, 1193, 1194, 5,
		67, 0, 0, 1194, 1195, 5, 115, 0, 0, 1195, 183, 1, 0, 0, 0, 1196, 1198, 5, 20, 0, 0, 1197, 1196, 1, 0, 0, 0, 1197,
		1198, 1, 0, 0, 0, 1198, 1199, 1, 0, 0, 0, 1199, 1210, 3, 218, 109, 0, 1200, 1201, 5, 26, 0, 0, 1201, 1205, 3, 218,
		109, 0, 1202, 1203, 5, 116, 0, 0, 1203, 1204, 5, 130, 0, 0, 1204, 1206, 5, 117, 0, 0, 1205, 1202, 1, 0, 0, 0, 1205,
		1206, 1, 0, 0, 0, 1206, 1210, 1, 0, 0, 0, 1207, 1208, 5, 21, 0, 0, 1208, 1210, 3, 218, 109, 0, 1209, 1197, 1, 0, 0,
		0, 1209, 1200, 1, 0, 0, 0, 1209, 1207, 1, 0, 0, 0, 1210, 185, 1, 0, 0, 0, 1211, 1216, 5, 130, 0, 0, 1212, 1213, 5,
		122, 0, 0, 1213, 1215, 5, 130, 0, 0, 1214, 1212, 1, 0, 0, 0, 1215, 1218, 1, 0, 0, 0, 1216, 1214, 1, 0, 0, 0, 1216,
		1217, 1, 0, 0, 0, 1217, 1222, 1, 0, 0, 0, 1218, 1216, 1, 0, 0, 0, 1219, 1222, 5, 59, 0, 0, 1220, 1222, 5, 8, 0, 0,
		1221, 1211, 1, 0, 0, 0, 1221, 1219, 1, 0, 0, 0, 1221, 1220, 1, 0, 0, 0, 1222, 187, 1, 0, 0, 0, 1223, 1225, 5, 22, 0,
		0, 1224, 1223, 1, 0, 0, 0, 1224, 1225, 1, 0, 0, 0, 1225, 1226, 1, 0, 0, 0, 1226, 1227, 3, 174, 87, 0, 1227, 1229, 5,
		120, 0, 0, 1228, 1230, 5, 39, 0, 0, 1229, 1228, 1, 0, 0, 0, 1229, 1230, 1, 0, 0, 0, 1230, 1231, 1, 0, 0, 0, 1231,
		1234, 3, 336, 168, 0, 1232, 1233, 5, 114, 0, 0, 1233, 1235, 3, 150, 75, 0, 1234, 1232, 1, 0, 0, 0, 1234, 1235, 1, 0,
		0, 0, 1235, 189, 1, 0, 0, 0, 1236, 1241, 3, 188, 94, 0, 1237, 1241, 3, 202, 101, 0, 1238, 1241, 3, 204, 102, 0,
		1239, 1241, 3, 194, 97, 0, 1240, 1236, 1, 0, 0, 0, 1240, 1237, 1, 0, 0, 0, 1240, 1238, 1, 0, 0, 0, 1240, 1239, 1, 0,
		0, 0, 1241, 191, 1, 0, 0, 0, 1242, 1243, 3, 190, 95, 0, 1243, 193, 1, 0, 0, 0, 1244, 1245, 5, 30, 0, 0, 1245, 1246,
		3, 174, 87, 0, 1246, 1247, 5, 120, 0, 0, 1247, 1248, 3, 336, 168, 0, 1248, 195, 1, 0, 0, 0, 1249, 1254, 3, 202, 101,
		0, 1250, 1251, 5, 121, 0, 0, 1251, 1253, 3, 202, 101, 0, 1252, 1250, 1, 0, 0, 0, 1253, 1256, 1, 0, 0, 0, 1254, 1252,
		1, 0, 0, 0, 1254, 1255, 1, 0, 0, 0, 1255, 197, 1, 0, 0, 0, 1256, 1254, 1, 0, 0, 0, 1257, 1262, 3, 192, 96, 0, 1258,
		1259, 5, 121, 0, 0, 1259, 1261, 3, 192, 96, 0, 1260, 1258, 1, 0, 0, 0, 1261, 1264, 1, 0, 0, 0, 1262, 1260, 1, 0, 0,
		0, 1262, 1263, 1, 0, 0, 0, 1263, 199, 1, 0, 0, 0, 1264, 1262, 1, 0, 0, 0, 1265, 1266, 3, 174, 87, 0, 1266, 1268, 5,
		120, 0, 0, 1267, 1269, 3, 216, 108, 0, 1268, 1267, 1, 0, 0, 0, 1268, 1269, 1, 0, 0, 0, 1269, 1270, 1, 0, 0, 0, 1270,
		1272, 3, 336, 168, 0, 1271, 1273, 5, 18, 0, 0, 1272, 1271, 1, 0, 0, 0, 1272, 1273, 1, 0, 0, 0, 1273, 1276, 1, 0, 0,
		0, 1274, 1275, 5, 114, 0, 0, 1275, 1277, 3, 150, 75, 0, 1276, 1274, 1, 0, 0, 0, 1276, 1277, 1, 0, 0, 0, 1277, 201,
		1, 0, 0, 0, 1278, 1279, 5, 79, 0, 0, 1279, 1280, 3, 174, 87, 0, 1280, 1282, 5, 120, 0, 0, 1281, 1283, 3, 216, 108,
		0, 1282, 1281, 1, 0, 0, 0, 1282, 1283, 1, 0, 0, 0, 1283, 1284, 1, 0, 0, 0, 1284, 1286, 3, 336, 168, 0, 1285, 1287,
		5, 18, 0, 0, 1286, 1285, 1, 0, 0, 0, 1286, 1287, 1, 0, 0, 0, 1287, 1290, 1, 0, 0, 0, 1288, 1289, 5, 114, 0, 0, 1289,
		1291, 3, 150, 75, 0, 1290, 1288, 1, 0, 0, 0, 1290, 1291, 1, 0, 0, 0, 1291, 203, 1, 0, 0, 0, 1292, 1294, 5, 93, 0, 0,
		1293, 1292, 1, 0, 0, 0, 1293, 1294, 1, 0, 0, 0, 1294, 1295, 1, 0, 0, 0, 1295, 1296, 3, 174, 87, 0, 1296, 1298, 5,
		120, 0, 0, 1297, 1299, 3, 216, 108, 0, 1298, 1297, 1, 0, 0, 0, 1298, 1299, 1, 0, 0, 0, 1299, 1300, 1, 0, 0, 0, 1300,
		1303, 3, 336, 168, 0, 1301, 1302, 5, 114, 0, 0, 1302, 1304, 3, 150, 75, 0, 1303, 1301, 1, 0, 0, 0, 1303, 1304, 1, 0,
		0, 0, 1304, 205, 1, 0, 0, 0, 1305, 1306, 5, 97, 0, 0, 1306, 1310, 3, 150, 75, 0, 1307, 1308, 5, 31, 0, 0, 1308,
		1310, 3, 246, 123, 0, 1309, 1305, 1, 0, 0, 0, 1309, 1307, 1, 0, 0, 0, 1310, 207, 1, 0, 0, 0, 1311, 1312, 5, 44, 0,
		0, 1312, 1317, 5, 130, 0, 0, 1313, 1314, 5, 122, 0, 0, 1314, 1316, 5, 130, 0, 0, 1315, 1313, 1, 0, 0, 0, 1316, 1319,
		1, 0, 0, 0, 1317, 1315, 1, 0, 0, 0, 1317, 1318, 1, 0, 0, 0, 1318, 1320, 1, 0, 0, 0, 1319, 1317, 1, 0, 0, 0, 1320,
		1321, 5, 121, 0, 0, 1321, 209, 1, 0, 0, 0, 1322, 1328, 3, 126, 63, 0, 1323, 1328, 3, 82, 41, 0, 1324, 1328, 3, 242,
		121, 0, 1325, 1328, 3, 20, 10, 0, 1326, 1328, 3, 238, 119, 0, 1327, 1322, 1, 0, 0, 0, 1327, 1323, 1, 0, 0, 0, 1327,
		1324, 1, 0, 0, 0, 1327, 1325, 1, 0, 0, 0, 1327, 1326, 1, 0, 0, 0, 1328, 211, 1, 0, 0, 0, 1329, 1335, 5, 54, 0, 0,
		1330, 1335, 5, 127, 0, 0, 1331, 1335, 5, 129, 0, 0, 1332, 1335, 3, 144, 72, 0, 1333, 1335, 3, 232, 116, 0, 1334,
		1329, 1, 0, 0, 0, 1334, 1330, 1, 0, 0, 0, 1334, 1331, 1, 0, 0, 0, 1334, 1332, 1, 0, 0, 0, 1334, 1333, 1, 0, 0, 0,
		1335, 213, 1, 0, 0, 0, 1336, 1337, 5, 130, 0, 0, 1337, 1339, 5, 120, 0, 0, 1338, 1336, 1, 0, 0, 0, 1338, 1339, 1, 0,
		0, 0, 1339, 1341, 1, 0, 0, 0, 1340, 1342, 3, 206, 103, 0, 1341, 1340, 1, 0, 0, 0, 1341, 1342, 1, 0, 0, 0, 1342,
		1343, 1, 0, 0, 0, 1343, 1347, 5, 46, 0, 0, 1344, 1346, 3, 304, 152, 0, 1345, 1344, 1, 0, 0, 0, 1346, 1349, 1, 0, 0,
		0, 1347, 1345, 1, 0, 0, 0, 1347, 1348, 1, 0, 0, 0, 1348, 1350, 1, 0, 0, 0, 1349, 1347, 1, 0, 0, 0, 1350, 1351, 5,
		25, 0, 0, 1351, 1353, 5, 46, 0, 0, 1352, 1354, 5, 130, 0, 0, 1353, 1352, 1, 0, 0, 0, 1353, 1354, 1, 0, 0, 0, 1354,
		1355, 1, 0, 0, 0, 1355, 1356, 5, 121, 0, 0, 1356, 215, 1, 0, 0, 0, 1357, 1358, 7, 6, 0, 0, 1358, 217, 1, 0, 0, 0,
		1359, 1363, 7, 1, 0, 0, 1360, 1362, 3, 220, 110, 0, 1361, 1360, 1, 0, 0, 0, 1362, 1365, 1, 0, 0, 0, 1363, 1361, 1,
		0, 0, 0, 1363, 1364, 1, 0, 0, 0, 1364, 219, 1, 0, 0, 0, 1365, 1363, 1, 0, 0, 0, 1366, 1371, 3, 224, 112, 0, 1367,
		1371, 3, 226, 113, 0, 1368, 1371, 3, 228, 114, 0, 1369, 1371, 3, 38, 19, 0, 1370, 1366, 1, 0, 0, 0, 1370, 1367, 1,
		0, 0, 0, 1370, 1368, 1, 0, 0, 0, 1370, 1369, 1, 0, 0, 0, 1371, 221, 1, 0, 0, 0, 1372, 1377, 5, 130, 0, 0, 1373,
		1374, 5, 124, 0, 0, 1374, 1376, 3, 338, 169, 0, 1375, 1373, 1, 0, 0, 0, 1376, 1379, 1, 0, 0, 0, 1377, 1375, 1, 0, 0,
		0, 1377, 1378, 1, 0, 0, 0, 1378, 223, 1, 0, 0, 0, 1379, 1377, 1, 0, 0, 0, 1380, 1381, 5, 124, 0, 0, 1381, 1383, 3,
		338, 169, 0, 1382, 1380, 1, 0, 0, 0, 1383, 1384, 1, 0, 0, 0, 1384, 1382, 1, 0, 0, 0, 1384, 1385, 1, 0, 0, 0, 1385,
		225, 1, 0, 0, 0, 1386, 1387, 5, 116, 0, 0, 1387, 1388, 3, 6, 3, 0, 1388, 1389, 5, 117, 0, 0, 1389, 227, 1, 0, 0, 0,
		1390, 1391, 5, 116, 0, 0, 1391, 1392, 3, 110, 55, 0, 1392, 1393, 5, 117, 0, 0, 1393, 229, 1, 0, 0, 0, 1394, 1395, 5,
		130, 0, 0, 1395, 1397, 5, 120, 0, 0, 1396, 1394, 1, 0, 0, 0, 1396, 1397, 1, 0, 0, 0, 1397, 1398, 1, 0, 0, 0, 1398,
		1400, 5, 51, 0, 0, 1399, 1401, 5, 130, 0, 0, 1400, 1399, 1, 0, 0, 0, 1400, 1401, 1, 0, 0, 0, 1401, 1404, 1, 0, 0, 0,
		1402, 1403, 5, 96, 0, 0, 1403, 1405, 3, 150, 75, 0, 1404, 1402, 1, 0, 0, 0, 1404, 1405, 1, 0, 0, 0, 1405, 1406, 1,
		0, 0, 0, 1406, 1407, 5, 121, 0, 0, 1407, 231, 1, 0, 0, 0, 1408, 1411, 5, 126, 0, 0, 1409, 1411, 3, 252, 126, 0,
		1410, 1408, 1, 0, 0, 0, 1410, 1409, 1, 0, 0, 0, 1411, 233, 1, 0, 0, 0, 1412, 1417, 3, 90, 45, 0, 1413, 1417, 3, 310,
		155, 0, 1414, 1417, 3, 356, 178, 0, 1415, 1417, 3, 154, 77, 0, 1416, 1412, 1, 0, 0, 0, 1416, 1413, 1, 0, 0, 0, 1416,
		1414, 1, 0, 0, 0, 1416, 1415, 1, 0, 0, 0, 1417, 235, 1, 0, 0, 0, 1418, 1420, 5, 36, 0, 0, 1419, 1418, 1, 0, 0, 0,
		1419, 1420, 1, 0, 0, 0, 1420, 1422, 1, 0, 0, 0, 1421, 1423, 3, 98, 49, 0, 1422, 1421, 1, 0, 0, 0, 1422, 1423, 1, 0,
		0, 0, 1423, 237, 1, 0, 0, 0, 1424, 1425, 5, 61, 0, 0, 1425, 1426, 5, 16, 0, 0, 1426, 1427, 5, 130, 0, 0, 1427, 1431,
		5, 42, 0, 0, 1428, 1430, 3, 244, 122, 0, 1429, 1428, 1, 0, 0, 0, 1430, 1433, 1, 0, 0, 0, 1431, 1429, 1, 0, 0, 0,
		1431, 1432, 1, 0, 0, 0, 1432, 1434, 1, 0, 0, 0, 1433, 1431, 1, 0, 0, 0, 1434, 1437, 5, 25, 0, 0, 1435, 1436, 5, 61,
		0, 0, 1436, 1438, 5, 16, 0, 0, 1437, 1435, 1, 0, 0, 0, 1437, 1438, 1, 0, 0, 0, 1438, 1440, 1, 0, 0, 0, 1439, 1441,
		5, 130, 0, 0, 1440, 1439, 1, 0, 0, 0, 1440, 1441, 1, 0, 0, 0, 1441, 1442, 1, 0, 0, 0, 1442, 1443, 5, 121, 0, 0,
		1443, 239, 1, 0, 0, 0, 1444, 1454, 3, 322, 161, 0, 1445, 1454, 3, 320, 160, 0, 1446, 1454, 3, 346, 173, 0, 1447,
		1454, 3, 334, 167, 0, 1448, 1454, 3, 90, 45, 0, 1449, 1454, 3, 356, 178, 0, 1450, 1454, 3, 154, 77, 0, 1451, 1454,
		3, 12, 6, 0, 1452, 1454, 3, 352, 176, 0, 1453, 1444, 1, 0, 0, 0, 1453, 1445, 1, 0, 0, 0, 1453, 1446, 1, 0, 0, 0,
		1453, 1447, 1, 0, 0, 0, 1453, 1448, 1, 0, 0, 0, 1453, 1449, 1, 0, 0, 0, 1453, 1450, 1, 0, 0, 0, 1453, 1451, 1, 0, 0,
		0, 1453, 1452, 1, 0, 0, 0, 1454, 241, 1, 0, 0, 0, 1455, 1456, 5, 61, 0, 0, 1456, 1457, 5, 130, 0, 0, 1457, 1461, 5,
		42, 0, 0, 1458, 1460, 3, 240, 120, 0, 1459, 1458, 1, 0, 0, 0, 1460, 1463, 1, 0, 0, 0, 1461, 1459, 1, 0, 0, 0, 1461,
		1462, 1, 0, 0, 0, 1462, 1464, 1, 0, 0, 0, 1463, 1461, 1, 0, 0, 0, 1464, 1466, 5, 25, 0, 0, 1465, 1467, 5, 61, 0, 0,
		1466, 1465, 1, 0, 0, 0, 1466, 1467, 1, 0, 0, 0, 1467, 1469, 1, 0, 0, 0, 1468, 1470, 5, 130, 0, 0, 1469, 1468, 1, 0,
		0, 0, 1469, 1470, 1, 0, 0, 0, 1470, 1471, 1, 0, 0, 0, 1471, 1472, 5, 121, 0, 0, 1472, 243, 1, 0, 0, 0, 1473, 1488,
		3, 322, 161, 0, 1474, 1488, 3, 320, 160, 0, 1475, 1488, 3, 346, 173, 0, 1476, 1488, 3, 334, 167, 0, 1477, 1488, 3,
		90, 45, 0, 1478, 1488, 3, 310, 155, 0, 1479, 1488, 3, 356, 178, 0, 1480, 1488, 3, 154, 77, 0, 1481, 1488, 3, 12, 6,
		0, 1482, 1488, 3, 62, 31, 0, 1483, 1488, 3, 34, 17, 0, 1484, 1488, 3, 40, 20, 0, 1485, 1488, 3, 108, 54, 0, 1486,
		1488, 3, 352, 176, 0, 1487, 1473, 1, 0, 0, 0, 1487, 1474, 1, 0, 0, 0, 1487, 1475, 1, 0, 0, 0, 1487, 1476, 1, 0, 0,
		0, 1487, 1477, 1, 0, 0, 0, 1487, 1478, 1, 0, 0, 0, 1487, 1479, 1, 0, 0, 0, 1487, 1480, 1, 0, 0, 0, 1487, 1481, 1, 0,
		0, 0, 1487, 1482, 1, 0, 0, 0, 1487, 1483, 1, 0, 0, 0, 1487, 1484, 1, 0, 0, 0, 1487, 1485, 1, 0, 0, 0, 1487, 1486, 1,
		0, 0, 0, 1488, 245, 1, 0, 0, 0, 1489, 1490, 5, 130, 0, 0, 1490, 1491, 5, 39, 0, 0, 1491, 1492, 3, 110, 55, 0, 1492,
		247, 1, 0, 0, 0, 1493, 1494, 3, 250, 125, 0, 1494, 1495, 5, 124, 0, 0, 1495, 1497, 1, 0, 0, 0, 1496, 1493, 1, 0, 0,
		0, 1497, 1500, 1, 0, 0, 0, 1498, 1496, 1, 0, 0, 0, 1498, 1499, 1, 0, 0, 0, 1499, 1501, 1, 0, 0, 0, 1500, 1498, 1, 0,
		0, 0, 1501, 1502, 3, 318, 159, 0, 1502, 249, 1, 0, 0, 0, 1503, 1506, 3, 318, 159, 0, 1504, 1506, 5, 130, 0, 0, 1505,
		1503, 1, 0, 0, 0, 1505, 1504, 1, 0, 0, 0, 1506, 251, 1, 0, 0, 0, 1507, 1508, 5, 126, 0, 0, 1508, 1509, 5, 130, 0, 0,
		1509, 253, 1, 0, 0, 0, 1510, 1511, 3, 282, 141, 0, 1511, 1512, 5, 90, 0, 0, 1512, 1513, 5, 130, 0, 0, 1513, 1517, 5,
		121, 0, 0, 1514, 1516, 3, 294, 147, 0, 1515, 1514, 1, 0, 0, 0, 1516, 1519, 1, 0, 0, 0, 1517, 1515, 1, 0, 0, 0, 1517,
		1518, 1, 0, 0, 0, 1518, 1520, 1, 0, 0, 0, 1519, 1517, 1, 0, 0, 0, 1520, 1521, 5, 25, 0, 0, 1521, 1523, 5, 90, 0, 0,
		1522, 1524, 5, 130, 0, 0, 1523, 1522, 1, 0, 0, 0, 1523, 1524, 1, 0, 0, 0, 1524, 255, 1, 0, 0, 0, 1525, 1526, 5, 62,
		0, 0, 1526, 1527, 5, 116, 0, 0, 1527, 1532, 3, 200, 100, 0, 1528, 1529, 5, 121, 0, 0, 1529, 1531, 3, 200, 100, 0,
		1530, 1528, 1, 0, 0, 0, 1531, 1534, 1, 0, 0, 0, 1532, 1530, 1, 0, 0, 0, 1532, 1533, 1, 0, 0, 0, 1533, 1535, 1, 0, 0,
		0, 1534, 1532, 1, 0, 0, 0, 1535, 1536, 5, 117, 0, 0, 1536, 1537, 5, 121, 0, 0, 1537, 257, 1, 0, 0, 0, 1538, 1539, 5,
		62, 0, 0, 1539, 1540, 5, 47, 0, 0, 1540, 1541, 5, 116, 0, 0, 1541, 1542, 3, 32, 16, 0, 1542, 1543, 5, 117, 0, 0,
		1543, 259, 1, 0, 0, 0, 1544, 1554, 3, 212, 106, 0, 1545, 1554, 3, 276, 138, 0, 1546, 1547, 5, 116, 0, 0, 1547, 1548,
		3, 150, 75, 0, 1548, 1549, 5, 117, 0, 0, 1549, 1554, 1, 0, 0, 0, 1550, 1554, 3, 18, 9, 0, 1551, 1554, 3, 10, 5, 0,
		1552, 1554, 3, 218, 109, 0, 1553, 1544, 1, 0, 0, 0, 1553, 1545, 1, 0, 0, 0, 1553, 1546, 1, 0, 0, 0, 1553, 1550, 1,
		0, 0, 0, 1553, 1551, 1, 0, 0, 0, 1553, 1552, 1, 0, 0, 0, 1554, 261, 1, 0, 0, 0, 1555, 1560, 3, 222, 111, 0, 1556,
		1557, 5, 116, 0, 0, 1557, 1558, 3, 6, 3, 0, 1558, 1559, 5, 117, 0, 0, 1559, 1561, 1, 0, 0, 0, 1560, 1556, 1, 0, 0,
		0, 1560, 1561, 1, 0, 0, 0, 1561, 263, 1, 0, 0, 0, 1562, 1563, 5, 130, 0, 0, 1563, 1565, 5, 120, 0, 0, 1564, 1562, 1,
		0, 0, 0, 1564, 1565, 1, 0, 0, 0, 1565, 1566, 1, 0, 0, 0, 1566, 1567, 3, 262, 131, 0, 1567, 1568, 5, 121, 0, 0, 1568,
		265, 1, 0, 0, 0, 1569, 1581, 3, 322, 161, 0, 1570, 1581, 3, 320, 160, 0, 1571, 1581, 3, 346, 173, 0, 1572, 1581, 3,
		334, 167, 0, 1573, 1581, 3, 90, 45, 0, 1574, 1581, 3, 356, 178, 0, 1575, 1581, 3, 154, 77, 0, 1576, 1581, 3, 12, 6,
		0, 1577, 1581, 3, 34, 17, 0, 1578, 1581, 3, 40, 20, 0, 1579, 1581, 3, 352, 176, 0, 1580, 1569, 1, 0, 0, 0, 1580,
		1570, 1, 0, 0, 0, 1580, 1571, 1, 0, 0, 0, 1580, 1572, 1, 0, 0, 0, 1580, 1573, 1, 0, 0, 0, 1580, 1574, 1, 0, 0, 0,
		1580, 1575, 1, 0, 0, 0, 1580, 1576, 1, 0, 0, 0, 1580, 1577, 1, 0, 0, 0, 1580, 1578, 1, 0, 0, 0, 1580, 1579, 1, 0, 0,
		0, 1581, 267, 1, 0, 0, 0, 1582, 1584, 3, 266, 133, 0, 1583, 1582, 1, 0, 0, 0, 1584, 1587, 1, 0, 0, 0, 1585, 1583, 1,
		0, 0, 0, 1585, 1586, 1, 0, 0, 0, 1586, 269, 1, 0, 0, 0, 1587, 1585, 1, 0, 0, 0, 1588, 1589, 5, 130, 0, 0, 1589,
		1591, 5, 120, 0, 0, 1590, 1588, 1, 0, 0, 0, 1590, 1591, 1, 0, 0, 0, 1591, 1592, 1, 0, 0, 0, 1592, 1597, 5, 64, 0, 0,
		1593, 1594, 5, 116, 0, 0, 1594, 1595, 3, 302, 151, 0, 1595, 1596, 5, 117, 0, 0, 1596, 1598, 1, 0, 0, 0, 1597, 1593,
		1, 0, 0, 0, 1597, 1598, 1, 0, 0, 0, 1598, 1600, 1, 0, 0, 0, 1599, 1601, 5, 42, 0, 0, 1600, 1599, 1, 0, 0, 0, 1600,
		1601, 1, 0, 0, 0, 1601, 1602, 1, 0, 0, 0, 1602, 1603, 3, 268, 134, 0, 1603, 1604, 5, 14, 0, 0, 1604, 1605, 3, 274,
		137, 0, 1605, 1606, 5, 25, 0, 0, 1606, 1608, 5, 64, 0, 0, 1607, 1609, 5, 130, 0, 0, 1608, 1607, 1, 0, 0, 0, 1608,
		1609, 1, 0, 0, 0, 1609, 1610, 1, 0, 0, 0, 1610, 1611, 5, 121, 0, 0, 1611, 271, 1, 0, 0, 0, 1612, 1613, 5, 130, 0, 0,
		1613, 1615, 5, 120, 0, 0, 1614, 1612, 1, 0, 0, 0, 1614, 1615, 1, 0, 0, 0, 1615, 1617, 1, 0, 0, 0, 1616, 1618, 5, 63,
		0, 0, 1617, 1616, 1, 0, 0, 0, 1617, 1618, 1, 0, 0, 0, 1618, 1619, 1, 0, 0, 0, 1619, 1624, 5, 64, 0, 0, 1620, 1621,
		5, 116, 0, 0, 1621, 1622, 3, 302, 151, 0, 1622, 1623, 5, 117, 0, 0, 1623, 1625, 1, 0, 0, 0, 1624, 1620, 1, 0, 0, 0,
		1624, 1625, 1, 0, 0, 0, 1625, 1627, 1, 0, 0, 0, 1626, 1628, 5, 42, 0, 0, 1627, 1626, 1, 0, 0, 0, 1627, 1628, 1, 0,
		0, 0, 1628, 1629, 1, 0, 0, 0, 1629, 1630, 3, 268, 134, 0, 1630, 1631, 5, 14, 0, 0, 1631, 1632, 3, 274, 137, 0, 1632,
		1634, 5, 25, 0, 0, 1633, 1635, 5, 63, 0, 0, 1634, 1633, 1, 0, 0, 0, 1634, 1635, 1, 0, 0, 0, 1635, 1636, 1, 0, 0, 0,
		1636, 1638, 5, 64, 0, 0, 1637, 1639, 5, 130, 0, 0, 1638, 1637, 1, 0, 0, 0, 1638, 1639, 1, 0, 0, 0, 1639, 1640, 1, 0,
		0, 0, 1640, 1641, 5, 121, 0, 0, 1641, 273, 1, 0, 0, 0, 1642, 1644, 3, 304, 152, 0, 1643, 1642, 1, 0, 0, 0, 1644,
		1647, 1, 0, 0, 0, 1645, 1643, 1, 0, 0, 0, 1645, 1646, 1, 0, 0, 0, 1646, 275, 1, 0, 0, 0, 1647, 1645, 1, 0, 0, 0,
		1648, 1649, 3, 336, 168, 0, 1649, 1655, 5, 125, 0, 0, 1650, 1656, 3, 10, 5, 0, 1651, 1652, 5, 116, 0, 0, 1652, 1653,
		3, 150, 75, 0, 1653, 1654, 5, 117, 0, 0, 1654, 1656, 1, 0, 0, 0, 1655, 1650, 1, 0, 0, 0, 1655, 1651, 1, 0, 0, 0,
		1656, 277, 1, 0, 0, 0, 1657, 1660, 3, 280, 140, 0, 1658, 1660, 3, 218, 109, 0, 1659, 1657, 1, 0, 0, 0, 1659, 1658,
		1, 0, 0, 0, 1660, 279, 1, 0, 0, 0, 1661, 1665, 3, 316, 158, 0, 1662, 1663, 3, 106, 53, 0, 1663, 1664, 3, 316, 158,
		0, 1664, 1666, 1, 0, 0, 0, 1665, 1662, 1, 0, 0, 0, 1665, 1666, 1, 0, 0, 0, 1666, 281, 1, 0, 0, 0, 1667, 1668, 5, 67,
		0, 0, 1668, 1669, 3, 278, 139, 0, 1669, 283, 1, 0, 0, 0, 1670, 1672, 5, 70, 0, 0, 1671, 1673, 3, 114, 57, 0, 1672,
		1671, 1, 0, 0, 0, 1673, 1674, 1, 0, 0, 0, 1674, 1672, 1, 0, 0, 0, 1674, 1675, 1, 0, 0, 0, 1675, 1676, 1, 0, 0, 0,
		1676, 1677, 5, 25, 0, 0, 1677, 1679, 5, 70, 0, 0, 1678, 1680, 5, 130, 0, 0, 1679, 1678, 1, 0, 0, 0, 1679, 1680, 1,
		0, 0, 0, 1680, 285, 1, 0, 0, 0, 1681, 1684, 3, 306, 153, 0, 1682, 1683, 7, 7, 0, 0, 1683, 1685, 3, 306, 153, 0,
		1684, 1682, 1, 0, 0, 0, 1684, 1685, 1, 0, 0, 0, 1685, 287, 1, 0, 0, 0, 1686, 1687, 5, 130, 0, 0, 1687, 1689, 5, 120,
		0, 0, 1688, 1686, 1, 0, 0, 0, 1688, 1689, 1, 0, 0, 0, 1689, 1690, 1, 0, 0, 0, 1690, 1691, 5, 72, 0, 0, 1691, 1694,
		3, 150, 75, 0, 1692, 1693, 5, 77, 0, 0, 1693, 1695, 3, 150, 75, 0, 1694, 1692, 1, 0, 0, 0, 1694, 1695, 1, 0, 0, 0,
		1695, 1696, 1, 0, 0, 0, 1696, 1697, 5, 121, 0, 0, 1697, 289, 1, 0, 0, 0, 1698, 1699, 5, 130, 0, 0, 1699, 1701, 5,
		120, 0, 0, 1700, 1698, 1, 0, 0, 0, 1700, 1701, 1, 0, 0, 0, 1701, 1702, 1, 0, 0, 0, 1702, 1704, 5, 73, 0, 0, 1703,
		1705, 3, 150, 75, 0, 1704, 1703, 1, 0, 0, 0, 1704, 1705, 1, 0, 0, 0, 1705, 1706, 1, 0, 0, 0, 1706, 1707, 5, 121, 0,
		0, 1707, 291, 1, 0, 0, 0, 1708, 1712, 3, 254, 127, 0, 1709, 1712, 3, 146, 73, 0, 1710, 1712, 3, 282, 141, 0, 1711,
		1708, 1, 0, 0, 0, 1711, 1709, 1, 0, 0, 0, 1711, 1710, 1, 0, 0, 0, 1712, 293, 1, 0, 0, 0, 1713, 1714, 5, 130, 0, 0,
		1714, 1715, 5, 100, 0, 0, 1715, 1716, 3, 252, 126, 0, 1716, 1717, 5, 121, 0, 0, 1717, 295, 1, 0, 0, 0, 1718, 1719,
		5, 95, 0, 0, 1719, 1720, 3, 150, 75, 0, 1720, 1721, 5, 76, 0, 0, 1721, 1722, 3, 340, 170, 0, 1722, 1723, 5, 113, 0,
		0, 1723, 1724, 3, 236, 118, 0, 1724, 1725, 3, 298, 149, 0, 1725, 1726, 5, 121, 0, 0, 1726, 297, 1, 0, 0, 0, 1727,
		1728, 3, 360, 180, 0, 1728, 1729, 5, 96, 0, 0, 1729, 1737, 3, 58, 29, 0, 1730, 1731, 5, 122, 0, 0, 1731, 1732, 3,
		360, 180, 0, 1732, 1733, 5, 96, 0, 0, 1733, 1734, 3, 58, 29, 0, 1734, 1736, 1, 0, 0, 0, 1735, 1730, 1, 0, 0, 0,
		1736, 1739, 1, 0, 0, 0, 1737, 1735, 1, 0, 0, 0, 1737, 1738, 1, 0, 0, 0, 1738, 299, 1, 0, 0, 0, 1739, 1737, 1, 0, 0,
		0, 1740, 1741, 5, 56, 0, 0, 1741, 1742, 3, 302, 151, 0, 1742, 301, 1, 0, 0, 0, 1743, 1748, 3, 218, 109, 0, 1744,
		1745, 5, 122, 0, 0, 1745, 1747, 3, 218, 109, 0, 1746, 1744, 1, 0, 0, 0, 1747, 1750, 1, 0, 0, 0, 1748, 1746, 1, 0, 0,
		0, 1748, 1749, 1, 0, 0, 0, 1749, 303, 1, 0, 0, 0, 1750, 1748, 1, 0, 0, 0, 1751, 1770, 3, 358, 179, 0, 1752, 1770, 3,
		28, 14, 0, 1753, 1770, 3, 288, 144, 0, 1754, 1770, 3, 308, 154, 0, 1755, 1770, 3, 354, 177, 0, 1756, 1770, 3, 176,
		88, 0, 1757, 1770, 3, 52, 26, 0, 1758, 1770, 3, 214, 107, 0, 1759, 1770, 3, 230, 115, 0, 1760, 1770, 3, 148, 74, 0,
		1761, 1770, 3, 290, 145, 0, 1762, 1763, 5, 130, 0, 0, 1763, 1765, 5, 120, 0, 0, 1764, 1762, 1, 0, 0, 0, 1764, 1765,
		1, 0, 0, 0, 1765, 1766, 1, 0, 0, 0, 1766, 1767, 5, 54, 0, 0, 1767, 1770, 5, 121, 0, 0, 1768, 1770, 3, 264, 132, 0,
		1769, 1751, 1, 0, 0, 0, 1769, 1752, 1, 0, 0, 0, 1769, 1753, 1, 0, 0, 0, 1769, 1754, 1, 0, 0, 0, 1769, 1755, 1, 0, 0,
		0, 1769, 1756, 1, 0, 0, 0, 1769, 1757, 1, 0, 0, 0, 1769, 1758, 1, 0, 0, 0, 1769, 1759, 1, 0, 0, 0, 1769, 1760, 1, 0,
		0, 0, 1769, 1761, 1, 0, 0, 0, 1769, 1764, 1, 0, 0, 0, 1769, 1768, 1, 0, 0, 0, 1770, 305, 1, 0, 0, 0, 1771, 1774, 3,
		316, 158, 0, 1772, 1773, 7, 8, 0, 0, 1773, 1775, 3, 316, 158, 0, 1774, 1772, 1, 0, 0, 0, 1774, 1775, 1, 0, 0, 0,
		1775, 307, 1, 0, 0, 0, 1776, 1777, 5, 130, 0, 0, 1777, 1779, 5, 120, 0, 0, 1778, 1776, 1, 0, 0, 0, 1778, 1779, 1, 0,
		0, 0, 1779, 1780, 1, 0, 0, 0, 1780, 1781, 3, 340, 170, 0, 1781, 1783, 5, 113, 0, 0, 1782, 1784, 3, 98, 49, 0, 1783,
		1782, 1, 0, 0, 0, 1783, 1784, 1, 0, 0, 0, 1784, 1785, 1, 0, 0, 0, 1785, 1786, 3, 360, 180, 0, 1786, 1787, 5, 121, 0,
		0, 1787, 309, 1, 0, 0, 0, 1788, 1789, 5, 79, 0, 0, 1789, 1790, 3, 174, 87, 0, 1790, 1791, 5, 120, 0, 0, 1791, 1793,
		3, 336, 168, 0, 1792, 1794, 7, 9, 0, 0, 1793, 1792, 1, 0, 0, 0, 1793, 1794, 1, 0, 0, 0, 1794, 1797, 1, 0, 0, 0,
		1795, 1796, 5, 114, 0, 0, 1796, 1798, 3, 150, 75, 0, 1797, 1795, 1, 0, 0, 0, 1797, 1798, 1, 0, 0, 0, 1798, 1799, 1,
		0, 0, 0, 1799, 1800, 5, 121, 0, 0, 1800, 311, 1, 0, 0, 0, 1801, 1806, 3, 218, 109, 0, 1802, 1803, 5, 122, 0, 0,
		1803, 1805, 3, 218, 109, 0, 1804, 1802, 1, 0, 0, 0, 1805, 1808, 1, 0, 0, 0, 1806, 1804, 1, 0, 0, 0, 1806, 1807, 1,
		0, 0, 0, 1807, 1812, 1, 0, 0, 0, 1808, 1806, 1, 0, 0, 0, 1809, 1812, 5, 59, 0, 0, 1810, 1812, 5, 8, 0, 0, 1811,
		1801, 1, 0, 0, 0, 1811, 1809, 1, 0, 0, 0, 1811, 1810, 1, 0, 0, 0, 1812, 313, 1, 0, 0, 0, 1813, 1822, 5, 118, 0, 0,
		1814, 1819, 3, 218, 109, 0, 1815, 1816, 5, 122, 0, 0, 1816, 1818, 3, 218, 109, 0, 1817, 1815, 1, 0, 0, 0, 1818,
		1821, 1, 0, 0, 0, 1819, 1817, 1, 0, 0, 0, 1819, 1820, 1, 0, 0, 0, 1820, 1823, 1, 0, 0, 0, 1821, 1819, 1, 0, 0, 0,
		1822, 1814, 1, 0, 0, 0, 1822, 1823, 1, 0, 0, 0, 1823, 1826, 1, 0, 0, 0, 1824, 1825, 5, 73, 0, 0, 1825, 1827, 3, 218,
		109, 0, 1826, 1824, 1, 0, 0, 0, 1826, 1827, 1, 0, 0, 0, 1827, 1828, 1, 0, 0, 0, 1828, 1829, 5, 119, 0, 0, 1829, 315,
		1, 0, 0, 0, 1830, 1832, 7, 10, 0, 0, 1831, 1830, 1, 0, 0, 0, 1831, 1832, 1, 0, 0, 0, 1832, 1833, 1, 0, 0, 0, 1833,
		1838, 3, 342, 171, 0, 1834, 1835, 7, 11, 0, 0, 1835, 1837, 3, 342, 171, 0, 1836, 1834, 1, 0, 0, 0, 1837, 1840, 1, 0,
		0, 0, 1838, 1836, 1, 0, 0, 0, 1838, 1839, 1, 0, 0, 0, 1839, 317, 1, 0, 0, 0, 1840, 1838, 1, 0, 0, 0, 1841, 1842, 5,
		130, 0, 0, 1842, 319, 1, 0, 0, 0, 1843, 1844, 3, 328, 164, 0, 1844, 1848, 5, 42, 0, 0, 1845, 1847, 3, 324, 162, 0,
		1846, 1845, 1, 0, 0, 0, 1847, 1850, 1, 0, 0, 0, 1848, 1846, 1, 0, 0, 0, 1848, 1849, 1, 0, 0, 0, 1849, 1851, 1, 0, 0,
		0, 1850, 1848, 1, 0, 0, 0, 1851, 1855, 5, 14, 0, 0, 1852, 1854, 3, 304, 152, 0, 1853, 1852, 1, 0, 0, 0, 1854, 1857,
		1, 0, 0, 0, 1855, 1853, 1, 0, 0, 0, 1855, 1856, 1, 0, 0, 0, 1856, 1858, 1, 0, 0, 0, 1857, 1855, 1, 0, 0, 0, 1858,
		1860, 5, 25, 0, 0, 1859, 1861, 3, 326, 163, 0, 1860, 1859, 1, 0, 0, 0, 1860, 1861, 1, 0, 0, 0, 1861, 1863, 1, 0, 0,
		0, 1862, 1864, 3, 104, 52, 0, 1863, 1862, 1, 0, 0, 0, 1863, 1864, 1, 0, 0, 0, 1864, 1865, 1, 0, 0, 0, 1865, 1866, 5,
		121, 0, 0, 1866, 321, 1, 0, 0, 0, 1867, 1868, 3, 328, 164, 0, 1868, 1869, 5, 121, 0, 0, 1869, 323, 1, 0, 0, 0, 1870,
		1882, 3, 322, 161, 0, 1871, 1882, 3, 320, 160, 0, 1872, 1882, 3, 346, 173, 0, 1873, 1882, 3, 334, 167, 0, 1874,
		1882, 3, 90, 45, 0, 1875, 1882, 3, 356, 178, 0, 1876, 1882, 3, 154, 77, 0, 1877, 1882, 3, 12, 6, 0, 1878, 1882, 3,
		34, 17, 0, 1879, 1882, 3, 40, 20, 0, 1880, 1882, 3, 352, 176, 0, 1881, 1870, 1, 0, 0, 0, 1881, 1871, 1, 0, 0, 0,
		1881, 1872, 1, 0, 0, 0, 1881, 1873, 1, 0, 0, 0, 1881, 1874, 1, 0, 0, 0, 1881, 1875, 1, 0, 0, 0, 1881, 1876, 1, 0, 0,
		0, 1881, 1877, 1, 0, 0, 0, 1881, 1878, 1, 0, 0, 0, 1881, 1879, 1, 0, 0, 0, 1881, 1880, 1, 0, 0, 0, 1882, 325, 1, 0,
		0, 0, 1883, 1884, 7, 12, 0, 0, 1884, 327, 1, 0, 0, 0, 1885, 1888, 3, 330, 165, 0, 1886, 1888, 3, 332, 166, 0, 1887,
		1885, 1, 0, 0, 0, 1887, 1886, 1, 0, 0, 0, 1888, 329, 1, 0, 0, 0, 1889, 1890, 5, 65, 0, 0, 1890, 1895, 3, 104, 52, 0,
		1891, 1892, 5, 116, 0, 0, 1892, 1893, 3, 160, 80, 0, 1893, 1894, 5, 117, 0, 0, 1894, 1896, 1, 0, 0, 0, 1895, 1891,
		1, 0, 0, 0, 1895, 1896, 1, 0, 0, 0, 1896, 331, 1, 0, 0, 0, 1897, 1899, 7, 13, 0, 0, 1898, 1897, 1, 0, 0, 0, 1898,
		1899, 1, 0, 0, 0, 1899, 1900, 1, 0, 0, 0, 1900, 1901, 5, 32, 0, 0, 1901, 1906, 3, 104, 52, 0, 1902, 1903, 5, 116, 0,
		0, 1903, 1904, 3, 160, 80, 0, 1904, 1905, 5, 117, 0, 0, 1905, 1907, 1, 0, 0, 0, 1906, 1902, 1, 0, 0, 0, 1906, 1907,
		1, 0, 0, 0, 1907, 1908, 1, 0, 0, 0, 1908, 1909, 5, 73, 0, 0, 1909, 1910, 3, 336, 168, 0, 1910, 333, 1, 0, 0, 0,
		1911, 1912, 5, 84, 0, 0, 1912, 1913, 5, 130, 0, 0, 1913, 1914, 5, 42, 0, 0, 1914, 1915, 3, 336, 168, 0, 1915, 1916,
		5, 121, 0, 0, 1916, 335, 1, 0, 0, 0, 1917, 1919, 3, 222, 111, 0, 1918, 1920, 3, 222, 111, 0, 1919, 1918, 1, 0, 0, 0,
		1919, 1920, 1, 0, 0, 0, 1920, 1922, 1, 0, 0, 0, 1921, 1923, 3, 94, 47, 0, 1922, 1921, 1, 0, 0, 0, 1922, 1923, 1, 0,
		0, 0, 1923, 337, 1, 0, 0, 0, 1924, 1925, 7, 14, 0, 0, 1925, 339, 1, 0, 0, 0, 1926, 1929, 3, 218, 109, 0, 1927, 1929,
		3, 10, 5, 0, 1928, 1926, 1, 0, 0, 0, 1928, 1927, 1, 0, 0, 0, 1929, 341, 1, 0, 0, 0, 1930, 1935, 3, 152, 76, 0, 1931,
		1932, 7, 15, 0, 0, 1932, 1934, 3, 152, 76, 0, 1933, 1931, 1, 0, 0, 0, 1934, 1937, 1, 0, 0, 0, 1935, 1933, 1, 0, 0,
		0, 1935, 1936, 1, 0, 0, 0, 1936, 343, 1, 0, 0, 0, 1937, 1935, 1, 0, 0, 0, 1938, 1939, 5, 31, 0, 0, 1939, 1940, 3,
		150, 75, 0, 1940, 345, 1, 0, 0, 0, 1941, 1942, 5, 88, 0, 0, 1942, 1945, 5, 130, 0, 0, 1943, 1944, 5, 42, 0, 0, 1944,
		1946, 3, 348, 174, 0, 1945, 1943, 1, 0, 0, 0, 1945, 1946, 1, 0, 0, 0, 1946, 1947, 1, 0, 0, 0, 1947, 1948, 5, 121, 0,
		0, 1948, 347, 1, 0, 0, 0, 1949, 1954, 3, 292, 146, 0, 1950, 1954, 3, 68, 34, 0, 1951, 1954, 3, 2, 1, 0, 1952, 1954,
		3, 158, 79, 0, 1953, 1949, 1, 0, 0, 0, 1953, 1950, 1, 0, 0, 0, 1953, 1951, 1, 0, 0, 0, 1953, 1952, 1, 0, 0, 0, 1954,
		349, 1, 0, 0, 0, 1955, 1956, 5, 11, 0, 0, 1956, 1957, 5, 116, 0, 0, 1957, 1962, 3, 182, 91, 0, 1958, 1959, 5, 122,
		0, 0, 1959, 1961, 3, 182, 91, 0, 1960, 1958, 1, 0, 0, 0, 1961, 1964, 1, 0, 0, 0, 1962, 1960, 1, 0, 0, 0, 1962, 1963,
		1, 0, 0, 0, 1963, 1965, 1, 0, 0, 0, 1964, 1962, 1, 0, 0, 0, 1965, 1966, 5, 117, 0, 0, 1966, 1967, 5, 55, 0, 0, 1967,
		1968, 3, 336, 168, 0, 1968, 351, 1, 0, 0, 0, 1969, 1970, 5, 92, 0, 0, 1970, 1975, 3, 222, 111, 0, 1971, 1972, 5,
		122, 0, 0, 1972, 1974, 3, 222, 111, 0, 1973, 1971, 1, 0, 0, 0, 1974, 1977, 1, 0, 0, 0, 1975, 1973, 1, 0, 0, 0, 1975,
		1976, 1, 0, 0, 0, 1976, 1978, 1, 0, 0, 0, 1977, 1975, 1, 0, 0, 0, 1978, 1979, 5, 121, 0, 0, 1979, 353, 1, 0, 0, 0,
		1980, 1981, 5, 130, 0, 0, 1981, 1983, 5, 120, 0, 0, 1982, 1980, 1, 0, 0, 0, 1982, 1983, 1, 0, 0, 0, 1983, 1984, 1,
		0, 0, 0, 1984, 1985, 3, 340, 170, 0, 1985, 1986, 5, 114, 0, 0, 1986, 1987, 3, 150, 75, 0, 1987, 1988, 5, 121, 0, 0,
		1988, 355, 1, 0, 0, 0, 1989, 1991, 5, 78, 0, 0, 1990, 1989, 1, 0, 0, 0, 1990, 1991, 1, 0, 0, 0, 1991, 1992, 1, 0, 0,
		0, 1992, 1993, 5, 93, 0, 0, 1993, 1994, 3, 174, 87, 0, 1994, 1995, 5, 120, 0, 0, 1995, 1998, 3, 336, 168, 0, 1996,
		1997, 5, 114, 0, 0, 1997, 1999, 3, 150, 75, 0, 1998, 1996, 1, 0, 0, 0, 1998, 1999, 1, 0, 0, 0, 1999, 2000, 1, 0, 0,
		0, 2000, 2001, 5, 121, 0, 0, 2001, 357, 1, 0, 0, 0, 2002, 2003, 5, 130, 0, 0, 2003, 2005, 5, 120, 0, 0, 2004, 2002,
		1, 0, 0, 0, 2004, 2005, 1, 0, 0, 0, 2005, 2006, 1, 0, 0, 0, 2006, 2008, 5, 94, 0, 0, 2007, 2009, 3, 300, 150, 0,
		2008, 2007, 1, 0, 0, 0, 2008, 2009, 1, 0, 0, 0, 2009, 2011, 1, 0, 0, 0, 2010, 2012, 3, 76, 38, 0, 2011, 2010, 1, 0,
		0, 0, 2011, 2012, 1, 0, 0, 0, 2012, 2014, 1, 0, 0, 0, 2013, 2015, 3, 344, 172, 0, 2014, 2013, 1, 0, 0, 0, 2014,
		2015, 1, 0, 0, 0, 2015, 2016, 1, 0, 0, 0, 2016, 2017, 5, 121, 0, 0, 2017, 359, 1, 0, 0, 0, 2018, 2023, 3, 362, 181,
		0, 2019, 2020, 5, 122, 0, 0, 2020, 2022, 3, 362, 181, 0, 2021, 2019, 1, 0, 0, 0, 2022, 2025, 1, 0, 0, 0, 2023, 2021,
		1, 0, 0, 0, 2023, 2024, 1, 0, 0, 0, 2024, 2028, 1, 0, 0, 0, 2025, 2023, 1, 0, 0, 0, 2026, 2028, 5, 89, 0, 0, 2027,
		2018, 1, 0, 0, 0, 2027, 2026, 1, 0, 0, 0, 2028, 361, 1, 0, 0, 0, 2029, 2032, 3, 150, 75, 0, 2030, 2031, 5, 6, 0, 0,
		2031, 2033, 3, 150, 75, 0, 2032, 2030, 1, 0, 0, 0, 2032, 2033, 1, 0, 0, 0, 2033, 363, 1, 0, 0, 0, 243, 371, 377,
		387, 395, 404, 409, 420, 430, 437, 442, 445, 454, 459, 464, 467, 472, 476, 482, 486, 490, 498, 507, 519, 527, 539,
		542, 545, 552, 558, 580, 587, 590, 599, 602, 608, 610, 616, 618, 623, 630, 636, 642, 650, 655, 665, 672, 679, 687,
		690, 699, 702, 705, 710, 718, 721, 731, 735, 738, 745, 748, 755, 758, 762, 778, 780, 790, 796, 799, 805, 809, 822,
		833, 837, 842, 845, 850, 858, 875, 880, 896, 901, 907, 914, 921, 924, 929, 933, 936, 953, 958, 963, 970, 975, 985,
		990, 1003, 1010, 1014, 1018, 1027, 1033, 1039, 1046, 1052, 1069, 1078, 1082, 1087, 1093, 1101, 1110, 1131, 1136,
		1144, 1153, 1158, 1165, 1168, 1173, 1183, 1190, 1197, 1205, 1209, 1216, 1221, 1224, 1229, 1234, 1240, 1254, 1262,
		1268, 1272, 1276, 1282, 1286, 1290, 1293, 1298, 1303, 1309, 1317, 1327, 1334, 1338, 1341, 1347, 1353, 1363, 1370,
		1377, 1384, 1396, 1400, 1404, 1410, 1416, 1419, 1422, 1431, 1437, 1440, 1453, 1461, 1466, 1469, 1487, 1498, 1505,
		1517, 1523, 1532, 1553, 1560, 1564, 1580, 1585, 1590, 1597, 1600, 1608, 1614, 1617, 1624, 1627, 1634, 1638, 1645,
		1655, 1659, 1665, 1674, 1679, 1684, 1688, 1694, 1700, 1704, 1711, 1737, 1748, 1764, 1769, 1774, 1778, 1783, 1793,
		1797, 1806, 1811, 1819, 1822, 1826, 1831, 1838, 1848, 1855, 1860, 1863, 1881, 1887, 1895, 1898, 1906, 1919, 1922,
		1928, 1935, 1945, 1953, 1962, 1975, 1982, 1990, 1998, 2004, 2008, 2011, 2014, 2023, 2027, 2032
	)


class VHDLParser(Parser):
	grammarFileName = "VHDLParser.g4"

	atn = ATNDeserializer().deserialize(serializedATN())

	decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

	sharedContextCache = PredictionContextCache()

	literalNames = (
		"<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", "'abs'", "'access'", "'after'", "'alias'", "'all'", "'and'",
		"'architecture'", "'array'", "'assert'", "'attribute'", "'begin'", "'block'", "'body'", "'buffer'", "'bus'",
		"'case'", "'component'", "'configuration'", "'constant'", "'disconnect'", "'downto'", "'end'", "'entity'", "'else'",
		"'elsif'", "'exit'", "'file'", "'for'", "'function'", "'generate'", "'generic'", "'group'", "'guarded'", "'if'",
		"'impure'", "'in'", "'inertial'", "'inout'", "'is'", "'label'", "'library'", "'linkage'", "'loop'", "'map'",
		"'mod'", "'nand'", "'new'", "'next'", "'nor'", "'not'", "'null'", "'of'", "'on'", "'open'", "'or'", "'others'",
		"'out'", "'package'", "'port'", "'postponed'", "'process'", "'procedure'", "'pure'", "'range'", "'reject'", "'rem'",
		"'record'", "'register'", "'report'", "'return'", "'rol'", "'ror'", "'select'", "'severity'", "'shared'",
		"'signal'", "'sla'", "'sll'", "'sra'", "'srl'", "'subtype'", "'then'", "'to'", "'transport'", "'type'",
		"'unaffected'", "'units'", "'until'", "'use'", "'variable'", "'wait'", "'with'", "'when'", "'while'", "'xnor'",
		"'xor'", "'='", "'/='", "'<'", "'<=)'", "'>'", "'>='", "'+'", "'-'", "'*'", "'/'", "'**'", "'&'", "'=>'", "'<='",
		"':='", "'<>'", "'('", "')'", "'['", "']'", "':'", "';'", "','", "'|'", "'.'", "'''"
	)

	symbolicNames = (
		"<INVALID>", "WHITESPACE", "COMMENT_LINE", "COMMENT_BLOCK", "OP_ABS", "KW_ACCESS", "KW_AFTER", "KW_ALIAS", "KW_ALL",
		"OP_AND", "KW_ARCHITECTURE", "KW_ARRAY", "KW_ASSERT", "KW_ATTRIBUTE", "KW_BEGIN", "KW_BLOCK", "KW_BODY",
		"KW_BUFFER", "KW_BUS", "KW_CASE", "KW_COMPONENT", "KW_CONFIGURATION", "KW_CONSTANT", "KW_DISCONNECT", "KW_DOWNTO",
		"KW_END", "KW_ENTITY", "KW_ELSE", "KW_ELSIF", "KW_EXIT", "KW_FILE", "KW_FOR", "KW_FUNCTION", "KW_GENERATE",
		"KW_GENERIC", "KW_GROUP", "KW_GUARDED", "KW_IF", "KW_IMPURE", "KW_IN", "KW_INERTIAL", "KW_INOUT", "KW_IS",
		"KW_LABEL", "KW_LIBRARY", "KW_LINKAGE", "KW_LOOP", "KW_MAP", "OP_MOD", "OP_NAND", "KW_NEW", "KW_NEXT", "OP_NOR",
		"OP_NOT", "KW_NULL", "KW_OF", "KW_ON", "KW_OPEN", "OP_OR", "KW_OTHERS", "KW_OUT", "KW_PACKAGE", "KW_PORT",
		"KW_POSTPONED", "KW_PROCESS", "KW_PROCEDURE", "KW_PURE", "KW_RANGE", "KW_REJECT", "OP_REM", "KW_RECORD",
		"KW_REGISTER", "KW_REPORT", "KW_RETURN", "OP_ROL", "OP_ROR", "KW_SELECT", "KW_SEVERITY", "KW_SHARED", "KW_SIGNAL",
		"OP_SLA", "OP_SLL", "OP_SRA", "OP_SRL", "KW_SUBTYPE", "KW_THEN", "KW_TO", "KW_TRANSPORT", "KW_TYPE",
		"KW_UNAFFECTED", "KW_UNITS", "KW_UNTIL", "KW_USE", "KW_VARIABLE", "KW_WAIT", "KW_WITH", "KW_WHEN", "KW_WHILE",
		"OP_XNOR", "OP_XOR", "OP_EQ", "OP_NE", "OP_LT", "OP_LE", "OP_GT", "OP_GE", "OP_PLUS", "OP_MINUS", "OP_MUL",
		"OP_DIV", "OP_POW", "OP_CONCAT", "TOK_RARROW", "TOK_SIG_ASSIGN", "TOK_VAR_ASSIGN", "TOK_BOX", "TOK_LP", "TOK_RP",
		"TOK_LB", "TOK_RB", "TOK_COLON", "TOK_SEMICOL", "TOK_COMMA", "TOK_BAR", "TOK_DOT", "TOK_TICK", "LIT_ABSTRACT",
		"LIT_BIT_STRING", "LIT_CHARACTER", "LIT_STRING", "LIT_IDENTIFIER"
	)

	RULE_rule_AbsolutePathname = 0
	RULE_rule_AccessTypeDefinition = 1
	RULE_rule_ActualDesignator = 2
	RULE_rule_ActualParameterPart = 3
	RULE_rule_ActualPart = 4
	RULE_rule_Aggregate = 5
	RULE_rule_AliasDeclaration = 6
	RULE_rule_AliasDesignator = 7
	RULE_rule_AliasIndication = 8
	RULE_rule_Allocator = 9
	RULE_rule_Architecture = 10
	RULE_rule_ArchitectureStatement = 11
	RULE_rule_ArrayTypeDefinition = 12
	RULE_rule_Assertion = 13
	RULE_rule_AssertionStatement = 14
	RULE_rule_AssociationElement = 15
	RULE_rule_AssociationList = 16
	RULE_rule_AttributeDeclaration = 17
	RULE_rule_AttributeDesignator = 18
	RULE_rule_AttributeName = 19
	RULE_rule_AttributeSpecification = 20
	RULE_rule_BindingIndication = 21
	RULE_rule_BlockConfiguration = 22
	RULE_rule_BlockDeclarativeItem = 23
	RULE_rule_BlockSpecification = 24
	RULE_rule_BlockStatement = 25
	RULE_rule_CaseStatement = 26
	RULE_rule_CaseStatementAlternative = 27
	RULE_rule_Choice = 28
	RULE_rule_Choices = 29
	RULE_rule_ComponentConfiguration = 30
	RULE_rule_ComponentDeclaration = 31
	RULE_rule_ComponentInstantiationStatement = 32
	RULE_rule_ComponentSpecification = 33
	RULE_rule_CompositeTypeDefinition = 34
	RULE_rule_ConcurrentAssertionStatement = 35
	RULE_rule_ConcurrentProcedureCallStatement = 36
	RULE_rule_ConcurrentSignalAssignmentStatement = 37
	RULE_rule_ConditionClause = 38
	RULE_rule_ConditionalSignalAssignment = 39
	RULE_rule_ConditionalWaveforms = 40
	RULE_rule_ConfigurationDeclaration = 41
	RULE_rule_ConfigurationDeclarativeItem = 42
	RULE_rule_ConfigurationItem = 43
	RULE_rule_ConfigurationSpecification = 44
	RULE_rule_ConstantDeclaration = 45
	RULE_rule_ConstrainedArrayDefinition = 46
	RULE_rule_Constraint = 47
	RULE_rule_ContextItem = 48
	RULE_rule_DelayMechanism = 49
	RULE_rule_DesignFile = 50
	RULE_rule_DesignUnit = 51
	RULE_rule_Designator = 52
	RULE_rule_Direction = 53
	RULE_rule_DisconnectionSpecification = 54
	RULE_rule_DiscreteRange = 55
	RULE_rule_ElementAssociation = 56
	RULE_rule_ElementDeclaration = 57
	RULE_rule_ElementSubtypeDefinition = 58
	RULE_rule_EntityAspect = 59
	RULE_rule_EntityClass = 60
	RULE_rule_EntityClassEntry = 61
	RULE_rule_EntityClassEntryList = 62
	RULE_rule_EntityDeclaration = 63
	RULE_rule_EntityDeclarativeItem = 64
	RULE_rule_EntityDeclarativePart = 65
	RULE_rule_EntityDesignator = 66
	RULE_rule_EntityNameList = 67
	RULE_rule_EntitySpecification = 68
	RULE_rule_EntityStatement = 69
	RULE_rule_EntityStatementPart = 70
	RULE_rule_EntityTag = 71
	RULE_rule_EnumerationLiteral = 72
	RULE_rule_EnumerationTypeDefinition = 73
	RULE_rule_ExitStatement = 74
	RULE_rule_Expression = 75
	RULE_rule_Factor = 76
	RULE_rule_FileDeclaration = 77
	RULE_rule_FileOpenInformation = 78
	RULE_rule_FileTypeDefinition = 79
	RULE_rule_FormalParameterList = 80
	RULE_rule_FormalPart = 81
	RULE_rule_GenerateStatement = 82
	RULE_rule_GenerationScheme = 83
	RULE_rule_GenericClause = 84
	RULE_rule_GenericMapAspect = 85
	RULE_rule_GuardedSignalSpecification = 86
	RULE_rule_IdentifierList = 87
	RULE_rule_IfStatement = 88
	RULE_rule_IndexConstraint = 89
	RULE_rule_IndexSpecification = 90
	RULE_rule_IndexSubtypeDefinition = 91
	RULE_rule_InstantiatedUnit = 92
	RULE_rule_InstantiationList = 93
	RULE_rule_InterfaceConstantDeclaration = 94
	RULE_rule_InterfaceDeclaration = 95
	RULE_rule_InterfaceElement = 96
	RULE_rule_InterfaceFileDeclaration = 97
	RULE_rule_InterfaceSignalList = 98
	RULE_rule_InterfaceList = 99
	RULE_rule_InterfacePortDeclaration = 100
	RULE_rule_InterfaceSignalDeclaration = 101
	RULE_rule_InterfaceVariableDeclaration = 102
	RULE_rule_IterationScheme = 103
	RULE_rule_LibraryClause = 104
	RULE_rule_LibraryUnit = 105
	RULE_rule_Literal = 106
	RULE_rule_LoopStatement = 107
	RULE_rule_Mode = 108
	RULE_rule_Name = 109
	RULE_rule_NamePart = 110
	RULE_rule_SelectedName = 111
	RULE_rule_SelectedNamePart = 112
	RULE_rule_FunctionCallOrIndexedNamePart = 113
	RULE_rule_SliceNamePart = 114
	RULE_rule_NextStatement = 115
	RULE_rule_NumericLiteral = 116
	RULE_rule_ObjectDeclaration = 117
	RULE_rule_Opts = 118
	RULE_rule_PackageBody = 119
	RULE_rule_PackageBodyDeclarativeItem = 120
	RULE_rule_PackageDeclaration = 121
	RULE_rule_PackageDeclarativeItem = 122
	RULE_rule_ParameterSpecification = 123
	RULE_rule_PartialPathName = 124
	RULE_rule_PathNameElement = 125
	RULE_rule_PhysicalLiteral = 126
	RULE_rule_PhysicalTypeDefinition = 127
	RULE_rule_PortClause = 128
	RULE_rule_PortMapAspect = 129
	RULE_rule_Primary = 130
	RULE_rule_ProcedureCall = 131
	RULE_rule_ProcedureCallStatement = 132
	RULE_rule_ProcessDeclarativeItem = 133
	RULE_rule_ProcessDeclarativePart = 134
	RULE_rule_ProcessStatement = 135
	RULE_rule_PostponedProcessStatement = 136
	RULE_rule_ProcessStatementPart = 137
	RULE_rule_QualifiedExpression = 138
	RULE_rule_RangeDeclaration = 139
	RULE_rule_ExplicitRange = 140
	RULE_rule_RangeConstraint = 141
	RULE_rule_RecordTypeDefinition = 142
	RULE_rule_Relation = 143
	RULE_rule_ReportStatement = 144
	RULE_rule_ReturnStatement = 145
	RULE_rule_ScalarTypeDefinition = 146
	RULE_rule_SecondaryUnitDeclaration = 147
	RULE_rule_SelectedSignalAssignment = 148
	RULE_rule_SelectedWaveforms = 149
	RULE_rule_SensitivityClause = 150
	RULE_rule_SensitivityList = 151
	RULE_rule_SequentialStatement = 152
	RULE_rule_ShiftExpression = 153
	RULE_rule_SignalAssignmentStatement = 154
	RULE_rule_SignalDeclaration = 155
	RULE_rule_SignalList = 156
	RULE_rule_Signature = 157
	RULE_rule_SimpleExpression = 158
	RULE_rule_SimpleName = 159
	RULE_rule_SubprogramBody = 160
	RULE_rule_SubprogramDeclaration = 161
	RULE_rule_SubprogramDeclarativeItem = 162
	RULE_rule_SubprogramKind = 163
	RULE_rule_SubprogramSpecification = 164
	RULE_rule_ProcedureSpecification = 165
	RULE_rule_FunctionSpecification = 166
	RULE_rule_SubtypeDeclaration = 167
	RULE_rule_SubtypeIndication = 168
	RULE_rule_Suffix = 169
	RULE_rule_Target = 170
	RULE_rule_Term = 171
	RULE_rule_TimeoutClause = 172
	RULE_rule_TypeDeclaration = 173
	RULE_rule_TypeDefinition = 174
	RULE_rule_UnconstrainedArrayDefinition = 175
	RULE_rule_UseClause = 176
	RULE_rule_VariableAssignmentStatement = 177
	RULE_rule_VariableDeclaration = 178
	RULE_rule_WaitStatement = 179
	RULE_rule_Waveform = 180
	RULE_rule_WaveformElement = 181

	ruleNames = (
		"rule_AbsolutePathname", "rule_AccessTypeDefinition", "rule_ActualDesignator", "rule_ActualParameterPart",
		"rule_ActualPart", "rule_Aggregate", "rule_AliasDeclaration", "rule_AliasDesignator", "rule_AliasIndication",
		"rule_Allocator", "rule_Architecture", "rule_ArchitectureStatement", "rule_ArrayTypeDefinition", "rule_Assertion",
		"rule_AssertionStatement", "rule_AssociationElement", "rule_AssociationList", "rule_AttributeDeclaration",
		"rule_AttributeDesignator", "rule_AttributeName", "rule_AttributeSpecification", "rule_BindingIndication",
		"rule_BlockConfiguration", "rule_BlockDeclarativeItem", "rule_BlockSpecification", "rule_BlockStatement",
		"rule_CaseStatement", "rule_CaseStatementAlternative", "rule_Choice", "rule_Choices", "rule_ComponentConfiguration",
		"rule_ComponentDeclaration", "rule_ComponentInstantiationStatement", "rule_ComponentSpecification",
		"rule_CompositeTypeDefinition", "rule_ConcurrentAssertionStatement", "rule_ConcurrentProcedureCallStatement",
		"rule_ConcurrentSignalAssignmentStatement", "rule_ConditionClause", "rule_ConditionalSignalAssignment",
		"rule_ConditionalWaveforms", "rule_ConfigurationDeclaration", "rule_ConfigurationDeclarativeItem",
		"rule_ConfigurationItem", "rule_ConfigurationSpecification", "rule_ConstantDeclaration",
		"rule_ConstrainedArrayDefinition", "rule_Constraint", "rule_ContextItem", "rule_DelayMechanism", "rule_DesignFile",
		"rule_DesignUnit", "rule_Designator", "rule_Direction", "rule_DisconnectionSpecification", "rule_DiscreteRange",
		"rule_ElementAssociation", "rule_ElementDeclaration", "rule_ElementSubtypeDefinition", "rule_EntityAspect",
		"rule_EntityClass", "rule_EntityClassEntry", "rule_EntityClassEntryList", "rule_EntityDeclaration",
		"rule_EntityDeclarativeItem", "rule_EntityDeclarativePart", "rule_EntityDesignator", "rule_EntityNameList",
		"rule_EntitySpecification", "rule_EntityStatement", "rule_EntityStatementPart", "rule_EntityTag",
		"rule_EnumerationLiteral", "rule_EnumerationTypeDefinition", "rule_ExitStatement", "rule_Expression", "rule_Factor",
		"rule_FileDeclaration", "rule_FileOpenInformation", "rule_FileTypeDefinition", "rule_FormalParameterList",
		"rule_FormalPart", "rule_GenerateStatement", "rule_GenerationScheme", "rule_GenericClause", "rule_GenericMapAspect",
		"rule_GuardedSignalSpecification", "rule_IdentifierList", "rule_IfStatement", "rule_IndexConstraint",
		"rule_IndexSpecification", "rule_IndexSubtypeDefinition", "rule_InstantiatedUnit", "rule_InstantiationList",
		"rule_InterfaceConstantDeclaration", "rule_InterfaceDeclaration", "rule_InterfaceElement",
		"rule_InterfaceFileDeclaration", "rule_InterfaceSignalList", "rule_InterfaceList", "rule_InterfacePortDeclaration",
		"rule_InterfaceSignalDeclaration", "rule_InterfaceVariableDeclaration", "rule_IterationScheme",
		"rule_LibraryClause", "rule_LibraryUnit", "rule_Literal", "rule_LoopStatement", "rule_Mode", "rule_Name",
		"rule_NamePart", "rule_SelectedName", "rule_SelectedNamePart", "rule_FunctionCallOrIndexedNamePart",
		"rule_SliceNamePart", "rule_NextStatement", "rule_NumericLiteral", "rule_ObjectDeclaration", "rule_Opts",
		"rule_PackageBody", "rule_PackageBodyDeclarativeItem", "rule_PackageDeclaration", "rule_PackageDeclarativeItem",
		"rule_ParameterSpecification", "rule_PartialPathName", "rule_PathNameElement", "rule_PhysicalLiteral",
		"rule_PhysicalTypeDefinition", "rule_PortClause", "rule_PortMapAspect", "rule_Primary", "rule_ProcedureCall",
		"rule_ProcedureCallStatement", "rule_ProcessDeclarativeItem", "rule_ProcessDeclarativePart",
		"rule_ProcessStatement", "rule_PostponedProcessStatement", "rule_ProcessStatementPart", "rule_QualifiedExpression",
		"rule_RangeDeclaration", "rule_ExplicitRange", "rule_RangeConstraint", "rule_RecordTypeDefinition", "rule_Relation",
		"rule_ReportStatement", "rule_ReturnStatement", "rule_ScalarTypeDefinition", "rule_SecondaryUnitDeclaration",
		"rule_SelectedSignalAssignment", "rule_SelectedWaveforms", "rule_SensitivityClause", "rule_SensitivityList",
		"rule_SequentialStatement", "rule_ShiftExpression", "rule_SignalAssignmentStatement", "rule_SignalDeclaration",
		"rule_SignalList", "rule_Signature", "rule_SimpleExpression", "rule_SimpleName", "rule_SubprogramBody",
		"rule_SubprogramDeclaration", "rule_SubprogramDeclarativeItem", "rule_SubprogramKind",
		"rule_SubprogramSpecification", "rule_ProcedureSpecification", "rule_FunctionSpecification",
		"rule_SubtypeDeclaration", "rule_SubtypeIndication", "rule_Suffix", "rule_Target", "rule_Term",
		"rule_TimeoutClause", "rule_TypeDeclaration", "rule_TypeDefinition", "rule_UnconstrainedArrayDefinition",
		"rule_UseClause", "rule_VariableAssignmentStatement", "rule_VariableDeclaration", "rule_WaitStatement",
		"rule_Waveform", "rule_WaveformElement"
	)

	EOF = Token.EOF
	WHITESPACE = 1
	COMMENT_LINE = 2
	COMMENT_BLOCK = 3
	OP_ABS = 4
	KW_ACCESS = 5
	KW_AFTER = 6
	KW_ALIAS = 7
	KW_ALL = 8
	OP_AND = 9
	KW_ARCHITECTURE = 10
	KW_ARRAY = 11
	KW_ASSERT = 12
	KW_ATTRIBUTE = 13
	KW_BEGIN = 14
	KW_BLOCK = 15
	KW_BODY = 16
	KW_BUFFER = 17
	KW_BUS = 18
	KW_CASE = 19
	KW_COMPONENT = 20
	KW_CONFIGURATION = 21
	KW_CONSTANT = 22
	KW_DISCONNECT = 23
	KW_DOWNTO = 24
	KW_END = 25
	KW_ENTITY = 26
	KW_ELSE = 27
	KW_ELSIF = 28
	KW_EXIT = 29
	KW_FILE = 30
	KW_FOR = 31
	KW_FUNCTION = 32
	KW_GENERATE = 33
	KW_GENERIC = 34
	KW_GROUP = 35
	KW_GUARDED = 36
	KW_IF = 37
	KW_IMPURE = 38
	KW_IN = 39
	KW_INERTIAL = 40
	KW_INOUT = 41
	KW_IS = 42
	KW_LABEL = 43
	KW_LIBRARY = 44
	KW_LINKAGE = 45
	KW_LOOP = 46
	KW_MAP = 47
	OP_MOD = 48
	OP_NAND = 49
	KW_NEW = 50
	KW_NEXT = 51
	OP_NOR = 52
	OP_NOT = 53
	KW_NULL = 54
	KW_OF = 55
	KW_ON = 56
	KW_OPEN = 57
	OP_OR = 58
	KW_OTHERS = 59
	KW_OUT = 60
	KW_PACKAGE = 61
	KW_PORT = 62
	KW_POSTPONED = 63
	KW_PROCESS = 64
	KW_PROCEDURE = 65
	KW_PURE = 66
	KW_RANGE = 67
	KW_REJECT = 68
	OP_REM = 69
	KW_RECORD = 70
	KW_REGISTER = 71
	KW_REPORT = 72
	KW_RETURN = 73
	OP_ROL = 74
	OP_ROR = 75
	KW_SELECT = 76
	KW_SEVERITY = 77
	KW_SHARED = 78
	KW_SIGNAL = 79
	OP_SLA = 80
	OP_SLL = 81
	OP_SRA = 82
	OP_SRL = 83
	KW_SUBTYPE = 84
	KW_THEN = 85
	KW_TO = 86
	KW_TRANSPORT = 87
	KW_TYPE = 88
	KW_UNAFFECTED = 89
	KW_UNITS = 90
	KW_UNTIL = 91
	KW_USE = 92
	KW_VARIABLE = 93
	KW_WAIT = 94
	KW_WITH = 95
	KW_WHEN = 96
	KW_WHILE = 97
	OP_XNOR = 98
	OP_XOR = 99
	OP_EQ = 100
	OP_NE = 101
	OP_LT = 102
	OP_LE = 103
	OP_GT = 104
	OP_GE = 105
	OP_PLUS = 106
	OP_MINUS = 107
	OP_MUL = 108
	OP_DIV = 109
	OP_POW = 110
	OP_CONCAT = 111
	TOK_RARROW = 112
	TOK_SIG_ASSIGN = 113
	TOK_VAR_ASSIGN = 114
	TOK_BOX = 115
	TOK_LP = 116
	TOK_RP = 117
	TOK_LB = 118
	TOK_RB = 119
	TOK_COLON = 120
	TOK_SEMICOL = 121
	TOK_COMMA = 122
	TOK_BAR = 123
	TOK_DOT = 124
	TOK_TICK = 125
	LIT_ABSTRACT = 126
	LIT_BIT_STRING = 127
	LIT_CHARACTER = 128
	LIT_STRING = 129
	LIT_IDENTIFIER = 130

	def __init__(self, input: TokenStream, output: TextIO = stdout):
		super().__init__(input, output)
		self.checkVersion("4.10.1")
		self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
		self._predicates = None

	class Rule_AbsolutePathnameContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def TOK_DOT(self):
			return self.getToken(VHDLParser.TOK_DOT, 0)

		def rule_PartialPathName(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PartialPathNameContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_AbsolutePathname

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_AbsolutePathname"):
				return visitor.visitRule_AbsolutePathname(self)
			else:
				return visitor.visitChildren(self)

	def rule_AbsolutePathname(self):

		localctx = VHDLParser.Rule_AbsolutePathnameContext(self, self._ctx, self.state)
		self.enterRule(localctx, 0, self.RULE_rule_AbsolutePathname)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 364
			self.match(VHDLParser.TOK_DOT)
			self.state = 365
			self.rule_PartialPathName()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_AccessTypeDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext

		def KW_ACCESS(self):
			return self.getToken(VHDLParser.KW_ACCESS, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_AccessTypeDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_AccessTypeDefinition"):
				return visitor.visitRule_AccessTypeDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_AccessTypeDefinition(self):

		localctx = VHDLParser.Rule_AccessTypeDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 2, self.RULE_rule_AccessTypeDefinition)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 367
			self.match(VHDLParser.KW_ACCESS)
			self.state = 368
			localctx.subtypeIndication = self.rule_SubtypeIndication()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ActualDesignatorContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.inertial = None  # Token
			self.expression = None  # Rule_ExpressionContext
			self.name = None  # Rule_NameContext
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext
			self.open_ = None  # Token

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def KW_INERTIAL(self):
			return self.getToken(VHDLParser.KW_INERTIAL, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def KW_OPEN(self):
			return self.getToken(VHDLParser.KW_OPEN, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ActualDesignator

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ActualDesignator"):
				return visitor.visitRule_ActualDesignator(self)
			else:
				return visitor.visitChildren(self)

	def rule_ActualDesignator(self):

		localctx = VHDLParser.Rule_ActualDesignatorContext(self, self._ctx, self.state)
		self.enterRule(localctx, 4, self.RULE_rule_ActualDesignator)
		self._la = 0  # Token type
		try:
			self.state = 377
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 1, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 371
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == VHDLParser.KW_INERTIAL:
					self.state = 370
					localctx.inertial = self.match(VHDLParser.KW_INERTIAL)

				self.state = 373
				localctx.expression = self.rule_Expression()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 374
				localctx.name = self.rule_Name()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 375
				localctx.subtypeIndication = self.rule_SubtypeIndication()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 376
				localctx.open_ = self.match(VHDLParser.KW_OPEN)
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ActualParameterPartContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.associationList = None  # Rule_AssociationListContext

		def rule_AssociationList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AssociationListContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ActualParameterPart

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ActualParameterPart"):
				return visitor.visitRule_ActualParameterPart(self)
			else:
				return visitor.visitChildren(self)

	def rule_ActualParameterPart(self):

		localctx = VHDLParser.Rule_ActualParameterPartContext(self, self._ctx, self.state)
		self.enterRule(localctx, 6, self.RULE_rule_ActualParameterPart)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 379
			localctx.associationList = self.rule_AssociationList()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ActualPartContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.actualDesignator = None  # Rule_ActualDesignatorContext
			self.conversion = None  # Rule_NameContext

		def rule_ActualDesignator(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ActualDesignatorContext, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ActualPart

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ActualPart"):
				return visitor.visitRule_ActualPart(self)
			else:
				return visitor.visitChildren(self)

	def rule_ActualPart(self):

		localctx = VHDLParser.Rule_ActualPartContext(self, self._ctx, self.state)
		self.enterRule(localctx, 8, self.RULE_rule_ActualPart)
		try:
			self.state = 387
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 2, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 381
				localctx.actualDesignator = self.rule_ActualDesignator()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 382
				localctx.conversion = self.rule_Name()
				self.state = 383
				self.match(VHDLParser.TOK_LP)
				self.state = 384
				localctx.actualDesignator = self.rule_ActualDesignator()
				self.state = 385
				self.match(VHDLParser.TOK_RP)
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_AggregateContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_ElementAssociation = None  # Rule_ElementAssociationContext
			self.element = list()  # of Rule_ElementAssociationContexts

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def rule_ElementAssociation(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ElementAssociationContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ElementAssociationContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Aggregate

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Aggregate"):
				return visitor.visitRule_Aggregate(self)
			else:
				return visitor.visitChildren(self)

	def rule_Aggregate(self):

		localctx = VHDLParser.Rule_AggregateContext(self, self._ctx, self.state)
		self.enterRule(localctx, 10, self.RULE_rule_Aggregate)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 389
			self.match(VHDLParser.TOK_LP)
			self.state = 390
			localctx._rule_ElementAssociation = self.rule_ElementAssociation()
			localctx.element.append(localctx._rule_ElementAssociation)
			self.state = 395
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.TOK_COMMA:
				self.state = 391
				self.match(VHDLParser.TOK_COMMA)
				self.state = 392
				localctx._rule_ElementAssociation = self.rule_ElementAssociation()
				localctx.element.append(localctx._rule_ElementAssociation)
				self.state = 397
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 398
			self.match(VHDLParser.TOK_RP)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_AliasDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.aliasDesignator = None  # Rule_AliasDesignatorContext
			self.aliasIndication = None  # Rule_AliasIndicationContext
			self.aliasTarget = None  # Rule_NameContext
			self.signature = None  # Rule_SignatureContext

		def KW_ALIAS(self):
			return self.getToken(VHDLParser.KW_ALIAS, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_AliasDesignator(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AliasDesignatorContext, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def rule_AliasIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AliasIndicationContext, 0)

		def rule_Signature(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SignatureContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_AliasDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_AliasDeclaration"):
				return visitor.visitRule_AliasDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_AliasDeclaration(self):

		localctx = VHDLParser.Rule_AliasDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 12, self.RULE_rule_AliasDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 400
			self.match(VHDLParser.KW_ALIAS)
			self.state = 401
			localctx.aliasDesignator = self.rule_AliasDesignator()
			self.state = 404
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_COLON:
				self.state = 402
				self.match(VHDLParser.TOK_COLON)
				self.state = 403
				localctx.aliasIndication = self.rule_AliasIndication()

			self.state = 406
			self.match(VHDLParser.KW_IS)
			self.state = 407
			localctx.aliasTarget = self.rule_Name()
			self.state = 409
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_LB:
				self.state = 408
				localctx.signature = self.rule_Signature()

			self.state = 411
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_AliasDesignatorContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def LIT_CHARACTER(self):
			return self.getToken(VHDLParser.LIT_CHARACTER, 0)

		def LIT_STRING(self):
			return self.getToken(VHDLParser.LIT_STRING, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_AliasDesignator

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_AliasDesignator"):
				return visitor.visitRule_AliasDesignator(self)
			else:
				return visitor.visitChildren(self)

	def rule_AliasDesignator(self):

		localctx = VHDLParser.Rule_AliasDesignatorContext(self, self._ctx, self.state)
		self.enterRule(localctx, 14, self.RULE_rule_AliasDesignator)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 413
			_la = self._input.LA(1)
			if not (((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & (
				(1 << (VHDLParser.LIT_CHARACTER - 128)) | (1 << (VHDLParser.LIT_STRING - 128)) | (
				1 << (VHDLParser.LIT_IDENTIFIER - 128)))) != 0)):
				self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_AliasIndicationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_AliasIndication

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_AliasIndication"):
				return visitor.visitRule_AliasIndication(self)
			else:
				return visitor.visitChildren(self)

	def rule_AliasIndication(self):

		localctx = VHDLParser.Rule_AliasIndicationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 16, self.RULE_rule_AliasIndication)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 415
			localctx.subtypeIndication = self.rule_SubtypeIndication()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_AllocatorContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext
			self.qualifiedExpression = None  # Rule_QualifiedExpressionContext

		def KW_NEW(self):
			return self.getToken(VHDLParser.KW_NEW, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def rule_QualifiedExpression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_QualifiedExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Allocator

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Allocator"):
				return visitor.visitRule_Allocator(self)
			else:
				return visitor.visitChildren(self)

	def rule_Allocator(self):

		localctx = VHDLParser.Rule_AllocatorContext(self, self._ctx, self.state)
		self.enterRule(localctx, 18, self.RULE_rule_Allocator)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 417
			self.match(VHDLParser.KW_NEW)
			self.state = 420
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 6, self._ctx)
			if la_ == 1:
				self.state = 418
				localctx.subtypeIndication = self.rule_SubtypeIndication()
				pass

			elif la_ == 2:
				self.state = 419
				localctx.qualifiedExpression = self.rule_QualifiedExpression()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ArchitectureContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.architectureName = None  # Token
			self.entityName = None  # Token
			self._rule_BlockDeclarativeItem = None  # Rule_BlockDeclarativeItemContext
			self.declarativeItems = list()  # of Rule_BlockDeclarativeItemContexts
			self._rule_ArchitectureStatement = None  # Rule_ArchitectureStatementContext
			self.statements = list()  # of Rule_ArchitectureStatementContexts
			self.architectureName2 = None  # Token

		def KW_ARCHITECTURE(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_ARCHITECTURE)
			else:
				return self.getToken(VHDLParser.KW_ARCHITECTURE, i)

		def KW_OF(self):
			return self.getToken(VHDLParser.KW_OF, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def KW_BEGIN(self):
			return self.getToken(VHDLParser.KW_BEGIN, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def rule_BlockDeclarativeItem(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_BlockDeclarativeItemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_BlockDeclarativeItemContext, i)

		def rule_ArchitectureStatement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ArchitectureStatementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ArchitectureStatementContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Architecture

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Architecture"):
				return visitor.visitRule_Architecture(self)
			else:
				return visitor.visitChildren(self)

	def rule_Architecture(self):

		localctx = VHDLParser.Rule_ArchitectureContext(self, self._ctx, self.state)
		self.enterRule(localctx, 20, self.RULE_rule_Architecture)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 422
			self.match(VHDLParser.KW_ARCHITECTURE)
			self.state = 423
			localctx.architectureName = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 424
			self.match(VHDLParser.KW_OF)
			self.state = 425
			localctx.entityName = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 426
			self.match(VHDLParser.KW_IS)
			self.state = 430
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_ALIAS) | (1 << VHDLParser.KW_ATTRIBUTE) | (1 << VHDLParser.KW_COMPONENT) | (
				1 << VHDLParser.KW_CONSTANT) | (1 << VHDLParser.KW_DISCONNECT) | (1 << VHDLParser.KW_FILE) | (
					1 << VHDLParser.KW_FOR) | (1 << VHDLParser.KW_FUNCTION) | (1 << VHDLParser.KW_IMPURE))) != 0) or (
				(((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & (
				(1 << (VHDLParser.KW_PROCEDURE - 65)) | (1 << (VHDLParser.KW_PURE - 65)) | (
				1 << (VHDLParser.KW_SHARED - 65)) | (1 << (VHDLParser.KW_SIGNAL - 65)) | (1 << (VHDLParser.KW_SUBTYPE - 65)) | (
					1 << (VHDLParser.KW_TYPE - 65)) | (1 << (VHDLParser.KW_USE - 65)) | (
					1 << (VHDLParser.KW_VARIABLE - 65)))) != 0):
				self.state = 427
				localctx._rule_BlockDeclarativeItem = self.rule_BlockDeclarativeItem()
				localctx.declarativeItems.append(localctx._rule_BlockDeclarativeItem)
				self.state = 432
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 433
			self.match(VHDLParser.KW_BEGIN)
			self.state = 437
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while ((((_la - 12)) & ~0x3f) == 0 and ((1 << (_la - 12)) & (
				(1 << (VHDLParser.KW_ASSERT - 12)) | (1 << (VHDLParser.KW_POSTPONED - 12)) | (
				1 << (VHDLParser.KW_PROCESS - 12)))) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & (
				(1 << (VHDLParser.KW_WITH - 95)) | (1 << (VHDLParser.TOK_LP - 95)) | (1 << (VHDLParser.LIT_STRING - 95)) | (
				1 << (VHDLParser.LIT_IDENTIFIER - 95)))) != 0):
				self.state = 434
				localctx._rule_ArchitectureStatement = self.rule_ArchitectureStatement()
				localctx.statements.append(localctx._rule_ArchitectureStatement)
				self.state = 439
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 440
			self.match(VHDLParser.KW_END)
			self.state = 442
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_ARCHITECTURE:
				self.state = 441
				self.match(VHDLParser.KW_ARCHITECTURE)

			self.state = 445
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 444
				localctx.architectureName2 = self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 447
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ArchitectureStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.blockStatement = None  # Rule_BlockStatementContext
			self.processStatement = None  # Rule_ProcessStatementContext
			self.postponedProcessStatement = None  # Rule_PostponedProcessStatementContext
			self.label = None  # Token
			self.procedureCallStatement = None  # Rule_ConcurrentProcedureCallStatementContext
			self.assertionStatement = None  # Rule_ConcurrentAssertionStatementContext
			self.postponed = None  # Token
			self.signalAssignmentStatement = None  # Rule_ConcurrentSignalAssignmentStatementContext
			self.instantiationStatement = None  # Rule_ComponentInstantiationStatementContext
			self.generateStatement = None  # Rule_GenerateStatementContext

		def rule_BlockStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_BlockStatementContext, 0)

		def rule_ProcessStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ProcessStatementContext, 0)

		def rule_PostponedProcessStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PostponedProcessStatementContext, 0)

		def rule_ConcurrentProcedureCallStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConcurrentProcedureCallStatementContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def rule_ConcurrentAssertionStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConcurrentAssertionStatementContext, 0)

		def rule_ConcurrentSignalAssignmentStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConcurrentSignalAssignmentStatementContext, 0)

		def KW_POSTPONED(self):
			return self.getToken(VHDLParser.KW_POSTPONED, 0)

		def rule_ComponentInstantiationStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ComponentInstantiationStatementContext, 0)

		def rule_GenerateStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GenerateStatementContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ArchitectureStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ArchitectureStatement"):
				return visitor.visitRule_ArchitectureStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_ArchitectureStatement(self):

		localctx = VHDLParser.Rule_ArchitectureStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 22, self.RULE_rule_ArchitectureStatement)
		try:
			self.state = 472
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 15, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 449
				localctx.blockStatement = self.rule_BlockStatement()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 450
				localctx.processStatement = self.rule_ProcessStatement()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 451
				localctx.postponedProcessStatement = self.rule_PostponedProcessStatement()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 454
				self._errHandler.sync(self)
				la_ = self._interp.adaptivePredict(self._input, 11, self._ctx)
				if la_ == 1:
					self.state = 452
					localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
					self.state = 453
					self.match(VHDLParser.TOK_COLON)

				self.state = 456
				localctx.procedureCallStatement = self.rule_ConcurrentProcedureCallStatement()
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 459
				self._errHandler.sync(self)
				la_ = self._interp.adaptivePredict(self._input, 12, self._ctx)
				if la_ == 1:
					self.state = 457
					localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
					self.state = 458
					self.match(VHDLParser.TOK_COLON)

				self.state = 461
				localctx.assertionStatement = self.rule_ConcurrentAssertionStatement()
				pass

			elif la_ == 6:
				self.enterOuterAlt(localctx, 6)
				self.state = 464
				self._errHandler.sync(self)
				la_ = self._interp.adaptivePredict(self._input, 13, self._ctx)
				if la_ == 1:
					self.state = 462
					localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
					self.state = 463
					self.match(VHDLParser.TOK_COLON)

				self.state = 467
				self._errHandler.sync(self)
				la_ = self._interp.adaptivePredict(self._input, 14, self._ctx)
				if la_ == 1:
					self.state = 466
					localctx.postponed = self.match(VHDLParser.KW_POSTPONED)

				self.state = 469
				localctx.signalAssignmentStatement = self.rule_ConcurrentSignalAssignmentStatement()
				pass

			elif la_ == 7:
				self.enterOuterAlt(localctx, 7)
				self.state = 470
				localctx.instantiationStatement = self.rule_ComponentInstantiationStatement()
				pass

			elif la_ == 8:
				self.enterOuterAlt(localctx, 8)
				self.state = 471
				localctx.generateStatement = self.rule_GenerateStatement()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ArrayTypeDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_UnconstrainedArrayDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_UnconstrainedArrayDefinitionContext, 0)

		def rule_ConstrainedArrayDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConstrainedArrayDefinitionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ArrayTypeDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ArrayTypeDefinition"):
				return visitor.visitRule_ArrayTypeDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_ArrayTypeDefinition(self):

		localctx = VHDLParser.Rule_ArrayTypeDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 24, self.RULE_rule_ArrayTypeDefinition)
		try:
			self.state = 476
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 16, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 474
				self.rule_UnconstrainedArrayDefinition()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 475
				self.rule_ConstrainedArrayDefinition()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_AssertionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.assertCondition = None  # Rule_ExpressionContext
			self.reportExpression = None  # Rule_ExpressionContext
			self.severityExpression = None  # Rule_ExpressionContext

		def KW_ASSERT(self):
			return self.getToken(VHDLParser.KW_ASSERT, 0)

		def rule_Expression(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ExpressionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, i)

		def KW_REPORT(self):
			return self.getToken(VHDLParser.KW_REPORT, 0)

		def KW_SEVERITY(self):
			return self.getToken(VHDLParser.KW_SEVERITY, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Assertion

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Assertion"):
				return visitor.visitRule_Assertion(self)
			else:
				return visitor.visitChildren(self)

	def rule_Assertion(self):

		localctx = VHDLParser.Rule_AssertionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 26, self.RULE_rule_Assertion)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 478
			self.match(VHDLParser.KW_ASSERT)
			self.state = 479
			localctx.assertCondition = self.rule_Expression()
			self.state = 482
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_REPORT:
				self.state = 480
				self.match(VHDLParser.KW_REPORT)
				self.state = 481
				localctx.reportExpression = self.rule_Expression()

			self.state = 486
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_SEVERITY:
				self.state = 484
				self.match(VHDLParser.KW_SEVERITY)
				self.state = 485
				localctx.severityExpression = self.rule_Expression()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_AssertionStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token
			self.assertion = None  # Rule_AssertionContext

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_Assertion(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AssertionContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_AssertionStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_AssertionStatement"):
				return visitor.visitRule_AssertionStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_AssertionStatement(self):

		localctx = VHDLParser.Rule_AssertionStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 28, self.RULE_rule_AssertionStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 490
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 488
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 489
				self.match(VHDLParser.TOK_COLON)

			self.state = 492
			localctx.assertion = self.rule_Assertion()
			self.state = 493
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_AssociationElementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.formal = None  # Rule_FormalPartContext
			self.actual = None  # Rule_ActualPartContext

		def rule_ActualPart(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ActualPartContext, 0)

		def TOK_RARROW(self):
			return self.getToken(VHDLParser.TOK_RARROW, 0)

		def rule_FormalPart(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FormalPartContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_AssociationElement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_AssociationElement"):
				return visitor.visitRule_AssociationElement(self)
			else:
				return visitor.visitChildren(self)

	def rule_AssociationElement(self):

		localctx = VHDLParser.Rule_AssociationElementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 30, self.RULE_rule_AssociationElement)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 498
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 20, self._ctx)
			if la_ == 1:
				self.state = 495
				localctx.formal = self.rule_FormalPart()
				self.state = 496
				self.match(VHDLParser.TOK_RARROW)

			self.state = 500
			localctx.actual = self.rule_ActualPart()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_AssociationListContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_AssociationElement = None  # Rule_AssociationElementContext
			self.element = list()  # of Rule_AssociationElementContexts

		def rule_AssociationElement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_AssociationElementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_AssociationElementContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_AssociationList

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_AssociationList"):
				return visitor.visitRule_AssociationList(self)
			else:
				return visitor.visitChildren(self)

	def rule_AssociationList(self):

		localctx = VHDLParser.Rule_AssociationListContext(self, self._ctx, self.state)
		self.enterRule(localctx, 32, self.RULE_rule_AssociationList)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 502
			localctx._rule_AssociationElement = self.rule_AssociationElement()
			localctx.element.append(localctx._rule_AssociationElement)
			self.state = 507
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.TOK_COMMA:
				self.state = 503
				self.match(VHDLParser.TOK_COMMA)
				self.state = 504
				localctx._rule_AssociationElement = self.rule_AssociationElement()
				localctx.element.append(localctx._rule_AssociationElement)
				self.state = 509
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_AttributeDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token
			self.name = None  # Rule_NameContext

		def KW_ATTRIBUTE(self):
			return self.getToken(VHDLParser.KW_ATTRIBUTE, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_AttributeDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_AttributeDeclaration"):
				return visitor.visitRule_AttributeDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_AttributeDeclaration(self):

		localctx = VHDLParser.Rule_AttributeDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 34, self.RULE_rule_AttributeDeclaration)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 510
			self.match(VHDLParser.KW_ATTRIBUTE)
			self.state = 511
			localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 512
			self.match(VHDLParser.TOK_COLON)
			self.state = 513
			localctx.name = self.rule_Name()
			self.state = 514
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_AttributeDesignatorContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_AttributeDesignator

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_AttributeDesignator"):
				return visitor.visitRule_AttributeDesignator(self)
			else:
				return visitor.visitChildren(self)

	def rule_AttributeDesignator(self):

		localctx = VHDLParser.Rule_AttributeDesignatorContext(self, self._ctx, self.state)
		self.enterRule(localctx, 36, self.RULE_rule_AttributeDesignator)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 516
			self.match(VHDLParser.LIT_IDENTIFIER)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_AttributeNameContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.expression = None  # Rule_ExpressionContext

		def TOK_TICK(self):
			return self.getToken(VHDLParser.TOK_TICK, 0)

		def rule_AttributeDesignator(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AttributeDesignatorContext, 0)

		def rule_Signature(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SignatureContext, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_AttributeName

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_AttributeName"):
				return visitor.visitRule_AttributeName(self)
			else:
				return visitor.visitChildren(self)

	def rule_AttributeName(self):

		localctx = VHDLParser.Rule_AttributeNameContext(self, self._ctx, self.state)
		self.enterRule(localctx, 38, self.RULE_rule_AttributeName)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 519
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_LB:
				self.state = 518
				self.rule_Signature()

			self.state = 521
			self.match(VHDLParser.TOK_TICK)
			self.state = 522
			self.rule_AttributeDesignator()
			self.state = 527
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 23, self._ctx)
			if la_ == 1:
				self.state = 523
				self.match(VHDLParser.TOK_LP)
				self.state = 524
				localctx.expression = self.rule_Expression()
				self.state = 525
				self.match(VHDLParser.TOK_RP)


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_AttributeSpecificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.expression = None  # Rule_ExpressionContext

		def KW_ATTRIBUTE(self):
			return self.getToken(VHDLParser.KW_ATTRIBUTE, 0)

		def rule_AttributeDesignator(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AttributeDesignatorContext, 0)

		def KW_OF(self):
			return self.getToken(VHDLParser.KW_OF, 0)

		def rule_EntitySpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_EntitySpecificationContext, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_AttributeSpecification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_AttributeSpecification"):
				return visitor.visitRule_AttributeSpecification(self)
			else:
				return visitor.visitChildren(self)

	def rule_AttributeSpecification(self):

		localctx = VHDLParser.Rule_AttributeSpecificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 40, self.RULE_rule_AttributeSpecification)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 529
			self.match(VHDLParser.KW_ATTRIBUTE)
			self.state = 530
			self.rule_AttributeDesignator()
			self.state = 531
			self.match(VHDLParser.KW_OF)
			self.state = 532
			self.rule_EntitySpecification()
			self.state = 533
			self.match(VHDLParser.KW_IS)
			self.state = 534
			localctx.expression = self.rule_Expression()
			self.state = 535
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_BindingIndicationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_USE(self):
			return self.getToken(VHDLParser.KW_USE, 0)

		def rule_EntityAspect(self):
			return self.getTypedRuleContext(VHDLParser.Rule_EntityAspectContext, 0)

		def rule_GenericMapAspect(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GenericMapAspectContext, 0)

		def rule_PortMapAspect(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PortMapAspectContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_BindingIndication

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_BindingIndication"):
				return visitor.visitRule_BindingIndication(self)
			else:
				return visitor.visitChildren(self)

	def rule_BindingIndication(self):

		localctx = VHDLParser.Rule_BindingIndicationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 42, self.RULE_rule_BindingIndication)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 539
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_USE:
				self.state = 537
				self.match(VHDLParser.KW_USE)
				self.state = 538
				self.rule_EntityAspect()

			self.state = 542
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_GENERIC:
				self.state = 541
				self.rule_GenericMapAspect()

			self.state = 545
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_PORT:
				self.state = 544
				self.rule_PortMapAspect()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_BlockConfigurationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_UseClause = None  # Rule_UseClauseContext
			self.useClauses = list()  # of Rule_UseClauseContexts
			self._rule_ConfigurationItem = None  # Rule_ConfigurationItemContext
			self.configurationItems = list()  # of Rule_ConfigurationItemContexts

		def KW_FOR(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_FOR)
			else:
				return self.getToken(VHDLParser.KW_FOR, i)

		def rule_BlockSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_BlockSpecificationContext, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_UseClause(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_UseClauseContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_UseClauseContext, i)

		def rule_ConfigurationItem(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ConfigurationItemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ConfigurationItemContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_BlockConfiguration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_BlockConfiguration"):
				return visitor.visitRule_BlockConfiguration(self)
			else:
				return visitor.visitChildren(self)

	def rule_BlockConfiguration(self):

		localctx = VHDLParser.Rule_BlockConfigurationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 44, self.RULE_rule_BlockConfiguration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 547
			self.match(VHDLParser.KW_FOR)
			self.state = 548
			self.rule_BlockSpecification()
			self.state = 552
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.KW_USE:
				self.state = 549
				localctx._rule_UseClause = self.rule_UseClause()
				localctx.useClauses.append(localctx._rule_UseClause)
				self.state = 554
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 558
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.KW_FOR:
				self.state = 555
				localctx._rule_ConfigurationItem = self.rule_ConfigurationItem()
				localctx.configurationItems.append(localctx._rule_ConfigurationItem)
				self.state = 560
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 561
			self.match(VHDLParser.KW_END)
			self.state = 562
			self.match(VHDLParser.KW_FOR)
			self.state = 563
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_BlockDeclarativeItemContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_SubprogramDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramDeclarationContext, 0)

		def rule_SubprogramBody(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramBodyContext, 0)

		def rule_TypeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_TypeDeclarationContext, 0)

		def rule_SubtypeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeDeclarationContext, 0)

		def rule_ConstantDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConstantDeclarationContext, 0)

		def rule_SignalDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SignalDeclarationContext, 0)

		def rule_VariableDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_VariableDeclarationContext, 0)

		def rule_FileDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FileDeclarationContext, 0)

		def rule_AliasDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AliasDeclarationContext, 0)

		def rule_ComponentDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ComponentDeclarationContext, 0)

		def rule_AttributeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AttributeDeclarationContext, 0)

		def rule_AttributeSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AttributeSpecificationContext, 0)

		def rule_ConfigurationSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConfigurationSpecificationContext, 0)

		def rule_DisconnectionSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_DisconnectionSpecificationContext, 0)

		def rule_UseClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_UseClauseContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_BlockDeclarativeItem

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_BlockDeclarativeItem"):
				return visitor.visitRule_BlockDeclarativeItem(self)
			else:
				return visitor.visitChildren(self)

	def rule_BlockDeclarativeItem(self):

		localctx = VHDLParser.Rule_BlockDeclarativeItemContext(self, self._ctx, self.state)
		self.enterRule(localctx, 46, self.RULE_rule_BlockDeclarativeItem)
		try:
			self.state = 580
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 29, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 565
				self.rule_SubprogramDeclaration()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 566
				self.rule_SubprogramBody()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 567
				self.rule_TypeDeclaration()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 568
				self.rule_SubtypeDeclaration()
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 569
				self.rule_ConstantDeclaration()
				pass

			elif la_ == 6:
				self.enterOuterAlt(localctx, 6)
				self.state = 570
				self.rule_SignalDeclaration()
				pass

			elif la_ == 7:
				self.enterOuterAlt(localctx, 7)
				self.state = 571
				self.rule_VariableDeclaration()
				pass

			elif la_ == 8:
				self.enterOuterAlt(localctx, 8)
				self.state = 572
				self.rule_FileDeclaration()
				pass

			elif la_ == 9:
				self.enterOuterAlt(localctx, 9)
				self.state = 573
				self.rule_AliasDeclaration()
				pass

			elif la_ == 10:
				self.enterOuterAlt(localctx, 10)
				self.state = 574
				self.rule_ComponentDeclaration()
				pass

			elif la_ == 11:
				self.enterOuterAlt(localctx, 11)
				self.state = 575
				self.rule_AttributeDeclaration()
				pass

			elif la_ == 12:
				self.enterOuterAlt(localctx, 12)
				self.state = 576
				self.rule_AttributeSpecification()
				pass

			elif la_ == 13:
				self.enterOuterAlt(localctx, 13)
				self.state = 577
				self.rule_ConfigurationSpecification()
				pass

			elif la_ == 14:
				self.enterOuterAlt(localctx, 14)
				self.state = 578
				self.rule_DisconnectionSpecification()
				pass

			elif la_ == 15:
				self.enterOuterAlt(localctx, 15)
				self.state = 579
				self.rule_UseClause()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_BlockSpecificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.indexSpecification = None  # Rule_IndexSpecificationContext
			self.name = None  # Rule_NameContext

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def rule_IndexSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IndexSpecificationContext, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_BlockSpecification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_BlockSpecification"):
				return visitor.visitRule_BlockSpecification(self)
			else:
				return visitor.visitChildren(self)

	def rule_BlockSpecification(self):

		localctx = VHDLParser.Rule_BlockSpecificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 48, self.RULE_rule_BlockSpecification)
		self._la = 0  # Token type
		try:
			self.state = 590
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 31, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 582
				self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 587
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == VHDLParser.TOK_LP:
					self.state = 583
					self.match(VHDLParser.TOK_LP)
					self.state = 584
					localctx.indexSpecification = self.rule_IndexSpecification()
					self.state = 585
					self.match(VHDLParser.TOK_RP)

				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 589
				localctx.name = self.rule_Name()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_BlockStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token
			self.expression = None  # Rule_ExpressionContext
			self.genericClause = None  # Rule_GenericClauseContext
			self.genericMapAspect = None  # Rule_GenericMapAspectContext
			self.portClause = None  # Rule_PortClauseContext
			self.portMapAspect = None  # Rule_PortMapAspectContext
			self._rule_BlockDeclarativeItem = None  # Rule_BlockDeclarativeItemContext
			self.blockDeclarativeItem = list()  # of Rule_BlockDeclarativeItemContexts
			self._rule_ArchitectureStatement = None  # Rule_ArchitectureStatementContext
			self.blockStatements = list()  # of Rule_ArchitectureStatementContexts

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def KW_BLOCK(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_BLOCK)
			else:
				return self.getToken(VHDLParser.KW_BLOCK, i)

		def KW_BEGIN(self):
			return self.getToken(VHDLParser.KW_BEGIN, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_SEMICOL)
			else:
				return self.getToken(VHDLParser.TOK_SEMICOL, i)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def rule_GenericClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GenericClauseContext, 0)

		def rule_PortClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PortClauseContext, 0)

		def rule_BlockDeclarativeItem(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_BlockDeclarativeItemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_BlockDeclarativeItemContext, i)

		def rule_ArchitectureStatement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ArchitectureStatementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ArchitectureStatementContext, i)

		def rule_GenericMapAspect(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GenericMapAspectContext, 0)

		def rule_PortMapAspect(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PortMapAspectContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_BlockStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_BlockStatement"):
				return visitor.visitRule_BlockStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_BlockStatement(self):

		localctx = VHDLParser.Rule_BlockStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 50, self.RULE_rule_BlockStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 592
			localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 593
			self.match(VHDLParser.TOK_COLON)
			self.state = 594
			self.match(VHDLParser.KW_BLOCK)
			self.state = 599
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_LP:
				self.state = 595
				self.match(VHDLParser.TOK_LP)
				self.state = 596
				localctx.expression = self.rule_Expression()
				self.state = 597
				self.match(VHDLParser.TOK_RP)

			self.state = 602
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_IS:
				self.state = 601
				self.match(VHDLParser.KW_IS)

			self.state = 610
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_GENERIC:
				self.state = 604
				localctx.genericClause = self.rule_GenericClause()
				self.state = 608
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == VHDLParser.KW_GENERIC:
					self.state = 605
					localctx.genericMapAspect = self.rule_GenericMapAspect()
					self.state = 606
					self.match(VHDLParser.TOK_SEMICOL)

			self.state = 618
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_PORT:
				self.state = 612
				localctx.portClause = self.rule_PortClause()
				self.state = 616
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == VHDLParser.KW_PORT:
					self.state = 613
					localctx.portMapAspect = self.rule_PortMapAspect()
					self.state = 614
					self.match(VHDLParser.TOK_SEMICOL)

			self.state = 623
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_ALIAS) | (1 << VHDLParser.KW_ATTRIBUTE) | (1 << VHDLParser.KW_COMPONENT) | (
				1 << VHDLParser.KW_CONSTANT) | (1 << VHDLParser.KW_DISCONNECT) | (1 << VHDLParser.KW_FILE) | (
					1 << VHDLParser.KW_FOR) | (1 << VHDLParser.KW_FUNCTION) | (1 << VHDLParser.KW_IMPURE))) != 0) or (
				(((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & (
				(1 << (VHDLParser.KW_PROCEDURE - 65)) | (1 << (VHDLParser.KW_PURE - 65)) | (
				1 << (VHDLParser.KW_SHARED - 65)) | (1 << (VHDLParser.KW_SIGNAL - 65)) | (1 << (VHDLParser.KW_SUBTYPE - 65)) | (
					1 << (VHDLParser.KW_TYPE - 65)) | (1 << (VHDLParser.KW_USE - 65)) | (
					1 << (VHDLParser.KW_VARIABLE - 65)))) != 0):
				self.state = 620
				localctx._rule_BlockDeclarativeItem = self.rule_BlockDeclarativeItem()
				localctx.blockDeclarativeItem.append(localctx._rule_BlockDeclarativeItem)
				self.state = 625
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 626
			self.match(VHDLParser.KW_BEGIN)
			self.state = 630
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while ((((_la - 12)) & ~0x3f) == 0 and ((1 << (_la - 12)) & (
				(1 << (VHDLParser.KW_ASSERT - 12)) | (1 << (VHDLParser.KW_POSTPONED - 12)) | (
				1 << (VHDLParser.KW_PROCESS - 12)))) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & (
				(1 << (VHDLParser.KW_WITH - 95)) | (1 << (VHDLParser.TOK_LP - 95)) | (1 << (VHDLParser.LIT_STRING - 95)) | (
				1 << (VHDLParser.LIT_IDENTIFIER - 95)))) != 0):
				self.state = 627
				localctx._rule_ArchitectureStatement = self.rule_ArchitectureStatement()
				localctx.blockStatements.append(localctx._rule_ArchitectureStatement)
				self.state = 632
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 633
			self.match(VHDLParser.KW_END)
			self.state = 634
			self.match(VHDLParser.KW_BLOCK)
			self.state = 636
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 635
				self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 638
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_CaseStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token
			self.expression = None  # Rule_ExpressionContext

		def KW_CASE(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_CASE)
			else:
				return self.getToken(VHDLParser.KW_CASE, i)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def rule_CaseStatementAlternative(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_CaseStatementAlternativeContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_CaseStatementAlternativeContext, i)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_CaseStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_CaseStatement"):
				return visitor.visitRule_CaseStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_CaseStatement(self):

		localctx = VHDLParser.Rule_CaseStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 52, self.RULE_rule_CaseStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 642
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 640
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 641
				self.match(VHDLParser.TOK_COLON)

			self.state = 644
			self.match(VHDLParser.KW_CASE)
			self.state = 645
			localctx.expression = self.rule_Expression()
			self.state = 646
			self.match(VHDLParser.KW_IS)
			self.state = 648
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while True:
				self.state = 647
				self.rule_CaseStatementAlternative()
				self.state = 650
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if not (_la == VHDLParser.KW_WHEN):
					break

			self.state = 652
			self.match(VHDLParser.KW_END)
			self.state = 653
			self.match(VHDLParser.KW_CASE)
			self.state = 655
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 654
				self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 657
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_CaseStatementAlternativeContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_SequentialStatement = None  # Rule_SequentialStatementContext
			self.statements = list()  # of Rule_SequentialStatementContexts

		def KW_WHEN(self):
			return self.getToken(VHDLParser.KW_WHEN, 0)

		def rule_Choices(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ChoicesContext, 0)

		def TOK_RARROW(self):
			return self.getToken(VHDLParser.TOK_RARROW, 0)

		def rule_SequentialStatement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_SequentialStatementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_SequentialStatementContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_CaseStatementAlternative

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_CaseStatementAlternative"):
				return visitor.visitRule_CaseStatementAlternative(self)
			else:
				return visitor.visitChildren(self)

	def rule_CaseStatementAlternative(self):

		localctx = VHDLParser.Rule_CaseStatementAlternativeContext(self, self._ctx, self.state)
		self.enterRule(localctx, 54, self.RULE_rule_CaseStatementAlternative)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 659
			self.match(VHDLParser.KW_WHEN)
			self.state = 660
			self.rule_Choices()
			self.state = 661
			self.match(VHDLParser.TOK_RARROW)
			self.state = 665
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_ASSERT) | (1 << VHDLParser.KW_CASE) | (1 << VHDLParser.KW_EXIT) | (
				1 << VHDLParser.KW_FOR) | (1 << VHDLParser.KW_IF) | (1 << VHDLParser.KW_LOOP) | (1 << VHDLParser.KW_NEXT) | (
					1 << VHDLParser.KW_NULL))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & (
				(1 << (VHDLParser.KW_REPORT - 72)) | (1 << (VHDLParser.KW_RETURN - 72)) | (1 << (VHDLParser.KW_WAIT - 72)) | (
				1 << (VHDLParser.KW_WHILE - 72)) | (1 << (VHDLParser.TOK_LP - 72)) | (1 << (VHDLParser.LIT_STRING - 72)) | (
					1 << (VHDLParser.LIT_IDENTIFIER - 72)))) != 0):
				self.state = 662
				localctx._rule_SequentialStatement = self.rule_SequentialStatement()
				localctx.statements.append(localctx._rule_SequentialStatement)
				self.state = 667
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ChoiceContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def rule_DiscreteRange(self):
			return self.getTypedRuleContext(VHDLParser.Rule_DiscreteRangeContext, 0)

		def rule_SimpleExpression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SimpleExpressionContext, 0)

		def KW_OTHERS(self):
			return self.getToken(VHDLParser.KW_OTHERS, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Choice

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Choice"):
				return visitor.visitRule_Choice(self)
			else:
				return visitor.visitChildren(self)

	def rule_Choice(self):

		localctx = VHDLParser.Rule_ChoiceContext(self, self._ctx, self.state)
		self.enterRule(localctx, 56, self.RULE_rule_Choice)
		try:
			self.state = 672
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 45, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 668
				self.match(VHDLParser.LIT_IDENTIFIER)
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 669
				self.rule_DiscreteRange()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 670
				self.rule_SimpleExpression()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 671
				self.match(VHDLParser.KW_OTHERS)
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ChoicesContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_Choice = None  # Rule_ChoiceContext
			self.choices = list()  # of Rule_ChoiceContexts

		def rule_Choice(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ChoiceContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ChoiceContext, i)

		def TOK_BAR(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_BAR)
			else:
				return self.getToken(VHDLParser.TOK_BAR, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Choices

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Choices"):
				return visitor.visitRule_Choices(self)
			else:
				return visitor.visitChildren(self)

	def rule_Choices(self):

		localctx = VHDLParser.Rule_ChoicesContext(self, self._ctx, self.state)
		self.enterRule(localctx, 58, self.RULE_rule_Choices)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 674
			localctx._rule_Choice = self.rule_Choice()
			localctx.choices.append(localctx._rule_Choice)
			self.state = 679
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.TOK_BAR:
				self.state = 675
				self.match(VHDLParser.TOK_BAR)
				self.state = 676
				localctx._rule_Choice = self.rule_Choice()
				localctx.choices.append(localctx._rule_Choice)
				self.state = 681
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ComponentConfigurationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_FOR(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_FOR)
			else:
				return self.getToken(VHDLParser.KW_FOR, i)

		def rule_ComponentSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ComponentSpecificationContext, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_SEMICOL)
			else:
				return self.getToken(VHDLParser.TOK_SEMICOL, i)

		def rule_BindingIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_BindingIndicationContext, 0)

		def rule_BlockConfiguration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_BlockConfigurationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ComponentConfiguration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ComponentConfiguration"):
				return visitor.visitRule_ComponentConfiguration(self)
			else:
				return visitor.visitChildren(self)

	def rule_ComponentConfiguration(self):

		localctx = VHDLParser.Rule_ComponentConfigurationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 60, self.RULE_rule_ComponentConfiguration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 682
			self.match(VHDLParser.KW_FOR)
			self.state = 683
			self.rule_ComponentSpecification()
			self.state = 687
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_GENERIC or _la == VHDLParser.KW_PORT or _la == VHDLParser.KW_USE or _la == VHDLParser.TOK_SEMICOL:
				self.state = 684
				self.rule_BindingIndication()
				self.state = 685
				self.match(VHDLParser.TOK_SEMICOL)

			self.state = 690
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_FOR:
				self.state = 689
				self.rule_BlockConfiguration()

			self.state = 692
			self.match(VHDLParser.KW_END)
			self.state = 693
			self.match(VHDLParser.KW_FOR)
			self.state = 694
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ComponentDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.genericClause = None  # Rule_GenericClauseContext
			self.portClause = None  # Rule_PortClauseContext

		def KW_COMPONENT(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_COMPONENT)
			else:
				return self.getToken(VHDLParser.KW_COMPONENT, i)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def rule_GenericClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GenericClauseContext, 0)

		def rule_PortClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PortClauseContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ComponentDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ComponentDeclaration"):
				return visitor.visitRule_ComponentDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_ComponentDeclaration(self):

		localctx = VHDLParser.Rule_ComponentDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 62, self.RULE_rule_ComponentDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 696
			self.match(VHDLParser.KW_COMPONENT)
			self.state = 697
			self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 699
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_IS:
				self.state = 698
				self.match(VHDLParser.KW_IS)

			self.state = 702
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_GENERIC:
				self.state = 701
				localctx.genericClause = self.rule_GenericClause()

			self.state = 705
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_PORT:
				self.state = 704
				localctx.portClause = self.rule_PortClause()

			self.state = 707
			self.match(VHDLParser.KW_END)
			self.state = 708
			self.match(VHDLParser.KW_COMPONENT)
			self.state = 710
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 709
				self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 712
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ComponentInstantiationStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def rule_InstantiatedUnit(self):
			return self.getTypedRuleContext(VHDLParser.Rule_InstantiatedUnitContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def rule_GenericMapAspect(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GenericMapAspectContext, 0)

		def rule_PortMapAspect(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PortMapAspectContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ComponentInstantiationStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ComponentInstantiationStatement"):
				return visitor.visitRule_ComponentInstantiationStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_ComponentInstantiationStatement(self):

		localctx = VHDLParser.Rule_ComponentInstantiationStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 64, self.RULE_rule_ComponentInstantiationStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 714
			localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 715
			self.match(VHDLParser.TOK_COLON)
			self.state = 716
			self.rule_InstantiatedUnit()
			self.state = 718
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_GENERIC:
				self.state = 717
				self.rule_GenericMapAspect()

			self.state = 721
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_PORT:
				self.state = 720
				self.rule_PortMapAspect()

			self.state = 723
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ComponentSpecificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_InstantiationList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_InstantiationListContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ComponentSpecification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ComponentSpecification"):
				return visitor.visitRule_ComponentSpecification(self)
			else:
				return visitor.visitChildren(self)

	def rule_ComponentSpecification(self):

		localctx = VHDLParser.Rule_ComponentSpecificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 66, self.RULE_rule_ComponentSpecification)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 725
			self.rule_InstantiationList()
			self.state = 726
			self.match(VHDLParser.TOK_COLON)
			self.state = 727
			self.rule_Name()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_CompositeTypeDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_ArrayTypeDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ArrayTypeDefinitionContext, 0)

		def rule_RecordTypeDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_RecordTypeDefinitionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_CompositeTypeDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_CompositeTypeDefinition"):
				return visitor.visitRule_CompositeTypeDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_CompositeTypeDefinition(self):

		localctx = VHDLParser.Rule_CompositeTypeDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 68, self.RULE_rule_CompositeTypeDefinition)
		try:
			self.state = 731
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.KW_ARRAY]:
				self.enterOuterAlt(localctx, 1)
				self.state = 729
				self.rule_ArrayTypeDefinition()
				pass
			elif token in [VHDLParser.KW_RECORD]:
				self.enterOuterAlt(localctx, 2)
				self.state = 730
				self.rule_RecordTypeDefinition()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ConcurrentAssertionStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token

		def rule_Assertion(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AssertionContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def KW_POSTPONED(self):
			return self.getToken(VHDLParser.KW_POSTPONED, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ConcurrentAssertionStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ConcurrentAssertionStatement"):
				return visitor.visitRule_ConcurrentAssertionStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_ConcurrentAssertionStatement(self):

		localctx = VHDLParser.Rule_ConcurrentAssertionStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 70, self.RULE_rule_ConcurrentAssertionStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 735
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 733
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 734
				self.match(VHDLParser.TOK_COLON)

			self.state = 738
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_POSTPONED:
				self.state = 737
				self.match(VHDLParser.KW_POSTPONED)

			self.state = 740
			self.rule_Assertion()
			self.state = 741
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ConcurrentProcedureCallStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token

		def rule_ProcedureCall(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ProcedureCallContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def KW_POSTPONED(self):
			return self.getToken(VHDLParser.KW_POSTPONED, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ConcurrentProcedureCallStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ConcurrentProcedureCallStatement"):
				return visitor.visitRule_ConcurrentProcedureCallStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_ConcurrentProcedureCallStatement(self):

		localctx = VHDLParser.Rule_ConcurrentProcedureCallStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 72, self.RULE_rule_ConcurrentProcedureCallStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 745
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 58, self._ctx)
			if la_ == 1:
				self.state = 743
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 744
				self.match(VHDLParser.TOK_COLON)

			self.state = 748
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_POSTPONED:
				self.state = 747
				self.match(VHDLParser.KW_POSTPONED)

			self.state = 750
			self.rule_ProcedureCall()
			self.state = 751
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ConcurrentSignalAssignmentStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token

		def rule_ConditionalSignalAssignment(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConditionalSignalAssignmentContext, 0)

		def rule_SelectedSignalAssignment(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SelectedSignalAssignmentContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def KW_POSTPONED(self):
			return self.getToken(VHDLParser.KW_POSTPONED, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ConcurrentSignalAssignmentStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ConcurrentSignalAssignmentStatement"):
				return visitor.visitRule_ConcurrentSignalAssignmentStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_ConcurrentSignalAssignmentStatement(self):

		localctx = VHDLParser.Rule_ConcurrentSignalAssignmentStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 74, self.RULE_rule_ConcurrentSignalAssignmentStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 755
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 60, self._ctx)
			if la_ == 1:
				self.state = 753
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 754
				self.match(VHDLParser.TOK_COLON)

			self.state = 758
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_POSTPONED:
				self.state = 757
				self.match(VHDLParser.KW_POSTPONED)

			self.state = 762
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.TOK_LP, VHDLParser.LIT_STRING, VHDLParser.LIT_IDENTIFIER]:
				self.state = 760
				self.rule_ConditionalSignalAssignment()
				pass
			elif token in [VHDLParser.KW_WITH]:
				self.state = 761
				self.rule_SelectedSignalAssignment()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ConditionClauseContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.condition = None  # Rule_ExpressionContext

		def KW_UNTIL(self):
			return self.getToken(VHDLParser.KW_UNTIL, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ConditionClause

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ConditionClause"):
				return visitor.visitRule_ConditionClause(self)
			else:
				return visitor.visitChildren(self)

	def rule_ConditionClause(self):

		localctx = VHDLParser.Rule_ConditionClauseContext(self, self._ctx, self.state)
		self.enterRule(localctx, 76, self.RULE_rule_ConditionClause)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 764
			self.match(VHDLParser.KW_UNTIL)
			self.state = 765
			localctx.condition = self.rule_Expression()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ConditionalSignalAssignmentContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_Target(self):
			return self.getTypedRuleContext(VHDLParser.Rule_TargetContext, 0)

		def TOK_SIG_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_SIG_ASSIGN, 0)

		def rule_Opts(self):
			return self.getTypedRuleContext(VHDLParser.Rule_OptsContext, 0)

		def rule_ConditionalWaveforms(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConditionalWaveformsContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ConditionalSignalAssignment

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ConditionalSignalAssignment"):
				return visitor.visitRule_ConditionalSignalAssignment(self)
			else:
				return visitor.visitChildren(self)

	def rule_ConditionalSignalAssignment(self):

		localctx = VHDLParser.Rule_ConditionalSignalAssignmentContext(self, self._ctx, self.state)
		self.enterRule(localctx, 78, self.RULE_rule_ConditionalSignalAssignment)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 767
			self.rule_Target()
			self.state = 768
			self.match(VHDLParser.TOK_SIG_ASSIGN)
			self.state = 769
			self.rule_Opts()
			self.state = 770
			self.rule_ConditionalWaveforms()
			self.state = 771
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ConditionalWaveformsContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.condition = None  # Rule_ExpressionContext

		def rule_Waveform(self):
			return self.getTypedRuleContext(VHDLParser.Rule_WaveformContext, 0)

		def KW_WHEN(self):
			return self.getToken(VHDLParser.KW_WHEN, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def KW_ELSE(self):
			return self.getToken(VHDLParser.KW_ELSE, 0)

		def rule_ConditionalWaveforms(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConditionalWaveformsContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ConditionalWaveforms

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ConditionalWaveforms"):
				return visitor.visitRule_ConditionalWaveforms(self)
			else:
				return visitor.visitChildren(self)

	def rule_ConditionalWaveforms(self):

		localctx = VHDLParser.Rule_ConditionalWaveformsContext(self, self._ctx, self.state)
		self.enterRule(localctx, 80, self.RULE_rule_ConditionalWaveforms)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 773
			self.rule_Waveform()
			self.state = 780
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_WHEN:
				self.state = 774
				self.match(VHDLParser.KW_WHEN)
				self.state = 775
				localctx.condition = self.rule_Expression()
				self.state = 778
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == VHDLParser.KW_ELSE:
					self.state = 776
					self.match(VHDLParser.KW_ELSE)
					self.state = 777
					self.rule_ConditionalWaveforms()




		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ConfigurationDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.configurationName = None  # Token
			self.entityName = None  # Rule_NameContext
			self._rule_ConfigurationDeclarativeItem = None  # Rule_ConfigurationDeclarativeItemContext
			self.configurationDeclarativeItem = list()  # of Rule_ConfigurationDeclarativeItemContexts
			self.blockConfiguration = None  # Rule_BlockConfigurationContext
			self.configurationName2 = None  # Token

		def KW_CONFIGURATION(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_CONFIGURATION)
			else:
				return self.getToken(VHDLParser.KW_CONFIGURATION, i)

		def KW_OF(self):
			return self.getToken(VHDLParser.KW_OF, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def rule_BlockConfiguration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_BlockConfigurationContext, 0)

		def rule_ConfigurationDeclarativeItem(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ConfigurationDeclarativeItemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ConfigurationDeclarativeItemContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ConfigurationDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ConfigurationDeclaration"):
				return visitor.visitRule_ConfigurationDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_ConfigurationDeclaration(self):

		localctx = VHDLParser.Rule_ConfigurationDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 82, self.RULE_rule_ConfigurationDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 782
			self.match(VHDLParser.KW_CONFIGURATION)
			self.state = 783
			localctx.configurationName = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 784
			self.match(VHDLParser.KW_OF)
			self.state = 785
			localctx.entityName = self.rule_Name()
			self.state = 786
			self.match(VHDLParser.KW_IS)
			self.state = 790
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.KW_ATTRIBUTE or _la == VHDLParser.KW_USE:
				self.state = 787
				localctx._rule_ConfigurationDeclarativeItem = self.rule_ConfigurationDeclarativeItem()
				localctx.configurationDeclarativeItem.append(localctx._rule_ConfigurationDeclarativeItem)
				self.state = 792
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 793
			localctx.blockConfiguration = self.rule_BlockConfiguration()
			self.state = 794
			self.match(VHDLParser.KW_END)
			self.state = 796
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_CONFIGURATION:
				self.state = 795
				self.match(VHDLParser.KW_CONFIGURATION)

			self.state = 799
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 798
				localctx.configurationName2 = self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 801
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ConfigurationDeclarativeItemContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_UseClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_UseClauseContext, 0)

		def rule_AttributeSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AttributeSpecificationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ConfigurationDeclarativeItem

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ConfigurationDeclarativeItem"):
				return visitor.visitRule_ConfigurationDeclarativeItem(self)
			else:
				return visitor.visitChildren(self)

	def rule_ConfigurationDeclarativeItem(self):

		localctx = VHDLParser.Rule_ConfigurationDeclarativeItemContext(self, self._ctx, self.state)
		self.enterRule(localctx, 84, self.RULE_rule_ConfigurationDeclarativeItem)
		try:
			self.state = 805
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.KW_USE]:
				self.enterOuterAlt(localctx, 1)
				self.state = 803
				self.rule_UseClause()
				pass
			elif token in [VHDLParser.KW_ATTRIBUTE]:
				self.enterOuterAlt(localctx, 2)
				self.state = 804
				self.rule_AttributeSpecification()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ConfigurationItemContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_BlockConfiguration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_BlockConfigurationContext, 0)

		def rule_ComponentConfiguration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ComponentConfigurationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ConfigurationItem

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ConfigurationItem"):
				return visitor.visitRule_ConfigurationItem(self)
			else:
				return visitor.visitChildren(self)

	def rule_ConfigurationItem(self):

		localctx = VHDLParser.Rule_ConfigurationItemContext(self, self._ctx, self.state)
		self.enterRule(localctx, 86, self.RULE_rule_ConfigurationItem)
		try:
			self.state = 809
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 69, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 807
				self.rule_BlockConfiguration()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 808
				self.rule_ComponentConfiguration()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ConfigurationSpecificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_FOR(self):
			return self.getToken(VHDLParser.KW_FOR, 0)

		def rule_ComponentSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ComponentSpecificationContext, 0)

		def rule_BindingIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_BindingIndicationContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ConfigurationSpecification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ConfigurationSpecification"):
				return visitor.visitRule_ConfigurationSpecification(self)
			else:
				return visitor.visitChildren(self)

	def rule_ConfigurationSpecification(self):

		localctx = VHDLParser.Rule_ConfigurationSpecificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 88, self.RULE_rule_ConfigurationSpecification)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 811
			self.match(VHDLParser.KW_FOR)
			self.state = 812
			self.rule_ComponentSpecification()
			self.state = 813
			self.rule_BindingIndication()
			self.state = 814
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ConstantDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext
			self.expression = None  # Rule_ExpressionContext

		def KW_CONSTANT(self):
			return self.getToken(VHDLParser.KW_CONSTANT, 0)

		def rule_IdentifierList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IdentifierListContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def TOK_VAR_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_VAR_ASSIGN, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ConstantDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ConstantDeclaration"):
				return visitor.visitRule_ConstantDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_ConstantDeclaration(self):

		localctx = VHDLParser.Rule_ConstantDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 90, self.RULE_rule_ConstantDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 816
			self.match(VHDLParser.KW_CONSTANT)
			self.state = 817
			self.rule_IdentifierList()
			self.state = 818
			self.match(VHDLParser.TOK_COLON)
			self.state = 819
			localctx.subtypeIndication = self.rule_SubtypeIndication()
			self.state = 822
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_VAR_ASSIGN:
				self.state = 820
				self.match(VHDLParser.TOK_VAR_ASSIGN)
				self.state = 821
				localctx.expression = self.rule_Expression()

			self.state = 824
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ConstrainedArrayDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext

		def KW_ARRAY(self):
			return self.getToken(VHDLParser.KW_ARRAY, 0)

		def rule_IndexConstraint(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IndexConstraintContext, 0)

		def KW_OF(self):
			return self.getToken(VHDLParser.KW_OF, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ConstrainedArrayDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ConstrainedArrayDefinition"):
				return visitor.visitRule_ConstrainedArrayDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_ConstrainedArrayDefinition(self):

		localctx = VHDLParser.Rule_ConstrainedArrayDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 92, self.RULE_rule_ConstrainedArrayDefinition)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 826
			self.match(VHDLParser.KW_ARRAY)
			self.state = 827
			self.rule_IndexConstraint()
			self.state = 828
			self.match(VHDLParser.KW_OF)
			self.state = 829
			localctx.subtypeIndication = self.rule_SubtypeIndication()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ConstraintContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_RangeConstraint(self):
			return self.getTypedRuleContext(VHDLParser.Rule_RangeConstraintContext, 0)

		def rule_IndexConstraint(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IndexConstraintContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Constraint

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Constraint"):
				return visitor.visitRule_Constraint(self)
			else:
				return visitor.visitChildren(self)

	def rule_Constraint(self):

		localctx = VHDLParser.Rule_ConstraintContext(self, self._ctx, self.state)
		self.enterRule(localctx, 94, self.RULE_rule_Constraint)
		try:
			self.state = 833
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.KW_RANGE]:
				self.enterOuterAlt(localctx, 1)
				self.state = 831
				self.rule_RangeConstraint()
				pass
			elif token in [VHDLParser.TOK_LP]:
				self.enterOuterAlt(localctx, 2)
				self.state = 832
				self.rule_IndexConstraint()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ContextItemContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.libraryClause = None  # Rule_LibraryClauseContext
			self.useClause = None  # Rule_UseClauseContext

		def rule_LibraryClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_LibraryClauseContext, 0)

		def rule_UseClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_UseClauseContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ContextItem

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ContextItem"):
				return visitor.visitRule_ContextItem(self)
			else:
				return visitor.visitChildren(self)

	def rule_ContextItem(self):

		localctx = VHDLParser.Rule_ContextItemContext(self, self._ctx, self.state)
		self.enterRule(localctx, 96, self.RULE_rule_ContextItem)
		try:
			self.state = 837
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.KW_LIBRARY]:
				self.enterOuterAlt(localctx, 1)
				self.state = 835
				localctx.libraryClause = self.rule_LibraryClause()
				pass
			elif token in [VHDLParser.KW_USE]:
				self.enterOuterAlt(localctx, 2)
				self.state = 836
				localctx.useClause = self.rule_UseClause()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_DelayMechanismContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.expression = None  # Rule_ExpressionContext

		def KW_TRANSPORT(self):
			return self.getToken(VHDLParser.KW_TRANSPORT, 0)

		def KW_INERTIAL(self):
			return self.getToken(VHDLParser.KW_INERTIAL, 0)

		def KW_REJECT(self):
			return self.getToken(VHDLParser.KW_REJECT, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_DelayMechanism

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_DelayMechanism"):
				return visitor.visitRule_DelayMechanism(self)
			else:
				return visitor.visitChildren(self)

	def rule_DelayMechanism(self):

		localctx = VHDLParser.Rule_DelayMechanismContext(self, self._ctx, self.state)
		self.enterRule(localctx, 98, self.RULE_rule_DelayMechanism)
		self._la = 0  # Token type
		try:
			self.state = 845
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.KW_TRANSPORT]:
				self.enterOuterAlt(localctx, 1)
				self.state = 839
				self.match(VHDLParser.KW_TRANSPORT)
				pass
			elif token in [VHDLParser.KW_INERTIAL, VHDLParser.KW_REJECT]:
				self.enterOuterAlt(localctx, 2)
				self.state = 842
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == VHDLParser.KW_REJECT:
					self.state = 840
					self.match(VHDLParser.KW_REJECT)
					self.state = 841
					localctx.expression = self.rule_Expression()

				self.state = 844
				self.match(VHDLParser.KW_INERTIAL)
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_DesignFileContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_DesignUnit = None  # Rule_DesignUnitContext
			self.designUnits = list()  # of Rule_DesignUnitContexts

		def EOF(self):
			return self.getToken(VHDLParser.EOF, 0)

		def rule_DesignUnit(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_DesignUnitContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_DesignUnitContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_DesignFile

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_DesignFile"):
				return visitor.visitRule_DesignFile(self)
			else:
				return visitor.visitChildren(self)

	def rule_DesignFile(self):

		localctx = VHDLParser.Rule_DesignFileContext(self, self._ctx, self.state)
		self.enterRule(localctx, 100, self.RULE_rule_DesignFile)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 850
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_ARCHITECTURE) | (1 << VHDLParser.KW_CONFIGURATION) | (1 << VHDLParser.KW_ENTITY) | (
				1 << VHDLParser.KW_LIBRARY) | (1 << VHDLParser.KW_PACKAGE))) != 0) or _la == VHDLParser.KW_USE:
				self.state = 847
				localctx._rule_DesignUnit = self.rule_DesignUnit()
				localctx.designUnits.append(localctx._rule_DesignUnit)
				self.state = 852
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 853
			self.match(VHDLParser.EOF)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_DesignUnitContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_ContextItem = None  # Rule_ContextItemContext
			self.contextClauses = list()  # of Rule_ContextItemContexts
			self.libraryUnit = None  # Rule_LibraryUnitContext

		def rule_LibraryUnit(self):
			return self.getTypedRuleContext(VHDLParser.Rule_LibraryUnitContext, 0)

		def rule_ContextItem(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ContextItemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ContextItemContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_DesignUnit

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_DesignUnit"):
				return visitor.visitRule_DesignUnit(self)
			else:
				return visitor.visitChildren(self)

	def rule_DesignUnit(self):

		localctx = VHDLParser.Rule_DesignUnitContext(self, self._ctx, self.state)
		self.enterRule(localctx, 102, self.RULE_rule_DesignUnit)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 858
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.KW_LIBRARY or _la == VHDLParser.KW_USE:
				self.state = 855
				localctx._rule_ContextItem = self.rule_ContextItem()
				localctx.contextClauses.append(localctx._rule_ContextItem)
				self.state = 860
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 861
			localctx.libraryUnit = self.rule_LibraryUnit()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_DesignatorContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def LIT_STRING(self):
			return self.getToken(VHDLParser.LIT_STRING, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Designator

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Designator"):
				return visitor.visitRule_Designator(self)
			else:
				return visitor.visitChildren(self)

	def rule_Designator(self):

		localctx = VHDLParser.Rule_DesignatorContext(self, self._ctx, self.state)
		self.enterRule(localctx, 104, self.RULE_rule_Designator)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 863
			_la = self._input.LA(1)
			if not (_la == VHDLParser.LIT_STRING or _la == VHDLParser.LIT_IDENTIFIER):
				self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_DirectionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.direction = None  # Token

		def KW_TO(self):
			return self.getToken(VHDLParser.KW_TO, 0)

		def KW_DOWNTO(self):
			return self.getToken(VHDLParser.KW_DOWNTO, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Direction

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Direction"):
				return visitor.visitRule_Direction(self)
			else:
				return visitor.visitChildren(self)

	def rule_Direction(self):

		localctx = VHDLParser.Rule_DirectionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 106, self.RULE_rule_Direction)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 865
			localctx.direction = self._input.LT(1)
			_la = self._input.LA(1)
			if not (_la == VHDLParser.KW_DOWNTO or _la == VHDLParser.KW_TO):
				localctx.direction = self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_DisconnectionSpecificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.expression = None  # Rule_ExpressionContext

		def KW_DISCONNECT(self):
			return self.getToken(VHDLParser.KW_DISCONNECT, 0)

		def rule_GuardedSignalSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GuardedSignalSpecificationContext, 0)

		def KW_AFTER(self):
			return self.getToken(VHDLParser.KW_AFTER, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_DisconnectionSpecification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_DisconnectionSpecification"):
				return visitor.visitRule_DisconnectionSpecification(self)
			else:
				return visitor.visitChildren(self)

	def rule_DisconnectionSpecification(self):

		localctx = VHDLParser.Rule_DisconnectionSpecificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 108, self.RULE_rule_DisconnectionSpecification)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 867
			self.match(VHDLParser.KW_DISCONNECT)
			self.state = 868
			self.rule_GuardedSignalSpecification()
			self.state = 869
			self.match(VHDLParser.KW_AFTER)
			self.state = 870
			localctx.expression = self.rule_Expression()
			self.state = 871
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_DiscreteRangeContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext

		def rule_RangeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_RangeDeclarationContext, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_DiscreteRange

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_DiscreteRange"):
				return visitor.visitRule_DiscreteRange(self)
			else:
				return visitor.visitChildren(self)

	def rule_DiscreteRange(self):

		localctx = VHDLParser.Rule_DiscreteRangeContext(self, self._ctx, self.state)
		self.enterRule(localctx, 110, self.RULE_rule_DiscreteRange)
		try:
			self.state = 875
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 77, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 873
				self.rule_RangeDeclaration()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 874
				localctx.subtypeIndication = self.rule_SubtypeIndication()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ElementAssociationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.expression = None  # Rule_ExpressionContext

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def rule_Choices(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ChoicesContext, 0)

		def TOK_RARROW(self):
			return self.getToken(VHDLParser.TOK_RARROW, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ElementAssociation

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ElementAssociation"):
				return visitor.visitRule_ElementAssociation(self)
			else:
				return visitor.visitChildren(self)

	def rule_ElementAssociation(self):

		localctx = VHDLParser.Rule_ElementAssociationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 112, self.RULE_rule_ElementAssociation)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 880
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 78, self._ctx)
			if la_ == 1:
				self.state = 877
				self.rule_Choices()
				self.state = 878
				self.match(VHDLParser.TOK_RARROW)

			self.state = 882
			localctx.expression = self.rule_Expression()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ElementDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_IdentifierList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IdentifierListContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def rule_ElementSubtypeDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ElementSubtypeDefinitionContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ElementDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ElementDeclaration"):
				return visitor.visitRule_ElementDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_ElementDeclaration(self):

		localctx = VHDLParser.Rule_ElementDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 114, self.RULE_rule_ElementDeclaration)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 884
			self.rule_IdentifierList()
			self.state = 885
			self.match(VHDLParser.TOK_COLON)
			self.state = 886
			self.rule_ElementSubtypeDefinition()
			self.state = 887
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ElementSubtypeDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ElementSubtypeDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ElementSubtypeDefinition"):
				return visitor.visitRule_ElementSubtypeDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_ElementSubtypeDefinition(self):

		localctx = VHDLParser.Rule_ElementSubtypeDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 116, self.RULE_rule_ElementSubtypeDefinition)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 889
			localctx.subtypeIndication = self.rule_SubtypeIndication()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_EntityAspectContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.entityName = None  # Rule_NameContext
			self.architectureName = None  # Token
			self.configurationName = None  # Rule_NameContext

		def KW_ENTITY(self):
			return self.getToken(VHDLParser.KW_ENTITY, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def KW_CONFIGURATION(self):
			return self.getToken(VHDLParser.KW_CONFIGURATION, 0)

		def KW_OPEN(self):
			return self.getToken(VHDLParser.KW_OPEN, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_EntityAspect

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_EntityAspect"):
				return visitor.visitRule_EntityAspect(self)
			else:
				return visitor.visitChildren(self)

	def rule_EntityAspect(self):

		localctx = VHDLParser.Rule_EntityAspectContext(self, self._ctx, self.state)
		self.enterRule(localctx, 118, self.RULE_rule_EntityAspect)
		self._la = 0  # Token type
		try:
			self.state = 901
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.KW_ENTITY]:
				self.enterOuterAlt(localctx, 1)
				self.state = 891
				self.match(VHDLParser.KW_ENTITY)
				self.state = 892
				localctx.entityName = self.rule_Name()
				self.state = 896
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == VHDLParser.TOK_LP:
					self.state = 893
					self.match(VHDLParser.TOK_LP)
					self.state = 894
					localctx.architectureName = self.match(VHDLParser.LIT_IDENTIFIER)
					self.state = 895
					self.match(VHDLParser.TOK_RP)

				pass
			elif token in [VHDLParser.KW_CONFIGURATION]:
				self.enterOuterAlt(localctx, 2)
				self.state = 898
				self.match(VHDLParser.KW_CONFIGURATION)
				self.state = 899
				localctx.configurationName = self.rule_Name()
				pass
			elif token in [VHDLParser.KW_OPEN]:
				self.enterOuterAlt(localctx, 3)
				self.state = 900
				self.match(VHDLParser.KW_OPEN)
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_EntityClassContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_ENTITY(self):
			return self.getToken(VHDLParser.KW_ENTITY, 0)

		def KW_ARCHITECTURE(self):
			return self.getToken(VHDLParser.KW_ARCHITECTURE, 0)

		def KW_CONFIGURATION(self):
			return self.getToken(VHDLParser.KW_CONFIGURATION, 0)

		def KW_PROCEDURE(self):
			return self.getToken(VHDLParser.KW_PROCEDURE, 0)

		def KW_FUNCTION(self):
			return self.getToken(VHDLParser.KW_FUNCTION, 0)

		def KW_PACKAGE(self):
			return self.getToken(VHDLParser.KW_PACKAGE, 0)

		def KW_TYPE(self):
			return self.getToken(VHDLParser.KW_TYPE, 0)

		def KW_SUBTYPE(self):
			return self.getToken(VHDLParser.KW_SUBTYPE, 0)

		def KW_CONSTANT(self):
			return self.getToken(VHDLParser.KW_CONSTANT, 0)

		def KW_SIGNAL(self):
			return self.getToken(VHDLParser.KW_SIGNAL, 0)

		def KW_VARIABLE(self):
			return self.getToken(VHDLParser.KW_VARIABLE, 0)

		def KW_COMPONENT(self):
			return self.getToken(VHDLParser.KW_COMPONENT, 0)

		def KW_LABEL(self):
			return self.getToken(VHDLParser.KW_LABEL, 0)

		def KW_UNITS(self):
			return self.getToken(VHDLParser.KW_UNITS, 0)

		def KW_FILE(self):
			return self.getToken(VHDLParser.KW_FILE, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_EntityClass

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_EntityClass"):
				return visitor.visitRule_EntityClass(self)
			else:
				return visitor.visitChildren(self)

	def rule_EntityClass(self):

		localctx = VHDLParser.Rule_EntityClassContext(self, self._ctx, self.state)
		self.enterRule(localctx, 120, self.RULE_rule_EntityClass)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 903
			_la = self._input.LA(1)
			if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_ARCHITECTURE) | (1 << VHDLParser.KW_COMPONENT) | (1 << VHDLParser.KW_CONFIGURATION) | (
				1 << VHDLParser.KW_CONSTANT) | (1 << VHDLParser.KW_ENTITY) | (1 << VHDLParser.KW_FILE) | (
					1 << VHDLParser.KW_FUNCTION) | (1 << VHDLParser.KW_LABEL) | (1 << VHDLParser.KW_PACKAGE))) != 0) or (
								(((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & (
								(1 << (VHDLParser.KW_PROCEDURE - 65)) | (1 << (VHDLParser.KW_SIGNAL - 65)) | (
								1 << (VHDLParser.KW_SUBTYPE - 65)) | (1 << (VHDLParser.KW_TYPE - 65)) | (
									1 << (VHDLParser.KW_UNITS - 65)) | (1 << (VHDLParser.KW_VARIABLE - 65)))) != 0)):
				self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_EntityClassEntryContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_EntityClass(self):
			return self.getTypedRuleContext(VHDLParser.Rule_EntityClassContext, 0)

		def TOK_BOX(self):
			return self.getToken(VHDLParser.TOK_BOX, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_EntityClassEntry

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_EntityClassEntry"):
				return visitor.visitRule_EntityClassEntry(self)
			else:
				return visitor.visitChildren(self)

	def rule_EntityClassEntry(self):

		localctx = VHDLParser.Rule_EntityClassEntryContext(self, self._ctx, self.state)
		self.enterRule(localctx, 122, self.RULE_rule_EntityClassEntry)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 905
			self.rule_EntityClass()
			self.state = 907
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_BOX:
				self.state = 906
				self.match(VHDLParser.TOK_BOX)


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_EntityClassEntryListContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_EntityClassEntry(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_EntityClassEntryContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_EntityClassEntryContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_EntityClassEntryList

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_EntityClassEntryList"):
				return visitor.visitRule_EntityClassEntryList(self)
			else:
				return visitor.visitChildren(self)

	def rule_EntityClassEntryList(self):

		localctx = VHDLParser.Rule_EntityClassEntryListContext(self, self._ctx, self.state)
		self.enterRule(localctx, 124, self.RULE_rule_EntityClassEntryList)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 909
			self.rule_EntityClassEntry()
			self.state = 914
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.TOK_COMMA:
				self.state = 910
				self.match(VHDLParser.TOK_COMMA)
				self.state = 911
				self.rule_EntityClassEntry()
				self.state = 916
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_EntityDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.entityName = None  # Token
			self.genericClause = None  # Rule_GenericClauseContext
			self.portClause = None  # Rule_PortClauseContext
			self.declarativePart = None  # Rule_EntityDeclarativePartContext
			self.statementPart = None  # Rule_EntityStatementPartContext
			self.entityName2 = None  # Token

		def KW_ENTITY(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_ENTITY)
			else:
				return self.getToken(VHDLParser.KW_ENTITY, i)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def rule_EntityDeclarativePart(self):
			return self.getTypedRuleContext(VHDLParser.Rule_EntityDeclarativePartContext, 0)

		def KW_BEGIN(self):
			return self.getToken(VHDLParser.KW_BEGIN, 0)

		def rule_GenericClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GenericClauseContext, 0)

		def rule_PortClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PortClauseContext, 0)

		def rule_EntityStatementPart(self):
			return self.getTypedRuleContext(VHDLParser.Rule_EntityStatementPartContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_EntityDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_EntityDeclaration"):
				return visitor.visitRule_EntityDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_EntityDeclaration(self):

		localctx = VHDLParser.Rule_EntityDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 126, self.RULE_rule_EntityDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 917
			self.match(VHDLParser.KW_ENTITY)
			self.state = 918
			localctx.entityName = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 919
			self.match(VHDLParser.KW_IS)
			self.state = 921
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_GENERIC:
				self.state = 920
				localctx.genericClause = self.rule_GenericClause()

			self.state = 924
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_PORT:
				self.state = 923
				localctx.portClause = self.rule_PortClause()

			self.state = 926
			localctx.declarativePart = self.rule_EntityDeclarativePart()
			self.state = 929
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_BEGIN:
				self.state = 927
				self.match(VHDLParser.KW_BEGIN)
				self.state = 928
				localctx.statementPart = self.rule_EntityStatementPart()

			self.state = 931
			self.match(VHDLParser.KW_END)
			self.state = 933
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_ENTITY:
				self.state = 932
				self.match(VHDLParser.KW_ENTITY)

			self.state = 936
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 935
				localctx.entityName2 = self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 938
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_EntityDeclarativeItemContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_SubprogramDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramDeclarationContext, 0)

		def rule_SubprogramBody(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramBodyContext, 0)

		def rule_TypeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_TypeDeclarationContext, 0)

		def rule_SubtypeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeDeclarationContext, 0)

		def rule_ConstantDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConstantDeclarationContext, 0)

		def rule_SignalDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SignalDeclarationContext, 0)

		def rule_VariableDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_VariableDeclarationContext, 0)

		def rule_FileDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FileDeclarationContext, 0)

		def rule_AliasDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AliasDeclarationContext, 0)

		def rule_AttributeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AttributeDeclarationContext, 0)

		def rule_AttributeSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AttributeSpecificationContext, 0)

		def rule_DisconnectionSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_DisconnectionSpecificationContext, 0)

		def rule_UseClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_UseClauseContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_EntityDeclarativeItem

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_EntityDeclarativeItem"):
				return visitor.visitRule_EntityDeclarativeItem(self)
			else:
				return visitor.visitChildren(self)

	def rule_EntityDeclarativeItem(self):

		localctx = VHDLParser.Rule_EntityDeclarativeItemContext(self, self._ctx, self.state)
		self.enterRule(localctx, 128, self.RULE_rule_EntityDeclarativeItem)
		try:
			self.state = 953
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 88, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 940
				self.rule_SubprogramDeclaration()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 941
				self.rule_SubprogramBody()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 942
				self.rule_TypeDeclaration()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 943
				self.rule_SubtypeDeclaration()
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 944
				self.rule_ConstantDeclaration()
				pass

			elif la_ == 6:
				self.enterOuterAlt(localctx, 6)
				self.state = 945
				self.rule_SignalDeclaration()
				pass

			elif la_ == 7:
				self.enterOuterAlt(localctx, 7)
				self.state = 946
				self.rule_VariableDeclaration()
				pass

			elif la_ == 8:
				self.enterOuterAlt(localctx, 8)
				self.state = 947
				self.rule_FileDeclaration()
				pass

			elif la_ == 9:
				self.enterOuterAlt(localctx, 9)
				self.state = 948
				self.rule_AliasDeclaration()
				pass

			elif la_ == 10:
				self.enterOuterAlt(localctx, 10)
				self.state = 949
				self.rule_AttributeDeclaration()
				pass

			elif la_ == 11:
				self.enterOuterAlt(localctx, 11)
				self.state = 950
				self.rule_AttributeSpecification()
				pass

			elif la_ == 12:
				self.enterOuterAlt(localctx, 12)
				self.state = 951
				self.rule_DisconnectionSpecification()
				pass

			elif la_ == 13:
				self.enterOuterAlt(localctx, 13)
				self.state = 952
				self.rule_UseClause()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_EntityDeclarativePartContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_EntityDeclarativeItem(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_EntityDeclarativeItemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_EntityDeclarativeItemContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_EntityDeclarativePart

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_EntityDeclarativePart"):
				return visitor.visitRule_EntityDeclarativePart(self)
			else:
				return visitor.visitChildren(self)

	def rule_EntityDeclarativePart(self):

		localctx = VHDLParser.Rule_EntityDeclarativePartContext(self, self._ctx, self.state)
		self.enterRule(localctx, 130, self.RULE_rule_EntityDeclarativePart)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 958
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_ALIAS) | (1 << VHDLParser.KW_ATTRIBUTE) | (1 << VHDLParser.KW_CONSTANT) | (
				1 << VHDLParser.KW_DISCONNECT) | (1 << VHDLParser.KW_FILE) | (1 << VHDLParser.KW_FUNCTION) | (
					1 << VHDLParser.KW_IMPURE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & (
				(1 << (VHDLParser.KW_PROCEDURE - 65)) | (1 << (VHDLParser.KW_PURE - 65)) | (
				1 << (VHDLParser.KW_SHARED - 65)) | (1 << (VHDLParser.KW_SIGNAL - 65)) | (1 << (VHDLParser.KW_SUBTYPE - 65)) | (
					1 << (VHDLParser.KW_TYPE - 65)) | (1 << (VHDLParser.KW_USE - 65)) | (
					1 << (VHDLParser.KW_VARIABLE - 65)))) != 0):
				self.state = 955
				self.rule_EntityDeclarativeItem()
				self.state = 960
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_EntityDesignatorContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_EntityTag(self):
			return self.getTypedRuleContext(VHDLParser.Rule_EntityTagContext, 0)

		def rule_Signature(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SignatureContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_EntityDesignator

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_EntityDesignator"):
				return visitor.visitRule_EntityDesignator(self)
			else:
				return visitor.visitChildren(self)

	def rule_EntityDesignator(self):

		localctx = VHDLParser.Rule_EntityDesignatorContext(self, self._ctx, self.state)
		self.enterRule(localctx, 132, self.RULE_rule_EntityDesignator)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 961
			self.rule_EntityTag()
			self.state = 963
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_LB:
				self.state = 962
				self.rule_Signature()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_EntityNameListContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_EntityDesignator(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_EntityDesignatorContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_EntityDesignatorContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def KW_OTHERS(self):
			return self.getToken(VHDLParser.KW_OTHERS, 0)

		def KW_ALL(self):
			return self.getToken(VHDLParser.KW_ALL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_EntityNameList

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_EntityNameList"):
				return visitor.visitRule_EntityNameList(self)
			else:
				return visitor.visitChildren(self)

	def rule_EntityNameList(self):

		localctx = VHDLParser.Rule_EntityNameListContext(self, self._ctx, self.state)
		self.enterRule(localctx, 134, self.RULE_rule_EntityNameList)
		self._la = 0  # Token type
		try:
			self.state = 975
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.LIT_CHARACTER, VHDLParser.LIT_STRING, VHDLParser.LIT_IDENTIFIER]:
				self.enterOuterAlt(localctx, 1)
				self.state = 965
				self.rule_EntityDesignator()
				self.state = 970
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				while _la == VHDLParser.TOK_COMMA:
					self.state = 966
					self.match(VHDLParser.TOK_COMMA)
					self.state = 967
					self.rule_EntityDesignator()
					self.state = 972
					self._errHandler.sync(self)
					_la = self._input.LA(1)

				pass
			elif token in [VHDLParser.KW_OTHERS]:
				self.enterOuterAlt(localctx, 2)
				self.state = 973
				self.match(VHDLParser.KW_OTHERS)
				pass
			elif token in [VHDLParser.KW_ALL]:
				self.enterOuterAlt(localctx, 3)
				self.state = 974
				self.match(VHDLParser.KW_ALL)
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_EntitySpecificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_EntityNameList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_EntityNameListContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def rule_EntityClass(self):
			return self.getTypedRuleContext(VHDLParser.Rule_EntityClassContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_EntitySpecification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_EntitySpecification"):
				return visitor.visitRule_EntitySpecification(self)
			else:
				return visitor.visitChildren(self)

	def rule_EntitySpecification(self):

		localctx = VHDLParser.Rule_EntitySpecificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 136, self.RULE_rule_EntitySpecification)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 977
			self.rule_EntityNameList()
			self.state = 978
			self.match(VHDLParser.TOK_COLON)
			self.state = 979
			self.rule_EntityClass()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_EntityStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_ConcurrentAssertionStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConcurrentAssertionStatementContext, 0)

		def rule_ProcessStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ProcessStatementContext, 0)

		def rule_PostponedProcessStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PostponedProcessStatementContext, 0)

		def rule_ConcurrentProcedureCallStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConcurrentProcedureCallStatementContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_EntityStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_EntityStatement"):
				return visitor.visitRule_EntityStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_EntityStatement(self):

		localctx = VHDLParser.Rule_EntityStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 138, self.RULE_rule_EntityStatement)
		try:
			self.state = 985
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 93, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 981
				self.rule_ConcurrentAssertionStatement()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 982
				self.rule_ProcessStatement()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 983
				self.rule_PostponedProcessStatement()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 984
				self.rule_ConcurrentProcedureCallStatement()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_EntityStatementPartContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_EntityStatement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_EntityStatementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_EntityStatementContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_EntityStatementPart

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_EntityStatementPart"):
				return visitor.visitRule_EntityStatementPart(self)
			else:
				return visitor.visitChildren(self)

	def rule_EntityStatementPart(self):

		localctx = VHDLParser.Rule_EntityStatementPartContext(self, self._ctx, self.state)
		self.enterRule(localctx, 140, self.RULE_rule_EntityStatementPart)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 990
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while ((((_la - 12)) & ~0x3f) == 0 and ((1 << (_la - 12)) & (
				(1 << (VHDLParser.KW_ASSERT - 12)) | (1 << (VHDLParser.KW_POSTPONED - 12)) | (
				1 << (VHDLParser.KW_PROCESS - 12)))) != 0) or _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 987
				self.rule_EntityStatement()
				self.state = 992
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_EntityTagContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def LIT_CHARACTER(self):
			return self.getToken(VHDLParser.LIT_CHARACTER, 0)

		def LIT_STRING(self):
			return self.getToken(VHDLParser.LIT_STRING, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_EntityTag

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_EntityTag"):
				return visitor.visitRule_EntityTag(self)
			else:
				return visitor.visitChildren(self)

	def rule_EntityTag(self):

		localctx = VHDLParser.Rule_EntityTagContext(self, self._ctx, self.state)
		self.enterRule(localctx, 142, self.RULE_rule_EntityTag)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 993
			_la = self._input.LA(1)
			if not (((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & (
				(1 << (VHDLParser.LIT_CHARACTER - 128)) | (1 << (VHDLParser.LIT_STRING - 128)) | (
				1 << (VHDLParser.LIT_IDENTIFIER - 128)))) != 0)):
				self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_EnumerationLiteralContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def LIT_CHARACTER(self):
			return self.getToken(VHDLParser.LIT_CHARACTER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_EnumerationLiteral

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_EnumerationLiteral"):
				return visitor.visitRule_EnumerationLiteral(self)
			else:
				return visitor.visitChildren(self)

	def rule_EnumerationLiteral(self):

		localctx = VHDLParser.Rule_EnumerationLiteralContext(self, self._ctx, self.state)
		self.enterRule(localctx, 144, self.RULE_rule_EnumerationLiteral)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 995
			_la = self._input.LA(1)
			if not (_la == VHDLParser.LIT_CHARACTER or _la == VHDLParser.LIT_IDENTIFIER):
				self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_EnumerationTypeDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def rule_EnumerationLiteral(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_EnumerationLiteralContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_EnumerationLiteralContext, i)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_EnumerationTypeDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_EnumerationTypeDefinition"):
				return visitor.visitRule_EnumerationTypeDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_EnumerationTypeDefinition(self):

		localctx = VHDLParser.Rule_EnumerationTypeDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 146, self.RULE_rule_EnumerationTypeDefinition)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 997
			self.match(VHDLParser.TOK_LP)
			self.state = 998
			self.rule_EnumerationLiteral()
			self.state = 1003
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.TOK_COMMA:
				self.state = 999
				self.match(VHDLParser.TOK_COMMA)
				self.state = 1000
				self.rule_EnumerationLiteral()
				self.state = 1005
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1006
			self.match(VHDLParser.TOK_RP)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ExitStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token
			self.referencedLabel = None  # Token
			self.condition = None  # Rule_ExpressionContext

		def KW_EXIT(self):
			return self.getToken(VHDLParser.KW_EXIT, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def KW_WHEN(self):
			return self.getToken(VHDLParser.KW_WHEN, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ExitStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ExitStatement"):
				return visitor.visitRule_ExitStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_ExitStatement(self):

		localctx = VHDLParser.Rule_ExitStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 148, self.RULE_rule_ExitStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1010
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1008
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 1009
				self.match(VHDLParser.TOK_COLON)

			self.state = 1012
			self.match(VHDLParser.KW_EXIT)
			self.state = 1014
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1013
				localctx.referencedLabel = self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 1018
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_WHEN:
				self.state = 1016
				self.match(VHDLParser.KW_WHEN)
				self.state = 1017
				localctx.condition = self.rule_Expression()

			self.state = 1020
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ExpressionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.left = None  # Rule_RelationContext
			self.operator = None  # Token
			self.right = None  # Rule_RelationContext

		def rule_Relation(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_RelationContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_RelationContext, i)

		def OP_AND(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.OP_AND)
			else:
				return self.getToken(VHDLParser.OP_AND, i)

		def OP_OR(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.OP_OR)
			else:
				return self.getToken(VHDLParser.OP_OR, i)

		def OP_NAND(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.OP_NAND)
			else:
				return self.getToken(VHDLParser.OP_NAND, i)

		def OP_NOR(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.OP_NOR)
			else:
				return self.getToken(VHDLParser.OP_NOR, i)

		def OP_XOR(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.OP_XOR)
			else:
				return self.getToken(VHDLParser.OP_XOR, i)

		def OP_XNOR(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.OP_XNOR)
			else:
				return self.getToken(VHDLParser.OP_XNOR, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Expression

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Expression"):
				return visitor.visitRule_Expression(self)
			else:
				return visitor.visitChildren(self)

	def rule_Expression(self):

		localctx = VHDLParser.Rule_ExpressionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 150, self.RULE_rule_Expression)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1022
			localctx.left = self.rule_Relation()
			self.state = 1027
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.OP_AND) | (1 << VHDLParser.OP_NAND) | (1 << VHDLParser.OP_NOR) | (
				1 << VHDLParser.OP_OR))) != 0) or _la == VHDLParser.OP_XNOR or _la == VHDLParser.OP_XOR:
				self.state = 1023
				localctx.operator = self._input.LT(1)
				_la = self._input.LA(1)
				if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
					(1 << VHDLParser.OP_AND) | (1 << VHDLParser.OP_NAND) | (1 << VHDLParser.OP_NOR) | (
					1 << VHDLParser.OP_OR))) != 0) or _la == VHDLParser.OP_XNOR or _la == VHDLParser.OP_XOR):
					localctx.operator = self._errHandler.recoverInline(self)
				else:
					self._errHandler.reportMatch(self)
					self.consume()
				self.state = 1024
				localctx.right = self.rule_Relation()
				self.state = 1029
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_FactorContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.left = None  # Rule_PrimaryContext
			self.operator = None  # Token
			self.right = None  # Rule_PrimaryContext

		def rule_Primary(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_PrimaryContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_PrimaryContext, i)

		def OP_POW(self):
			return self.getToken(VHDLParser.OP_POW, 0)

		def OP_ABS(self):
			return self.getToken(VHDLParser.OP_ABS, 0)

		def OP_NOT(self):
			return self.getToken(VHDLParser.OP_NOT, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Factor

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Factor"):
				return visitor.visitRule_Factor(self)
			else:
				return visitor.visitChildren(self)

	def rule_Factor(self):

		localctx = VHDLParser.Rule_FactorContext(self, self._ctx, self.state)
		self.enterRule(localctx, 152, self.RULE_rule_Factor)
		try:
			self.state = 1039
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.KW_NEW, VHDLParser.KW_NULL, VHDLParser.TOK_LP, VHDLParser.LIT_ABSTRACT,
									 VHDLParser.LIT_BIT_STRING, VHDLParser.LIT_CHARACTER, VHDLParser.LIT_STRING,
									 VHDLParser.LIT_IDENTIFIER]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1030
				localctx.left = self.rule_Primary()
				self.state = 1033
				self._errHandler.sync(self)
				la_ = self._interp.adaptivePredict(self._input, 100, self._ctx)
				if la_ == 1:
					self.state = 1031
					localctx.operator = self.match(VHDLParser.OP_POW)
					self.state = 1032
					localctx.right = self.rule_Primary()

				pass
			elif token in [VHDLParser.OP_ABS]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1035
				localctx.operator = self.match(VHDLParser.OP_ABS)
				self.state = 1036
				localctx.left = self.rule_Primary()
				pass
			elif token in [VHDLParser.OP_NOT]:
				self.enterOuterAlt(localctx, 3)
				self.state = 1037
				localctx.operator = self.match(VHDLParser.OP_NOT)
				self.state = 1038
				localctx.left = self.rule_Primary()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_FileDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext

		def KW_FILE(self):
			return self.getToken(VHDLParser.KW_FILE, 0)

		def rule_IdentifierList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IdentifierListContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def rule_FileOpenInformation(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FileOpenInformationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_FileDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_FileDeclaration"):
				return visitor.visitRule_FileDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_FileDeclaration(self):

		localctx = VHDLParser.Rule_FileDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 154, self.RULE_rule_FileDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1041
			self.match(VHDLParser.KW_FILE)
			self.state = 1042
			self.rule_IdentifierList()
			self.state = 1043
			self.match(VHDLParser.TOK_COLON)
			self.state = 1044
			localctx.subtypeIndication = self.rule_SubtypeIndication()
			self.state = 1046
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_IS or _la == VHDLParser.KW_OPEN:
				self.state = 1045
				self.rule_FileOpenInformation()

			self.state = 1048
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_FileOpenInformationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.expression = None  # Rule_ExpressionContext

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def rule_Expression(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ExpressionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, i)

		def KW_OPEN(self):
			return self.getToken(VHDLParser.KW_OPEN, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_FileOpenInformation

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_FileOpenInformation"):
				return visitor.visitRule_FileOpenInformation(self)
			else:
				return visitor.visitChildren(self)

	def rule_FileOpenInformation(self):

		localctx = VHDLParser.Rule_FileOpenInformationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 156, self.RULE_rule_FileOpenInformation)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1052
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_OPEN:
				self.state = 1050
				self.match(VHDLParser.KW_OPEN)
				self.state = 1051
				localctx.expression = self.rule_Expression()

			self.state = 1054
			self.match(VHDLParser.KW_IS)
			self.state = 1055
			localctx.expression = self.rule_Expression()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_FileTypeDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext

		def KW_FILE(self):
			return self.getToken(VHDLParser.KW_FILE, 0)

		def KW_OF(self):
			return self.getToken(VHDLParser.KW_OF, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_FileTypeDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_FileTypeDefinition"):
				return visitor.visitRule_FileTypeDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_FileTypeDefinition(self):

		localctx = VHDLParser.Rule_FileTypeDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 158, self.RULE_rule_FileTypeDefinition)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1057
			self.match(VHDLParser.KW_FILE)
			self.state = 1058
			self.match(VHDLParser.KW_OF)
			self.state = 1059
			localctx.subtypeIndication = self.rule_SubtypeIndication()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_FormalParameterListContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_InterfaceList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_InterfaceListContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_FormalParameterList

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_FormalParameterList"):
				return visitor.visitRule_FormalParameterList(self)
			else:
				return visitor.visitChildren(self)

	def rule_FormalParameterList(self):

		localctx = VHDLParser.Rule_FormalParameterListContext(self, self._ctx, self.state)
		self.enterRule(localctx, 160, self.RULE_rule_FormalParameterList)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1061
			self.rule_InterfaceList()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_FormalPartContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def rule_ExplicitRange(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExplicitRangeContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_FormalPart

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_FormalPart"):
				return visitor.visitRule_FormalPart(self)
			else:
				return visitor.visitChildren(self)

	def rule_FormalPart(self):

		localctx = VHDLParser.Rule_FormalPartContext(self, self._ctx, self.state)
		self.enterRule(localctx, 162, self.RULE_rule_FormalPart)
		try:
			self.state = 1069
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 104, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1063
				self.match(VHDLParser.LIT_IDENTIFIER)
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1064
				self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 1065
				self.match(VHDLParser.TOK_LP)
				self.state = 1066
				self.rule_ExplicitRange()
				self.state = 1067
				self.match(VHDLParser.TOK_RP)
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_GenerateStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def rule_GenerationScheme(self):
			return self.getTypedRuleContext(VHDLParser.Rule_GenerationSchemeContext, 0)

		def KW_GENERATE(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_GENERATE)
			else:
				return self.getToken(VHDLParser.KW_GENERATE, i)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def KW_BEGIN(self):
			return self.getToken(VHDLParser.KW_BEGIN, 0)

		def rule_ArchitectureStatement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ArchitectureStatementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ArchitectureStatementContext, i)

		def rule_BlockDeclarativeItem(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_BlockDeclarativeItemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_BlockDeclarativeItemContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_GenerateStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_GenerateStatement"):
				return visitor.visitRule_GenerateStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_GenerateStatement(self):

		localctx = VHDLParser.Rule_GenerateStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 164, self.RULE_rule_GenerateStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1071
			localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 1072
			self.match(VHDLParser.TOK_COLON)
			self.state = 1073
			self.rule_GenerationScheme()
			self.state = 1074
			self.match(VHDLParser.KW_GENERATE)
			self.state = 1082
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_ALIAS) | (1 << VHDLParser.KW_ATTRIBUTE) | (1 << VHDLParser.KW_BEGIN) | (
				1 << VHDLParser.KW_COMPONENT) | (1 << VHDLParser.KW_CONSTANT) | (1 << VHDLParser.KW_DISCONNECT) | (
					1 << VHDLParser.KW_FILE) | (1 << VHDLParser.KW_FOR) | (1 << VHDLParser.KW_FUNCTION) | (
					1 << VHDLParser.KW_IMPURE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & (
				(1 << (VHDLParser.KW_PROCEDURE - 65)) | (1 << (VHDLParser.KW_PURE - 65)) | (
				1 << (VHDLParser.KW_SHARED - 65)) | (1 << (VHDLParser.KW_SIGNAL - 65)) | (1 << (VHDLParser.KW_SUBTYPE - 65)) | (
					1 << (VHDLParser.KW_TYPE - 65)) | (1 << (VHDLParser.KW_USE - 65)) | (
					1 << (VHDLParser.KW_VARIABLE - 65)))) != 0):
				self.state = 1078
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
					(1 << VHDLParser.KW_ALIAS) | (1 << VHDLParser.KW_ATTRIBUTE) | (1 << VHDLParser.KW_COMPONENT) | (
					1 << VHDLParser.KW_CONSTANT) | (1 << VHDLParser.KW_DISCONNECT) | (1 << VHDLParser.KW_FILE) | (
						1 << VHDLParser.KW_FOR) | (1 << VHDLParser.KW_FUNCTION) | (1 << VHDLParser.KW_IMPURE))) != 0) or (
					(((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & (
					(1 << (VHDLParser.KW_PROCEDURE - 65)) | (1 << (VHDLParser.KW_PURE - 65)) | (
					1 << (VHDLParser.KW_SHARED - 65)) | (1 << (VHDLParser.KW_SIGNAL - 65)) | (
						1 << (VHDLParser.KW_SUBTYPE - 65)) | (1 << (VHDLParser.KW_TYPE - 65)) | (1 << (VHDLParser.KW_USE - 65)) | (
						1 << (VHDLParser.KW_VARIABLE - 65)))) != 0):
					self.state = 1075
					self.rule_BlockDeclarativeItem()
					self.state = 1080
					self._errHandler.sync(self)
					_la = self._input.LA(1)

				self.state = 1081
				self.match(VHDLParser.KW_BEGIN)

			self.state = 1087
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while ((((_la - 12)) & ~0x3f) == 0 and ((1 << (_la - 12)) & (
				(1 << (VHDLParser.KW_ASSERT - 12)) | (1 << (VHDLParser.KW_POSTPONED - 12)) | (
				1 << (VHDLParser.KW_PROCESS - 12)))) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & (
				(1 << (VHDLParser.KW_WITH - 95)) | (1 << (VHDLParser.TOK_LP - 95)) | (1 << (VHDLParser.LIT_STRING - 95)) | (
				1 << (VHDLParser.LIT_IDENTIFIER - 95)))) != 0):
				self.state = 1084
				self.rule_ArchitectureStatement()
				self.state = 1089
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1090
			self.match(VHDLParser.KW_END)
			self.state = 1091
			self.match(VHDLParser.KW_GENERATE)
			self.state = 1093
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1092
				self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 1095
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_GenerationSchemeContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.condition = None  # Rule_ExpressionContext

		def KW_FOR(self):
			return self.getToken(VHDLParser.KW_FOR, 0)

		def rule_ParameterSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ParameterSpecificationContext, 0)

		def KW_IF(self):
			return self.getToken(VHDLParser.KW_IF, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_GenerationScheme

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_GenerationScheme"):
				return visitor.visitRule_GenerationScheme(self)
			else:
				return visitor.visitChildren(self)

	def rule_GenerationScheme(self):

		localctx = VHDLParser.Rule_GenerationSchemeContext(self, self._ctx, self.state)
		self.enterRule(localctx, 166, self.RULE_rule_GenerationScheme)
		try:
			self.state = 1101
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.KW_FOR]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1097
				self.match(VHDLParser.KW_FOR)
				self.state = 1098
				self.rule_ParameterSpecification()
				pass
			elif token in [VHDLParser.KW_IF]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1099
				self.match(VHDLParser.KW_IF)
				self.state = 1100
				localctx.condition = self.rule_Expression()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_GenericClauseContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_InterfaceConstantDeclaration = None  # Rule_InterfaceConstantDeclarationContext
			self.constants = list()  # of Rule_InterfaceConstantDeclarationContexts

		def KW_GENERIC(self):
			return self.getToken(VHDLParser.KW_GENERIC, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def TOK_SEMICOL(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_SEMICOL)
			else:
				return self.getToken(VHDLParser.TOK_SEMICOL, i)

		def rule_InterfaceConstantDeclaration(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_InterfaceConstantDeclarationContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_InterfaceConstantDeclarationContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_GenericClause

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_GenericClause"):
				return visitor.visitRule_GenericClause(self)
			else:
				return visitor.visitChildren(self)

	def rule_GenericClause(self):

		localctx = VHDLParser.Rule_GenericClauseContext(self, self._ctx, self.state)
		self.enterRule(localctx, 168, self.RULE_rule_GenericClause)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1103
			self.match(VHDLParser.KW_GENERIC)
			self.state = 1104
			self.match(VHDLParser.TOK_LP)
			self.state = 1105
			localctx._rule_InterfaceConstantDeclaration = self.rule_InterfaceConstantDeclaration()
			localctx.constants.append(localctx._rule_InterfaceConstantDeclaration)
			self.state = 1110
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.TOK_SEMICOL:
				self.state = 1106
				self.match(VHDLParser.TOK_SEMICOL)
				self.state = 1107
				localctx._rule_InterfaceConstantDeclaration = self.rule_InterfaceConstantDeclaration()
				localctx.constants.append(localctx._rule_InterfaceConstantDeclaration)
				self.state = 1112
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1113
			self.match(VHDLParser.TOK_RP)
			self.state = 1114
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_GenericMapAspectContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.associationList = None  # Rule_AssociationListContext

		def KW_GENERIC(self):
			return self.getToken(VHDLParser.KW_GENERIC, 0)

		def KW_MAP(self):
			return self.getToken(VHDLParser.KW_MAP, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def rule_AssociationList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AssociationListContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_GenericMapAspect

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_GenericMapAspect"):
				return visitor.visitRule_GenericMapAspect(self)
			else:
				return visitor.visitChildren(self)

	def rule_GenericMapAspect(self):

		localctx = VHDLParser.Rule_GenericMapAspectContext(self, self._ctx, self.state)
		self.enterRule(localctx, 170, self.RULE_rule_GenericMapAspect)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1116
			self.match(VHDLParser.KW_GENERIC)
			self.state = 1117
			self.match(VHDLParser.KW_MAP)
			self.state = 1118
			self.match(VHDLParser.TOK_LP)
			self.state = 1119
			localctx.associationList = self.rule_AssociationList()
			self.state = 1120
			self.match(VHDLParser.TOK_RP)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_GuardedSignalSpecificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_SignalList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SignalListContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_GuardedSignalSpecification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_GuardedSignalSpecification"):
				return visitor.visitRule_GuardedSignalSpecification(self)
			else:
				return visitor.visitChildren(self)

	def rule_GuardedSignalSpecification(self):

		localctx = VHDLParser.Rule_GuardedSignalSpecificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 172, self.RULE_rule_GuardedSignalSpecification)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1122
			self.rule_SignalList()
			self.state = 1123
			self.match(VHDLParser.TOK_COLON)
			self.state = 1124
			self.rule_Name()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_IdentifierListContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._LIT_IDENTIFIER = None  # Token
			self.identifier = list()  # of Tokens

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_IdentifierList

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_IdentifierList"):
				return visitor.visitRule_IdentifierList(self)
			else:
				return visitor.visitChildren(self)

	def rule_IdentifierList(self):

		localctx = VHDLParser.Rule_IdentifierListContext(self, self._ctx, self.state)
		self.enterRule(localctx, 174, self.RULE_rule_IdentifierList)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1126
			localctx._LIT_IDENTIFIER = self.match(VHDLParser.LIT_IDENTIFIER)
			localctx.identifier.append(localctx._LIT_IDENTIFIER)
			self.state = 1131
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.TOK_COMMA:
				self.state = 1127
				self.match(VHDLParser.TOK_COMMA)
				self.state = 1128
				localctx._LIT_IDENTIFIER = self.match(VHDLParser.LIT_IDENTIFIER)
				localctx.identifier.append(localctx._LIT_IDENTIFIER)
				self.state = 1133
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_IfStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token
			self.condition = None  # Rule_ExpressionContext
			self._rule_SequentialStatement = None  # Rule_SequentialStatementContext
			self.thenStatements = list()  # of Rule_SequentialStatementContexts
			self.elseifStatements = list()  # of Rule_SequentialStatementContexts
			self.elseStatements = list()  # of Rule_SequentialStatementContexts

		def KW_IF(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_IF)
			else:
				return self.getToken(VHDLParser.KW_IF, i)

		def KW_THEN(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_THEN)
			else:
				return self.getToken(VHDLParser.KW_THEN, i)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_Expression(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ExpressionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, i)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def KW_ELSIF(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_ELSIF)
			else:
				return self.getToken(VHDLParser.KW_ELSIF, i)

		def KW_ELSE(self):
			return self.getToken(VHDLParser.KW_ELSE, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def rule_SequentialStatement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_SequentialStatementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_SequentialStatementContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_IfStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_IfStatement"):
				return visitor.visitRule_IfStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_IfStatement(self):

		localctx = VHDLParser.Rule_IfStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 176, self.RULE_rule_IfStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1136
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1134
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 1135
				self.match(VHDLParser.TOK_COLON)

			self.state = 1138
			self.match(VHDLParser.KW_IF)
			self.state = 1139
			localctx.condition = self.rule_Expression()
			self.state = 1140
			self.match(VHDLParser.KW_THEN)
			self.state = 1144
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_ASSERT) | (1 << VHDLParser.KW_CASE) | (1 << VHDLParser.KW_EXIT) | (
				1 << VHDLParser.KW_FOR) | (1 << VHDLParser.KW_IF) | (1 << VHDLParser.KW_LOOP) | (1 << VHDLParser.KW_NEXT) | (
					1 << VHDLParser.KW_NULL))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & (
				(1 << (VHDLParser.KW_REPORT - 72)) | (1 << (VHDLParser.KW_RETURN - 72)) | (1 << (VHDLParser.KW_WAIT - 72)) | (
				1 << (VHDLParser.KW_WHILE - 72)) | (1 << (VHDLParser.TOK_LP - 72)) | (1 << (VHDLParser.LIT_STRING - 72)) | (
					1 << (VHDLParser.LIT_IDENTIFIER - 72)))) != 0):
				self.state = 1141
				localctx._rule_SequentialStatement = self.rule_SequentialStatement()
				localctx.thenStatements.append(localctx._rule_SequentialStatement)
				self.state = 1146
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1158
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.KW_ELSIF:
				self.state = 1147
				self.match(VHDLParser.KW_ELSIF)
				self.state = 1148
				localctx.condition = self.rule_Expression()
				self.state = 1149
				self.match(VHDLParser.KW_THEN)
				self.state = 1153
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
					(1 << VHDLParser.KW_ASSERT) | (1 << VHDLParser.KW_CASE) | (1 << VHDLParser.KW_EXIT) | (
					1 << VHDLParser.KW_FOR) | (1 << VHDLParser.KW_IF) | (1 << VHDLParser.KW_LOOP) | (1 << VHDLParser.KW_NEXT) | (
						1 << VHDLParser.KW_NULL))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & (
					(1 << (VHDLParser.KW_REPORT - 72)) | (1 << (VHDLParser.KW_RETURN - 72)) | (1 << (VHDLParser.KW_WAIT - 72)) | (
					1 << (VHDLParser.KW_WHILE - 72)) | (1 << (VHDLParser.TOK_LP - 72)) | (1 << (VHDLParser.LIT_STRING - 72)) | (
						1 << (VHDLParser.LIT_IDENTIFIER - 72)))) != 0):
					self.state = 1150
					localctx._rule_SequentialStatement = self.rule_SequentialStatement()
					localctx.elseifStatements.append(localctx._rule_SequentialStatement)
					self.state = 1155
					self._errHandler.sync(self)
					_la = self._input.LA(1)

				self.state = 1160
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1168
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_ELSE:
				self.state = 1161
				self.match(VHDLParser.KW_ELSE)
				self.state = 1165
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
					(1 << VHDLParser.KW_ASSERT) | (1 << VHDLParser.KW_CASE) | (1 << VHDLParser.KW_EXIT) | (
					1 << VHDLParser.KW_FOR) | (1 << VHDLParser.KW_IF) | (1 << VHDLParser.KW_LOOP) | (1 << VHDLParser.KW_NEXT) | (
						1 << VHDLParser.KW_NULL))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & (
					(1 << (VHDLParser.KW_REPORT - 72)) | (1 << (VHDLParser.KW_RETURN - 72)) | (1 << (VHDLParser.KW_WAIT - 72)) | (
					1 << (VHDLParser.KW_WHILE - 72)) | (1 << (VHDLParser.TOK_LP - 72)) | (1 << (VHDLParser.LIT_STRING - 72)) | (
						1 << (VHDLParser.LIT_IDENTIFIER - 72)))) != 0):
					self.state = 1162
					localctx._rule_SequentialStatement = self.rule_SequentialStatement()
					localctx.elseStatements.append(localctx._rule_SequentialStatement)
					self.state = 1167
					self._errHandler.sync(self)
					_la = self._input.LA(1)

			self.state = 1170
			self.match(VHDLParser.KW_END)
			self.state = 1171
			self.match(VHDLParser.KW_IF)
			self.state = 1173
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1172
				self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 1175
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_IndexConstraintContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_DiscreteRange = None  # Rule_DiscreteRangeContext
			self.ranges = list()  # of Rule_DiscreteRangeContexts

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def rule_DiscreteRange(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_DiscreteRangeContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_DiscreteRangeContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_IndexConstraint

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_IndexConstraint"):
				return visitor.visitRule_IndexConstraint(self)
			else:
				return visitor.visitChildren(self)

	def rule_IndexConstraint(self):

		localctx = VHDLParser.Rule_IndexConstraintContext(self, self._ctx, self.state)
		self.enterRule(localctx, 178, self.RULE_rule_IndexConstraint)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1177
			self.match(VHDLParser.TOK_LP)
			self.state = 1178
			localctx._rule_DiscreteRange = self.rule_DiscreteRange()
			localctx.ranges.append(localctx._rule_DiscreteRange)
			self.state = 1183
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.TOK_COMMA:
				self.state = 1179
				self.match(VHDLParser.TOK_COMMA)
				self.state = 1180
				localctx._rule_DiscreteRange = self.rule_DiscreteRange()
				localctx.ranges.append(localctx._rule_DiscreteRange)
				self.state = 1185
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1186
			self.match(VHDLParser.TOK_RP)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_IndexSpecificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.range_ = None  # Rule_DiscreteRangeContext
			self.expression = None  # Rule_ExpressionContext

		def rule_DiscreteRange(self):
			return self.getTypedRuleContext(VHDLParser.Rule_DiscreteRangeContext, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_IndexSpecification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_IndexSpecification"):
				return visitor.visitRule_IndexSpecification(self)
			else:
				return visitor.visitChildren(self)

	def rule_IndexSpecification(self):

		localctx = VHDLParser.Rule_IndexSpecificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 180, self.RULE_rule_IndexSpecification)
		try:
			self.state = 1190
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 120, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1188
				localctx.range_ = self.rule_DiscreteRange()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1189
				localctx.expression = self.rule_Expression()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_IndexSubtypeDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.name = None  # Rule_NameContext

		def KW_RANGE(self):
			return self.getToken(VHDLParser.KW_RANGE, 0)

		def TOK_BOX(self):
			return self.getToken(VHDLParser.TOK_BOX, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_IndexSubtypeDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_IndexSubtypeDefinition"):
				return visitor.visitRule_IndexSubtypeDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_IndexSubtypeDefinition(self):

		localctx = VHDLParser.Rule_IndexSubtypeDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 182, self.RULE_rule_IndexSubtypeDefinition)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1192
			localctx.name = self.rule_Name()
			self.state = 1193
			self.match(VHDLParser.KW_RANGE)
			self.state = 1194
			self.match(VHDLParser.TOK_BOX)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_InstantiatedUnitContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.component = None  # Token
			self.componentName = None  # Rule_NameContext
			self.entityName = None  # Rule_NameContext
			self.architectureName = None  # Token
			self.configurationName = None  # Rule_NameContext

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def KW_COMPONENT(self):
			return self.getToken(VHDLParser.KW_COMPONENT, 0)

		def KW_ENTITY(self):
			return self.getToken(VHDLParser.KW_ENTITY, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def KW_CONFIGURATION(self):
			return self.getToken(VHDLParser.KW_CONFIGURATION, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_InstantiatedUnit

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_InstantiatedUnit"):
				return visitor.visitRule_InstantiatedUnit(self)
			else:
				return visitor.visitChildren(self)

	def rule_InstantiatedUnit(self):

		localctx = VHDLParser.Rule_InstantiatedUnitContext(self, self._ctx, self.state)
		self.enterRule(localctx, 184, self.RULE_rule_InstantiatedUnit)
		self._la = 0  # Token type
		try:
			self.state = 1209
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.KW_COMPONENT, VHDLParser.LIT_STRING, VHDLParser.LIT_IDENTIFIER]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1197
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == VHDLParser.KW_COMPONENT:
					self.state = 1196
					localctx.component = self.match(VHDLParser.KW_COMPONENT)

				self.state = 1199
				localctx.componentName = self.rule_Name()
				pass
			elif token in [VHDLParser.KW_ENTITY]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1200
				self.match(VHDLParser.KW_ENTITY)
				self.state = 1201
				localctx.entityName = self.rule_Name()
				self.state = 1205
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == VHDLParser.TOK_LP:
					self.state = 1202
					self.match(VHDLParser.TOK_LP)
					self.state = 1203
					localctx.architectureName = self.match(VHDLParser.LIT_IDENTIFIER)
					self.state = 1204
					self.match(VHDLParser.TOK_RP)

				pass
			elif token in [VHDLParser.KW_CONFIGURATION]:
				self.enterOuterAlt(localctx, 3)
				self.state = 1207
				self.match(VHDLParser.KW_CONFIGURATION)
				self.state = 1208
				localctx.configurationName = self.rule_Name()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_InstantiationListContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._LIT_IDENTIFIER = None  # Token
			self.componentNames = list()  # of Tokens
			self.others = None  # Token
			self.all_ = None  # Token

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def KW_OTHERS(self):
			return self.getToken(VHDLParser.KW_OTHERS, 0)

		def KW_ALL(self):
			return self.getToken(VHDLParser.KW_ALL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_InstantiationList

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_InstantiationList"):
				return visitor.visitRule_InstantiationList(self)
			else:
				return visitor.visitChildren(self)

	def rule_InstantiationList(self):

		localctx = VHDLParser.Rule_InstantiationListContext(self, self._ctx, self.state)
		self.enterRule(localctx, 186, self.RULE_rule_InstantiationList)
		self._la = 0  # Token type
		try:
			self.state = 1221
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.LIT_IDENTIFIER]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1211
				localctx._LIT_IDENTIFIER = self.match(VHDLParser.LIT_IDENTIFIER)
				localctx.componentNames.append(localctx._LIT_IDENTIFIER)
				self.state = 1216
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				while _la == VHDLParser.TOK_COMMA:
					self.state = 1212
					self.match(VHDLParser.TOK_COMMA)
					self.state = 1213
					localctx._LIT_IDENTIFIER = self.match(VHDLParser.LIT_IDENTIFIER)
					localctx.componentNames.append(localctx._LIT_IDENTIFIER)
					self.state = 1218
					self._errHandler.sync(self)
					_la = self._input.LA(1)

				pass
			elif token in [VHDLParser.KW_OTHERS]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1219
				localctx.others = self.match(VHDLParser.KW_OTHERS)
				pass
			elif token in [VHDLParser.KW_ALL]:
				self.enterOuterAlt(localctx, 3)
				self.state = 1220
				localctx.all_ = self.match(VHDLParser.KW_ALL)
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_InterfaceConstantDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.constantNames = None  # Rule_IdentifierListContext
			self.modeName = None  # Token
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext
			self.defaultValue = None  # Rule_ExpressionContext

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def rule_IdentifierList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IdentifierListContext, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def KW_CONSTANT(self):
			return self.getToken(VHDLParser.KW_CONSTANT, 0)

		def TOK_VAR_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_VAR_ASSIGN, 0)

		def KW_IN(self):
			return self.getToken(VHDLParser.KW_IN, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_InterfaceConstantDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_InterfaceConstantDeclaration"):
				return visitor.visitRule_InterfaceConstantDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_InterfaceConstantDeclaration(self):

		localctx = VHDLParser.Rule_InterfaceConstantDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 188, self.RULE_rule_InterfaceConstantDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1224
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_CONSTANT:
				self.state = 1223
				self.match(VHDLParser.KW_CONSTANT)

			self.state = 1226
			localctx.constantNames = self.rule_IdentifierList()
			self.state = 1227
			self.match(VHDLParser.TOK_COLON)
			self.state = 1229
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_IN:
				self.state = 1228
				localctx.modeName = self.match(VHDLParser.KW_IN)

			self.state = 1231
			localctx.subtypeIndication = self.rule_SubtypeIndication()
			self.state = 1234
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_VAR_ASSIGN:
				self.state = 1232
				self.match(VHDLParser.TOK_VAR_ASSIGN)
				self.state = 1233
				localctx.defaultValue = self.rule_Expression()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_InterfaceDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_InterfaceConstantDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_InterfaceConstantDeclarationContext, 0)

		def rule_InterfaceSignalDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_InterfaceSignalDeclarationContext, 0)

		def rule_InterfaceVariableDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_InterfaceVariableDeclarationContext, 0)

		def rule_InterfaceFileDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_InterfaceFileDeclarationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_InterfaceDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_InterfaceDeclaration"):
				return visitor.visitRule_InterfaceDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_InterfaceDeclaration(self):

		localctx = VHDLParser.Rule_InterfaceDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 190, self.RULE_rule_InterfaceDeclaration)
		try:
			self.state = 1240
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 129, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1236
				self.rule_InterfaceConstantDeclaration()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1237
				self.rule_InterfaceSignalDeclaration()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 1238
				self.rule_InterfaceVariableDeclaration()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 1239
				self.rule_InterfaceFileDeclaration()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_InterfaceElementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_InterfaceDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_InterfaceDeclarationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_InterfaceElement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_InterfaceElement"):
				return visitor.visitRule_InterfaceElement(self)
			else:
				return visitor.visitChildren(self)

	def rule_InterfaceElement(self):

		localctx = VHDLParser.Rule_InterfaceElementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 192, self.RULE_rule_InterfaceElement)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1242
			self.rule_InterfaceDeclaration()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_InterfaceFileDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.names = None  # Rule_IdentifierListContext
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext

		def KW_FILE(self):
			return self.getToken(VHDLParser.KW_FILE, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def rule_IdentifierList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IdentifierListContext, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_InterfaceFileDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_InterfaceFileDeclaration"):
				return visitor.visitRule_InterfaceFileDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_InterfaceFileDeclaration(self):

		localctx = VHDLParser.Rule_InterfaceFileDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 194, self.RULE_rule_InterfaceFileDeclaration)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1244
			self.match(VHDLParser.KW_FILE)
			self.state = 1245
			localctx.names = self.rule_IdentifierList()
			self.state = 1246
			self.match(VHDLParser.TOK_COLON)
			self.state = 1247
			localctx.subtypeIndication = self.rule_SubtypeIndication()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_InterfaceSignalListContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_InterfaceSignalDeclaration = None  # Rule_InterfaceSignalDeclarationContext
			self.interfaceSignalDeclarations = list()  # of Rule_InterfaceSignalDeclarationContexts

		def rule_InterfaceSignalDeclaration(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_InterfaceSignalDeclarationContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_InterfaceSignalDeclarationContext, i)

		def TOK_SEMICOL(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_SEMICOL)
			else:
				return self.getToken(VHDLParser.TOK_SEMICOL, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_InterfaceSignalList

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_InterfaceSignalList"):
				return visitor.visitRule_InterfaceSignalList(self)
			else:
				return visitor.visitChildren(self)

	def rule_InterfaceSignalList(self):

		localctx = VHDLParser.Rule_InterfaceSignalListContext(self, self._ctx, self.state)
		self.enterRule(localctx, 196, self.RULE_rule_InterfaceSignalList)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1249
			localctx._rule_InterfaceSignalDeclaration = self.rule_InterfaceSignalDeclaration()
			localctx.interfaceSignalDeclarations.append(localctx._rule_InterfaceSignalDeclaration)
			self.state = 1254
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.TOK_SEMICOL:
				self.state = 1250
				self.match(VHDLParser.TOK_SEMICOL)
				self.state = 1251
				localctx._rule_InterfaceSignalDeclaration = self.rule_InterfaceSignalDeclaration()
				localctx.interfaceSignalDeclarations.append(localctx._rule_InterfaceSignalDeclaration)
				self.state = 1256
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_InterfaceListContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_InterfaceElement = None  # Rule_InterfaceElementContext
			self.interfaceElements = list()  # of Rule_InterfaceElementContexts

		def rule_InterfaceElement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_InterfaceElementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_InterfaceElementContext, i)

		def TOK_SEMICOL(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_SEMICOL)
			else:
				return self.getToken(VHDLParser.TOK_SEMICOL, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_InterfaceList

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_InterfaceList"):
				return visitor.visitRule_InterfaceList(self)
			else:
				return visitor.visitChildren(self)

	def rule_InterfaceList(self):

		localctx = VHDLParser.Rule_InterfaceListContext(self, self._ctx, self.state)
		self.enterRule(localctx, 198, self.RULE_rule_InterfaceList)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1257
			localctx._rule_InterfaceElement = self.rule_InterfaceElement()
			localctx.interfaceElements.append(localctx._rule_InterfaceElement)
			self.state = 1262
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.TOK_SEMICOL:
				self.state = 1258
				self.match(VHDLParser.TOK_SEMICOL)
				self.state = 1259
				localctx._rule_InterfaceElement = self.rule_InterfaceElement()
				localctx.interfaceElements.append(localctx._rule_InterfaceElement)
				self.state = 1264
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_InterfacePortDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.names = None  # Rule_IdentifierListContext
			self.modeName = None  # Rule_ModeContext
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext
			self.bus = None  # Token
			self.expression = None  # Rule_ExpressionContext

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def rule_IdentifierList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IdentifierListContext, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def TOK_VAR_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_VAR_ASSIGN, 0)

		def rule_Mode(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ModeContext, 0)

		def KW_BUS(self):
			return self.getToken(VHDLParser.KW_BUS, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_InterfacePortDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_InterfacePortDeclaration"):
				return visitor.visitRule_InterfacePortDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_InterfacePortDeclaration(self):

		localctx = VHDLParser.Rule_InterfacePortDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 200, self.RULE_rule_InterfacePortDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1265
			localctx.names = self.rule_IdentifierList()
			self.state = 1266
			self.match(VHDLParser.TOK_COLON)
			self.state = 1268
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_BUFFER) | (1 << VHDLParser.KW_IN) | (1 << VHDLParser.KW_INOUT) | (
				1 << VHDLParser.KW_LINKAGE) | (1 << VHDLParser.KW_OUT))) != 0):
				self.state = 1267
				localctx.modeName = self.rule_Mode()

			self.state = 1270
			localctx.subtypeIndication = self.rule_SubtypeIndication()
			self.state = 1272
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_BUS:
				self.state = 1271
				localctx.bus = self.match(VHDLParser.KW_BUS)

			self.state = 1276
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_VAR_ASSIGN:
				self.state = 1274
				self.match(VHDLParser.TOK_VAR_ASSIGN)
				self.state = 1275
				localctx.expression = self.rule_Expression()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_InterfaceSignalDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.modeName = None  # Rule_ModeContext
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext
			self.bus = None  # Token
			self.expression = None  # Rule_ExpressionContext

		def KW_SIGNAL(self):
			return self.getToken(VHDLParser.KW_SIGNAL, 0)

		def rule_IdentifierList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IdentifierListContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def TOK_VAR_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_VAR_ASSIGN, 0)

		def rule_Mode(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ModeContext, 0)

		def KW_BUS(self):
			return self.getToken(VHDLParser.KW_BUS, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_InterfaceSignalDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_InterfaceSignalDeclaration"):
				return visitor.visitRule_InterfaceSignalDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_InterfaceSignalDeclaration(self):

		localctx = VHDLParser.Rule_InterfaceSignalDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 202, self.RULE_rule_InterfaceSignalDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1278
			self.match(VHDLParser.KW_SIGNAL)
			self.state = 1279
			self.rule_IdentifierList()
			self.state = 1280
			self.match(VHDLParser.TOK_COLON)
			self.state = 1282
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_BUFFER) | (1 << VHDLParser.KW_IN) | (1 << VHDLParser.KW_INOUT) | (
				1 << VHDLParser.KW_LINKAGE) | (1 << VHDLParser.KW_OUT))) != 0):
				self.state = 1281
				localctx.modeName = self.rule_Mode()

			self.state = 1284
			localctx.subtypeIndication = self.rule_SubtypeIndication()
			self.state = 1286
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_BUS:
				self.state = 1285
				localctx.bus = self.match(VHDLParser.KW_BUS)

			self.state = 1290
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_VAR_ASSIGN:
				self.state = 1288
				self.match(VHDLParser.TOK_VAR_ASSIGN)
				self.state = 1289
				localctx.expression = self.rule_Expression()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_InterfaceVariableDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.names = None  # Rule_IdentifierListContext
			self.modeName = None  # Rule_ModeContext
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext
			self.expression = None  # Rule_ExpressionContext

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def rule_IdentifierList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IdentifierListContext, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def KW_VARIABLE(self):
			return self.getToken(VHDLParser.KW_VARIABLE, 0)

		def TOK_VAR_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_VAR_ASSIGN, 0)

		def rule_Mode(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ModeContext, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_InterfaceVariableDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_InterfaceVariableDeclaration"):
				return visitor.visitRule_InterfaceVariableDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_InterfaceVariableDeclaration(self):

		localctx = VHDLParser.Rule_InterfaceVariableDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 204, self.RULE_rule_InterfaceVariableDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1293
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_VARIABLE:
				self.state = 1292
				self.match(VHDLParser.KW_VARIABLE)

			self.state = 1295
			localctx.names = self.rule_IdentifierList()
			self.state = 1296
			self.match(VHDLParser.TOK_COLON)
			self.state = 1298
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_BUFFER) | (1 << VHDLParser.KW_IN) | (1 << VHDLParser.KW_INOUT) | (
				1 << VHDLParser.KW_LINKAGE) | (1 << VHDLParser.KW_OUT))) != 0):
				self.state = 1297
				localctx.modeName = self.rule_Mode()

			self.state = 1300
			localctx.subtypeIndication = self.rule_SubtypeIndication()
			self.state = 1303
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_VAR_ASSIGN:
				self.state = 1301
				self.match(VHDLParser.TOK_VAR_ASSIGN)
				self.state = 1302
				localctx.expression = self.rule_Expression()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_IterationSchemeContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.condition = None  # Rule_ExpressionContext
			self.parameterSpecification = None  # Rule_ParameterSpecificationContext

		def KW_WHILE(self):
			return self.getToken(VHDLParser.KW_WHILE, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def KW_FOR(self):
			return self.getToken(VHDLParser.KW_FOR, 0)

		def rule_ParameterSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ParameterSpecificationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_IterationScheme

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_IterationScheme"):
				return visitor.visitRule_IterationScheme(self)
			else:
				return visitor.visitChildren(self)

	def rule_IterationScheme(self):

		localctx = VHDLParser.Rule_IterationSchemeContext(self, self._ctx, self.state)
		self.enterRule(localctx, 206, self.RULE_rule_IterationScheme)
		try:
			self.state = 1309
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.KW_WHILE]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1305
				self.match(VHDLParser.KW_WHILE)
				self.state = 1306
				localctx.condition = self.rule_Expression()
				pass
			elif token in [VHDLParser.KW_FOR]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1307
				self.match(VHDLParser.KW_FOR)
				self.state = 1308
				localctx.parameterSpecification = self.rule_ParameterSpecification()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_LibraryClauseContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._LIT_IDENTIFIER = None  # Token
			self.names = list()  # of Tokens

		def KW_LIBRARY(self):
			return self.getToken(VHDLParser.KW_LIBRARY, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_LibraryClause

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_LibraryClause"):
				return visitor.visitRule_LibraryClause(self)
			else:
				return visitor.visitChildren(self)

	def rule_LibraryClause(self):

		localctx = VHDLParser.Rule_LibraryClauseContext(self, self._ctx, self.state)
		self.enterRule(localctx, 208, self.RULE_rule_LibraryClause)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1311
			self.match(VHDLParser.KW_LIBRARY)
			self.state = 1312
			localctx._LIT_IDENTIFIER = self.match(VHDLParser.LIT_IDENTIFIER)
			localctx.names.append(localctx._LIT_IDENTIFIER)
			self.state = 1317
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.TOK_COMMA:
				self.state = 1313
				self.match(VHDLParser.TOK_COMMA)
				self.state = 1314
				localctx._LIT_IDENTIFIER = self.match(VHDLParser.LIT_IDENTIFIER)
				localctx.names.append(localctx._LIT_IDENTIFIER)
				self.state = 1319
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1320
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_LibraryUnitContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.entity = None  # Rule_EntityDeclarationContext
			self.configuration = None  # Rule_ConfigurationDeclarationContext
			self.package = None  # Rule_PackageDeclarationContext
			self.architecture = None  # Rule_ArchitectureContext
			self.packageBody = None  # Rule_PackageBodyContext

		def rule_EntityDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_EntityDeclarationContext, 0)

		def rule_ConfigurationDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConfigurationDeclarationContext, 0)

		def rule_PackageDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PackageDeclarationContext, 0)

		def rule_Architecture(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ArchitectureContext, 0)

		def rule_PackageBody(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PackageBodyContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_LibraryUnit

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_LibraryUnit"):
				return visitor.visitRule_LibraryUnit(self)
			else:
				return visitor.visitChildren(self)

	def rule_LibraryUnit(self):

		localctx = VHDLParser.Rule_LibraryUnitContext(self, self._ctx, self.state)
		self.enterRule(localctx, 210, self.RULE_rule_LibraryUnit)
		try:
			self.state = 1327
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 143, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1322
				localctx.entity = self.rule_EntityDeclaration()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1323
				localctx.configuration = self.rule_ConfigurationDeclaration()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 1324
				localctx.package = self.rule_PackageDeclaration()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 1325
				localctx.architecture = self.rule_Architecture()
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 1326
				localctx.packageBody = self.rule_PackageBody()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_LiteralContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_NULL(self):
			return self.getToken(VHDLParser.KW_NULL, 0)

		def LIT_BIT_STRING(self):
			return self.getToken(VHDLParser.LIT_BIT_STRING, 0)

		def LIT_STRING(self):
			return self.getToken(VHDLParser.LIT_STRING, 0)

		def rule_EnumerationLiteral(self):
			return self.getTypedRuleContext(VHDLParser.Rule_EnumerationLiteralContext, 0)

		def rule_NumericLiteral(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NumericLiteralContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Literal

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Literal"):
				return visitor.visitRule_Literal(self)
			else:
				return visitor.visitChildren(self)

	def rule_Literal(self):

		localctx = VHDLParser.Rule_LiteralContext(self, self._ctx, self.state)
		self.enterRule(localctx, 212, self.RULE_rule_Literal)
		try:
			self.state = 1334
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.KW_NULL]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1329
				self.match(VHDLParser.KW_NULL)
				pass
			elif token in [VHDLParser.LIT_BIT_STRING]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1330
				self.match(VHDLParser.LIT_BIT_STRING)
				pass
			elif token in [VHDLParser.LIT_STRING]:
				self.enterOuterAlt(localctx, 3)
				self.state = 1331
				self.match(VHDLParser.LIT_STRING)
				pass
			elif token in [VHDLParser.LIT_CHARACTER, VHDLParser.LIT_IDENTIFIER]:
				self.enterOuterAlt(localctx, 4)
				self.state = 1332
				self.rule_EnumerationLiteral()
				pass
			elif token in [VHDLParser.LIT_ABSTRACT]:
				self.enterOuterAlt(localctx, 5)
				self.state = 1333
				self.rule_NumericLiteral()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_LoopStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token
			self.scheme = None  # Rule_IterationSchemeContext
			self._rule_SequentialStatement = None  # Rule_SequentialStatementContext
			self.statements = list()  # of Rule_SequentialStatementContexts

		def KW_LOOP(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_LOOP)
			else:
				return self.getToken(VHDLParser.KW_LOOP, i)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def rule_IterationScheme(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IterationSchemeContext, 0)

		def rule_SequentialStatement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_SequentialStatementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_SequentialStatementContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_LoopStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_LoopStatement"):
				return visitor.visitRule_LoopStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_LoopStatement(self):

		localctx = VHDLParser.Rule_LoopStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 214, self.RULE_rule_LoopStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1338
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1336
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 1337
				self.match(VHDLParser.TOK_COLON)

			self.state = 1341
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_FOR or _la == VHDLParser.KW_WHILE:
				self.state = 1340
				localctx.scheme = self.rule_IterationScheme()

			self.state = 1343
			self.match(VHDLParser.KW_LOOP)
			self.state = 1347
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_ASSERT) | (1 << VHDLParser.KW_CASE) | (1 << VHDLParser.KW_EXIT) | (
				1 << VHDLParser.KW_FOR) | (1 << VHDLParser.KW_IF) | (1 << VHDLParser.KW_LOOP) | (1 << VHDLParser.KW_NEXT) | (
					1 << VHDLParser.KW_NULL))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & (
				(1 << (VHDLParser.KW_REPORT - 72)) | (1 << (VHDLParser.KW_RETURN - 72)) | (1 << (VHDLParser.KW_WAIT - 72)) | (
				1 << (VHDLParser.KW_WHILE - 72)) | (1 << (VHDLParser.TOK_LP - 72)) | (1 << (VHDLParser.LIT_STRING - 72)) | (
					1 << (VHDLParser.LIT_IDENTIFIER - 72)))) != 0):
				self.state = 1344
				localctx._rule_SequentialStatement = self.rule_SequentialStatement()
				localctx.statements.append(localctx._rule_SequentialStatement)
				self.state = 1349
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1350
			self.match(VHDLParser.KW_END)
			self.state = 1351
			self.match(VHDLParser.KW_LOOP)
			self.state = 1353
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1352
				self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 1355
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ModeContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.name = None  # Token

		def KW_IN(self):
			return self.getToken(VHDLParser.KW_IN, 0)

		def KW_OUT(self):
			return self.getToken(VHDLParser.KW_OUT, 0)

		def KW_INOUT(self):
			return self.getToken(VHDLParser.KW_INOUT, 0)

		def KW_BUFFER(self):
			return self.getToken(VHDLParser.KW_BUFFER, 0)

		def KW_LINKAGE(self):
			return self.getToken(VHDLParser.KW_LINKAGE, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Mode

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Mode"):
				return visitor.visitRule_Mode(self)
			else:
				return visitor.visitChildren(self)

	def rule_Mode(self):

		localctx = VHDLParser.Rule_ModeContext(self, self._ctx, self.state)
		self.enterRule(localctx, 216, self.RULE_rule_Mode)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1357
			localctx.name = self._input.LT(1)
			_la = self._input.LA(1)
			if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_BUFFER) | (1 << VHDLParser.KW_IN) | (1 << VHDLParser.KW_INOUT) | (
				1 << VHDLParser.KW_LINKAGE) | (1 << VHDLParser.KW_OUT))) != 0)):
				localctx.name = self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_NameContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def LIT_STRING(self):
			return self.getToken(VHDLParser.LIT_STRING, 0)

		def rule_NamePart(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_NamePartContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_NamePartContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Name

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Name"):
				return visitor.visitRule_Name(self)
			else:
				return visitor.visitChildren(self)

	def rule_Name(self):

		localctx = VHDLParser.Rule_NameContext(self, self._ctx, self.state)
		self.enterRule(localctx, 218, self.RULE_rule_Name)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1359
			_la = self._input.LA(1)
			if not (_la == VHDLParser.LIT_STRING or _la == VHDLParser.LIT_IDENTIFIER):
				self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
			self.state = 1363
			self._errHandler.sync(self)
			_alt = self._interp.adaptivePredict(self._input, 149, self._ctx)
			while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
				if _alt == 1:
					self.state = 1360
					self.rule_NamePart()
				self.state = 1365
				self._errHandler.sync(self)
				_alt = self._interp.adaptivePredict(self._input, 149, self._ctx)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_NamePartContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_SelectedNamePart(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SelectedNamePartContext, 0)

		def rule_FunctionCallOrIndexedNamePart(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FunctionCallOrIndexedNamePartContext, 0)

		def rule_SliceNamePart(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SliceNamePartContext, 0)

		def rule_AttributeName(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AttributeNameContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_NamePart

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_NamePart"):
				return visitor.visitRule_NamePart(self)
			else:
				return visitor.visitChildren(self)

	def rule_NamePart(self):

		localctx = VHDLParser.Rule_NamePartContext(self, self._ctx, self.state)
		self.enterRule(localctx, 220, self.RULE_rule_NamePart)
		try:
			self.state = 1370
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 150, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1366
				self.rule_SelectedNamePart()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1367
				self.rule_FunctionCallOrIndexedNamePart()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 1368
				self.rule_SliceNamePart()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 1369
				self.rule_AttributeName()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SelectedNameContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_Suffix = None  # Rule_SuffixContext
			self.suffixes = list()  # of Rule_SuffixContexts

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def TOK_DOT(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_DOT)
			else:
				return self.getToken(VHDLParser.TOK_DOT, i)

		def rule_Suffix(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_SuffixContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_SuffixContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SelectedName

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SelectedName"):
				return visitor.visitRule_SelectedName(self)
			else:
				return visitor.visitChildren(self)

	def rule_SelectedName(self):

		localctx = VHDLParser.Rule_SelectedNameContext(self, self._ctx, self.state)
		self.enterRule(localctx, 222, self.RULE_rule_SelectedName)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1372
			self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 1377
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.TOK_DOT:
				self.state = 1373
				self.match(VHDLParser.TOK_DOT)
				self.state = 1374
				localctx._rule_Suffix = self.rule_Suffix()
				localctx.suffixes.append(localctx._rule_Suffix)
				self.state = 1379
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SelectedNamePartContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_Suffix = None  # Rule_SuffixContext
			self.suffixes = list()  # of Rule_SuffixContexts

		def TOK_DOT(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_DOT)
			else:
				return self.getToken(VHDLParser.TOK_DOT, i)

		def rule_Suffix(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_SuffixContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_SuffixContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SelectedNamePart

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SelectedNamePart"):
				return visitor.visitRule_SelectedNamePart(self)
			else:
				return visitor.visitChildren(self)

	def rule_SelectedNamePart(self):

		localctx = VHDLParser.Rule_SelectedNamePartContext(self, self._ctx, self.state)
		self.enterRule(localctx, 224, self.RULE_rule_SelectedNamePart)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1382
			self._errHandler.sync(self)
			_alt = 1
			while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
				if _alt == 1:
					self.state = 1380
					self.match(VHDLParser.TOK_DOT)
					self.state = 1381
					localctx._rule_Suffix = self.rule_Suffix()
					localctx.suffixes.append(localctx._rule_Suffix)

				else:
					raise NoViableAltException(self)
				self.state = 1384
				self._errHandler.sync(self)
				_alt = self._interp.adaptivePredict(self._input, 152, self._ctx)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_FunctionCallOrIndexedNamePartContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def rule_ActualParameterPart(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ActualParameterPartContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_FunctionCallOrIndexedNamePart

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_FunctionCallOrIndexedNamePart"):
				return visitor.visitRule_FunctionCallOrIndexedNamePart(self)
			else:
				return visitor.visitChildren(self)

	def rule_FunctionCallOrIndexedNamePart(self):

		localctx = VHDLParser.Rule_FunctionCallOrIndexedNamePartContext(self, self._ctx, self.state)
		self.enterRule(localctx, 226, self.RULE_rule_FunctionCallOrIndexedNamePart)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1386
			self.match(VHDLParser.TOK_LP)
			self.state = 1387
			self.rule_ActualParameterPart()
			self.state = 1388
			self.match(VHDLParser.TOK_RP)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SliceNamePartContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def rule_DiscreteRange(self):
			return self.getTypedRuleContext(VHDLParser.Rule_DiscreteRangeContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SliceNamePart

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SliceNamePart"):
				return visitor.visitRule_SliceNamePart(self)
			else:
				return visitor.visitChildren(self)

	def rule_SliceNamePart(self):

		localctx = VHDLParser.Rule_SliceNamePartContext(self, self._ctx, self.state)
		self.enterRule(localctx, 228, self.RULE_rule_SliceNamePart)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1390
			self.match(VHDLParser.TOK_LP)
			self.state = 1391
			self.rule_DiscreteRange()
			self.state = 1392
			self.match(VHDLParser.TOK_RP)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_NextStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token
			self.referencedLabel = None  # Token
			self.condition = None  # Rule_ExpressionContext

		def KW_NEXT(self):
			return self.getToken(VHDLParser.KW_NEXT, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def KW_WHEN(self):
			return self.getToken(VHDLParser.KW_WHEN, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_NextStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_NextStatement"):
				return visitor.visitRule_NextStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_NextStatement(self):

		localctx = VHDLParser.Rule_NextStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 230, self.RULE_rule_NextStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1396
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1394
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 1395
				self.match(VHDLParser.TOK_COLON)

			self.state = 1398
			self.match(VHDLParser.KW_NEXT)
			self.state = 1400
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1399
				localctx.referencedLabel = self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 1404
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_WHEN:
				self.state = 1402
				self.match(VHDLParser.KW_WHEN)
				self.state = 1403
				localctx.condition = self.rule_Expression()

			self.state = 1406
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_NumericLiteralContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_ABSTRACT(self):
			return self.getToken(VHDLParser.LIT_ABSTRACT, 0)

		def rule_PhysicalLiteral(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PhysicalLiteralContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_NumericLiteral

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_NumericLiteral"):
				return visitor.visitRule_NumericLiteral(self)
			else:
				return visitor.visitChildren(self)

	def rule_NumericLiteral(self):

		localctx = VHDLParser.Rule_NumericLiteralContext(self, self._ctx, self.state)
		self.enterRule(localctx, 232, self.RULE_rule_NumericLiteral)
		try:
			self.state = 1410
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 156, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1408
				self.match(VHDLParser.LIT_ABSTRACT)
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1409
				self.rule_PhysicalLiteral()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ObjectDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_ConstantDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConstantDeclarationContext, 0)

		def rule_SignalDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SignalDeclarationContext, 0)

		def rule_VariableDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_VariableDeclarationContext, 0)

		def rule_FileDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FileDeclarationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ObjectDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ObjectDeclaration"):
				return visitor.visitRule_ObjectDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_ObjectDeclaration(self):

		localctx = VHDLParser.Rule_ObjectDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 234, self.RULE_rule_ObjectDeclaration)
		try:
			self.state = 1416
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.KW_CONSTANT]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1412
				self.rule_ConstantDeclaration()
				pass
			elif token in [VHDLParser.KW_SIGNAL]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1413
				self.rule_SignalDeclaration()
				pass
			elif token in [VHDLParser.KW_SHARED, VHDLParser.KW_VARIABLE]:
				self.enterOuterAlt(localctx, 3)
				self.state = 1414
				self.rule_VariableDeclaration()
				pass
			elif token in [VHDLParser.KW_FILE]:
				self.enterOuterAlt(localctx, 4)
				self.state = 1415
				self.rule_FileDeclaration()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_OptsContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_GUARDED(self):
			return self.getToken(VHDLParser.KW_GUARDED, 0)

		def rule_DelayMechanism(self):
			return self.getTypedRuleContext(VHDLParser.Rule_DelayMechanismContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Opts

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Opts"):
				return visitor.visitRule_Opts(self)
			else:
				return visitor.visitChildren(self)

	def rule_Opts(self):

		localctx = VHDLParser.Rule_OptsContext(self, self._ctx, self.state)
		self.enterRule(localctx, 236, self.RULE_rule_Opts)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1419
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_GUARDED:
				self.state = 1418
				self.match(VHDLParser.KW_GUARDED)

			self.state = 1422
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & (
				(1 << (VHDLParser.KW_INERTIAL - 40)) | (1 << (VHDLParser.KW_REJECT - 40)) | (
				1 << (VHDLParser.KW_TRANSPORT - 40)))) != 0):
				self.state = 1421
				self.rule_DelayMechanism()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_PackageBodyContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.packageName = None  # Token
			self._rule_PackageDeclarativeItem = None  # Rule_PackageDeclarativeItemContext
			self.declarativeItem = list()  # of Rule_PackageDeclarativeItemContexts
			self.packageName2 = None  # Token

		def KW_PACKAGE(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_PACKAGE)
			else:
				return self.getToken(VHDLParser.KW_PACKAGE, i)

		def KW_BODY(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_BODY)
			else:
				return self.getToken(VHDLParser.KW_BODY, i)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def rule_PackageDeclarativeItem(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_PackageDeclarativeItemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_PackageDeclarativeItemContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_PackageBody

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_PackageBody"):
				return visitor.visitRule_PackageBody(self)
			else:
				return visitor.visitChildren(self)

	def rule_PackageBody(self):

		localctx = VHDLParser.Rule_PackageBodyContext(self, self._ctx, self.state)
		self.enterRule(localctx, 238, self.RULE_rule_PackageBody)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1424
			self.match(VHDLParser.KW_PACKAGE)
			self.state = 1425
			self.match(VHDLParser.KW_BODY)
			self.state = 1426
			localctx.packageName = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 1427
			self.match(VHDLParser.KW_IS)
			self.state = 1431
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_ALIAS) | (1 << VHDLParser.KW_ATTRIBUTE) | (1 << VHDLParser.KW_COMPONENT) | (
				1 << VHDLParser.KW_CONSTANT) | (1 << VHDLParser.KW_DISCONNECT) | (1 << VHDLParser.KW_FILE) | (
					1 << VHDLParser.KW_FUNCTION) | (1 << VHDLParser.KW_IMPURE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and (
				(1 << (_la - 65)) & ((1 << (VHDLParser.KW_PROCEDURE - 65)) | (1 << (VHDLParser.KW_PURE - 65)) | (
				1 << (VHDLParser.KW_SHARED - 65)) | (1 << (VHDLParser.KW_SIGNAL - 65)) | (1 << (VHDLParser.KW_SUBTYPE - 65)) | (
															 1 << (VHDLParser.KW_TYPE - 65)) | (1 << (VHDLParser.KW_USE - 65)) | (
															 1 << (VHDLParser.KW_VARIABLE - 65)))) != 0):
				self.state = 1428
				localctx._rule_PackageDeclarativeItem = self.rule_PackageDeclarativeItem()
				localctx.declarativeItem.append(localctx._rule_PackageDeclarativeItem)
				self.state = 1433
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1434
			self.match(VHDLParser.KW_END)
			self.state = 1437
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_PACKAGE:
				self.state = 1435
				self.match(VHDLParser.KW_PACKAGE)
				self.state = 1436
				self.match(VHDLParser.KW_BODY)

			self.state = 1440
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1439
				localctx.packageName2 = self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 1442
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_PackageBodyDeclarativeItemContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_SubprogramDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramDeclarationContext, 0)

		def rule_SubprogramBody(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramBodyContext, 0)

		def rule_TypeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_TypeDeclarationContext, 0)

		def rule_SubtypeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeDeclarationContext, 0)

		def rule_ConstantDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConstantDeclarationContext, 0)

		def rule_VariableDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_VariableDeclarationContext, 0)

		def rule_FileDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FileDeclarationContext, 0)

		def rule_AliasDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AliasDeclarationContext, 0)

		def rule_UseClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_UseClauseContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_PackageBodyDeclarativeItem

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_PackageBodyDeclarativeItem"):
				return visitor.visitRule_PackageBodyDeclarativeItem(self)
			else:
				return visitor.visitChildren(self)

	def rule_PackageBodyDeclarativeItem(self):

		localctx = VHDLParser.Rule_PackageBodyDeclarativeItemContext(self, self._ctx, self.state)
		self.enterRule(localctx, 240, self.RULE_rule_PackageBodyDeclarativeItem)
		try:
			self.state = 1453
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 163, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1444
				self.rule_SubprogramDeclaration()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1445
				self.rule_SubprogramBody()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 1446
				self.rule_TypeDeclaration()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 1447
				self.rule_SubtypeDeclaration()
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 1448
				self.rule_ConstantDeclaration()
				pass

			elif la_ == 6:
				self.enterOuterAlt(localctx, 6)
				self.state = 1449
				self.rule_VariableDeclaration()
				pass

			elif la_ == 7:
				self.enterOuterAlt(localctx, 7)
				self.state = 1450
				self.rule_FileDeclaration()
				pass

			elif la_ == 8:
				self.enterOuterAlt(localctx, 8)
				self.state = 1451
				self.rule_AliasDeclaration()
				pass

			elif la_ == 9:
				self.enterOuterAlt(localctx, 9)
				self.state = 1452
				self.rule_UseClause()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_PackageDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.packageName = None  # Token
			self._rule_PackageBodyDeclarativeItem = None  # Rule_PackageBodyDeclarativeItemContext
			self.declarativeItems = list()  # of Rule_PackageBodyDeclarativeItemContexts
			self.packageName2 = None  # Token

		def KW_PACKAGE(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_PACKAGE)
			else:
				return self.getToken(VHDLParser.KW_PACKAGE, i)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def rule_PackageBodyDeclarativeItem(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_PackageBodyDeclarativeItemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_PackageBodyDeclarativeItemContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_PackageDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_PackageDeclaration"):
				return visitor.visitRule_PackageDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_PackageDeclaration(self):

		localctx = VHDLParser.Rule_PackageDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 242, self.RULE_rule_PackageDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1455
			self.match(VHDLParser.KW_PACKAGE)
			self.state = 1456
			localctx.packageName = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 1457
			self.match(VHDLParser.KW_IS)
			self.state = 1461
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_ALIAS) | (1 << VHDLParser.KW_CONSTANT) | (1 << VHDLParser.KW_FILE) | (
				1 << VHDLParser.KW_FUNCTION) | (1 << VHDLParser.KW_IMPURE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and (
				(1 << (_la - 65)) & ((1 << (VHDLParser.KW_PROCEDURE - 65)) | (1 << (VHDLParser.KW_PURE - 65)) | (
				1 << (VHDLParser.KW_SHARED - 65)) | (1 << (VHDLParser.KW_SUBTYPE - 65)) | (1 << (VHDLParser.KW_TYPE - 65)) | (
															 1 << (VHDLParser.KW_USE - 65)) | (1 << (VHDLParser.KW_VARIABLE - 65)))) != 0):
				self.state = 1458
				localctx._rule_PackageBodyDeclarativeItem = self.rule_PackageBodyDeclarativeItem()
				localctx.declarativeItems.append(localctx._rule_PackageBodyDeclarativeItem)
				self.state = 1463
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1464
			self.match(VHDLParser.KW_END)
			self.state = 1466
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_PACKAGE:
				self.state = 1465
				self.match(VHDLParser.KW_PACKAGE)

			self.state = 1469
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1468
				localctx.packageName2 = self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 1471
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_PackageDeclarativeItemContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.subprogramDeclaration = None  # Rule_SubprogramDeclarationContext
			self.subprogramBody = None  # Rule_SubprogramBodyContext
			self.typeDeclaration = None  # Rule_TypeDeclarationContext
			self.subtypeDeclaration = None  # Rule_SubtypeDeclarationContext
			self.constantDeclaration = None  # Rule_ConstantDeclarationContext
			self.signalDeclaration = None  # Rule_SignalDeclarationContext
			self.variableDeclaration = None  # Rule_VariableDeclarationContext
			self.fileDeclaration = None  # Rule_FileDeclarationContext
			self.aliasDeclaration = None  # Rule_AliasDeclarationContext
			self.componentDeclaration = None  # Rule_ComponentDeclarationContext
			self.attributeDeclaration = None  # Rule_AttributeDeclarationContext
			self.attributeSpecification = None  # Rule_AttributeSpecificationContext
			self.disconnectionSpecification = None  # Rule_DisconnectionSpecificationContext
			self.useClause = None  # Rule_UseClauseContext

		def rule_SubprogramDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramDeclarationContext, 0)

		def rule_SubprogramBody(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramBodyContext, 0)

		def rule_TypeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_TypeDeclarationContext, 0)

		def rule_SubtypeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeDeclarationContext, 0)

		def rule_ConstantDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConstantDeclarationContext, 0)

		def rule_SignalDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SignalDeclarationContext, 0)

		def rule_VariableDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_VariableDeclarationContext, 0)

		def rule_FileDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FileDeclarationContext, 0)

		def rule_AliasDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AliasDeclarationContext, 0)

		def rule_ComponentDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ComponentDeclarationContext, 0)

		def rule_AttributeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AttributeDeclarationContext, 0)

		def rule_AttributeSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AttributeSpecificationContext, 0)

		def rule_DisconnectionSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_DisconnectionSpecificationContext, 0)

		def rule_UseClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_UseClauseContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_PackageDeclarativeItem

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_PackageDeclarativeItem"):
				return visitor.visitRule_PackageDeclarativeItem(self)
			else:
				return visitor.visitChildren(self)

	def rule_PackageDeclarativeItem(self):

		localctx = VHDLParser.Rule_PackageDeclarativeItemContext(self, self._ctx, self.state)
		self.enterRule(localctx, 244, self.RULE_rule_PackageDeclarativeItem)
		try:
			self.state = 1487
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 167, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1473
				localctx.subprogramDeclaration = self.rule_SubprogramDeclaration()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1474
				localctx.subprogramBody = self.rule_SubprogramBody()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 1475
				localctx.typeDeclaration = self.rule_TypeDeclaration()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 1476
				localctx.subtypeDeclaration = self.rule_SubtypeDeclaration()
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 1477
				localctx.constantDeclaration = self.rule_ConstantDeclaration()
				pass

			elif la_ == 6:
				self.enterOuterAlt(localctx, 6)
				self.state = 1478
				localctx.signalDeclaration = self.rule_SignalDeclaration()
				pass

			elif la_ == 7:
				self.enterOuterAlt(localctx, 7)
				self.state = 1479
				localctx.variableDeclaration = self.rule_VariableDeclaration()
				pass

			elif la_ == 8:
				self.enterOuterAlt(localctx, 8)
				self.state = 1480
				localctx.fileDeclaration = self.rule_FileDeclaration()
				pass

			elif la_ == 9:
				self.enterOuterAlt(localctx, 9)
				self.state = 1481
				localctx.aliasDeclaration = self.rule_AliasDeclaration()
				pass

			elif la_ == 10:
				self.enterOuterAlt(localctx, 10)
				self.state = 1482
				localctx.componentDeclaration = self.rule_ComponentDeclaration()
				pass

			elif la_ == 11:
				self.enterOuterAlt(localctx, 11)
				self.state = 1483
				localctx.attributeDeclaration = self.rule_AttributeDeclaration()
				pass

			elif la_ == 12:
				self.enterOuterAlt(localctx, 12)
				self.state = 1484
				localctx.attributeSpecification = self.rule_AttributeSpecification()
				pass

			elif la_ == 13:
				self.enterOuterAlt(localctx, 13)
				self.state = 1485
				localctx.disconnectionSpecification = self.rule_DisconnectionSpecification()
				pass

			elif la_ == 14:
				self.enterOuterAlt(localctx, 14)
				self.state = 1486
				localctx.useClause = self.rule_UseClause()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ParameterSpecificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def KW_IN(self):
			return self.getToken(VHDLParser.KW_IN, 0)

		def rule_DiscreteRange(self):
			return self.getTypedRuleContext(VHDLParser.Rule_DiscreteRangeContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ParameterSpecification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ParameterSpecification"):
				return visitor.visitRule_ParameterSpecification(self)
			else:
				return visitor.visitChildren(self)

	def rule_ParameterSpecification(self):

		localctx = VHDLParser.Rule_ParameterSpecificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 246, self.RULE_rule_ParameterSpecification)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1489
			self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 1490
			self.match(VHDLParser.KW_IN)
			self.state = 1491
			self.rule_DiscreteRange()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_PartialPathNameContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_SimpleName(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SimpleNameContext, 0)

		def rule_PathNameElement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_PathNameElementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_PathNameElementContext, i)

		def TOK_DOT(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_DOT)
			else:
				return self.getToken(VHDLParser.TOK_DOT, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_PartialPathName

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_PartialPathName"):
				return visitor.visitRule_PartialPathName(self)
			else:
				return visitor.visitChildren(self)

	def rule_PartialPathName(self):

		localctx = VHDLParser.Rule_PartialPathNameContext(self, self._ctx, self.state)
		self.enterRule(localctx, 248, self.RULE_rule_PartialPathName)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1498
			self._errHandler.sync(self)
			_alt = self._interp.adaptivePredict(self._input, 168, self._ctx)
			while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
				if _alt == 1:
					self.state = 1493
					self.rule_PathNameElement()
					self.state = 1494
					self.match(VHDLParser.TOK_DOT)
				self.state = 1500
				self._errHandler.sync(self)
				_alt = self._interp.adaptivePredict(self._input, 168, self._ctx)

			self.state = 1501
			self.rule_SimpleName()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_PathNameElementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token

		def rule_SimpleName(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SimpleNameContext, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_PathNameElement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_PathNameElement"):
				return visitor.visitRule_PathNameElement(self)
			else:
				return visitor.visitChildren(self)

	def rule_PathNameElement(self):

		localctx = VHDLParser.Rule_PathNameElementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 250, self.RULE_rule_PathNameElement)
		try:
			self.state = 1505
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 169, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1503
				self.rule_SimpleName()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1504
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_PhysicalLiteralContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_ABSTRACT(self):
			return self.getToken(VHDLParser.LIT_ABSTRACT, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_PhysicalLiteral

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_PhysicalLiteral"):
				return visitor.visitRule_PhysicalLiteral(self)
			else:
				return visitor.visitChildren(self)

	def rule_PhysicalLiteral(self):

		localctx = VHDLParser.Rule_PhysicalLiteralContext(self, self._ctx, self.state)
		self.enterRule(localctx, 252, self.RULE_rule_PhysicalLiteral)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1507
			self.match(VHDLParser.LIT_ABSTRACT)

			self.state = 1508
			self.match(VHDLParser.LIT_IDENTIFIER)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_PhysicalTypeDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.rangeConstraint = None  # Rule_RangeConstraintContext
			self.primaryUnit = None  # Token
			self._rule_SecondaryUnitDeclaration = None  # Rule_SecondaryUnitDeclarationContext
			self.secondaryUnits = list()  # of Rule_SecondaryUnitDeclarationContexts

		def KW_UNITS(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_UNITS)
			else:
				return self.getToken(VHDLParser.KW_UNITS, i)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def rule_RangeConstraint(self):
			return self.getTypedRuleContext(VHDLParser.Rule_RangeConstraintContext, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def rule_SecondaryUnitDeclaration(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_SecondaryUnitDeclarationContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_SecondaryUnitDeclarationContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_PhysicalTypeDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_PhysicalTypeDefinition"):
				return visitor.visitRule_PhysicalTypeDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_PhysicalTypeDefinition(self):

		localctx = VHDLParser.Rule_PhysicalTypeDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 254, self.RULE_rule_PhysicalTypeDefinition)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1510
			localctx.rangeConstraint = self.rule_RangeConstraint()
			self.state = 1511
			self.match(VHDLParser.KW_UNITS)
			self.state = 1512
			localctx.primaryUnit = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 1513
			self.match(VHDLParser.TOK_SEMICOL)
			self.state = 1517
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1514
				localctx._rule_SecondaryUnitDeclaration = self.rule_SecondaryUnitDeclaration()
				localctx.secondaryUnits.append(localctx._rule_SecondaryUnitDeclaration)
				self.state = 1519
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1520
			self.match(VHDLParser.KW_END)
			self.state = 1521
			self.match(VHDLParser.KW_UNITS)
			self.state = 1523
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1522
				self.match(VHDLParser.LIT_IDENTIFIER)


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_PortClauseContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_InterfacePortDeclaration = None  # Rule_InterfacePortDeclarationContext
			self.interfacePortDeclarations = list()  # of Rule_InterfacePortDeclarationContexts

		def KW_PORT(self):
			return self.getToken(VHDLParser.KW_PORT, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def TOK_SEMICOL(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_SEMICOL)
			else:
				return self.getToken(VHDLParser.TOK_SEMICOL, i)

		def rule_InterfacePortDeclaration(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_InterfacePortDeclarationContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_InterfacePortDeclarationContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_PortClause

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_PortClause"):
				return visitor.visitRule_PortClause(self)
			else:
				return visitor.visitChildren(self)

	def rule_PortClause(self):

		localctx = VHDLParser.Rule_PortClauseContext(self, self._ctx, self.state)
		self.enterRule(localctx, 256, self.RULE_rule_PortClause)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1525
			self.match(VHDLParser.KW_PORT)
			self.state = 1526
			self.match(VHDLParser.TOK_LP)
			self.state = 1527
			localctx._rule_InterfacePortDeclaration = self.rule_InterfacePortDeclaration()
			localctx.interfacePortDeclarations.append(localctx._rule_InterfacePortDeclaration)
			self.state = 1532
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.TOK_SEMICOL:
				self.state = 1528
				self.match(VHDLParser.TOK_SEMICOL)
				self.state = 1529
				localctx._rule_InterfacePortDeclaration = self.rule_InterfacePortDeclaration()
				localctx.interfacePortDeclarations.append(localctx._rule_InterfacePortDeclaration)
				self.state = 1534
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1535
			self.match(VHDLParser.TOK_RP)
			self.state = 1536
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_PortMapAspectContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.associationList = None  # Rule_AssociationListContext

		def KW_PORT(self):
			return self.getToken(VHDLParser.KW_PORT, 0)

		def KW_MAP(self):
			return self.getToken(VHDLParser.KW_MAP, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def rule_AssociationList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AssociationListContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_PortMapAspect

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_PortMapAspect"):
				return visitor.visitRule_PortMapAspect(self)
			else:
				return visitor.visitChildren(self)

	def rule_PortMapAspect(self):

		localctx = VHDLParser.Rule_PortMapAspectContext(self, self._ctx, self.state)
		self.enterRule(localctx, 258, self.RULE_rule_PortMapAspect)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1538
			self.match(VHDLParser.KW_PORT)
			self.state = 1539
			self.match(VHDLParser.KW_MAP)
			self.state = 1540
			self.match(VHDLParser.TOK_LP)
			self.state = 1541
			localctx.associationList = self.rule_AssociationList()
			self.state = 1542
			self.match(VHDLParser.TOK_RP)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_PrimaryContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.expression = None  # Rule_ExpressionContext

		def rule_Literal(self):
			return self.getTypedRuleContext(VHDLParser.Rule_LiteralContext, 0)

		def rule_QualifiedExpression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_QualifiedExpressionContext, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def rule_Allocator(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AllocatorContext, 0)

		def rule_Aggregate(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AggregateContext, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Primary

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Primary"):
				return visitor.visitRule_Primary(self)
			else:
				return visitor.visitChildren(self)

	def rule_Primary(self):

		localctx = VHDLParser.Rule_PrimaryContext(self, self._ctx, self.state)
		self.enterRule(localctx, 260, self.RULE_rule_Primary)
		try:
			self.state = 1553
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 173, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1544
				self.rule_Literal()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1545
				self.rule_QualifiedExpression()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 1546
				self.match(VHDLParser.TOK_LP)
				self.state = 1547
				localctx.expression = self.rule_Expression()
				self.state = 1548
				self.match(VHDLParser.TOK_RP)
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 1550
				self.rule_Allocator()
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 1551
				self.rule_Aggregate()
				pass

			elif la_ == 6:
				self.enterOuterAlt(localctx, 6)
				self.state = 1552
				self.rule_Name()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ProcedureCallContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_SelectedName(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SelectedNameContext, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def rule_ActualParameterPart(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ActualParameterPartContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ProcedureCall

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ProcedureCall"):
				return visitor.visitRule_ProcedureCall(self)
			else:
				return visitor.visitChildren(self)

	def rule_ProcedureCall(self):

		localctx = VHDLParser.Rule_ProcedureCallContext(self, self._ctx, self.state)
		self.enterRule(localctx, 262, self.RULE_rule_ProcedureCall)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1555
			self.rule_SelectedName()
			self.state = 1560
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_LP:
				self.state = 1556
				self.match(VHDLParser.TOK_LP)
				self.state = 1557
				self.rule_ActualParameterPart()
				self.state = 1558
				self.match(VHDLParser.TOK_RP)


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ProcedureCallStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token

		def rule_ProcedureCall(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ProcedureCallContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ProcedureCallStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ProcedureCallStatement"):
				return visitor.visitRule_ProcedureCallStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_ProcedureCallStatement(self):

		localctx = VHDLParser.Rule_ProcedureCallStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 264, self.RULE_rule_ProcedureCallStatement)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1564
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 175, self._ctx)
			if la_ == 1:
				self.state = 1562
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 1563
				self.match(VHDLParser.TOK_COLON)

			self.state = 1566
			self.rule_ProcedureCall()
			self.state = 1567
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ProcessDeclarativeItemContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_SubprogramDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramDeclarationContext, 0)

		def rule_SubprogramBody(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramBodyContext, 0)

		def rule_TypeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_TypeDeclarationContext, 0)

		def rule_SubtypeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeDeclarationContext, 0)

		def rule_ConstantDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConstantDeclarationContext, 0)

		def rule_VariableDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_VariableDeclarationContext, 0)

		def rule_FileDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FileDeclarationContext, 0)

		def rule_AliasDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AliasDeclarationContext, 0)

		def rule_AttributeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AttributeDeclarationContext, 0)

		def rule_AttributeSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AttributeSpecificationContext, 0)

		def rule_UseClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_UseClauseContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ProcessDeclarativeItem

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ProcessDeclarativeItem"):
				return visitor.visitRule_ProcessDeclarativeItem(self)
			else:
				return visitor.visitChildren(self)

	def rule_ProcessDeclarativeItem(self):

		localctx = VHDLParser.Rule_ProcessDeclarativeItemContext(self, self._ctx, self.state)
		self.enterRule(localctx, 266, self.RULE_rule_ProcessDeclarativeItem)
		try:
			self.state = 1580
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 176, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1569
				self.rule_SubprogramDeclaration()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1570
				self.rule_SubprogramBody()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 1571
				self.rule_TypeDeclaration()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 1572
				self.rule_SubtypeDeclaration()
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 1573
				self.rule_ConstantDeclaration()
				pass

			elif la_ == 6:
				self.enterOuterAlt(localctx, 6)
				self.state = 1574
				self.rule_VariableDeclaration()
				pass

			elif la_ == 7:
				self.enterOuterAlt(localctx, 7)
				self.state = 1575
				self.rule_FileDeclaration()
				pass

			elif la_ == 8:
				self.enterOuterAlt(localctx, 8)
				self.state = 1576
				self.rule_AliasDeclaration()
				pass

			elif la_ == 9:
				self.enterOuterAlt(localctx, 9)
				self.state = 1577
				self.rule_AttributeDeclaration()
				pass

			elif la_ == 10:
				self.enterOuterAlt(localctx, 10)
				self.state = 1578
				self.rule_AttributeSpecification()
				pass

			elif la_ == 11:
				self.enterOuterAlt(localctx, 11)
				self.state = 1579
				self.rule_UseClause()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ProcessDeclarativePartContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_ProcessDeclarativeItem(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ProcessDeclarativeItemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ProcessDeclarativeItemContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ProcessDeclarativePart

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ProcessDeclarativePart"):
				return visitor.visitRule_ProcessDeclarativePart(self)
			else:
				return visitor.visitChildren(self)

	def rule_ProcessDeclarativePart(self):

		localctx = VHDLParser.Rule_ProcessDeclarativePartContext(self, self._ctx, self.state)
		self.enterRule(localctx, 268, self.RULE_rule_ProcessDeclarativePart)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1585
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_ALIAS) | (1 << VHDLParser.KW_ATTRIBUTE) | (1 << VHDLParser.KW_CONSTANT) | (
				1 << VHDLParser.KW_FILE) | (1 << VHDLParser.KW_FUNCTION) | (1 << VHDLParser.KW_IMPURE))) != 0) or (
				(((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & (
				(1 << (VHDLParser.KW_PROCEDURE - 65)) | (1 << (VHDLParser.KW_PURE - 65)) | (
				1 << (VHDLParser.KW_SHARED - 65)) | (1 << (VHDLParser.KW_SUBTYPE - 65)) | (1 << (VHDLParser.KW_TYPE - 65)) | (
					1 << (VHDLParser.KW_USE - 65)) | (1 << (VHDLParser.KW_VARIABLE - 65)))) != 0):
				self.state = 1582
				self.rule_ProcessDeclarativeItem()
				self.state = 1587
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ProcessStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token

		def KW_PROCESS(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_PROCESS)
			else:
				return self.getToken(VHDLParser.KW_PROCESS, i)

		def rule_ProcessDeclarativePart(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ProcessDeclarativePartContext, 0)

		def KW_BEGIN(self):
			return self.getToken(VHDLParser.KW_BEGIN, 0)

		def rule_ProcessStatementPart(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ProcessStatementPartContext, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def rule_SensitivityList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SensitivityListContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ProcessStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ProcessStatement"):
				return visitor.visitRule_ProcessStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_ProcessStatement(self):

		localctx = VHDLParser.Rule_ProcessStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 270, self.RULE_rule_ProcessStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1590
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1588
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 1589
				self.match(VHDLParser.TOK_COLON)

			self.state = 1592
			self.match(VHDLParser.KW_PROCESS)
			self.state = 1597
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_LP:
				self.state = 1593
				self.match(VHDLParser.TOK_LP)
				self.state = 1594
				self.rule_SensitivityList()
				self.state = 1595
				self.match(VHDLParser.TOK_RP)

			self.state = 1600
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_IS:
				self.state = 1599
				self.match(VHDLParser.KW_IS)

			self.state = 1602
			self.rule_ProcessDeclarativePart()
			self.state = 1603
			self.match(VHDLParser.KW_BEGIN)
			self.state = 1604
			self.rule_ProcessStatementPart()
			self.state = 1605
			self.match(VHDLParser.KW_END)
			self.state = 1606
			self.match(VHDLParser.KW_PROCESS)
			self.state = 1608
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1607
				self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 1610
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_PostponedProcessStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token

		def KW_PROCESS(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_PROCESS)
			else:
				return self.getToken(VHDLParser.KW_PROCESS, i)

		def rule_ProcessDeclarativePart(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ProcessDeclarativePartContext, 0)

		def KW_BEGIN(self):
			return self.getToken(VHDLParser.KW_BEGIN, 0)

		def rule_ProcessStatementPart(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ProcessStatementPartContext, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def KW_POSTPONED(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_POSTPONED)
			else:
				return self.getToken(VHDLParser.KW_POSTPONED, i)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def rule_SensitivityList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SensitivityListContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def LIT_IDENTIFIER(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.LIT_IDENTIFIER)
			else:
				return self.getToken(VHDLParser.LIT_IDENTIFIER, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_PostponedProcessStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_PostponedProcessStatement"):
				return visitor.visitRule_PostponedProcessStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_PostponedProcessStatement(self):

		localctx = VHDLParser.Rule_PostponedProcessStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 272, self.RULE_rule_PostponedProcessStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1614
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1612
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 1613
				self.match(VHDLParser.TOK_COLON)

			self.state = 1617
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_POSTPONED:
				self.state = 1616
				self.match(VHDLParser.KW_POSTPONED)

			self.state = 1619
			self.match(VHDLParser.KW_PROCESS)
			self.state = 1624
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_LP:
				self.state = 1620
				self.match(VHDLParser.TOK_LP)
				self.state = 1621
				self.rule_SensitivityList()
				self.state = 1622
				self.match(VHDLParser.TOK_RP)

			self.state = 1627
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_IS:
				self.state = 1626
				self.match(VHDLParser.KW_IS)

			self.state = 1629
			self.rule_ProcessDeclarativePart()
			self.state = 1630
			self.match(VHDLParser.KW_BEGIN)
			self.state = 1631
			self.rule_ProcessStatementPart()
			self.state = 1632
			self.match(VHDLParser.KW_END)
			self.state = 1634
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_POSTPONED:
				self.state = 1633
				self.match(VHDLParser.KW_POSTPONED)

			self.state = 1636
			self.match(VHDLParser.KW_PROCESS)
			self.state = 1638
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1637
				self.match(VHDLParser.LIT_IDENTIFIER)

			self.state = 1640
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ProcessStatementPartContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_SequentialStatement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_SequentialStatementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_SequentialStatementContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ProcessStatementPart

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ProcessStatementPart"):
				return visitor.visitRule_ProcessStatementPart(self)
			else:
				return visitor.visitChildren(self)

	def rule_ProcessStatementPart(self):

		localctx = VHDLParser.Rule_ProcessStatementPartContext(self, self._ctx, self.state)
		self.enterRule(localctx, 274, self.RULE_rule_ProcessStatementPart)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1645
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_ASSERT) | (1 << VHDLParser.KW_CASE) | (1 << VHDLParser.KW_EXIT) | (
				1 << VHDLParser.KW_FOR) | (1 << VHDLParser.KW_IF) | (1 << VHDLParser.KW_LOOP) | (1 << VHDLParser.KW_NEXT) | (
					1 << VHDLParser.KW_NULL))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & (
				(1 << (VHDLParser.KW_REPORT - 72)) | (1 << (VHDLParser.KW_RETURN - 72)) | (1 << (VHDLParser.KW_WAIT - 72)) | (
				1 << (VHDLParser.KW_WHILE - 72)) | (1 << (VHDLParser.TOK_LP - 72)) | (1 << (VHDLParser.LIT_STRING - 72)) | (
					1 << (VHDLParser.LIT_IDENTIFIER - 72)))) != 0):
				self.state = 1642
				self.rule_SequentialStatement()
				self.state = 1647
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_QualifiedExpressionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext
			self.aggregate = None  # Rule_AggregateContext
			self.expression = None  # Rule_ExpressionContext

		def TOK_TICK(self):
			return self.getToken(VHDLParser.TOK_TICK, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def rule_Aggregate(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AggregateContext, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_QualifiedExpression

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_QualifiedExpression"):
				return visitor.visitRule_QualifiedExpression(self)
			else:
				return visitor.visitChildren(self)

	def rule_QualifiedExpression(self):

		localctx = VHDLParser.Rule_QualifiedExpressionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 276, self.RULE_rule_QualifiedExpression)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1648
			localctx.subtypeIndication = self.rule_SubtypeIndication()
			self.state = 1649
			self.match(VHDLParser.TOK_TICK)
			self.state = 1655
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 189, self._ctx)
			if la_ == 1:
				self.state = 1650
				localctx.aggregate = self.rule_Aggregate()
				pass

			elif la_ == 2:
				self.state = 1651
				self.match(VHDLParser.TOK_LP)
				self.state = 1652
				localctx.expression = self.rule_Expression()
				self.state = 1653
				self.match(VHDLParser.TOK_RP)
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_RangeDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.name = None  # Rule_NameContext

		def rule_ExplicitRange(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExplicitRangeContext, 0)

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_RangeDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_RangeDeclaration"):
				return visitor.visitRule_RangeDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_RangeDeclaration(self):

		localctx = VHDLParser.Rule_RangeDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 278, self.RULE_rule_RangeDeclaration)
		try:
			self.state = 1659
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 190, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1657
				self.rule_ExplicitRange()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1658
				localctx.name = self.rule_Name()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ExplicitRangeContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.left = None  # Rule_SimpleExpressionContext
			self.direction = None  # Rule_DirectionContext
			self.right = None  # Rule_SimpleExpressionContext

		def rule_SimpleExpression(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_SimpleExpressionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_SimpleExpressionContext, i)

		def rule_Direction(self):
			return self.getTypedRuleContext(VHDLParser.Rule_DirectionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ExplicitRange

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ExplicitRange"):
				return visitor.visitRule_ExplicitRange(self)
			else:
				return visitor.visitChildren(self)

	def rule_ExplicitRange(self):

		localctx = VHDLParser.Rule_ExplicitRangeContext(self, self._ctx, self.state)
		self.enterRule(localctx, 280, self.RULE_rule_ExplicitRange)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1661
			localctx.left = self.rule_SimpleExpression()
			self.state = 1665
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 191, self._ctx)
			if la_ == 1:
				self.state = 1662
				localctx.direction = self.rule_Direction()
				self.state = 1663
				localctx.right = self.rule_SimpleExpression()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_RangeConstraintContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_RANGE(self):
			return self.getToken(VHDLParser.KW_RANGE, 0)

		def rule_RangeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_RangeDeclarationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_RangeConstraint

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_RangeConstraint"):
				return visitor.visitRule_RangeConstraint(self)
			else:
				return visitor.visitChildren(self)

	def rule_RangeConstraint(self):

		localctx = VHDLParser.Rule_RangeConstraintContext(self, self._ctx, self.state)
		self.enterRule(localctx, 282, self.RULE_rule_RangeConstraint)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1667
			self.match(VHDLParser.KW_RANGE)
			self.state = 1668
			self.rule_RangeDeclaration()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_RecordTypeDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_ElementDeclaration = None  # Rule_ElementDeclarationContext
			self.elements = list()  # of Rule_ElementDeclarationContexts

		def KW_RECORD(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_RECORD)
			else:
				return self.getToken(VHDLParser.KW_RECORD, i)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def rule_ElementDeclaration(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ElementDeclarationContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ElementDeclarationContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_RecordTypeDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_RecordTypeDefinition"):
				return visitor.visitRule_RecordTypeDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_RecordTypeDefinition(self):

		localctx = VHDLParser.Rule_RecordTypeDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 284, self.RULE_rule_RecordTypeDefinition)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1670
			self.match(VHDLParser.KW_RECORD)
			self.state = 1672
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while True:
				self.state = 1671
				localctx._rule_ElementDeclaration = self.rule_ElementDeclaration()
				localctx.elements.append(localctx._rule_ElementDeclaration)
				self.state = 1674
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if not (_la == VHDLParser.LIT_IDENTIFIER):
					break

			self.state = 1676
			self.match(VHDLParser.KW_END)
			self.state = 1677
			self.match(VHDLParser.KW_RECORD)
			self.state = 1679
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1678
				self.match(VHDLParser.LIT_IDENTIFIER)


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_RelationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.left = None  # Rule_ShiftExpressionContext
			self.operator = None  # Token
			self.right = None  # Rule_ShiftExpressionContext

		def rule_ShiftExpression(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ShiftExpressionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ShiftExpressionContext, i)

		def OP_EQ(self):
			return self.getToken(VHDLParser.OP_EQ, 0)

		def OP_NE(self):
			return self.getToken(VHDLParser.OP_NE, 0)

		def OP_LT(self):
			return self.getToken(VHDLParser.OP_LT, 0)

		def OP_LE(self):
			return self.getToken(VHDLParser.OP_LE, 0)

		def OP_GT(self):
			return self.getToken(VHDLParser.OP_GT, 0)

		def OP_GE(self):
			return self.getToken(VHDLParser.OP_GE, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Relation

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Relation"):
				return visitor.visitRule_Relation(self)
			else:
				return visitor.visitChildren(self)

	def rule_Relation(self):

		localctx = VHDLParser.Rule_RelationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 286, self.RULE_rule_Relation)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1681
			localctx.left = self.rule_ShiftExpression()
			self.state = 1684
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & (
				(1 << (VHDLParser.OP_EQ - 100)) | (1 << (VHDLParser.OP_NE - 100)) | (1 << (VHDLParser.OP_LT - 100)) | (
				1 << (VHDLParser.OP_LE - 100)) | (1 << (VHDLParser.OP_GT - 100)) | (1 << (VHDLParser.OP_GE - 100)))) != 0):
				self.state = 1682
				localctx.operator = self._input.LT(1)
				_la = self._input.LA(1)
				if not (((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & (
					(1 << (VHDLParser.OP_EQ - 100)) | (1 << (VHDLParser.OP_NE - 100)) | (1 << (VHDLParser.OP_LT - 100)) | (
					1 << (VHDLParser.OP_LE - 100)) | (1 << (VHDLParser.OP_GT - 100)) | (1 << (VHDLParser.OP_GE - 100)))) != 0)):
					localctx.operator = self._errHandler.recoverInline(self)
				else:
					self._errHandler.reportMatch(self)
					self.consume()
				self.state = 1683
				localctx.right = self.rule_ShiftExpression()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ReportStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token
			self.reportExpression = None  # Rule_ExpressionContext
			self.severityExpression = None  # Rule_ExpressionContext

		def KW_REPORT(self):
			return self.getToken(VHDLParser.KW_REPORT, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_Expression(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ExpressionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, i)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def KW_SEVERITY(self):
			return self.getToken(VHDLParser.KW_SEVERITY, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ReportStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ReportStatement"):
				return visitor.visitRule_ReportStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_ReportStatement(self):

		localctx = VHDLParser.Rule_ReportStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 288, self.RULE_rule_ReportStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1688
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1686
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 1687
				self.match(VHDLParser.TOK_COLON)

			self.state = 1690
			self.match(VHDLParser.KW_REPORT)
			self.state = 1691
			localctx.reportExpression = self.rule_Expression()
			self.state = 1694
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_SEVERITY:
				self.state = 1692
				self.match(VHDLParser.KW_SEVERITY)
				self.state = 1693
				localctx.severityExpression = self.rule_Expression()

			self.state = 1696
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ReturnStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token
			self.expression = None  # Rule_ExpressionContext

		def KW_RETURN(self):
			return self.getToken(VHDLParser.KW_RETURN, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ReturnStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ReturnStatement"):
				return visitor.visitRule_ReturnStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_ReturnStatement(self):

		localctx = VHDLParser.Rule_ReturnStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 290, self.RULE_rule_ReturnStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1700
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1698
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 1699
				self.match(VHDLParser.TOK_COLON)

			self.state = 1702
			self.match(VHDLParser.KW_RETURN)
			self.state = 1704
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.OP_ABS) | (1 << VHDLParser.KW_NEW) | (1 << VHDLParser.OP_NOT) | (
				1 << VHDLParser.KW_NULL))) != 0) or ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & (
				(1 << (VHDLParser.OP_PLUS - 106)) | (1 << (VHDLParser.OP_MINUS - 106)) | (1 << (VHDLParser.TOK_LP - 106)) | (
				1 << (VHDLParser.LIT_ABSTRACT - 106)) | (1 << (VHDLParser.LIT_BIT_STRING - 106)) | (
					1 << (VHDLParser.LIT_CHARACTER - 106)) | (1 << (VHDLParser.LIT_STRING - 106)) | (
					1 << (VHDLParser.LIT_IDENTIFIER - 106)))) != 0):
				self.state = 1703
				localctx.expression = self.rule_Expression()

			self.state = 1706
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ScalarTypeDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_PhysicalTypeDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PhysicalTypeDefinitionContext, 0)

		def rule_EnumerationTypeDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_EnumerationTypeDefinitionContext, 0)

		def rule_RangeConstraint(self):
			return self.getTypedRuleContext(VHDLParser.Rule_RangeConstraintContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ScalarTypeDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ScalarTypeDefinition"):
				return visitor.visitRule_ScalarTypeDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_ScalarTypeDefinition(self):

		localctx = VHDLParser.Rule_ScalarTypeDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 292, self.RULE_rule_ScalarTypeDefinition)
		try:
			self.state = 1711
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 199, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1708
				self.rule_PhysicalTypeDefinition()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1709
				self.rule_EnumerationTypeDefinition()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 1710
				self.rule_RangeConstraint()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SecondaryUnitDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.name = None  # Token
			self.value = None  # Rule_PhysicalLiteralContext

		def OP_EQ(self):
			return self.getToken(VHDLParser.OP_EQ, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def rule_PhysicalLiteral(self):
			return self.getTypedRuleContext(VHDLParser.Rule_PhysicalLiteralContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SecondaryUnitDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SecondaryUnitDeclaration"):
				return visitor.visitRule_SecondaryUnitDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_SecondaryUnitDeclaration(self):

		localctx = VHDLParser.Rule_SecondaryUnitDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 294, self.RULE_rule_SecondaryUnitDeclaration)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1713
			localctx.name = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 1714
			self.match(VHDLParser.OP_EQ)
			self.state = 1715
			localctx.value = self.rule_PhysicalLiteral()
			self.state = 1716
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SelectedSignalAssignmentContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.expression = None  # Rule_ExpressionContext
			self.target = None  # Rule_TargetContext
			self.waveform = None  # Rule_SelectedWaveformsContext

		def KW_WITH(self):
			return self.getToken(VHDLParser.KW_WITH, 0)

		def KW_SELECT(self):
			return self.getToken(VHDLParser.KW_SELECT, 0)

		def TOK_SIG_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_SIG_ASSIGN, 0)

		def rule_Opts(self):
			return self.getTypedRuleContext(VHDLParser.Rule_OptsContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def rule_Target(self):
			return self.getTypedRuleContext(VHDLParser.Rule_TargetContext, 0)

		def rule_SelectedWaveforms(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SelectedWaveformsContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SelectedSignalAssignment

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SelectedSignalAssignment"):
				return visitor.visitRule_SelectedSignalAssignment(self)
			else:
				return visitor.visitChildren(self)

	def rule_SelectedSignalAssignment(self):

		localctx = VHDLParser.Rule_SelectedSignalAssignmentContext(self, self._ctx, self.state)
		self.enterRule(localctx, 296, self.RULE_rule_SelectedSignalAssignment)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1718
			self.match(VHDLParser.KW_WITH)
			self.state = 1719
			localctx.expression = self.rule_Expression()
			self.state = 1720
			self.match(VHDLParser.KW_SELECT)
			self.state = 1721
			localctx.target = self.rule_Target()
			self.state = 1722
			self.match(VHDLParser.TOK_SIG_ASSIGN)
			self.state = 1723
			self.rule_Opts()
			self.state = 1724
			localctx.waveform = self.rule_SelectedWaveforms()
			self.state = 1725
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SelectedWaveformsContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_Waveform(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_WaveformContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_WaveformContext, i)

		def KW_WHEN(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.KW_WHEN)
			else:
				return self.getToken(VHDLParser.KW_WHEN, i)

		def rule_Choices(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ChoicesContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ChoicesContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SelectedWaveforms

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SelectedWaveforms"):
				return visitor.visitRule_SelectedWaveforms(self)
			else:
				return visitor.visitChildren(self)

	def rule_SelectedWaveforms(self):

		localctx = VHDLParser.Rule_SelectedWaveformsContext(self, self._ctx, self.state)
		self.enterRule(localctx, 298, self.RULE_rule_SelectedWaveforms)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1727
			self.rule_Waveform()
			self.state = 1728
			self.match(VHDLParser.KW_WHEN)
			self.state = 1729
			self.rule_Choices()
			self.state = 1737
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.TOK_COMMA:
				self.state = 1730
				self.match(VHDLParser.TOK_COMMA)
				self.state = 1731
				self.rule_Waveform()
				self.state = 1732
				self.match(VHDLParser.KW_WHEN)
				self.state = 1733
				self.rule_Choices()
				self.state = 1739
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SensitivityClauseContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.sensitivityList = None  # Rule_SensitivityListContext

		def KW_ON(self):
			return self.getToken(VHDLParser.KW_ON, 0)

		def rule_SensitivityList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SensitivityListContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SensitivityClause

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SensitivityClause"):
				return visitor.visitRule_SensitivityClause(self)
			else:
				return visitor.visitChildren(self)

	def rule_SensitivityClause(self):

		localctx = VHDLParser.Rule_SensitivityClauseContext(self, self._ctx, self.state)
		self.enterRule(localctx, 300, self.RULE_rule_SensitivityClause)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1740
			self.match(VHDLParser.KW_ON)
			self.state = 1741
			localctx.sensitivityList = self.rule_SensitivityList()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SensitivityListContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_Name = None  # Rule_NameContext
			self.name = list()  # of Rule_NameContexts

		def rule_Name(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_NameContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_NameContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SensitivityList

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SensitivityList"):
				return visitor.visitRule_SensitivityList(self)
			else:
				return visitor.visitChildren(self)

	def rule_SensitivityList(self):

		localctx = VHDLParser.Rule_SensitivityListContext(self, self._ctx, self.state)
		self.enterRule(localctx, 302, self.RULE_rule_SensitivityList)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1743
			localctx._rule_Name = self.rule_Name()
			localctx.name.append(localctx._rule_Name)
			self.state = 1748
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.TOK_COMMA:
				self.state = 1744
				self.match(VHDLParser.TOK_COMMA)
				self.state = 1745
				localctx._rule_Name = self.rule_Name()
				localctx.name.append(localctx._rule_Name)
				self.state = 1750
				self._errHandler.sync(self)
				_la = self._input.LA(1)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SequentialStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token

		def rule_WaitStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_WaitStatementContext, 0)

		def rule_AssertionStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AssertionStatementContext, 0)

		def rule_ReportStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ReportStatementContext, 0)

		def rule_SignalAssignmentStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SignalAssignmentStatementContext, 0)

		def rule_VariableAssignmentStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_VariableAssignmentStatementContext, 0)

		def rule_IfStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IfStatementContext, 0)

		def rule_CaseStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_CaseStatementContext, 0)

		def rule_LoopStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_LoopStatementContext, 0)

		def rule_NextStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NextStatementContext, 0)

		def rule_ExitStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExitStatementContext, 0)

		def rule_ReturnStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ReturnStatementContext, 0)

		def KW_NULL(self):
			return self.getToken(VHDLParser.KW_NULL, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def rule_ProcedureCallStatement(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ProcedureCallStatementContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SequentialStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SequentialStatement"):
				return visitor.visitRule_SequentialStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_SequentialStatement(self):

		localctx = VHDLParser.Rule_SequentialStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 304, self.RULE_rule_SequentialStatement)
		self._la = 0  # Token type
		try:
			self.state = 1769
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 203, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1751
				self.rule_WaitStatement()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1752
				self.rule_AssertionStatement()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 1753
				self.rule_ReportStatement()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 1754
				self.rule_SignalAssignmentStatement()
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 1755
				self.rule_VariableAssignmentStatement()
				pass

			elif la_ == 6:
				self.enterOuterAlt(localctx, 6)
				self.state = 1756
				self.rule_IfStatement()
				pass

			elif la_ == 7:
				self.enterOuterAlt(localctx, 7)
				self.state = 1757
				self.rule_CaseStatement()
				pass

			elif la_ == 8:
				self.enterOuterAlt(localctx, 8)
				self.state = 1758
				self.rule_LoopStatement()
				pass

			elif la_ == 9:
				self.enterOuterAlt(localctx, 9)
				self.state = 1759
				self.rule_NextStatement()
				pass

			elif la_ == 10:
				self.enterOuterAlt(localctx, 10)
				self.state = 1760
				self.rule_ExitStatement()
				pass

			elif la_ == 11:
				self.enterOuterAlt(localctx, 11)
				self.state = 1761
				self.rule_ReturnStatement()
				pass

			elif la_ == 12:
				self.enterOuterAlt(localctx, 12)
				self.state = 1764
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				if _la == VHDLParser.LIT_IDENTIFIER:
					self.state = 1762
					localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
					self.state = 1763
					self.match(VHDLParser.TOK_COLON)

				self.state = 1766
				self.match(VHDLParser.KW_NULL)
				self.state = 1767
				self.match(VHDLParser.TOK_SEMICOL)
				pass

			elif la_ == 13:
				self.enterOuterAlt(localctx, 13)
				self.state = 1768
				self.rule_ProcedureCallStatement()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ShiftExpressionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.operator = None  # Token

		def rule_SimpleExpression(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_SimpleExpressionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_SimpleExpressionContext, i)

		def OP_SLL(self):
			return self.getToken(VHDLParser.OP_SLL, 0)

		def OP_SRL(self):
			return self.getToken(VHDLParser.OP_SRL, 0)

		def OP_SLA(self):
			return self.getToken(VHDLParser.OP_SLA, 0)

		def OP_SRA(self):
			return self.getToken(VHDLParser.OP_SRA, 0)

		def OP_ROL(self):
			return self.getToken(VHDLParser.OP_ROL, 0)

		def OP_ROR(self):
			return self.getToken(VHDLParser.OP_ROR, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ShiftExpression

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ShiftExpression"):
				return visitor.visitRule_ShiftExpression(self)
			else:
				return visitor.visitChildren(self)

	def rule_ShiftExpression(self):

		localctx = VHDLParser.Rule_ShiftExpressionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 306, self.RULE_rule_ShiftExpression)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1771
			self.rule_SimpleExpression()
			self.state = 1774
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & (
				(1 << (VHDLParser.OP_ROL - 74)) | (1 << (VHDLParser.OP_ROR - 74)) | (1 << (VHDLParser.OP_SLA - 74)) | (
				1 << (VHDLParser.OP_SLL - 74)) | (1 << (VHDLParser.OP_SRA - 74)) | (1 << (VHDLParser.OP_SRL - 74)))) != 0):
				self.state = 1772
				localctx.operator = self._input.LT(1)
				_la = self._input.LA(1)
				if not (((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & (
					(1 << (VHDLParser.OP_ROL - 74)) | (1 << (VHDLParser.OP_ROR - 74)) | (1 << (VHDLParser.OP_SLA - 74)) | (
					1 << (VHDLParser.OP_SLL - 74)) | (1 << (VHDLParser.OP_SRA - 74)) | (1 << (VHDLParser.OP_SRL - 74)))) != 0)):
					localctx.operator = self._errHandler.recoverInline(self)
				else:
					self._errHandler.reportMatch(self)
					self.consume()
				self.state = 1773
				self.rule_SimpleExpression()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SignalAssignmentStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token
			self.target = None  # Rule_TargetContext
			self.delayMechanism = None  # Rule_DelayMechanismContext
			self.waveform = None  # Rule_WaveformContext

		def TOK_SIG_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_SIG_ASSIGN, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_Target(self):
			return self.getTypedRuleContext(VHDLParser.Rule_TargetContext, 0)

		def rule_Waveform(self):
			return self.getTypedRuleContext(VHDLParser.Rule_WaveformContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def rule_DelayMechanism(self):
			return self.getTypedRuleContext(VHDLParser.Rule_DelayMechanismContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SignalAssignmentStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SignalAssignmentStatement"):
				return visitor.visitRule_SignalAssignmentStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_SignalAssignmentStatement(self):

		localctx = VHDLParser.Rule_SignalAssignmentStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 308, self.RULE_rule_SignalAssignmentStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1778
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 205, self._ctx)
			if la_ == 1:
				self.state = 1776
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 1777
				self.match(VHDLParser.TOK_COLON)

			self.state = 1780
			localctx.target = self.rule_Target()
			self.state = 1781
			self.match(VHDLParser.TOK_SIG_ASSIGN)
			self.state = 1783
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & (
				(1 << (VHDLParser.KW_INERTIAL - 40)) | (1 << (VHDLParser.KW_REJECT - 40)) | (
				1 << (VHDLParser.KW_TRANSPORT - 40)))) != 0):
				self.state = 1782
				localctx.delayMechanism = self.rule_DelayMechanism()

			self.state = 1785
			localctx.waveform = self.rule_Waveform()
			self.state = 1786
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SignalDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.names = None  # Rule_IdentifierListContext
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext
			self.signalKind = None  # Token
			self.expression = None  # Rule_ExpressionContext

		def KW_SIGNAL(self):
			return self.getToken(VHDLParser.KW_SIGNAL, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_IdentifierList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IdentifierListContext, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def TOK_VAR_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_VAR_ASSIGN, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def KW_REGISTER(self):
			return self.getToken(VHDLParser.KW_REGISTER, 0)

		def KW_BUS(self):
			return self.getToken(VHDLParser.KW_BUS, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SignalDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SignalDeclaration"):
				return visitor.visitRule_SignalDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_SignalDeclaration(self):

		localctx = VHDLParser.Rule_SignalDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 310, self.RULE_rule_SignalDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1788
			self.match(VHDLParser.KW_SIGNAL)
			self.state = 1789
			localctx.names = self.rule_IdentifierList()
			self.state = 1790
			self.match(VHDLParser.TOK_COLON)
			self.state = 1791
			localctx.subtypeIndication = self.rule_SubtypeIndication()
			self.state = 1793
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_BUS or _la == VHDLParser.KW_REGISTER:
				self.state = 1792
				localctx.signalKind = self._input.LT(1)
				_la = self._input.LA(1)
				if not (_la == VHDLParser.KW_BUS or _la == VHDLParser.KW_REGISTER):
					localctx.signalKind = self._errHandler.recoverInline(self)
				else:
					self._errHandler.reportMatch(self)
					self.consume()

			self.state = 1797
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_VAR_ASSIGN:
				self.state = 1795
				self.match(VHDLParser.TOK_VAR_ASSIGN)
				self.state = 1796
				localctx.expression = self.rule_Expression()

			self.state = 1799
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SignalListContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_Name = None  # Rule_NameContext
			self.names = list()  # of Rule_NameContexts
			self.others = None  # Token
			self.all_ = None  # Token

		def rule_Name(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_NameContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_NameContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def KW_OTHERS(self):
			return self.getToken(VHDLParser.KW_OTHERS, 0)

		def KW_ALL(self):
			return self.getToken(VHDLParser.KW_ALL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SignalList

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SignalList"):
				return visitor.visitRule_SignalList(self)
			else:
				return visitor.visitChildren(self)

	def rule_SignalList(self):

		localctx = VHDLParser.Rule_SignalListContext(self, self._ctx, self.state)
		self.enterRule(localctx, 312, self.RULE_rule_SignalList)
		self._la = 0  # Token type
		try:
			self.state = 1811
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.LIT_STRING, VHDLParser.LIT_IDENTIFIER]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1801
				localctx._rule_Name = self.rule_Name()
				localctx.names.append(localctx._rule_Name)
				self.state = 1806
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				while _la == VHDLParser.TOK_COMMA:
					self.state = 1802
					self.match(VHDLParser.TOK_COMMA)
					self.state = 1803
					localctx._rule_Name = self.rule_Name()
					localctx.names.append(localctx._rule_Name)
					self.state = 1808
					self._errHandler.sync(self)
					_la = self._input.LA(1)

				pass
			elif token in [VHDLParser.KW_OTHERS]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1809
				localctx.others = self.match(VHDLParser.KW_OTHERS)
				pass
			elif token in [VHDLParser.KW_ALL]:
				self.enterOuterAlt(localctx, 3)
				self.state = 1810
				localctx.all_ = self.match(VHDLParser.KW_ALL)
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SignatureContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_Name = None  # Rule_NameContext
			self.names = list()  # of Rule_NameContexts
			self.returnName = None  # Rule_NameContext

		def TOK_LB(self):
			return self.getToken(VHDLParser.TOK_LB, 0)

		def TOK_RB(self):
			return self.getToken(VHDLParser.TOK_RB, 0)

		def KW_RETURN(self):
			return self.getToken(VHDLParser.KW_RETURN, 0)

		def rule_Name(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_NameContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_NameContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Signature

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Signature"):
				return visitor.visitRule_Signature(self)
			else:
				return visitor.visitChildren(self)

	def rule_Signature(self):

		localctx = VHDLParser.Rule_SignatureContext(self, self._ctx, self.state)
		self.enterRule(localctx, 314, self.RULE_rule_Signature)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1813
			self.match(VHDLParser.TOK_LB)
			self.state = 1822
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_STRING or _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1814
				localctx._rule_Name = self.rule_Name()
				localctx.names.append(localctx._rule_Name)
				self.state = 1819
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				while _la == VHDLParser.TOK_COMMA:
					self.state = 1815
					self.match(VHDLParser.TOK_COMMA)
					self.state = 1816
					localctx._rule_Name = self.rule_Name()
					localctx.names.append(localctx._rule_Name)
					self.state = 1821
					self._errHandler.sync(self)
					_la = self._input.LA(1)

			self.state = 1826
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_RETURN:
				self.state = 1824
				self.match(VHDLParser.KW_RETURN)
				self.state = 1825
				localctx.returnName = self.rule_Name()

			self.state = 1828
			self.match(VHDLParser.TOK_RB)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SimpleExpressionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.sign = None  # Token
			self.left = None  # Rule_TermContext
			self.operator = None  # Token
			self.right = None  # Rule_TermContext

		def rule_Term(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_TermContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_TermContext, i)

		def OP_PLUS(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.OP_PLUS)
			else:
				return self.getToken(VHDLParser.OP_PLUS, i)

		def OP_MINUS(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.OP_MINUS)
			else:
				return self.getToken(VHDLParser.OP_MINUS, i)

		def OP_CONCAT(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.OP_CONCAT)
			else:
				return self.getToken(VHDLParser.OP_CONCAT, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SimpleExpression

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SimpleExpression"):
				return visitor.visitRule_SimpleExpression(self)
			else:
				return visitor.visitChildren(self)

	def rule_SimpleExpression(self):

		localctx = VHDLParser.Rule_SimpleExpressionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 316, self.RULE_rule_SimpleExpression)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1831
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.OP_PLUS or _la == VHDLParser.OP_MINUS:
				self.state = 1830
				localctx.sign = self._input.LT(1)
				_la = self._input.LA(1)
				if not (_la == VHDLParser.OP_PLUS or _la == VHDLParser.OP_MINUS):
					localctx.sign = self._errHandler.recoverInline(self)
				else:
					self._errHandler.reportMatch(self)
					self.consume()

			self.state = 1833
			localctx.left = self.rule_Term()
			self.state = 1838
			self._errHandler.sync(self)
			_alt = self._interp.adaptivePredict(self._input, 215, self._ctx)
			while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
				if _alt == 1:
					self.state = 1834
					localctx.operator = self._input.LT(1)
					_la = self._input.LA(1)
					if not (((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & (
						(1 << (VHDLParser.OP_PLUS - 106)) | (1 << (VHDLParser.OP_MINUS - 106)) | (
						1 << (VHDLParser.OP_CONCAT - 106)))) != 0)):
						localctx.operator = self._errHandler.recoverInline(self)
					else:
						self._errHandler.reportMatch(self)
						self.consume()
					self.state = 1835
					localctx.right = self.rule_Term()
				self.state = 1840
				self._errHandler.sync(self)
				_alt = self._interp.adaptivePredict(self._input, 215, self._ctx)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SimpleNameContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SimpleName

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SimpleName"):
				return visitor.visitRule_SimpleName(self)
			else:
				return visitor.visitChildren(self)

	def rule_SimpleName(self):

		localctx = VHDLParser.Rule_SimpleNameContext(self, self._ctx, self.state)
		self.enterRule(localctx, 318, self.RULE_rule_SimpleName)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1841
			self.match(VHDLParser.LIT_IDENTIFIER)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SubprogramBodyContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_SubprogramDeclarativeItem = None  # Rule_SubprogramDeclarativeItemContext
			self.declarativeItems = list()  # of Rule_SubprogramDeclarativeItemContexts
			self._rule_SequentialStatement = None  # Rule_SequentialStatementContext
			self.statements = list()  # of Rule_SequentialStatementContexts

		def rule_SubprogramSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramSpecificationContext, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def KW_BEGIN(self):
			return self.getToken(VHDLParser.KW_BEGIN, 0)

		def KW_END(self):
			return self.getToken(VHDLParser.KW_END, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_SubprogramKind(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramKindContext, 0)

		def rule_Designator(self):
			return self.getTypedRuleContext(VHDLParser.Rule_DesignatorContext, 0)

		def rule_SubprogramDeclarativeItem(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_SubprogramDeclarativeItemContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_SubprogramDeclarativeItemContext, i)

		def rule_SequentialStatement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_SequentialStatementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_SequentialStatementContext, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SubprogramBody

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SubprogramBody"):
				return visitor.visitRule_SubprogramBody(self)
			else:
				return visitor.visitChildren(self)

	def rule_SubprogramBody(self):

		localctx = VHDLParser.Rule_SubprogramBodyContext(self, self._ctx, self.state)
		self.enterRule(localctx, 320, self.RULE_rule_SubprogramBody)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1843
			self.rule_SubprogramSpecification()
			self.state = 1844
			self.match(VHDLParser.KW_IS)
			self.state = 1848
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_ALIAS) | (1 << VHDLParser.KW_ATTRIBUTE) | (1 << VHDLParser.KW_CONSTANT) | (
				1 << VHDLParser.KW_FILE) | (1 << VHDLParser.KW_FUNCTION) | (1 << VHDLParser.KW_IMPURE))) != 0) or (
				(((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & (
				(1 << (VHDLParser.KW_PROCEDURE - 65)) | (1 << (VHDLParser.KW_PURE - 65)) | (
				1 << (VHDLParser.KW_SHARED - 65)) | (1 << (VHDLParser.KW_SUBTYPE - 65)) | (1 << (VHDLParser.KW_TYPE - 65)) | (
					1 << (VHDLParser.KW_USE - 65)) | (1 << (VHDLParser.KW_VARIABLE - 65)))) != 0):
				self.state = 1845
				localctx._rule_SubprogramDeclarativeItem = self.rule_SubprogramDeclarativeItem()
				localctx.declarativeItems.append(localctx._rule_SubprogramDeclarativeItem)
				self.state = 1850
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1851
			self.match(VHDLParser.KW_BEGIN)
			self.state = 1855
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
				(1 << VHDLParser.KW_ASSERT) | (1 << VHDLParser.KW_CASE) | (1 << VHDLParser.KW_EXIT) | (
				1 << VHDLParser.KW_FOR) | (1 << VHDLParser.KW_IF) | (1 << VHDLParser.KW_LOOP) | (1 << VHDLParser.KW_NEXT) | (
					1 << VHDLParser.KW_NULL))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & (
				(1 << (VHDLParser.KW_REPORT - 72)) | (1 << (VHDLParser.KW_RETURN - 72)) | (1 << (VHDLParser.KW_WAIT - 72)) | (
				1 << (VHDLParser.KW_WHILE - 72)) | (1 << (VHDLParser.TOK_LP - 72)) | (1 << (VHDLParser.LIT_STRING - 72)) | (
					1 << (VHDLParser.LIT_IDENTIFIER - 72)))) != 0):
				self.state = 1852
				localctx._rule_SequentialStatement = self.rule_SequentialStatement()
				localctx.statements.append(localctx._rule_SequentialStatement)
				self.state = 1857
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1858
			self.match(VHDLParser.KW_END)
			self.state = 1860
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_FUNCTION or _la == VHDLParser.KW_PROCEDURE:
				self.state = 1859
				self.rule_SubprogramKind()

			self.state = 1863
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_STRING or _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1862
				self.rule_Designator()

			self.state = 1865
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SubprogramDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_SubprogramSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramSpecificationContext, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SubprogramDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SubprogramDeclaration"):
				return visitor.visitRule_SubprogramDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_SubprogramDeclaration(self):

		localctx = VHDLParser.Rule_SubprogramDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 322, self.RULE_rule_SubprogramDeclaration)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1867
			self.rule_SubprogramSpecification()
			self.state = 1868
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SubprogramDeclarativeItemContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_SubprogramDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramDeclarationContext, 0)

		def rule_SubprogramBody(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubprogramBodyContext, 0)

		def rule_TypeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_TypeDeclarationContext, 0)

		def rule_SubtypeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeDeclarationContext, 0)

		def rule_ConstantDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConstantDeclarationContext, 0)

		def rule_VariableDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_VariableDeclarationContext, 0)

		def rule_FileDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FileDeclarationContext, 0)

		def rule_AliasDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AliasDeclarationContext, 0)

		def rule_AttributeDeclaration(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AttributeDeclarationContext, 0)

		def rule_AttributeSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AttributeSpecificationContext, 0)

		def rule_UseClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_UseClauseContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SubprogramDeclarativeItem

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SubprogramDeclarativeItem"):
				return visitor.visitRule_SubprogramDeclarativeItem(self)
			else:
				return visitor.visitChildren(self)

	def rule_SubprogramDeclarativeItem(self):

		localctx = VHDLParser.Rule_SubprogramDeclarativeItemContext(self, self._ctx, self.state)
		self.enterRule(localctx, 324, self.RULE_rule_SubprogramDeclarativeItem)
		try:
			self.state = 1881
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 220, self._ctx)
			if la_ == 1:
				self.enterOuterAlt(localctx, 1)
				self.state = 1870
				self.rule_SubprogramDeclaration()
				pass

			elif la_ == 2:
				self.enterOuterAlt(localctx, 2)
				self.state = 1871
				self.rule_SubprogramBody()
				pass

			elif la_ == 3:
				self.enterOuterAlt(localctx, 3)
				self.state = 1872
				self.rule_TypeDeclaration()
				pass

			elif la_ == 4:
				self.enterOuterAlt(localctx, 4)
				self.state = 1873
				self.rule_SubtypeDeclaration()
				pass

			elif la_ == 5:
				self.enterOuterAlt(localctx, 5)
				self.state = 1874
				self.rule_ConstantDeclaration()
				pass

			elif la_ == 6:
				self.enterOuterAlt(localctx, 6)
				self.state = 1875
				self.rule_VariableDeclaration()
				pass

			elif la_ == 7:
				self.enterOuterAlt(localctx, 7)
				self.state = 1876
				self.rule_FileDeclaration()
				pass

			elif la_ == 8:
				self.enterOuterAlt(localctx, 8)
				self.state = 1877
				self.rule_AliasDeclaration()
				pass

			elif la_ == 9:
				self.enterOuterAlt(localctx, 9)
				self.state = 1878
				self.rule_AttributeDeclaration()
				pass

			elif la_ == 10:
				self.enterOuterAlt(localctx, 10)
				self.state = 1879
				self.rule_AttributeSpecification()
				pass

			elif la_ == 11:
				self.enterOuterAlt(localctx, 11)
				self.state = 1880
				self.rule_UseClause()
				pass


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SubprogramKindContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_PROCEDURE(self):
			return self.getToken(VHDLParser.KW_PROCEDURE, 0)

		def KW_FUNCTION(self):
			return self.getToken(VHDLParser.KW_FUNCTION, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SubprogramKind

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SubprogramKind"):
				return visitor.visitRule_SubprogramKind(self)
			else:
				return visitor.visitChildren(self)

	def rule_SubprogramKind(self):

		localctx = VHDLParser.Rule_SubprogramKindContext(self, self._ctx, self.state)
		self.enterRule(localctx, 326, self.RULE_rule_SubprogramKind)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1883
			_la = self._input.LA(1)
			if not (_la == VHDLParser.KW_FUNCTION or _la == VHDLParser.KW_PROCEDURE):
				self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SubprogramSpecificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_ProcedureSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ProcedureSpecificationContext, 0)

		def rule_FunctionSpecification(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FunctionSpecificationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SubprogramSpecification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SubprogramSpecification"):
				return visitor.visitRule_SubprogramSpecification(self)
			else:
				return visitor.visitChildren(self)

	def rule_SubprogramSpecification(self):

		localctx = VHDLParser.Rule_SubprogramSpecificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 328, self.RULE_rule_SubprogramSpecification)
		try:
			self.state = 1887
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.KW_PROCEDURE]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1885
				self.rule_ProcedureSpecification()
				pass
			elif token in [VHDLParser.KW_FUNCTION, VHDLParser.KW_IMPURE, VHDLParser.KW_PURE]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1886
				self.rule_FunctionSpecification()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_ProcedureSpecificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def KW_PROCEDURE(self):
			return self.getToken(VHDLParser.KW_PROCEDURE, 0)

		def rule_Designator(self):
			return self.getTypedRuleContext(VHDLParser.Rule_DesignatorContext, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def rule_FormalParameterList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FormalParameterListContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_ProcedureSpecification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_ProcedureSpecification"):
				return visitor.visitRule_ProcedureSpecification(self)
			else:
				return visitor.visitChildren(self)

	def rule_ProcedureSpecification(self):

		localctx = VHDLParser.Rule_ProcedureSpecificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 330, self.RULE_rule_ProcedureSpecification)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1889
			self.match(VHDLParser.KW_PROCEDURE)
			self.state = 1890
			self.rule_Designator()
			self.state = 1895
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_LP:
				self.state = 1891
				self.match(VHDLParser.TOK_LP)
				self.state = 1892
				self.rule_FormalParameterList()
				self.state = 1893
				self.match(VHDLParser.TOK_RP)


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_FunctionSpecificationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext

		def KW_FUNCTION(self):
			return self.getToken(VHDLParser.KW_FUNCTION, 0)

		def rule_Designator(self):
			return self.getTypedRuleContext(VHDLParser.Rule_DesignatorContext, 0)

		def KW_RETURN(self):
			return self.getToken(VHDLParser.KW_RETURN, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def rule_FormalParameterList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FormalParameterListContext, 0)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def KW_PURE(self):
			return self.getToken(VHDLParser.KW_PURE, 0)

		def KW_IMPURE(self):
			return self.getToken(VHDLParser.KW_IMPURE, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_FunctionSpecification

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_FunctionSpecification"):
				return visitor.visitRule_FunctionSpecification(self)
			else:
				return visitor.visitChildren(self)

	def rule_FunctionSpecification(self):

		localctx = VHDLParser.Rule_FunctionSpecificationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 332, self.RULE_rule_FunctionSpecification)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1898
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_IMPURE or _la == VHDLParser.KW_PURE:
				self.state = 1897
				_la = self._input.LA(1)
				if not (_la == VHDLParser.KW_IMPURE or _la == VHDLParser.KW_PURE):
					self._errHandler.recoverInline(self)
				else:
					self._errHandler.reportMatch(self)
					self.consume()

			self.state = 1900
			self.match(VHDLParser.KW_FUNCTION)
			self.state = 1901
			self.rule_Designator()
			self.state = 1906
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_LP:
				self.state = 1902
				self.match(VHDLParser.TOK_LP)
				self.state = 1903
				self.rule_FormalParameterList()
				self.state = 1904
				self.match(VHDLParser.TOK_RP)

			self.state = 1908
			self.match(VHDLParser.KW_RETURN)
			self.state = 1909
			localctx.subtypeIndication = self.rule_SubtypeIndication()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SubtypeDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext

		def KW_SUBTYPE(self):
			return self.getToken(VHDLParser.KW_SUBTYPE, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SubtypeDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SubtypeDeclaration"):
				return visitor.visitRule_SubtypeDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_SubtypeDeclaration(self):

		localctx = VHDLParser.Rule_SubtypeDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 334, self.RULE_rule_SubtypeDeclaration)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1911
			self.match(VHDLParser.KW_SUBTYPE)
			self.state = 1912
			self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 1913
			self.match(VHDLParser.KW_IS)
			self.state = 1914
			localctx.subtypeIndication = self.rule_SubtypeIndication()
			self.state = 1915
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SubtypeIndicationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_SelectedName(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_SelectedNameContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_SelectedNameContext, i)

		def rule_Constraint(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConstraintContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_SubtypeIndication

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_SubtypeIndication"):
				return visitor.visitRule_SubtypeIndication(self)
			else:
				return visitor.visitChildren(self)

	def rule_SubtypeIndication(self):

		localctx = VHDLParser.Rule_SubtypeIndicationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 336, self.RULE_rule_SubtypeIndication)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1917
			self.rule_SelectedName()
			self.state = 1919
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 1918
				self.rule_SelectedName()

			self.state = 1922
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_RANGE or _la == VHDLParser.TOK_LP:
				self.state = 1921
				self.rule_Constraint()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_SuffixContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def LIT_CHARACTER(self):
			return self.getToken(VHDLParser.LIT_CHARACTER, 0)

		def LIT_STRING(self):
			return self.getToken(VHDLParser.LIT_STRING, 0)

		def KW_ALL(self):
			return self.getToken(VHDLParser.KW_ALL, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Suffix

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Suffix"):
				return visitor.visitRule_Suffix(self)
			else:
				return visitor.visitChildren(self)

	def rule_Suffix(self):

		localctx = VHDLParser.Rule_SuffixContext(self, self._ctx, self.state)
		self.enterRule(localctx, 338, self.RULE_rule_Suffix)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1924
			_la = self._input.LA(1)
			if not (_la == VHDLParser.KW_ALL or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & (
				(1 << (VHDLParser.LIT_CHARACTER - 128)) | (1 << (VHDLParser.LIT_STRING - 128)) | (
				1 << (VHDLParser.LIT_IDENTIFIER - 128)))) != 0)):
				self._errHandler.recoverInline(self)
			else:
				self._errHandler.reportMatch(self)
				self.consume()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_TargetContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_Name(self):
			return self.getTypedRuleContext(VHDLParser.Rule_NameContext, 0)

		def rule_Aggregate(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AggregateContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Target

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Target"):
				return visitor.visitRule_Target(self)
			else:
				return visitor.visitChildren(self)

	def rule_Target(self):

		localctx = VHDLParser.Rule_TargetContext(self, self._ctx, self.state)
		self.enterRule(localctx, 340, self.RULE_rule_Target)
		try:
			self.state = 1928
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.LIT_STRING, VHDLParser.LIT_IDENTIFIER]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1926
				self.rule_Name()
				pass
			elif token in [VHDLParser.TOK_LP]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1927
				self.rule_Aggregate()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_TermContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.left = None  # Rule_FactorContext
			self.operator = None  # Token
			self.right = None  # Rule_FactorContext

		def rule_Factor(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_FactorContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_FactorContext, i)

		def OP_MUL(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.OP_MUL)
			else:
				return self.getToken(VHDLParser.OP_MUL, i)

		def OP_DIV(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.OP_DIV)
			else:
				return self.getToken(VHDLParser.OP_DIV, i)

		def OP_MOD(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.OP_MOD)
			else:
				return self.getToken(VHDLParser.OP_MOD, i)

		def OP_REM(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.OP_REM)
			else:
				return self.getToken(VHDLParser.OP_REM, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Term

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Term"):
				return visitor.visitRule_Term(self)
			else:
				return visitor.visitChildren(self)

	def rule_Term(self):

		localctx = VHDLParser.Rule_TermContext(self, self._ctx, self.state)
		self.enterRule(localctx, 342, self.RULE_rule_Term)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1930
			localctx.left = self.rule_Factor()
			self.state = 1935
			self._errHandler.sync(self)
			_alt = self._interp.adaptivePredict(self._input, 228, self._ctx)
			while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
				if _alt == 1:
					self.state = 1931
					localctx.operator = self._input.LT(1)
					_la = self._input.LA(1)
					if not (((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & (
						(1 << (VHDLParser.OP_MOD - 48)) | (1 << (VHDLParser.OP_REM - 48)) | (1 << (VHDLParser.OP_MUL - 48)) | (
						1 << (VHDLParser.OP_DIV - 48)))) != 0)):
						localctx.operator = self._errHandler.recoverInline(self)
					else:
						self._errHandler.reportMatch(self)
						self.consume()
					self.state = 1932
					localctx.right = self.rule_Factor()
				self.state = 1937
				self._errHandler.sync(self)
				_alt = self._interp.adaptivePredict(self._input, 228, self._ctx)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_TimeoutClauseContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.expression = None  # Rule_ExpressionContext

		def KW_FOR(self):
			return self.getToken(VHDLParser.KW_FOR, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_TimeoutClause

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_TimeoutClause"):
				return visitor.visitRule_TimeoutClause(self)
			else:
				return visitor.visitChildren(self)

	def rule_TimeoutClause(self):

		localctx = VHDLParser.Rule_TimeoutClauseContext(self, self._ctx, self.state)
		self.enterRule(localctx, 344, self.RULE_rule_TimeoutClause)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1938
			self.match(VHDLParser.KW_FOR)
			self.state = 1939
			localctx.expression = self.rule_Expression()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_TypeDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.name = None  # Token

		def KW_TYPE(self):
			return self.getToken(VHDLParser.KW_TYPE, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def KW_IS(self):
			return self.getToken(VHDLParser.KW_IS, 0)

		def rule_TypeDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_TypeDefinitionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_TypeDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_TypeDeclaration"):
				return visitor.visitRule_TypeDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_TypeDeclaration(self):

		localctx = VHDLParser.Rule_TypeDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 346, self.RULE_rule_TypeDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1941
			self.match(VHDLParser.KW_TYPE)
			self.state = 1942
			localctx.name = self.match(VHDLParser.LIT_IDENTIFIER)
			self.state = 1945
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_IS:
				self.state = 1943
				self.match(VHDLParser.KW_IS)
				self.state = 1944
				self.rule_TypeDefinition()

			self.state = 1947
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_TypeDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser

		def rule_ScalarTypeDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ScalarTypeDefinitionContext, 0)

		def rule_CompositeTypeDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_CompositeTypeDefinitionContext, 0)

		def rule_AccessTypeDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_AccessTypeDefinitionContext, 0)

		def rule_FileTypeDefinition(self):
			return self.getTypedRuleContext(VHDLParser.Rule_FileTypeDefinitionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_TypeDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_TypeDefinition"):
				return visitor.visitRule_TypeDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_TypeDefinition(self):

		localctx = VHDLParser.Rule_TypeDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 348, self.RULE_rule_TypeDefinition)
		try:
			self.state = 1953
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.KW_RANGE, VHDLParser.TOK_LP]:
				self.enterOuterAlt(localctx, 1)
				self.state = 1949
				self.rule_ScalarTypeDefinition()
				pass
			elif token in [VHDLParser.KW_ARRAY, VHDLParser.KW_RECORD]:
				self.enterOuterAlt(localctx, 2)
				self.state = 1950
				self.rule_CompositeTypeDefinition()
				pass
			elif token in [VHDLParser.KW_ACCESS]:
				self.enterOuterAlt(localctx, 3)
				self.state = 1951
				self.rule_AccessTypeDefinition()
				pass
			elif token in [VHDLParser.KW_FILE]:
				self.enterOuterAlt(localctx, 4)
				self.state = 1952
				self.rule_FileTypeDefinition()
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_UnconstrainedArrayDefinitionContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext

		def KW_ARRAY(self):
			return self.getToken(VHDLParser.KW_ARRAY, 0)

		def TOK_LP(self):
			return self.getToken(VHDLParser.TOK_LP, 0)

		def rule_IndexSubtypeDefinition(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_IndexSubtypeDefinitionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_IndexSubtypeDefinitionContext, i)

		def TOK_RP(self):
			return self.getToken(VHDLParser.TOK_RP, 0)

		def KW_OF(self):
			return self.getToken(VHDLParser.KW_OF, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_UnconstrainedArrayDefinition

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_UnconstrainedArrayDefinition"):
				return visitor.visitRule_UnconstrainedArrayDefinition(self)
			else:
				return visitor.visitChildren(self)

	def rule_UnconstrainedArrayDefinition(self):

		localctx = VHDLParser.Rule_UnconstrainedArrayDefinitionContext(self, self._ctx, self.state)
		self.enterRule(localctx, 350, self.RULE_rule_UnconstrainedArrayDefinition)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1955
			self.match(VHDLParser.KW_ARRAY)
			self.state = 1956
			self.match(VHDLParser.TOK_LP)
			self.state = 1957
			self.rule_IndexSubtypeDefinition()
			self.state = 1962
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.TOK_COMMA:
				self.state = 1958
				self.match(VHDLParser.TOK_COMMA)
				self.state = 1959
				self.rule_IndexSubtypeDefinition()
				self.state = 1964
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1965
			self.match(VHDLParser.TOK_RP)
			self.state = 1966
			self.match(VHDLParser.KW_OF)
			self.state = 1967
			localctx.subtypeIndication = self.rule_SubtypeIndication()
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_UseClauseContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_SelectedName = None  # Rule_SelectedNameContext
			self.names = list()  # of Rule_SelectedNameContexts

		def KW_USE(self):
			return self.getToken(VHDLParser.KW_USE, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_SelectedName(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_SelectedNameContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_SelectedNameContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_UseClause

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_UseClause"):
				return visitor.visitRule_UseClause(self)
			else:
				return visitor.visitChildren(self)

	def rule_UseClause(self):

		localctx = VHDLParser.Rule_UseClauseContext(self, self._ctx, self.state)
		self.enterRule(localctx, 352, self.RULE_rule_UseClause)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1969
			self.match(VHDLParser.KW_USE)
			self.state = 1970
			localctx._rule_SelectedName = self.rule_SelectedName()
			localctx.names.append(localctx._rule_SelectedName)
			self.state = 1975
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			while _la == VHDLParser.TOK_COMMA:
				self.state = 1971
				self.match(VHDLParser.TOK_COMMA)
				self.state = 1972
				localctx._rule_SelectedName = self.rule_SelectedName()
				localctx.names.append(localctx._rule_SelectedName)
				self.state = 1977
				self._errHandler.sync(self)
				_la = self._input.LA(1)

			self.state = 1978
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_VariableAssignmentStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token
			self.target = None  # Rule_TargetContext
			self.expression = None  # Rule_ExpressionContext

		def TOK_VAR_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_VAR_ASSIGN, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_Target(self):
			return self.getTypedRuleContext(VHDLParser.Rule_TargetContext, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_VariableAssignmentStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_VariableAssignmentStatement"):
				return visitor.visitRule_VariableAssignmentStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_VariableAssignmentStatement(self):

		localctx = VHDLParser.Rule_VariableAssignmentStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 354, self.RULE_rule_VariableAssignmentStatement)
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1982
			self._errHandler.sync(self)
			la_ = self._interp.adaptivePredict(self._input, 233, self._ctx)
			if la_ == 1:
				self.state = 1980
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 1981
				self.match(VHDLParser.TOK_COLON)

			self.state = 1984
			localctx.target = self.rule_Target()
			self.state = 1985
			self.match(VHDLParser.TOK_VAR_ASSIGN)
			self.state = 1986
			localctx.expression = self.rule_Expression()
			self.state = 1987
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_VariableDeclarationContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.subtypeIndication = None  # Rule_SubtypeIndicationContext
			self.expression = None  # Rule_ExpressionContext

		def KW_VARIABLE(self):
			return self.getToken(VHDLParser.KW_VARIABLE, 0)

		def rule_IdentifierList(self):
			return self.getTypedRuleContext(VHDLParser.Rule_IdentifierListContext, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def rule_SubtypeIndication(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SubtypeIndicationContext, 0)

		def KW_SHARED(self):
			return self.getToken(VHDLParser.KW_SHARED, 0)

		def TOK_VAR_ASSIGN(self):
			return self.getToken(VHDLParser.TOK_VAR_ASSIGN, 0)

		def rule_Expression(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_VariableDeclaration

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_VariableDeclaration"):
				return visitor.visitRule_VariableDeclaration(self)
			else:
				return visitor.visitChildren(self)

	def rule_VariableDeclaration(self):

		localctx = VHDLParser.Rule_VariableDeclarationContext(self, self._ctx, self.state)
		self.enterRule(localctx, 356, self.RULE_rule_VariableDeclaration)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 1990
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_SHARED:
				self.state = 1989
				self.match(VHDLParser.KW_SHARED)

			self.state = 1992
			self.match(VHDLParser.KW_VARIABLE)
			self.state = 1993
			self.rule_IdentifierList()
			self.state = 1994
			self.match(VHDLParser.TOK_COLON)
			self.state = 1995
			localctx.subtypeIndication = self.rule_SubtypeIndication()
			self.state = 1998
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.TOK_VAR_ASSIGN:
				self.state = 1996
				self.match(VHDLParser.TOK_VAR_ASSIGN)
				self.state = 1997
				localctx.expression = self.rule_Expression()

			self.state = 2000
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_WaitStatementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.label = None  # Token

		def KW_WAIT(self):
			return self.getToken(VHDLParser.KW_WAIT, 0)

		def TOK_SEMICOL(self):
			return self.getToken(VHDLParser.TOK_SEMICOL, 0)

		def TOK_COLON(self):
			return self.getToken(VHDLParser.TOK_COLON, 0)

		def rule_SensitivityClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_SensitivityClauseContext, 0)

		def rule_ConditionClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_ConditionClauseContext, 0)

		def rule_TimeoutClause(self):
			return self.getTypedRuleContext(VHDLParser.Rule_TimeoutClauseContext, 0)

		def LIT_IDENTIFIER(self):
			return self.getToken(VHDLParser.LIT_IDENTIFIER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_WaitStatement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_WaitStatement"):
				return visitor.visitRule_WaitStatement(self)
			else:
				return visitor.visitChildren(self)

	def rule_WaitStatement(self):

		localctx = VHDLParser.Rule_WaitStatementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 358, self.RULE_rule_WaitStatement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2004
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.LIT_IDENTIFIER:
				self.state = 2002
				localctx.label = self.match(VHDLParser.LIT_IDENTIFIER)
				self.state = 2003
				self.match(VHDLParser.TOK_COLON)

			self.state = 2006
			self.match(VHDLParser.KW_WAIT)
			self.state = 2008
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_ON:
				self.state = 2007
				self.rule_SensitivityClause()

			self.state = 2011
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_UNTIL:
				self.state = 2010
				self.rule_ConditionClause()

			self.state = 2014
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_FOR:
				self.state = 2013
				self.rule_TimeoutClause()

			self.state = 2016
			self.match(VHDLParser.TOK_SEMICOL)
		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_WaveformContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self._rule_WaveformElement = None  # Rule_WaveformElementContext
			self.waveformElement = list()  # of Rule_WaveformElementContexts

		def rule_WaveformElement(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_WaveformElementContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_WaveformElementContext, i)

		def TOK_COMMA(self, i: int = None):
			if i is None:
				return self.getTokens(VHDLParser.TOK_COMMA)
			else:
				return self.getToken(VHDLParser.TOK_COMMA, i)

		def KW_UNAFFECTED(self):
			return self.getToken(VHDLParser.KW_UNAFFECTED, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_Waveform

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_Waveform"):
				return visitor.visitRule_Waveform(self)
			else:
				return visitor.visitChildren(self)

	def rule_Waveform(self):

		localctx = VHDLParser.Rule_WaveformContext(self, self._ctx, self.state)
		self.enterRule(localctx, 360, self.RULE_rule_Waveform)
		self._la = 0  # Token type
		try:
			self.state = 2027
			self._errHandler.sync(self)
			token = self._input.LA(1)
			if token in [VHDLParser.OP_ABS, VHDLParser.KW_NEW, VHDLParser.OP_NOT, VHDLParser.KW_NULL, VHDLParser.OP_PLUS,
									 VHDLParser.OP_MINUS, VHDLParser.TOK_LP, VHDLParser.LIT_ABSTRACT, VHDLParser.LIT_BIT_STRING,
									 VHDLParser.LIT_CHARACTER, VHDLParser.LIT_STRING, VHDLParser.LIT_IDENTIFIER]:
				self.enterOuterAlt(localctx, 1)
				self.state = 2018
				localctx._rule_WaveformElement = self.rule_WaveformElement()
				localctx.waveformElement.append(localctx._rule_WaveformElement)
				self.state = 2023
				self._errHandler.sync(self)
				_la = self._input.LA(1)
				while _la == VHDLParser.TOK_COMMA:
					self.state = 2019
					self.match(VHDLParser.TOK_COMMA)
					self.state = 2020
					localctx._rule_WaveformElement = self.rule_WaveformElement()
					localctx.waveformElement.append(localctx._rule_WaveformElement)
					self.state = 2025
					self._errHandler.sync(self)
					_la = self._input.LA(1)

				pass
			elif token in [VHDLParser.KW_UNAFFECTED]:
				self.enterOuterAlt(localctx, 2)
				self.state = 2026
				self.match(VHDLParser.KW_UNAFFECTED)
				pass
			else:
				raise NoViableAltException(self)

		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx

	class Rule_WaveformElementContext(ParserRuleContext):
		__slots__ = 'parser'

		def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
			super().__init__(parent, invokingState)
			self.parser = parser
			self.expression = None  # Rule_ExpressionContext
			self.afterExpression = None  # Rule_ExpressionContext

		def rule_Expression(self, i: int = None):
			if i is None:
				return self.getTypedRuleContexts(VHDLParser.Rule_ExpressionContext)
			else:
				return self.getTypedRuleContext(VHDLParser.Rule_ExpressionContext, i)

		def KW_AFTER(self):
			return self.getToken(VHDLParser.KW_AFTER, 0)

		def getRuleIndex(self):
			return VHDLParser.RULE_rule_WaveformElement

		def accept(self, visitor: ParseTreeVisitor):
			if hasattr(visitor, "visitRule_WaveformElement"):
				return visitor.visitRule_WaveformElement(self)
			else:
				return visitor.visitChildren(self)

	def rule_WaveformElement(self):

		localctx = VHDLParser.Rule_WaveformElementContext(self, self._ctx, self.state)
		self.enterRule(localctx, 362, self.RULE_rule_WaveformElement)
		self._la = 0  # Token type
		try:
			self.enterOuterAlt(localctx, 1)
			self.state = 2029
			localctx.expression = self.rule_Expression()
			self.state = 2032
			self._errHandler.sync(self)
			_la = self._input.LA(1)
			if _la == VHDLParser.KW_AFTER:
				self.state = 2030
				self.match(VHDLParser.KW_AFTER)
				self.state = 2031
				localctx.afterExpression = self.rule_Expression()


		except RecognitionException as re:
			localctx.exception = re
			self._errHandler.reportError(self, re)
			self._errHandler.recover(self, re)
		finally:
			self.exitRule()
		return localctx
