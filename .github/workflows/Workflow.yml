name: Test, Coverage and Release

on: [push]

jobs:
  test:
    name: Test and collect coverage data
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        python-version: [ 3.8 ]

    env:
      PYTHON: ${{ matrix.python-version }}
    steps:
      - uses: actions/checkout@v2

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements.txt

      - name: Run unit tests
        run: python -m unittest discover tests/unit/ *.py

      - name: Collect coverage
        if: ${{ always() }}
        run: coverage run -m unittest discover tests/unit/ *.py

      - name: Report coverage
        if: ${{ always() }}
        run: |
          coverage report
          coverage xml

      - name: Publish coverage at CodeCov
        if: ${{ always() }}
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.xml
          flags: unittests
          env_vars: PYTHON

      - name: Publish coverage at Codacy
        if: ${{ always() }}
        uses: codacy/codacy-coverage-reporter-action@master
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: ./coverage.xml

  release:
    name: Build packages and publish to PyPI if tagged
    needs: [ test ]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    env:
      PYTHON: "3.8"
    steps:
      - uses: actions/checkout@v2

      - name: Setup Python ${{ env.PYTHON }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON }}

      - name: Install dependencies for packaging and release
        run: |
          python -m pip install --upgrade pip
          pip install wheel twine

      - name: Build Python package (source distribution)
        run: |
          python setup.py sdist

      - name: Build Python package (binary distribution - wheel)
        run: |
          python setup.py bdist_wheel

      - name: Release Python package to PyPI
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine upload dist/*
